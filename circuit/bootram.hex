v2.0 raw
# ImageBaseAddress=0x00000000
# entry
# 00000 Instruction { source: "Initialzing flags and internal regs.", opcode: Init, args: [], resolved: None }
00 
# 00001 Instruction { source: "Initialzing stack register to 0x000f0f00.", opcode: LoadImm32, args: [Register(0x0c), Constant32(0x000f0f00=986880)], resolved: None }
20 0c 00 0f 0f 00 
# 00007 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0000d Instruction { source: "PseudoCall(Label24(:main))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 17 00 00 00 
# 00013 Instruction { source: "PseudoCall(Label24(:main))", opcode: JmpImm, args: [Label24(:main)], resolved: None }
70 95 13 00 
# 00017 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 0001d Instruction { source: "Halting after return from entry function.", opcode: Halt, args: [Constant32(0x00000000=0)], resolved: None }
7e 00 00 00 00 
# :RpnCalc_handle
# Ret Some(U8)
# Arg0=c
# Arg1=ch
# Var a (Local a Number(USIZE) Reg(U32)) Reg(U32) Some([16, 17, 18, 19])
# Var b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([24, 25, 26, 27])
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([28])
# Var diff (Local diff Number(USIZE) Reg(U32)) Reg(U32) Some([16, 17, 18, 19])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_RpnCalc_init_59_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t1 (t1 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t2 (t2 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t3 (t3 Number(USIZE, 0)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_init_59_s (Local s Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_init_59_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_init_59_t1 (t1 Call(Call { function: "stack_init", parameters: [Ident("s")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_RpnCalc_init_59_t2 (t2 Ident("s")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_init_59_t3 (t3 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_init_59_t4 (t4 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_init_59_t5 (t5 Number(USIZE, 68)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_init_59_t6 (t6 Number(USIZE, 0)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_n (Arg1 n Number(USIZE)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([44, 45, 46, 47])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([44, 45, 46, 47])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([44, 45, 46, 47])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([48, 49, 50, 51])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([48, 49, 50, 51])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([48, 49, 50, 51])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([48, 49, 50, 51])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t9 (t9 Ident("n")) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([44, 45, 46, 47])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t0 (t0 PtrFieldDeref("c", "have_num")) Reg(U8) Some([52])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t10 (t10 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t11 (t11 Number(USIZE, 68)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t12 (t12 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t13 (t13 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t14 (t14 Number(USIZE, 68)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t15 (t15 Number(USIZE, 0)) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t16 (t16 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t17 (t17 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t18 (t18 Number(USIZE, 72)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t19 (t19 Number(U8, 0)) Reg(U8) Some([52])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t2 (t2 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t3 (t3 Number(USIZE, 72)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t4 (t4 Number(U8, 0)) Reg(U8) Some([53])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t5 (t5 Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t6 (t6 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t7 (t7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t8 (t8 PtrFieldDeref("c", "num")) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_70_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_n (Arg1 n Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t9 (t9 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t0 (t0 PtrFieldDeref("c", "have_num")) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t10 (t10 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t11 (t11 Number(USIZE, 68)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t12 (t12 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t13 (t13 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t14 (t14 Number(USIZE, 68)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t15 (t15 Number(USIZE, 0)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t16 (t16 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t17 (t17 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t18 (t18 Number(USIZE, 72)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t19 (t19 Number(U8, 0)) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t2 (t2 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t3 (t3 Number(USIZE, 72)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t4 (t4 Number(U8, 0)) Reg(U8) Some([61])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t5 (t5 Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t6 (t6 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t7 (t7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t8 (t8 PtrFieldDeref("c", "num")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_71_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_n (Arg1 n Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t9 (t9 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t0 (t0 PtrFieldDeref("c", "have_num")) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t10 (t10 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t11 (t11 Number(USIZE, 68)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t12 (t12 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t13 (t13 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t14 (t14 Number(USIZE, 68)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t15 (t15 Number(USIZE, 0)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t16 (t16 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t17 (t17 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t18 (t18 Number(USIZE, 72)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t19 (t19 Number(U8, 0)) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t2 (t2 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t3 (t3 Number(USIZE, 72)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t4 (t4 Number(U8, 0)) Reg(U8) Some([61])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t5 (t5 Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t6 (t6 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t7 (t7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t8 (t8 PtrFieldDeref("c", "num")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_72_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_a (Arg0 a Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_a_hi (Local a_hi Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_b (Arg1 b Number(USIZE)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_b_hi (Local b_hi Number(USIZE) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_mul32_32_14_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a (Arg0 a Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b (Arg1 b Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 (t0 Ident("a")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1 (t1 Ident("b")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 (t10 Ident("c")) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11 (t11 Ident("f")) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 (t12 Ident("a")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([28])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17 (t17 Ident("b")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 (t18 Ident("d")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19 (t19 Ident("e")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t23 (t23 Number(U8, 0)) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 (t25 Ident("c")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26 (t26 Ident("d")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([28])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([52])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([52])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t8 (t8 Number(U8, 0)) Reg(U8) Some([53])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t9 (t9 Number(U8, 0)) Reg(U8) Some([53])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a (Arg0 a Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b (Arg1 b Number(USIZE)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 (t0 Ident("a")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1 (t1 Ident("b")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 (t10 Ident("c")) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11 (t11 Ident("f")) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 (t12 Ident("a")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([61])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17 (t17 Ident("b")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 (t18 Ident("d")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19 (t19 Ident("e")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t23 (t23 Number(U8, 0)) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 (t25 Ident("c")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26 (t26 Ident("d")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([61])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([53])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([53])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t8 (t8 Number(U8, 0)) Reg(U8) Some([62])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t9 (t9 Number(U8, 0)) Reg(U8) Some([62])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a (Arg0 a Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b (Arg1 b Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 (t0 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1 (t1 Ident("b")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 (t10 Ident("c")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11 (t11 Ident("f")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 (t12 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17 (t17 Ident("b")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 (t18 Ident("d")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19 (t19 Ident("e")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t23 (t23 Number(U8, 0)) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 (t25 Ident("c")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26 (t26 Ident("d")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([28])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([28])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t8 (t8 Number(U8, 0)) Reg(U8) Some([52])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t9 (t9 Number(U8, 0)) Reg(U8) Some([52])
# Var inline_RpnCalc_handle_mul32_32_14_t0 (t0 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_t1 (t1 Ident("b")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_t10 (t10 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_t11 (t11 Ident("b_hi")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_t12 (t12 Index("d", Number(U8, 1))) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_t13 (t13 Index("d", Number(U8, 0))) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_t14 (t14 Number(U8, 0)) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_t15 (t15 Number(U8, 0)) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_t16 (t16 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_t17 (t17 Ident("c")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_t18 (t18 Ident("d")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_t2 (t2 Index("a", Number(U8, 3))) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_t3 (t3 Index("a", Number(U8, 2))) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_t4 (t4 Index("b", Number(U8, 3))) Reg(U8) Some([61])
# Var inline_RpnCalc_handle_mul32_32_14_t5 (t5 Index("b", Number(U8, 2))) Reg(U8) Some([61])
# Var inline_RpnCalc_handle_mul32_32_14_t6 (t6 Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_mul32_32_14_t7 (t7 Ident("a_hi")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_t8 (t8 Ident("b")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_t9 (t9 Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_by10_15_a (Arg0 a Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_by10_15_b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_by10_15_t0 (t0 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_by10_15_t1 (t1 Ident("a")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_by10_15_t2 (t2 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_by10_15_t3 (t3 Ident("a")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_by10_15_t4 (t4 Ident("b")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_by10_15_t5 (t5 Ident("b")) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_mul32_by10_15_t6 (t6 Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_by10_15_t7 (t7 Ident("b")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_by10_15_t8 (t8 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_putc_21_c (Arg0 c Number(U8)) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_21_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_21_t1 (t1 Ident("c")) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_22_c (Arg0 c Number(U8)) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_22_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_22_t1 (t1 Ident("c")) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_23_c (Arg0 c Number(U8)) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_23_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_23_t1 (t1 Ident("c")) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_24_c (Arg0 c Number(U8)) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_24_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_24_t1 (t1 Ident("c")) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_25_c (Arg0 c Number(U8)) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_25_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_25_t1 (t1 Ident("c")) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_26_c (Arg0 c Number(U8)) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_putc_26_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_26_t1 (t1 Ident("c")) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_putc_27_c (Arg0 c Number(U8)) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_27_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_27_t1 (t1 Ident("c")) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_28_c (Arg0 c Number(U8)) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_28_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_28_t1 (t1 Ident("c")) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_29_c (Arg0 c Number(U8)) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_putc_29_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_29_t1 (t1 Ident("c")) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_putc_30_c (Arg0 c Number(U8)) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_putc_30_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_30_t1 (t1 Ident("c")) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_stack_get_57_n (Arg1 n Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_get_57_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_get_57_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_get_57_t1 (t1 Index("values", Ident("n"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_get_57_t2 (t2 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_get_57_t3 (t3 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_get_57_t4 (t4 Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_get_57_t5 (t5 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_get_57_t6 (t6 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_get_57_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_pop_61_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_61_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_pop_61_t1 (t1 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_61_t10 (t10 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_61_t11 (t11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_61_t12 (t12 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_pop_61_t13 (t13 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_61_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_61_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_61_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_61_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_61_t18 (t18 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_61_t2 (t2 Number(USIZE, 64)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_pop_61_t3 (t3 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_61_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_61_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_61_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_61_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_61_t8 (t8 Number(USIZE, 1)) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_stack_pop_61_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_61_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_pop_62_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_62_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_pop_62_t1 (t1 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_62_t10 (t10 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_62_t11 (t11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_62_t12 (t12 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_pop_62_t13 (t13 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_62_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_62_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_62_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_62_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_62_t18 (t18 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_62_t2 (t2 Number(USIZE, 64)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_pop_62_t3 (t3 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_62_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_62_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_62_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_62_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_62_t8 (t8 Number(USIZE, 1)) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_stack_pop_62_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_62_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_push_63_n (Arg1 n Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_63_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_63_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_63_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_63_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_63_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_63_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_63_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_63_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_63_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_63_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_63_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_63_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_63_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_63_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_63_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_63_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_63_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_63_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_63_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_63_t9 (t9 Ident("n")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_63_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_64_n (Arg1 n Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_64_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_64_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_64_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_64_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_64_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_64_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_64_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_64_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_64_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_64_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_64_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_64_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_64_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_64_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_64_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_64_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_64_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_64_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_64_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_64_t9 (t9 Ident("n")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_64_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_65_n (Arg1 n Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_65_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_65_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_65_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_65_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_65_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_65_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_65_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_65_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_65_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_65_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_65_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_65_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_65_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_65_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_65_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_65_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_65_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_65_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_65_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_65_t9 (t9 Ident("n")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_65_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_66_n (Arg1 n Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_66_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_66_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_66_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_66_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_66_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_66_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_66_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_66_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_66_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_66_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_66_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_66_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_66_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_66_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_66_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_66_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_66_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_66_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_66_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_66_t9 (t9 Ident("n")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_66_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_67_n (Arg1 n Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_67_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_67_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_67_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_67_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_67_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_67_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_67_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_67_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_67_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_67_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_67_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_67_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_67_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_67_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_push_67_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_push_67_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_push_67_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_67_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_push_67_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_67_t9 (t9 Ident("n")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_67_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_68_n (Arg1 n Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_68_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_68_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_68_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_68_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_68_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_68_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_68_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_68_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_68_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_68_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_68_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_68_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_68_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_68_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_68_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_68_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_68_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_68_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_68_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_68_t9 (t9 Ident("n")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_68_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var product (Local product Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var quotient (Local quotient Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var stack (Local stack Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var stack_count (Local stack_count Number(U8) Reg(U8)) Reg(U8) Some([62])
# Var stack_count_usize (Local stack_count_usize Number(USIZE) Reg(U32)) Reg(U32) Some([32, 33, 34, 35])
# Var stack_needed (Local stack_needed Number(U8) Reg(U8)) Reg(U8) Some([68])
# Var sum (Local sum Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([16, 17, 18, 19])
# Var t1 (t1 Ident("ch")) Reg(U8) Some([28])
# Var t10 (t10 Number(U8, 115)) Reg(U8) Some([69])
# Var t100 (t100 Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var t101 (t101 Ident("c")) Reg(U32) Some([16, 17, 18, 19])
# Var t102 (t102 Ident("ch")) Reg(U8) Some([29])
# Var t103 (t103 Number(U8, 100)) Reg(U8) Some([60])
# Var t104 (t104 Ident("i")) Reg(U8) Some([29])
# Var t105 (t105 Ident("stack_count")) Reg(U8) Some([60])
# Var t106 (t106 Call(Call { function: "print_dec8", parameters: [Ident("i")] })) Reg(U8) Some([29])
# Var t107 (t107 Ident("i")) Reg(U8) Some([29])
# Var t108 (t108 Call(Call { function: "putc", parameters: [Number(U8, 58)] })) Reg(U8) Some([29])
# Var t109 (t109 Number(U8, 58)) Reg(U8) Some([60])
# Var t11 (t11 Ident("stack_needed")) Reg(U8) Some([69])
# Var t110 (t110 Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })) Reg(U8) Some([29])
# Var t111 (t111 Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })) Reg(U32) Some([20, 21, 22, 23])
# Var t112 (t112 Ident("stack")) Reg(U32) Some([20, 21, 22, 23])
# Var t113 (t113 Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([56, 57, 58, 59])
# Var t114 (t114 Ident("i")) Reg(U8) Some([29])
# Var t115 (t115 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([29])
# Var t116 (t116 Number(U8, 10)) Reg(U8) Some([60])
# Var t117 (t117 Ident("i")) Reg(U8) Some([29])
# Var t118 (t118 Number(U8, 1)) Reg(U8) Some([60])
# Var t119 (t119 Ident("ch")) Reg(U8) Some([29])
# Var t12 (t12 Number(U8, 0)) Reg(U8) Some([52])
# Var t120 (t120 Number(U8, 57)) Reg(U8) Some([60])
# Var t121 (t121 Ident("ch")) Reg(U8) Some([29])
# Var t122 (t122 Number(U8, 48)) Reg(U8) Some([60])
# Var t123 (t123 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([16, 17, 18, 19])
# Var t124 (t124 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var t125 (t125 Number(USIZE, 72)) Reg(U32) Some([20, 21, 22, 23])
# Var t126 (t126 Number(U8, 1)) Reg(U8) Some([60])
# Var t127 (t127 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([36, 37, 38, 39])
# Var t128 (t128 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var t129 (t129 Number(USIZE, 68)) Reg(U32) Some([20, 21, 22, 23])
# Var t13 (t13 Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var t130 (t130 Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })) Reg(U32) Some([16, 17, 18, 19])
# Var t131 (t131 PtrFieldDeref("c", "num")) Reg(U32) Some([16, 17, 18, 19])
# Var t132 (t132 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([16, 17, 18, 19])
# Var t133 (t133 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var t134 (t134 Number(USIZE, 68)) Reg(U32) Some([20, 21, 22, 23])
# Var t135 (t135 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([16, 17, 18, 19])
# Var t136 (t136 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var t137 (t137 Number(USIZE, 68)) Reg(U32) Some([20, 21, 22, 23])
# Var t138 (t138 Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })) Reg(U32) Some([20, 21, 22, 23])
# Var t139 (t139 PtrFieldDeref("c", "num")) Reg(U32) Some([20, 21, 22, 23])
# Var t14 (t14 Ident("c")) Reg(U32) Some([24, 25, 26, 27])
# Var t140 (t140 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([20, 21, 22, 23])
# Var t141 (t141 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([20, 21, 22, 23])
# Var t142 (t142 Number(USIZE, 68)) Reg(U32) Some([24, 25, 26, 27])
# Var t143 (t143 Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) Reg(U32) Some([24, 25, 26, 27])
# Var t144 (t144 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([61])
# Var t145 (t145 Ident("ch")) Reg(U8) Some([61])
# Var t146 (t146 Number(U8, 48)) Reg(U8) Some([28])
# Var t147 (t147 Number(U8, 1)) Reg(U8) Some([29])
# Var t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }) Reg(U32) Some([32, 33, 34, 35])
# Var t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }) Reg(U32) Some([32, 33, 34, 35])
# Var t17 (t17 Number(USIZE, 64)) Reg(U32) Some([36, 37, 38, 39])
# Var t18 (t18 Ident("stack_needed")) Reg(U8) Some([69])
# Var t19 (t19 Ident("stack_count")) Reg(U8) Some([52])
# Var t2 (t2 Number(U8, 43)) Reg(U8) Some([69])
# Var t20 (t20 Call(Call { function: "putc", parameters: [Number(U8, 69)] })) Reg(U8) Some([29])
# Var t21 (t21 Number(U8, 69)) Reg(U8) Some([29])
# Var t22 (t22 Call(Call { function: "putc", parameters: [Number(U8, 82)] })) Reg(U8) Some([29])
# Var t23 (t23 Number(U8, 82)) Reg(U8) Some([29])
# Var t24 (t24 Call(Call { function: "putc", parameters: [Number(U8, 82)] })) Reg(U8) Some([29])
# Var t25 (t25 Number(U8, 82)) Reg(U8) Some([29])
# Var t26 (t26 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([29])
# Var t27 (t27 Number(U8, 10)) Reg(U8) Some([29])
# Var t28 (t28 Number(U8, 1)) Reg(U8) Some([29])
# Var t29 (t29 Ident("stack_needed")) Reg(U8) Some([69])
# Var t3 (t3 Ident("ch")) Reg(U8) Some([28])
# Var t30 (t30 Number(U8, 0)) Reg(U8) Some([52])
# Var t31 (t31 Ident("stack")) Reg(U32) Some([16, 17, 18, 19])
# Var t32 (t32 Ident("stack_needed")) Reg(U8) Some([69])
# Var t33 (t33 Number(U8, 1)) Reg(U8) Some([52])
# Var t34 (t34 Ident("stack")) Reg(U32) Some([20, 21, 22, 23])
# Var t35 (t35 Ident("ch")) Reg(U8) Some([28])
# Var t36 (t36 Number(U8, 43)) Reg(U8) Some([69])
# Var t37 (t37 Ident("b")) Reg(U32) Some([20, 21, 22, 23])
# Var t38 (t38 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var t39 (t39 Call(Call { function: "print_dec32", parameters: [Ident("sum")] })) Reg(U8) Some([29])
# Var t4 (t4 Number(U8, 45)) Reg(U8) Some([69])
# Var t40 (t40 Ident("sum")) Reg(U32) Some([16, 17, 18, 19])
# Var t41 (t41 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([29])
# Var t42 (t42 Number(U8, 10)) Reg(U8) Some([29])
# Var t43 (t43 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })) Reg(U8) Some([29])
# Var t44 (t44 Ident("stack")) Reg(U32) Some([16, 17, 18, 19])
# Var t45 (t45 Ident("sum")) Reg(U32) Some([24, 25, 26, 27])
# Var t46 (t46 Ident("ch")) Reg(U8) Some([28])
# Var t47 (t47 Number(U8, 45)) Reg(U8) Some([69])
# Var t48 (t48 Ident("b")) Reg(U32) Some([20, 21, 22, 23])
# Var t49 (t49 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var t5 (t5 Ident("ch")) Reg(U8) Some([28])
# Var t50 (t50 Call(Call { function: "print_dec32", parameters: [Ident("diff")] })) Reg(U8) Some([29])
# Var t51 (t51 Ident("diff")) Reg(U32) Some([16, 17, 18, 19])
# Var t52 (t52 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([29])
# Var t53 (t53 Number(U8, 10)) Reg(U8) Some([60])
# Var t54 (t54 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })) Reg(U8) Some([29])
# Var t55 (t55 Ident("stack")) Reg(U32) Some([20, 21, 22, 23])
# Var t56 (t56 Ident("diff")) Reg(U32) Some([16, 17, 18, 19])
# Var t57 (t57 Ident("ch")) Reg(U8) Some([28])
# Var t58 (t58 Number(U8, 42)) Reg(U8) Some([69])
# Var t59 (t59 Ident("b")) Reg(U32) Some([20, 21, 22, 23])
# Var t6 (t6 Number(U8, 42)) Reg(U8) Some([69])
# Var t60 (t60 Ident("a")) Reg(U32) Some([24, 25, 26, 27])
# Var t61 (t61 Call(Call { function: "print_dec32", parameters: [Ident("product")] })) Reg(U8) Some([29])
# Var t62 (t62 Ident("product")) Reg(U32) Some([16, 17, 18, 19])
# Var t63 (t63 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([29])
# Var t64 (t64 Number(U8, 10)) Reg(U8) Some([29])
# Var t65 (t65 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })) Reg(U8) Some([29])
# Var t66 (t66 Ident("stack")) Reg(U32) Some([16, 17, 18, 19])
# Var t67 (t67 Ident("product")) Reg(U32) Some([24, 25, 26, 27])
# Var t68 (t68 Ident("ch")) Reg(U8) Some([28])
# Var t69 (t69 Number(U8, 47)) Reg(U8) Some([69])
# Var t7 (t7 Ident("ch")) Reg(U8) Some([28])
# Var t70 (t70 Ident("b")) Reg(U32) Some([20, 21, 22, 23])
# Var t71 (t71 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var t72 (t72 Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })) Reg(U8) Some([29])
# Var t73 (t73 Ident("quotient")) Reg(U32) Some([16, 17, 18, 19])
# Var t74 (t74 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([29])
# Var t75 (t75 Number(U8, 10)) Reg(U8) Some([29])
# Var t76 (t76 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })) Reg(U8) Some([29])
# Var t77 (t77 Ident("stack")) Reg(U32) Some([16, 17, 18, 19])
# Var t78 (t78 Ident("quotient")) Reg(U32) Some([24, 25, 26, 27])
# Var t79 (t79 Ident("ch")) Reg(U8) Some([28])
# Var t8 (t8 Number(U8, 47)) Reg(U8) Some([69])
# Var t80 (t80 Number(U8, 115)) Reg(U8) Some([69])
# Var t81 (t81 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })) Reg(U8) Some([29])
# Var t82 (t82 Ident("stack")) Reg(U32) Some([24, 25, 26, 27])
# Var t83 (t83 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var t84 (t84 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })) Reg(U8) Some([29])
# Var t85 (t85 Ident("stack")) Reg(U32) Some([16, 17, 18, 19])
# Var t86 (t86 Ident("b")) Reg(U32) Some([24, 25, 26, 27])
# Var t87 (t87 Ident("ch")) Reg(U8) Some([29])
# Var t88 (t88 Number(U8, 113)) Reg(U8) Some([60])
# Var t89 (t89 Number(U8, 0)) Reg(U8) Some([29])
# Var t9 (t9 Ident("ch")) Reg(U8) Some([28])
# Var t90 (t90 Ident("ch")) Reg(U8) Some([29])
# Var t91 (t91 Number(U8, 10)) Reg(U8) Some([60])
# Var t92 (t92 Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var t93 (t93 Ident("c")) Reg(U32) Some([16, 17, 18, 19])
# Var t94 (t94 Ident("ch")) Reg(U8) Some([29])
# Var t95 (t95 Number(U8, 32)) Reg(U8) Some([60])
# Var t96 (t96 Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var t97 (t97 Ident("c")) Reg(U32) Some([16, 17, 18, 19])
# Var t98 (t98 Ident("ch")) Reg(U8) Some([29])
# Var t99 (t99 Number(U8, 99)) Reg(U8) Some([60])
# 00022 Instruction { source: "Save function parameter 'c' registers [0, 1, 2, 3] to locals [24, 25, 26, 27].", opcode: Copy32, args: [Register(0x00), Register(0x18)], resolved: None }
21 00 18 
# 00025 Instruction { source: "Save function parameter 'ch' registers [4] to locals [28].", opcode: Copy8, args: [Register(0x04), Register(0x1c)], resolved: None }
0b 04 1c 
# t0 <- c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 00028 Instruction { source: "t0 <- c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# stack <- t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 0002b Instruction { source: "stack <- t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x10), Register(0x40)], resolved: None }
21 10 40 
# a <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 0002e Instruction { source: "a <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x10), Constant8(0x00=0)], resolved: None }
04 10 00 
# b <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 00031 Instruction { source: "b <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x00=0)], resolved: None }
04 14 00 
# t1 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t1 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t2 <- 0n43/0x2bu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }", "Number(U8, 43)", "Number(U8, 43)"] }
# 00034 Instruction { source: "t2 <- 0n43/0x2bu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\", \"Number(U8, 43)\", \"Number(U8, 43)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x2b=43)], resolved: None }
04 45 2b 
# if t1 == t2 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }"] }
# 00037 Instruction { source: "if t1 == t2 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 0003a Instruction { source: "if t1 == t2 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_0_1)], resolved: None }
72 42 00 00 
# 0003e Instruction { source: "if t1 == t2 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_0_2)], resolved: None }
70 49 00 00 
# :RpnCalc_handle_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }"] }
# RpnCalc_handle_if_true_0_1
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 00042 Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x44), Constant8(0x02=2)], resolved: None }
04 44 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 00045 Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 a0 00 00 
# :RpnCalc_handle_if_else_0_2
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_2
# t3 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t3 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t4 <- 0n45/0x2du8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }", "Number(U8, 45)", "Number(U8, 45)"] }
# 00049 Instruction { source: "t4 <- 0n45/0x2du8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\", \"Number(U8, 45)\", \"Number(U8, 45)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x2d=45)], resolved: None }
04 45 2d 
# if t3 == t4 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }"] }
# 0004c Instruction { source: "if t3 == t4 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 0004f Instruction { source: "if t3 == t4 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_1_3)], resolved: None }
72 57 00 00 
# 00053 Instruction { source: "if t3 == t4 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_1_4)], resolved: None }
70 5e 00 00 
# :RpnCalc_handle_if_true_1_3
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_1_3
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 00057 Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x44), Constant8(0x02=2)], resolved: None }
04 44 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 0005a Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 a0 00 00 
# :RpnCalc_handle_if_else_1_4
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_1_4
# t5 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t5 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t6 <- 0n42/0x2au8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }", "Number(U8, 42)", "Number(U8, 42)"] }
# 0005e Instruction { source: "t6 <- 0n42/0x2au8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\", \"Number(U8, 42)\", \"Number(U8, 42)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x2a=42)], resolved: None }
04 45 2a 
# if t5 == t6 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }"] }
# 00061 Instruction { source: "if t5 == t6 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 00064 Instruction { source: "if t5 == t6 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_2_5)], resolved: None }
72 6c 00 00 
# 00068 Instruction { source: "if t5 == t6 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_2_6)], resolved: None }
70 73 00 00 
# :RpnCalc_handle_if_true_2_5
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_2_5
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 0006c Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x44), Constant8(0x02=2)], resolved: None }
04 44 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 0006f Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 a0 00 00 
# :RpnCalc_handle_if_else_2_6
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_2_6
# t7 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t7 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t8 <- 0n47/0x2fu8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }", "Number(U8, 47)", "Number(U8, 47)"] }
# 00073 Instruction { source: "t8 <- 0n47/0x2fu8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\", \"Number(U8, 47)\", \"Number(U8, 47)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x2f=47)], resolved: None }
04 45 2f 
# if t7 == t8 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }"] }
# 00076 Instruction { source: "if t7 == t8 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 00079 Instruction { source: "if t7 == t8 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_3_7)], resolved: None }
72 81 00 00 
# 0007d Instruction { source: "if t7 == t8 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_3_8)], resolved: None }
70 88 00 00 
# :RpnCalc_handle_if_true_3_7
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_3_7
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 00081 Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x44), Constant8(0x02=2)], resolved: None }
04 44 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 00084 Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 a0 00 00 
# :RpnCalc_handle_if_else_3_8
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_3_8
# t9 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t9 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t10 <- 0n115/0x73u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Number(U8, 115)", "Number(U8, 115)"] }
# 00088 Instruction { source: "t10 <- 0n115/0x73u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Number(U8, 115)\", \"Number(U8, 115)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x73=115)], resolved: None }
04 45 73 
# if t9 == t10 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }"] }
# 0008b Instruction { source: "if t9 == t10 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 0008e Instruction { source: "if t9 == t10 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_4_9)], resolved: None }
72 96 00 00 
# 00092 Instruction { source: "if t9 == t10 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_4_10)], resolved: None }
70 9d 00 00 
# :RpnCalc_handle_if_true_4_9
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_4_9
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 00096 Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x44), Constant8(0x02=2)], resolved: None }
04 44 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 00099 Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 a0 00 00 
# :RpnCalc_handle_if_else_4_10
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_4_10
# stack_needed <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)"] }
# 0009d Instruction { source: "stack_needed <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x44), Constant8(0x00=0)], resolved: None }
04 44 00 
# :RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_0
# t11 <- stack_needed U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }", "Ident(\"stack_needed\")", "Ident(\"stack_needed\")"] }
# 000a0 Instruction { source: "t11 <- stack_needed U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\", \"Ident(\\\"stack_needed\\\")\", \"Ident(\\\"stack_needed\\\")\"] }", opcode: Copy8, args: [Register(0x44), Register(0x45)], resolved: None }
0b 44 45 
# t12 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 000a3 Instruction { source: "t12 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x34), Constant8(0x00=0)], resolved: None }
04 34 00 
# if t11 > t12 then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }"] }
# 000a6 Instruction { source: "if t11 > t12 then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x45), Register(0x34)], resolved: None }
15 45 34 
# 000a9 Instruction { source: "if t11 > t12 then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_else_0_13)], resolved: None }
71 61 01 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t11 > t12 then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_12)], resolved: None }
# :RpnCalc_handle_if_true_0_12
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_12
# t14 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t14 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_70_c <- t14 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })"] }
# 000ad Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_c <- t14 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x20)], resolved: None }
21 18 20 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t3 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 000b0 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t3 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000048=72)], resolved: None }
20 24 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_t3
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 000b6 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 000b7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x24), Register(0x24)], resolved: None }
30 20 24 24 
# 000bb Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t0 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_t1] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")"] }
# 000bc Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t0 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_t1] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\"] }", opcode: Load8, args: [Register(0x24), Register(0x34)], resolved: None }
05 24 34 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t4 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 000bf Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t4 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x35), Constant8(0x00=0)], resolved: None }
04 35 00 
# if inline_RpnCalc_handle_RpnCalc_push_pending_70_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_70_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }"] }
# 000c2 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_70_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_70_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x34), Register(0x35)], resolved: None }
15 34 35 
# 000c5 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_70_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_70_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_else_0_2)], resolved: None }
72 5d 01 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_70_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_70_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }"] }
# inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t7 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t7 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t7 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 000c9 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t7 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x20), Register(0x28)], resolved: None }
21 20 28 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t11 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 000cc Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t11 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000044=68)], resolved: None }
20 24 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_t11
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 000d2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 000d3 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x24), Register(0x24)], resolved: None }
30 20 24 24 
# 000d7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t8 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_t9] U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 000d8 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t8 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_t9] U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x24), Register(0x24)], resolved: None }
22 24 24 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_s <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t6 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_s <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t6 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_n <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t8 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_n <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t8 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t0 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t0 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_values <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 000db Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_values <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x28), Register(0x2c)], resolved: None }
21 28 2c 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x2c), Register(0x2c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 000de Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x30), Constant32(0x00000040=64)], resolved: None }
20 30 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 000e4 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 000e5 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x28), Register(0x30), Register(0x30)], resolved: None }
30 28 30 30 
# 000e9 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t4 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 000ea Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t4 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x30), Register(0x30)], resolved: None }
22 30 30 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 000ed Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 000ee Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x30), Register(0x30), Register(0x30)], resolved: None }
30 30 30 30 
# 000f2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 000f3 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 000f4 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x30), Register(0x30), Register(0x30)], resolved: None }
30 30 30 30 
# 000f8 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 000f9 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 000fa Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x30), Register(0x2c)], resolved: None }
30 2c 30 2c 
# 000fe Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 000ff Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x24), Register(0x2c)], resolved: None }
23 24 2c 
# 00102 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t11 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 00103 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t11 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x24)], resolved: None }
21 28 24 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00106 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x00000040=64)], resolved: None }
20 2c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0010c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0010d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x2c), Register(0x24)], resolved: None }
30 24 2c 24 
# 00111 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00112 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x00000040=64)], resolved: None }
20 2c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00118 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00119 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x28), Register(0x2c), Register(0x28)], resolved: None }
30 28 2c 28 
# 0011d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t14 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 0011e Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t14 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x28), Register(0x28)], resolved: None }
22 28 28 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00121 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x00000001=1)], resolved: None }
20 2c 01 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 00127 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00128 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x28), Register(0x2c), Register(0x28)], resolved: None }
30 28 2c 28 
# 0012c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 0012d Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x28), Register(0x24)], resolved: None }
23 28 24 
# 00130 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_70_inline_RpnCalc_push_pending_stack_push_69_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t14 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 00131 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t14 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000044=68)], resolved: None }
20 24 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_t14
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 00137 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00138 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x24), Register(0x24)], resolved: None }
30 20 24 24 
# 0013c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t15 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 0013d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t15 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000000=0)], resolved: None }
20 28 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t15 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 00143 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t15 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x28), Register(0x24)], resolved: None }
23 28 24 
# 00146 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t15 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t17 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t17 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t18 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 00147 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t18 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000048=72)], resolved: None }
20 24 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 0014d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0014e Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x24), Register(0x20)], resolved: None }
30 20 24 20 
# 00152 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_70_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_70_t19 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00153 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_70_t19 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x34), Constant8(0x00=0)], resolved: None }
04 34 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_t16] <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t19 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }"] }
# 00156 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_70_t16] <- inline_RpnCalc_handle_RpnCalc_push_pending_70_t19 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x34), Register(0x20)], resolved: None }
06 34 20 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# 00159 Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_end_0)], resolved: None }
70 5d 01 00 
# :inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_70_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_70_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_70_function_end_RpnCalc_push_pending\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_70_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_70_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_70_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_11
# 	SourceContext { contexts: [] }
# 0015d Instruction { source: "goto RpnCalc_handle_if_end_11\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_11)], resolved: None }
70 61 01 00 
# :RpnCalc_handle_if_else_0_13
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_13
# :RpnCalc_handle_if_end_11
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_11
# t16 <- stack U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count_usize\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"stack\", \"first_free\") }", "PtrFieldDeref(\"stack\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }", "Ident(\"stack\")"] }
# 00161 Instruction { source: "t16 <- stack U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x20)], resolved: None }
21 40 20 
# t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count_usize\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"stack\", \"first_free\") }", "PtrFieldDeref(\"stack\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00164 Instruction { source: "t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000040=64)], resolved: None }
20 24 40 00 00 00 
# t15 <- t16 Add t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count_usize\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"stack\", \"first_free\") }", "PtrFieldDeref(\"stack\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64))"] }
# 0016a Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0016b Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x24), Register(0x20)], resolved: None }
30 20 24 20 
# 0016f Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# stack_count_usize <- mem[t15] U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count_usize\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"stack\", \"first_free\") }", "PtrFieldDeref(\"stack\", \"first_free\")"] }
# 00170 Instruction { source: "stack_count_usize <- mem[t15] U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x20), Register(0x20)], resolved: None }
22 20 20 
# stack_count <- stack_count_usize[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count\"), var_type: Some(Number(U8)), value: Index(\"stack_count_usize\", Number(U8, 0)) }", "Index(\"stack_count_usize\", Number(U8, 0))"] }
# 00173 Instruction { source: "stack_count <- stack_count_usize[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count\\\"), var_type: Some(Number(U8)), value: Index(\\\"stack_count_usize\\\", Number(U8, 0)) }\", \"Index(\\\"stack_count_usize\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x20), Register(0x3e)], resolved: None }
0b 20 3e 
# t18 <- stack_needed U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }", "Ident(\"stack_needed\")", "Ident(\"stack_needed\")"] }
# 00176 Instruction { source: "t18 <- stack_needed U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\", \"Ident(\\\"stack_needed\\\")\", \"Ident(\\\"stack_needed\\\")\"] }", opcode: Copy8, args: [Register(0x44), Register(0x45)], resolved: None }
0b 44 45 
# t19 <- stack_count U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }", "Ident(\"stack_count\")", "Ident(\"stack_count\")"] }
# 00179 Instruction { source: "t19 <- stack_count U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\", \"Ident(\\\"stack_count\\\")\", \"Ident(\\\"stack_count\\\")\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x34)], resolved: None }
0b 3e 34 
# if t18 > t19 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }"] }
# 0017c Instruction { source: "if t18 > t19 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: Cmp8, args: [Register(0x45), Register(0x34)], resolved: None }
15 45 34 
# 0017f Instruction { source: "if t18 > t19 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_else_0_16)], resolved: None }
71 a3 01 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t18 > t19 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_15)], resolved: None }
# :RpnCalc_handle_if_true_0_15
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_15
# t21 <- 0n69/0x45u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })", "Number(U8, 69)", "Number(U8, 69)"] }
# 00183 Instruction { source: "t21 <- 0n69/0x45u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] })\", \"Number(U8, 69)\", \"Number(U8, 69)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x45=69)], resolved: None }
04 1d 45 
# inline_RpnCalc_handle_putc_21_c <- t21 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_21_c <- t21 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] })\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_RpnCalc_handle_putc_21_t1 <- inline_RpnCalc_handle_putc_21_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_21_t1 <- inline_RpnCalc_handle_putc_21_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_21_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00186 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_RpnCalc_handle_putc_21_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_21_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_21_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_21_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_21_function_end_putc
# t23 <- 0n82/0x52u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Number(U8, 82)", "Number(U8, 82)"] }
# 00188 Instruction { source: "t23 <- 0n82/0x52u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Number(U8, 82)\", \"Number(U8, 82)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x52=82)], resolved: None }
04 1d 52 
# inline_RpnCalc_handle_putc_22_c <- t23 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_22_c <- t23 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_RpnCalc_handle_putc_22_t1 <- inline_RpnCalc_handle_putc_22_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_22_t1 <- inline_RpnCalc_handle_putc_22_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_22_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0018b Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_RpnCalc_handle_putc_22_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_22_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_22_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_22_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_22_function_end_putc
# t25 <- 0n82/0x52u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Number(U8, 82)", "Number(U8, 82)"] }
# 0018d Instruction { source: "t25 <- 0n82/0x52u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Number(U8, 82)\", \"Number(U8, 82)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x52=82)], resolved: None }
04 1d 52 
# inline_RpnCalc_handle_putc_23_c <- t25 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_23_c <- t25 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_RpnCalc_handle_putc_23_t1 <- inline_RpnCalc_handle_putc_23_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_23_t1 <- inline_RpnCalc_handle_putc_23_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_23_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00190 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_RpnCalc_handle_putc_23_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_23_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_23_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_23_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_23_function_end_putc
# t27 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 00192 Instruction { source: "t27 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x0a=10)], resolved: None }
04 1d 0a 
# inline_RpnCalc_handle_putc_24_c <- t27 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_24_c <- t27 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_RpnCalc_handle_putc_24_t1 <- inline_RpnCalc_handle_putc_24_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_24_t1 <- inline_RpnCalc_handle_putc_24_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_24_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00195 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_RpnCalc_handle_putc_24_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_24_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_24_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_24_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_24_function_end_putc
# t28 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 1)) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 00197 Instruction { source: "t28 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 1)) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x01=1)], resolved: None }
04 1d 01 
# return Some(t28)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 1)) }"] }
# 0019a Instruction { source: "return Some(t28)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x00)], resolved: None }
0b 1d 00 
# 0019d Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto RpnCalc_handle_if_end_14
# 	SourceContext { contexts: [] }
# 0019f Instruction { source: "goto RpnCalc_handle_if_end_14\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_14)], resolved: None }
70 a3 01 00 
# :RpnCalc_handle_if_else_0_16
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_16
# :RpnCalc_handle_if_end_14
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_14
# t29 <- stack_needed U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }", "Ident(\"stack_needed\")", "Ident(\"stack_needed\")"] }
# 001a3 Instruction { source: "t29 <- stack_needed U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\", \"Ident(\\\"stack_needed\\\")\", \"Ident(\\\"stack_needed\\\")\"] }", opcode: Copy8, args: [Register(0x44), Register(0x45)], resolved: None }
0b 44 45 
# t30 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 001a6 Instruction { source: "t30 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x34), Constant8(0x00=0)], resolved: None }
04 34 00 
# if t29 > t30 then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }"] }
# 001a9 Instruction { source: "if t29 > t30 then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x45), Register(0x34)], resolved: None }
15 45 34 
# 001ac Instruction { source: "if t29 > t30 then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_else_0_19)], resolved: None }
71 1a 02 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t29 > t30 then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_18)], resolved: None }
# :RpnCalc_handle_if_true_0_18
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_18
# t31 <- stack U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }", "Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 001b0 Instruction { source: "t31 <- stack U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }\", \"Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x10)], resolved: None }
21 40 10 
# inline_RpnCalc_handle_stack_pop_61_s <- t31 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }", "Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_61_s <- t31 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }\", \"Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_stack_pop_61_t1 <- inline_RpnCalc_handle_stack_pop_61_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t1 <- inline_RpnCalc_handle_stack_pop_61_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_stack_pop_61_t2 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 001b3 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t2 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000040=64)], resolved: None }
20 20 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_61_t0 <- inline_RpnCalc_handle_stack_pop_61_t1 Add inline_RpnCalc_handle_stack_pop_61_t2
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 001b9 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t0 <- inline_RpnCalc_handle_stack_pop_61_t1 Add inline_RpnCalc_handle_stack_pop_61_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 001ba Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t0 <- inline_RpnCalc_handle_stack_pop_61_t1 Add inline_RpnCalc_handle_stack_pop_61_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x20), Register(0x20)], resolved: None }
30 10 20 20 
# 001be Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t0 <- inline_RpnCalc_handle_stack_pop_61_t1 Add inline_RpnCalc_handle_stack_pop_61_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_61_t6 <- inline_RpnCalc_handle_stack_pop_61_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t6 <- inline_RpnCalc_handle_stack_pop_61_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_stack_pop_61_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 001bf Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000040=64)], resolved: None }
20 24 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_61_t5 <- inline_RpnCalc_handle_stack_pop_61_t6 Add inline_RpnCalc_handle_stack_pop_61_t7
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 001c5 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t5 <- inline_RpnCalc_handle_stack_pop_61_t6 Add inline_RpnCalc_handle_stack_pop_61_t7\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 001c6 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t5 <- inline_RpnCalc_handle_stack_pop_61_t6 Add inline_RpnCalc_handle_stack_pop_61_t7\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x24), Register(0x24)], resolved: None }
30 10 24 24 
# 001ca Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t5 <- inline_RpnCalc_handle_stack_pop_61_t6 Add inline_RpnCalc_handle_stack_pop_61_t7\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_61_t4 <- mem[inline_RpnCalc_handle_stack_pop_61_t5] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 001cb Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t4 <- mem[inline_RpnCalc_handle_stack_pop_61_t5] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x24), Register(0x24)], resolved: None }
22 24 24 
# inline_RpnCalc_handle_stack_pop_61_t8 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 001ce Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t8 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000001=1)], resolved: None }
20 28 01 00 00 00 
# inline_RpnCalc_handle_stack_pop_61_t3 <- inline_RpnCalc_handle_stack_pop_61_t4 Subtract inline_RpnCalc_handle_stack_pop_61_t8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 001d4 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t3 <- inline_RpnCalc_handle_stack_pop_61_t4 Subtract inline_RpnCalc_handle_stack_pop_61_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x28), Register(0x00)], resolved: None }
21 28 00 
# 001d7 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t3 <- inline_RpnCalc_handle_stack_pop_61_t4 Subtract inline_RpnCalc_handle_stack_pop_61_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 001d9 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t3 <- inline_RpnCalc_handle_stack_pop_61_t4 Subtract inline_RpnCalc_handle_stack_pop_61_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 001db Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t3 <- inline_RpnCalc_handle_stack_pop_61_t4 Subtract inline_RpnCalc_handle_stack_pop_61_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 001dd Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t3 <- inline_RpnCalc_handle_stack_pop_61_t4 Subtract inline_RpnCalc_handle_stack_pop_61_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 001df Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t3 <- inline_RpnCalc_handle_stack_pop_61_t4 Subtract inline_RpnCalc_handle_stack_pop_61_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 001e5 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t3 <- inline_RpnCalc_handle_stack_pop_61_t4 Subtract inline_RpnCalc_handle_stack_pop_61_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 001e6 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t3 <- inline_RpnCalc_handle_stack_pop_61_t4 Subtract inline_RpnCalc_handle_stack_pop_61_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x00), Register(0x24)], resolved: None }
30 24 00 24 
# 001ea Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t3 <- inline_RpnCalc_handle_stack_pop_61_t4 Subtract inline_RpnCalc_handle_stack_pop_61_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_pop_61_t0] <- inline_RpnCalc_handle_stack_pop_61_t3 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 001eb Instruction { source: "mem[inline_RpnCalc_handle_stack_pop_61_t0] <- inline_RpnCalc_handle_stack_pop_61_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x24), Register(0x20)], resolved: None }
23 24 20 
# 001ee Instruction { source: "mem[inline_RpnCalc_handle_stack_pop_61_t0] <- inline_RpnCalc_handle_stack_pop_61_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_pop_61_t9 <- inline_RpnCalc_handle_stack_pop_61_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t9 <- inline_RpnCalc_handle_stack_pop_61_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_stack_pop_61_values <- inline_RpnCalc_handle_stack_pop_61_t9 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 001ef Instruction { source: "inline_RpnCalc_handle_stack_pop_61_values <- inline_RpnCalc_handle_stack_pop_61_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x10), Register(0x20)], resolved: None }
21 10 20 
# inline_RpnCalc_handle_stack_pop_61_t12 <- inline_RpnCalc_handle_stack_pop_61_values U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t12 <- inline_RpnCalc_handle_stack_pop_61_values U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_RpnCalc_handle_stack_pop_61_t16 <- inline_RpnCalc_handle_stack_pop_61_s U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t16 <- inline_RpnCalc_handle_stack_pop_61_s U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_stack_pop_61_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 001f2 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000040=64)], resolved: None }
20 24 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_61_t15 <- inline_RpnCalc_handle_stack_pop_61_t16 Add inline_RpnCalc_handle_stack_pop_61_t17
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 001f8 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t15 <- inline_RpnCalc_handle_stack_pop_61_t16 Add inline_RpnCalc_handle_stack_pop_61_t17\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 001f9 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t15 <- inline_RpnCalc_handle_stack_pop_61_t16 Add inline_RpnCalc_handle_stack_pop_61_t17\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x24), Register(0x10)], resolved: None }
30 10 24 10 
# 001fd Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t15 <- inline_RpnCalc_handle_stack_pop_61_t16 Add inline_RpnCalc_handle_stack_pop_61_t17\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_61_t14 <- mem[inline_RpnCalc_handle_stack_pop_61_t15] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 001fe Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t14 <- mem[inline_RpnCalc_handle_stack_pop_61_t15] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x10), Register(0x10)], resolved: None }
22 10 10 
# inline_RpnCalc_handle_stack_pop_61_t13 <- inline_RpnCalc_handle_stack_pop_61_t14 Add inline_RpnCalc_handle_stack_pop_61_t14
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00201 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t13 <- inline_RpnCalc_handle_stack_pop_61_t14 Add inline_RpnCalc_handle_stack_pop_61_t14\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00202 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t13 <- inline_RpnCalc_handle_stack_pop_61_t14 Add inline_RpnCalc_handle_stack_pop_61_t14\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x10), Register(0x10)], resolved: None }
30 10 10 10 
# 00206 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t13 <- inline_RpnCalc_handle_stack_pop_61_t14 Add inline_RpnCalc_handle_stack_pop_61_t14\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_61_t13 <- inline_RpnCalc_handle_stack_pop_61_t13 Add inline_RpnCalc_handle_stack_pop_61_t13
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 00207 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t13 <- inline_RpnCalc_handle_stack_pop_61_t13 Add inline_RpnCalc_handle_stack_pop_61_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00208 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t13 <- inline_RpnCalc_handle_stack_pop_61_t13 Add inline_RpnCalc_handle_stack_pop_61_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x10), Register(0x10)], resolved: None }
30 10 10 10 
# 0020c Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t13 <- inline_RpnCalc_handle_stack_pop_61_t13 Add inline_RpnCalc_handle_stack_pop_61_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_61_t11 <- inline_RpnCalc_handle_stack_pop_61_t12 Add inline_RpnCalc_handle_stack_pop_61_t13
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 0020d Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t11 <- inline_RpnCalc_handle_stack_pop_61_t12 Add inline_RpnCalc_handle_stack_pop_61_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0020e Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t11 <- inline_RpnCalc_handle_stack_pop_61_t12 Add inline_RpnCalc_handle_stack_pop_61_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x10), Register(0x10)], resolved: None }
30 20 10 10 
# 00212 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t11 <- inline_RpnCalc_handle_stack_pop_61_t12 Add inline_RpnCalc_handle_stack_pop_61_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_61_t10 <- mem[inline_RpnCalc_handle_stack_pop_61_t11] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))"] }
# 00213 Instruction { source: "inline_RpnCalc_handle_stack_pop_61_t10 <- mem[inline_RpnCalc_handle_stack_pop_61_t11] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\"] }", opcode: Load32, args: [Register(0x10), Register(0x10)], resolved: None }
22 10 10 
# a <- inline_RpnCalc_handle_stack_pop_61_t10 U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }"] }
# optimized away noop copy Instruction { source: "a <- inline_RpnCalc_handle_stack_pop_61_t10 U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# goto inline_RpnCalc_handle_stack_pop_61_function_end_stack_pop
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_pop_61_function_end_stack_pop\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_pop_61_function_end_stack_pop)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_61_function_end_stack_pop
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_pop_61_function_end_stack_pop
# goto RpnCalc_handle_if_end_17
# 	SourceContext { contexts: [] }
# 00216 Instruction { source: "goto RpnCalc_handle_if_end_17\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_17)], resolved: None }
70 1a 02 00 
# :RpnCalc_handle_if_else_0_19
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_19
# :RpnCalc_handle_if_end_17
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_17
# t32 <- stack_needed U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }", "Ident(\"stack_needed\")", "Ident(\"stack_needed\")"] }
# 0021a Instruction { source: "t32 <- stack_needed U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\", \"Ident(\\\"stack_needed\\\")\", \"Ident(\\\"stack_needed\\\")\"] }", opcode: Copy8, args: [Register(0x44), Register(0x45)], resolved: None }
0b 44 45 
# t33 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 0021d Instruction { source: "t33 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x34), Constant8(0x01=1)], resolved: None }
04 34 01 
# if t32 > t33 then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }"] }
# 00220 Instruction { source: "if t32 > t33 then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\"] }", opcode: Cmp8, args: [Register(0x45), Register(0x34)], resolved: None }
15 45 34 
# 00223 Instruction { source: "if t32 > t33 then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_else_0_22)], resolved: None }
71 91 02 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t32 > t33 then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_21)], resolved: None }
# :RpnCalc_handle_if_true_0_21
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_21
# t34 <- stack U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }", "Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 00227 Instruction { source: "t34 <- stack U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }\", \"Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x14)], resolved: None }
21 40 14 
# inline_RpnCalc_handle_stack_pop_62_s <- t34 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }", "Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_62_s <- t34 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }\", \"Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_pop_62_t1 <- inline_RpnCalc_handle_stack_pop_62_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t1 <- inline_RpnCalc_handle_stack_pop_62_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_pop_62_t2 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0022a Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t2 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000040=64)], resolved: None }
20 20 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_62_t0 <- inline_RpnCalc_handle_stack_pop_62_t1 Add inline_RpnCalc_handle_stack_pop_62_t2
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00230 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t0 <- inline_RpnCalc_handle_stack_pop_62_t1 Add inline_RpnCalc_handle_stack_pop_62_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00231 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t0 <- inline_RpnCalc_handle_stack_pop_62_t1 Add inline_RpnCalc_handle_stack_pop_62_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x20), Register(0x20)], resolved: None }
30 14 20 20 
# 00235 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t0 <- inline_RpnCalc_handle_stack_pop_62_t1 Add inline_RpnCalc_handle_stack_pop_62_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_62_t6 <- inline_RpnCalc_handle_stack_pop_62_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t6 <- inline_RpnCalc_handle_stack_pop_62_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_pop_62_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00236 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000040=64)], resolved: None }
20 24 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_62_t5 <- inline_RpnCalc_handle_stack_pop_62_t6 Add inline_RpnCalc_handle_stack_pop_62_t7
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0023c Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t5 <- inline_RpnCalc_handle_stack_pop_62_t6 Add inline_RpnCalc_handle_stack_pop_62_t7\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0023d Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t5 <- inline_RpnCalc_handle_stack_pop_62_t6 Add inline_RpnCalc_handle_stack_pop_62_t7\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x24), Register(0x24)], resolved: None }
30 14 24 24 
# 00241 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t5 <- inline_RpnCalc_handle_stack_pop_62_t6 Add inline_RpnCalc_handle_stack_pop_62_t7\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_62_t4 <- mem[inline_RpnCalc_handle_stack_pop_62_t5] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00242 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t4 <- mem[inline_RpnCalc_handle_stack_pop_62_t5] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x24), Register(0x24)], resolved: None }
22 24 24 
# inline_RpnCalc_handle_stack_pop_62_t8 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00245 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t8 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000001=1)], resolved: None }
20 28 01 00 00 00 
# inline_RpnCalc_handle_stack_pop_62_t3 <- inline_RpnCalc_handle_stack_pop_62_t4 Subtract inline_RpnCalc_handle_stack_pop_62_t8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 0024b Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t3 <- inline_RpnCalc_handle_stack_pop_62_t4 Subtract inline_RpnCalc_handle_stack_pop_62_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x28), Register(0x00)], resolved: None }
21 28 00 
# 0024e Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t3 <- inline_RpnCalc_handle_stack_pop_62_t4 Subtract inline_RpnCalc_handle_stack_pop_62_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 00250 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t3 <- inline_RpnCalc_handle_stack_pop_62_t4 Subtract inline_RpnCalc_handle_stack_pop_62_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 00252 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t3 <- inline_RpnCalc_handle_stack_pop_62_t4 Subtract inline_RpnCalc_handle_stack_pop_62_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 00254 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t3 <- inline_RpnCalc_handle_stack_pop_62_t4 Subtract inline_RpnCalc_handle_stack_pop_62_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 00256 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t3 <- inline_RpnCalc_handle_stack_pop_62_t4 Subtract inline_RpnCalc_handle_stack_pop_62_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 0025c Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t3 <- inline_RpnCalc_handle_stack_pop_62_t4 Subtract inline_RpnCalc_handle_stack_pop_62_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0025d Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t3 <- inline_RpnCalc_handle_stack_pop_62_t4 Subtract inline_RpnCalc_handle_stack_pop_62_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x00), Register(0x24)], resolved: None }
30 24 00 24 
# 00261 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t3 <- inline_RpnCalc_handle_stack_pop_62_t4 Subtract inline_RpnCalc_handle_stack_pop_62_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_pop_62_t0] <- inline_RpnCalc_handle_stack_pop_62_t3 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 00262 Instruction { source: "mem[inline_RpnCalc_handle_stack_pop_62_t0] <- inline_RpnCalc_handle_stack_pop_62_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x24), Register(0x20)], resolved: None }
23 24 20 
# 00265 Instruction { source: "mem[inline_RpnCalc_handle_stack_pop_62_t0] <- inline_RpnCalc_handle_stack_pop_62_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_pop_62_t9 <- inline_RpnCalc_handle_stack_pop_62_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t9 <- inline_RpnCalc_handle_stack_pop_62_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_pop_62_values <- inline_RpnCalc_handle_stack_pop_62_t9 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 00266 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_values <- inline_RpnCalc_handle_stack_pop_62_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x20)], resolved: None }
21 14 20 
# inline_RpnCalc_handle_stack_pop_62_t12 <- inline_RpnCalc_handle_stack_pop_62_values U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t12 <- inline_RpnCalc_handle_stack_pop_62_values U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_RpnCalc_handle_stack_pop_62_t16 <- inline_RpnCalc_handle_stack_pop_62_s U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t16 <- inline_RpnCalc_handle_stack_pop_62_s U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_pop_62_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00269 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000040=64)], resolved: None }
20 24 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_62_t15 <- inline_RpnCalc_handle_stack_pop_62_t16 Add inline_RpnCalc_handle_stack_pop_62_t17
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0026f Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t15 <- inline_RpnCalc_handle_stack_pop_62_t16 Add inline_RpnCalc_handle_stack_pop_62_t17\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00270 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t15 <- inline_RpnCalc_handle_stack_pop_62_t16 Add inline_RpnCalc_handle_stack_pop_62_t17\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x24), Register(0x14)], resolved: None }
30 14 24 14 
# 00274 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t15 <- inline_RpnCalc_handle_stack_pop_62_t16 Add inline_RpnCalc_handle_stack_pop_62_t17\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_62_t14 <- mem[inline_RpnCalc_handle_stack_pop_62_t15] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00275 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t14 <- mem[inline_RpnCalc_handle_stack_pop_62_t15] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# inline_RpnCalc_handle_stack_pop_62_t13 <- inline_RpnCalc_handle_stack_pop_62_t14 Add inline_RpnCalc_handle_stack_pop_62_t14
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00278 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t13 <- inline_RpnCalc_handle_stack_pop_62_t14 Add inline_RpnCalc_handle_stack_pop_62_t14\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00279 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t13 <- inline_RpnCalc_handle_stack_pop_62_t14 Add inline_RpnCalc_handle_stack_pop_62_t14\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x14), Register(0x14)], resolved: None }
30 14 14 14 
# 0027d Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t13 <- inline_RpnCalc_handle_stack_pop_62_t14 Add inline_RpnCalc_handle_stack_pop_62_t14\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_62_t13 <- inline_RpnCalc_handle_stack_pop_62_t13 Add inline_RpnCalc_handle_stack_pop_62_t13
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 0027e Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t13 <- inline_RpnCalc_handle_stack_pop_62_t13 Add inline_RpnCalc_handle_stack_pop_62_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0027f Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t13 <- inline_RpnCalc_handle_stack_pop_62_t13 Add inline_RpnCalc_handle_stack_pop_62_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x14), Register(0x14)], resolved: None }
30 14 14 14 
# 00283 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t13 <- inline_RpnCalc_handle_stack_pop_62_t13 Add inline_RpnCalc_handle_stack_pop_62_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_62_t11 <- inline_RpnCalc_handle_stack_pop_62_t12 Add inline_RpnCalc_handle_stack_pop_62_t13
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 00284 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t11 <- inline_RpnCalc_handle_stack_pop_62_t12 Add inline_RpnCalc_handle_stack_pop_62_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00285 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t11 <- inline_RpnCalc_handle_stack_pop_62_t12 Add inline_RpnCalc_handle_stack_pop_62_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x14), Register(0x14)], resolved: None }
30 20 14 14 
# 00289 Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t11 <- inline_RpnCalc_handle_stack_pop_62_t12 Add inline_RpnCalc_handle_stack_pop_62_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_62_t10 <- mem[inline_RpnCalc_handle_stack_pop_62_t11] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))"] }
# 0028a Instruction { source: "inline_RpnCalc_handle_stack_pop_62_t10 <- mem[inline_RpnCalc_handle_stack_pop_62_t11] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# b <- inline_RpnCalc_handle_stack_pop_62_t10 U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }"] }
# optimized away noop copy Instruction { source: "b <- inline_RpnCalc_handle_stack_pop_62_t10 U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# goto inline_RpnCalc_handle_stack_pop_62_function_end_stack_pop
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_pop_62_function_end_stack_pop\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_pop_62_function_end_stack_pop)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_62_function_end_stack_pop
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_pop_62_function_end_stack_pop
# goto RpnCalc_handle_if_end_20
# 	SourceContext { contexts: [] }
# 0028d Instruction { source: "goto RpnCalc_handle_if_end_20\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_20)], resolved: None }
70 91 02 00 
# :RpnCalc_handle_if_else_0_22
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_22
# :RpnCalc_handle_if_end_20
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_20
# t35 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t35 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t36 <- 0n43/0x2bu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }", "Number(U8, 43)", "Number(U8, 43)"] }
# 00291 Instruction { source: "t36 <- 0n43/0x2bu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\", \"Number(U8, 43)\", \"Number(U8, 43)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x2b=43)], resolved: None }
04 45 2b 
# if t35 == t36 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }"] }
# 00294 Instruction { source: "if t35 == t36 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 00297 Instruction { source: "if t35 == t36 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_0_24)], resolved: None }
72 9f 02 00 
# 0029b Instruction { source: "if t35 == t36 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_0_25)], resolved: None }
70 70 03 00 
# :RpnCalc_handle_if_true_0_24
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_24
# t37 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t37 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t38 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t38 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# sum <- t37 Add t38
# 	SourceContext { contexts: ["Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))"] }
# 0029f Instruction { source: "sum <- t37 Add t38\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 002a0 Instruction { source: "sum <- t37 Add t38\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x10), Register(0x14)], resolved: None }
30 14 10 14 
# 002a4 Instruction { source: "sum <- t37 Add t38\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t40 <- sum U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] })", "Ident(\"sum\")", "Ident(\"sum\")"] }
# 002a5 Instruction { source: "t40 <- sum U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Ident(\\\"sum\\\")\", \"Ident(\\\"sum\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x10)], resolved: None }
21 14 10 
# None <= call print_dec32(t40,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] })"] }
# 002a8 Instruction { source: "Arg0[a]=t40 None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 136, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34]
# 002ab Instruction { source: "Saving reg0x22 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x22)], resolved: None }
09 22 
# 002ad Instruction { source: "Saving reg0x21 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x21)], resolved: None }
09 21 
# 002af Instruction { source: "Saving reg0x20 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x20)], resolved: None }
09 20 
# 002b1 Instruction { source: "Saving reg0x1d before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x1d)], resolved: None }
09 1d 
# 002b3 Instruction { source: "Saving reg0x1c before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x1c)], resolved: None }
09 1c 
# 002b5 Instruction { source: "Saving reg0x1b before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x1b)], resolved: None }
09 1b 
# 002b7 Instruction { source: "Saving reg0x1a before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x1a)], resolved: None }
09 1a 
# 002b9 Instruction { source: "Saving reg0x19 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x19)], resolved: None }
09 19 
# 002bb Instruction { source: "Saving reg0x18 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x18)], resolved: None }
09 18 
# 002bd Instruction { source: "Saving reg0x17 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x17)], resolved: None }
09 17 
# 002bf Instruction { source: "Saving reg0x16 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x16)], resolved: None }
09 16 
# 002c1 Instruction { source: "Saving reg0x15 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x15)], resolved: None }
09 15 
# 002c3 Instruction { source: "Saving reg0x14 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x14)], resolved: None }
09 14 
# 002c5 Instruction { source: "Saving reg0x13 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x13)], resolved: None }
09 13 
# 002c7 Instruction { source: "Saving reg0x12 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x12)], resolved: None }
09 12 
# 002c9 Instruction { source: "Saving reg0x11 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x11)], resolved: None }
09 11 
# 002cb Instruction { source: "Saving reg0x10 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x10)], resolved: None }
09 10 
# 002cd Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 002d3 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c dd 02 00 00 
# 002d9 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 c9 1f 00 
# 002dd Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 002e3 Instruction { source: "Restoring reg0x10 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x10)], resolved: None }
0a 10 
# 002e5 Instruction { source: "Restoring reg0x11 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x11)], resolved: None }
0a 11 
# 002e7 Instruction { source: "Restoring reg0x12 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x12)], resolved: None }
0a 12 
# 002e9 Instruction { source: "Restoring reg0x13 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x13)], resolved: None }
0a 13 
# 002eb Instruction { source: "Restoring reg0x14 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x14)], resolved: None }
0a 14 
# 002ed Instruction { source: "Restoring reg0x15 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x15)], resolved: None }
0a 15 
# 002ef Instruction { source: "Restoring reg0x16 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x16)], resolved: None }
0a 16 
# 002f1 Instruction { source: "Restoring reg0x17 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x17)], resolved: None }
0a 17 
# 002f3 Instruction { source: "Restoring reg0x18 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x18)], resolved: None }
0a 18 
# 002f5 Instruction { source: "Restoring reg0x19 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x19)], resolved: None }
0a 19 
# 002f7 Instruction { source: "Restoring reg0x1a after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x1a)], resolved: None }
0a 1a 
# 002f9 Instruction { source: "Restoring reg0x1b after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x1b)], resolved: None }
0a 1b 
# 002fb Instruction { source: "Restoring reg0x1c after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x1c)], resolved: None }
0a 1c 
# 002fd Instruction { source: "Restoring reg0x1d after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x1d)], resolved: None }
0a 1d 
# 002ff Instruction { source: "Restoring reg0x20 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x20)], resolved: None }
0a 20 
# 00301 Instruction { source: "Restoring reg0x21 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x21)], resolved: None }
0a 21 
# 00303 Instruction { source: "Restoring reg0x22 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x22)], resolved: None }
0a 22 
# t42 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 00305 Instruction { source: "t42 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x0a=10)], resolved: None }
04 1d 0a 
# inline_RpnCalc_handle_putc_25_c <- t42 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_25_c <- t42 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_RpnCalc_handle_putc_25_t1 <- inline_RpnCalc_handle_putc_25_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_25_t1 <- inline_RpnCalc_handle_putc_25_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_25_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00308 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_RpnCalc_handle_putc_25_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_25_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_25_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_25_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_25_function_end_putc
# t44 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 0030a Instruction { source: "t44 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x10)], resolved: None }
21 40 10 
# t45 <- sum U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Ident(\"sum\")", "Ident(\"sum\")"] }
# 0030d Instruction { source: "t45 <- sum U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Ident(\\\"sum\\\")\", \"Ident(\\\"sum\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_push_63_s <- t44 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })"] }
# 00310 Instruction { source: "inline_RpnCalc_handle_stack_push_63_s <- t44 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x14)], resolved: None }
21 10 14 
# inline_RpnCalc_handle_stack_push_63_n <- t45 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })"] }
# 00313 Instruction { source: "inline_RpnCalc_handle_stack_push_63_n <- t45 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# inline_RpnCalc_handle_stack_push_63_t0 <- inline_RpnCalc_handle_stack_push_63_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_63_t0 <- inline_RpnCalc_handle_stack_push_63_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_63_values <- inline_RpnCalc_handle_stack_push_63_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 00316 Instruction { source: "inline_RpnCalc_handle_stack_push_63_values <- inline_RpnCalc_handle_stack_push_63_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_push_63_t2 <- inline_RpnCalc_handle_stack_push_63_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_63_t2 <- inline_RpnCalc_handle_stack_push_63_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_push_63_t6 <- inline_RpnCalc_handle_stack_push_63_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_63_t6 <- inline_RpnCalc_handle_stack_push_63_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_63_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00319 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_stack_push_63_t5 <- inline_RpnCalc_handle_stack_push_63_t6 Add inline_RpnCalc_handle_stack_push_63_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0031f Instruction { source: "inline_RpnCalc_handle_stack_push_63_t5 <- inline_RpnCalc_handle_stack_push_63_t6 Add inline_RpnCalc_handle_stack_push_63_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00320 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t5 <- inline_RpnCalc_handle_stack_push_63_t6 Add inline_RpnCalc_handle_stack_push_63_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x38), Register(0x38)], resolved: None }
30 14 38 38 
# 00324 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t5 <- inline_RpnCalc_handle_stack_push_63_t6 Add inline_RpnCalc_handle_stack_push_63_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_63_t4 <- mem[inline_RpnCalc_handle_stack_push_63_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00325 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t4 <- mem[inline_RpnCalc_handle_stack_push_63_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x38), Register(0x38)], resolved: None }
22 38 38 
# inline_RpnCalc_handle_stack_push_63_t3 <- inline_RpnCalc_handle_stack_push_63_t4 Add inline_RpnCalc_handle_stack_push_63_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00328 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t3 <- inline_RpnCalc_handle_stack_push_63_t4 Add inline_RpnCalc_handle_stack_push_63_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00329 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t3 <- inline_RpnCalc_handle_stack_push_63_t4 Add inline_RpnCalc_handle_stack_push_63_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 0032d Instruction { source: "inline_RpnCalc_handle_stack_push_63_t3 <- inline_RpnCalc_handle_stack_push_63_t4 Add inline_RpnCalc_handle_stack_push_63_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_63_t3 <- inline_RpnCalc_handle_stack_push_63_t3 Add inline_RpnCalc_handle_stack_push_63_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 0032e Instruction { source: "inline_RpnCalc_handle_stack_push_63_t3 <- inline_RpnCalc_handle_stack_push_63_t3 Add inline_RpnCalc_handle_stack_push_63_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0032f Instruction { source: "inline_RpnCalc_handle_stack_push_63_t3 <- inline_RpnCalc_handle_stack_push_63_t3 Add inline_RpnCalc_handle_stack_push_63_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 00333 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t3 <- inline_RpnCalc_handle_stack_push_63_t3 Add inline_RpnCalc_handle_stack_push_63_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_63_t1 <- inline_RpnCalc_handle_stack_push_63_t2 Add inline_RpnCalc_handle_stack_push_63_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 00334 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t1 <- inline_RpnCalc_handle_stack_push_63_t2 Add inline_RpnCalc_handle_stack_push_63_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00335 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t1 <- inline_RpnCalc_handle_stack_push_63_t2 Add inline_RpnCalc_handle_stack_push_63_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 00339 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t1 <- inline_RpnCalc_handle_stack_push_63_t2 Add inline_RpnCalc_handle_stack_push_63_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_63_t9 <- inline_RpnCalc_handle_stack_push_63_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_63_t9 <- inline_RpnCalc_handle_stack_push_63_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_63_t1] <- inline_RpnCalc_handle_stack_push_63_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 0033a Instruction { source: "mem[inline_RpnCalc_handle_stack_push_63_t1] <- inline_RpnCalc_handle_stack_push_63_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x10), Register(0x18)], resolved: None }
23 10 18 
# 0033d Instruction { source: "mem[inline_RpnCalc_handle_stack_push_63_t1] <- inline_RpnCalc_handle_stack_push_63_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_63_t11 <- inline_RpnCalc_handle_stack_push_63_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 0033e Instruction { source: "inline_RpnCalc_handle_stack_push_63_t11 <- inline_RpnCalc_handle_stack_push_63_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x10)], resolved: None }
21 14 10 
# inline_RpnCalc_handle_stack_push_63_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00341 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_63_t10 <- inline_RpnCalc_handle_stack_push_63_t11 Add inline_RpnCalc_handle_stack_push_63_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00347 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t10 <- inline_RpnCalc_handle_stack_push_63_t11 Add inline_RpnCalc_handle_stack_push_63_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00348 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t10 <- inline_RpnCalc_handle_stack_push_63_t11 Add inline_RpnCalc_handle_stack_push_63_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x18), Register(0x10)], resolved: None }
30 10 18 10 
# 0034c Instruction { source: "inline_RpnCalc_handle_stack_push_63_t10 <- inline_RpnCalc_handle_stack_push_63_t11 Add inline_RpnCalc_handle_stack_push_63_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_63_t16 <- inline_RpnCalc_handle_stack_push_63_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_63_t16 <- inline_RpnCalc_handle_stack_push_63_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_63_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0034d Instruction { source: "inline_RpnCalc_handle_stack_push_63_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_63_t15 <- inline_RpnCalc_handle_stack_push_63_t16 Add inline_RpnCalc_handle_stack_push_63_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00353 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t15 <- inline_RpnCalc_handle_stack_push_63_t16 Add inline_RpnCalc_handle_stack_push_63_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00354 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t15 <- inline_RpnCalc_handle_stack_push_63_t16 Add inline_RpnCalc_handle_stack_push_63_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00358 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t15 <- inline_RpnCalc_handle_stack_push_63_t16 Add inline_RpnCalc_handle_stack_push_63_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_63_t14 <- mem[inline_RpnCalc_handle_stack_push_63_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00359 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t14 <- mem[inline_RpnCalc_handle_stack_push_63_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# inline_RpnCalc_handle_stack_push_63_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0035c Instruction { source: "inline_RpnCalc_handle_stack_push_63_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# inline_RpnCalc_handle_stack_push_63_t13 <- inline_RpnCalc_handle_stack_push_63_t14 Add inline_RpnCalc_handle_stack_push_63_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 00362 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t13 <- inline_RpnCalc_handle_stack_push_63_t14 Add inline_RpnCalc_handle_stack_push_63_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00363 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t13 <- inline_RpnCalc_handle_stack_push_63_t14 Add inline_RpnCalc_handle_stack_push_63_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00367 Instruction { source: "inline_RpnCalc_handle_stack_push_63_t13 <- inline_RpnCalc_handle_stack_push_63_t14 Add inline_RpnCalc_handle_stack_push_63_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_push_63_t10] <- inline_RpnCalc_handle_stack_push_63_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 00368 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_63_t10] <- inline_RpnCalc_handle_stack_push_63_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x14), Register(0x10)], resolved: None }
23 14 10 
# 0036b Instruction { source: "mem[inline_RpnCalc_handle_stack_push_63_t10] <- inline_RpnCalc_handle_stack_push_63_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_63_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_63_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_63_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_63_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_63_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 0036c Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 d4 0c 00 
# :RpnCalc_handle_if_else_0_25
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_25
# t46 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t46 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t47 <- 0n45/0x2du8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }", "Number(U8, 45)", "Number(U8, 45)"] }
# 00370 Instruction { source: "t47 <- 0n45/0x2du8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\", \"Number(U8, 45)\", \"Number(U8, 45)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x2d=45)], resolved: None }
04 45 2d 
# if t46 == t47 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }"] }
# 00373 Instruction { source: "if t46 == t47 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 00376 Instruction { source: "if t46 == t47 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_1_26)], resolved: None }
72 7e 03 00 
# 0037a Instruction { source: "if t46 == t47 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_1_27)], resolved: None }
70 54 04 00 
# :RpnCalc_handle_if_true_1_26
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_1_26
# t48 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t48 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t49 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t49 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# diff <- t48 Subtract t49
# 	SourceContext { contexts: ["Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\"))"] }
# 0037e Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# 00381 Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 00383 Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 00385 Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 00387 Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 00389 Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 0038f Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00390 Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x00), Register(0x10)], resolved: None }
30 14 00 10 
# 00394 Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t51 <- diff U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })", "Ident(\"diff\")", "Ident(\"diff\")"] }
# optimized away noop copy Instruction { source: "t51 <- diff U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Ident(\\\"diff\\\")\", \"Ident(\\\"diff\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# None <= call print_dec32(t51,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })"] }
# 00395 Instruction { source: "Arg0[a]=t51 None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 136, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34]
# 00398 Instruction { source: "Saving reg0x22 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x22)], resolved: None }
09 22 
# 0039a Instruction { source: "Saving reg0x21 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x21)], resolved: None }
09 21 
# 0039c Instruction { source: "Saving reg0x20 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x20)], resolved: None }
09 20 
# 0039e Instruction { source: "Saving reg0x1d before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x1d)], resolved: None }
09 1d 
# 003a0 Instruction { source: "Saving reg0x1c before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x1c)], resolved: None }
09 1c 
# 003a2 Instruction { source: "Saving reg0x1b before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x1b)], resolved: None }
09 1b 
# 003a4 Instruction { source: "Saving reg0x1a before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x1a)], resolved: None }
09 1a 
# 003a6 Instruction { source: "Saving reg0x19 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x19)], resolved: None }
09 19 
# 003a8 Instruction { source: "Saving reg0x18 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x18)], resolved: None }
09 18 
# 003aa Instruction { source: "Saving reg0x17 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x17)], resolved: None }
09 17 
# 003ac Instruction { source: "Saving reg0x16 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x16)], resolved: None }
09 16 
# 003ae Instruction { source: "Saving reg0x15 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x15)], resolved: None }
09 15 
# 003b0 Instruction { source: "Saving reg0x14 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x14)], resolved: None }
09 14 
# 003b2 Instruction { source: "Saving reg0x13 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x13)], resolved: None }
09 13 
# 003b4 Instruction { source: "Saving reg0x12 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x12)], resolved: None }
09 12 
# 003b6 Instruction { source: "Saving reg0x11 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x11)], resolved: None }
09 11 
# 003b8 Instruction { source: "Saving reg0x10 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x10)], resolved: None }
09 10 
# 003ba Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 003c0 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c ca 03 00 00 
# 003c6 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 c9 1f 00 
# 003ca Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 003d0 Instruction { source: "Restoring reg0x10 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x10)], resolved: None }
0a 10 
# 003d2 Instruction { source: "Restoring reg0x11 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x11)], resolved: None }
0a 11 
# 003d4 Instruction { source: "Restoring reg0x12 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x12)], resolved: None }
0a 12 
# 003d6 Instruction { source: "Restoring reg0x13 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x13)], resolved: None }
0a 13 
# 003d8 Instruction { source: "Restoring reg0x14 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x14)], resolved: None }
0a 14 
# 003da Instruction { source: "Restoring reg0x15 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x15)], resolved: None }
0a 15 
# 003dc Instruction { source: "Restoring reg0x16 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x16)], resolved: None }
0a 16 
# 003de Instruction { source: "Restoring reg0x17 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x17)], resolved: None }
0a 17 
# 003e0 Instruction { source: "Restoring reg0x18 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x18)], resolved: None }
0a 18 
# 003e2 Instruction { source: "Restoring reg0x19 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x19)], resolved: None }
0a 19 
# 003e4 Instruction { source: "Restoring reg0x1a after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x1a)], resolved: None }
0a 1a 
# 003e6 Instruction { source: "Restoring reg0x1b after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x1b)], resolved: None }
0a 1b 
# 003e8 Instruction { source: "Restoring reg0x1c after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x1c)], resolved: None }
0a 1c 
# 003ea Instruction { source: "Restoring reg0x1d after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x1d)], resolved: None }
0a 1d 
# 003ec Instruction { source: "Restoring reg0x20 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x20)], resolved: None }
0a 20 
# 003ee Instruction { source: "Restoring reg0x21 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x21)], resolved: None }
0a 21 
# 003f0 Instruction { source: "Restoring reg0x22 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x22)], resolved: None }
0a 22 
# t53 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 003f2 Instruction { source: "t53 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x0a=10)], resolved: None }
04 3c 0a 
# inline_RpnCalc_handle_putc_26_c <- t53 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_26_c <- t53 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_putc_26_t1 <- inline_RpnCalc_handle_putc_26_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_26_t1 <- inline_RpnCalc_handle_putc_26_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x3c)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_26_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 003f5 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x3c)], resolved: None }
68 3c 
# goto inline_RpnCalc_handle_putc_26_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_26_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_26_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_26_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_26_function_end_putc
# t55 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 003f7 Instruction { source: "t55 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x14)], resolved: None }
21 40 14 
# t56 <- diff U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Ident(\"diff\")", "Ident(\"diff\")"] }
# optimized away noop copy Instruction { source: "t56 <- diff U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Ident(\\\"diff\\\")\", \"Ident(\\\"diff\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_stack_push_64_s <- t55 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_64_s <- t55 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_64_n <- t56 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_64_n <- t56 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_stack_push_64_t0 <- inline_RpnCalc_handle_stack_push_64_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_64_t0 <- inline_RpnCalc_handle_stack_push_64_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_64_values <- inline_RpnCalc_handle_stack_push_64_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 003fa Instruction { source: "inline_RpnCalc_handle_stack_push_64_values <- inline_RpnCalc_handle_stack_push_64_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_push_64_t2 <- inline_RpnCalc_handle_stack_push_64_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_64_t2 <- inline_RpnCalc_handle_stack_push_64_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_push_64_t6 <- inline_RpnCalc_handle_stack_push_64_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_64_t6 <- inline_RpnCalc_handle_stack_push_64_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_64_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 003fd Instruction { source: "inline_RpnCalc_handle_stack_push_64_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_stack_push_64_t5 <- inline_RpnCalc_handle_stack_push_64_t6 Add inline_RpnCalc_handle_stack_push_64_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00403 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t5 <- inline_RpnCalc_handle_stack_push_64_t6 Add inline_RpnCalc_handle_stack_push_64_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00404 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t5 <- inline_RpnCalc_handle_stack_push_64_t6 Add inline_RpnCalc_handle_stack_push_64_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x38), Register(0x38)], resolved: None }
30 14 38 38 
# 00408 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t5 <- inline_RpnCalc_handle_stack_push_64_t6 Add inline_RpnCalc_handle_stack_push_64_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_64_t4 <- mem[inline_RpnCalc_handle_stack_push_64_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00409 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t4 <- mem[inline_RpnCalc_handle_stack_push_64_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x38), Register(0x38)], resolved: None }
22 38 38 
# inline_RpnCalc_handle_stack_push_64_t3 <- inline_RpnCalc_handle_stack_push_64_t4 Add inline_RpnCalc_handle_stack_push_64_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 0040c Instruction { source: "inline_RpnCalc_handle_stack_push_64_t3 <- inline_RpnCalc_handle_stack_push_64_t4 Add inline_RpnCalc_handle_stack_push_64_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0040d Instruction { source: "inline_RpnCalc_handle_stack_push_64_t3 <- inline_RpnCalc_handle_stack_push_64_t4 Add inline_RpnCalc_handle_stack_push_64_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 00411 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t3 <- inline_RpnCalc_handle_stack_push_64_t4 Add inline_RpnCalc_handle_stack_push_64_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_64_t3 <- inline_RpnCalc_handle_stack_push_64_t3 Add inline_RpnCalc_handle_stack_push_64_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 00412 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t3 <- inline_RpnCalc_handle_stack_push_64_t3 Add inline_RpnCalc_handle_stack_push_64_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00413 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t3 <- inline_RpnCalc_handle_stack_push_64_t3 Add inline_RpnCalc_handle_stack_push_64_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 00417 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t3 <- inline_RpnCalc_handle_stack_push_64_t3 Add inline_RpnCalc_handle_stack_push_64_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_64_t1 <- inline_RpnCalc_handle_stack_push_64_t2 Add inline_RpnCalc_handle_stack_push_64_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 00418 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t1 <- inline_RpnCalc_handle_stack_push_64_t2 Add inline_RpnCalc_handle_stack_push_64_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00419 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t1 <- inline_RpnCalc_handle_stack_push_64_t2 Add inline_RpnCalc_handle_stack_push_64_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 0041d Instruction { source: "inline_RpnCalc_handle_stack_push_64_t1 <- inline_RpnCalc_handle_stack_push_64_t2 Add inline_RpnCalc_handle_stack_push_64_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_64_t9 <- inline_RpnCalc_handle_stack_push_64_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_64_t9 <- inline_RpnCalc_handle_stack_push_64_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_64_t1] <- inline_RpnCalc_handle_stack_push_64_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 0041e Instruction { source: "mem[inline_RpnCalc_handle_stack_push_64_t1] <- inline_RpnCalc_handle_stack_push_64_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x10), Register(0x18)], resolved: None }
23 10 18 
# 00421 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_64_t1] <- inline_RpnCalc_handle_stack_push_64_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_64_t11 <- inline_RpnCalc_handle_stack_push_64_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 00422 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t11 <- inline_RpnCalc_handle_stack_push_64_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x10)], resolved: None }
21 14 10 
# inline_RpnCalc_handle_stack_push_64_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00425 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_64_t10 <- inline_RpnCalc_handle_stack_push_64_t11 Add inline_RpnCalc_handle_stack_push_64_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0042b Instruction { source: "inline_RpnCalc_handle_stack_push_64_t10 <- inline_RpnCalc_handle_stack_push_64_t11 Add inline_RpnCalc_handle_stack_push_64_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0042c Instruction { source: "inline_RpnCalc_handle_stack_push_64_t10 <- inline_RpnCalc_handle_stack_push_64_t11 Add inline_RpnCalc_handle_stack_push_64_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x18), Register(0x10)], resolved: None }
30 10 18 10 
# 00430 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t10 <- inline_RpnCalc_handle_stack_push_64_t11 Add inline_RpnCalc_handle_stack_push_64_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_64_t16 <- inline_RpnCalc_handle_stack_push_64_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_64_t16 <- inline_RpnCalc_handle_stack_push_64_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_64_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00431 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_64_t15 <- inline_RpnCalc_handle_stack_push_64_t16 Add inline_RpnCalc_handle_stack_push_64_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00437 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t15 <- inline_RpnCalc_handle_stack_push_64_t16 Add inline_RpnCalc_handle_stack_push_64_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00438 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t15 <- inline_RpnCalc_handle_stack_push_64_t16 Add inline_RpnCalc_handle_stack_push_64_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 0043c Instruction { source: "inline_RpnCalc_handle_stack_push_64_t15 <- inline_RpnCalc_handle_stack_push_64_t16 Add inline_RpnCalc_handle_stack_push_64_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_64_t14 <- mem[inline_RpnCalc_handle_stack_push_64_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 0043d Instruction { source: "inline_RpnCalc_handle_stack_push_64_t14 <- mem[inline_RpnCalc_handle_stack_push_64_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# inline_RpnCalc_handle_stack_push_64_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00440 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# inline_RpnCalc_handle_stack_push_64_t13 <- inline_RpnCalc_handle_stack_push_64_t14 Add inline_RpnCalc_handle_stack_push_64_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 00446 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t13 <- inline_RpnCalc_handle_stack_push_64_t14 Add inline_RpnCalc_handle_stack_push_64_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00447 Instruction { source: "inline_RpnCalc_handle_stack_push_64_t13 <- inline_RpnCalc_handle_stack_push_64_t14 Add inline_RpnCalc_handle_stack_push_64_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 0044b Instruction { source: "inline_RpnCalc_handle_stack_push_64_t13 <- inline_RpnCalc_handle_stack_push_64_t14 Add inline_RpnCalc_handle_stack_push_64_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_push_64_t10] <- inline_RpnCalc_handle_stack_push_64_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 0044c Instruction { source: "mem[inline_RpnCalc_handle_stack_push_64_t10] <- inline_RpnCalc_handle_stack_push_64_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x14), Register(0x10)], resolved: None }
23 14 10 
# 0044f Instruction { source: "mem[inline_RpnCalc_handle_stack_push_64_t10] <- inline_RpnCalc_handle_stack_push_64_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_64_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_64_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_64_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_64_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_64_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 00450 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 d4 0c 00 
# :RpnCalc_handle_if_else_1_27
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_1_27
# t57 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t57 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t58 <- 0n42/0x2au8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }", "Number(U8, 42)", "Number(U8, 42)"] }
# 00454 Instruction { source: "t58 <- 0n42/0x2au8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\", \"Number(U8, 42)\", \"Number(U8, 42)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x2a=42)], resolved: None }
04 45 2a 
# if t57 == t58 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }"] }
# 00457 Instruction { source: "if t57 == t58 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 0045a Instruction { source: "if t57 == t58 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_2_28)], resolved: None }
72 62 04 00 
# 0045e Instruction { source: "if t57 == t58 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_2_29)], resolved: None }
70 79 07 00 
# :RpnCalc_handle_if_true_2_28
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_2_28
# t59 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t59 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t60 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# 00462 Instruction { source: "t60 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x18)], resolved: None }
21 10 18 
# inline_RpnCalc_handle_mul32_32_14_a <- t59 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] })"] }
# 00465 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_a <- t59 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x10)], resolved: None }
21 14 10 
# inline_RpnCalc_handle_mul32_32_14_b <- t60 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_b <- t60 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_t0 <- inline_RpnCalc_handle_mul32_32_14_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t0 <- inline_RpnCalc_handle_mul32_32_14_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_t1 <- inline_RpnCalc_handle_mul32_32_14_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t1 <- inline_RpnCalc_handle_mul32_32_14_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_14_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# 00468 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_14_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x14)], resolved: None }
21 10 14 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_14_t1 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# 0046b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_14_t1 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x38)], resolved: None }
21 18 38 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 0046e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x14), Register(0x38), Register(0x20)], resolved: None }
11 14 38 20 
# 00472 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x00=0)], resolved: None }
04 22 00 
# 00475 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x23), Constant8(0x00=0)], resolved: None }
04 23 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t3 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00478 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t3 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x15), Register(0x3c)], resolved: None }
0b 15 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 0047b Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000000=0)], resolved: None }
20 24 00 00 00 00 
# 00481 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x24)], resolved: None }
0b 3c 24 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t5 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00484 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t5 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x39), Register(0x1c)], resolved: None }
0b 39 1c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00487 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000000=0)], resolved: None }
20 28 00 00 00 00 
# 0048d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x28)], resolved: None }
0b 1c 28 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00490 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x24), Register(0x28), Register(0x24)], resolved: None }
11 24 28 24 
# 00494 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x26), Constant8(0x00=0)], resolved: None }
04 26 00 
# 00497 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x27), Constant8(0x00=0)], resolved: None }
04 27 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 0049a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x25), Register(0x34)], resolved: None }
0b 25 34 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 0049d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x34), Register(0x27)], resolved: None }
0b 34 27 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t7 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 004a0 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t7 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x24), Register(0x34)], resolved: None }
0b 24 34 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 004a3 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x34), Register(0x26)], resolved: None }
0b 34 26 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 004a6 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x35), Constant8(0x00=0)], resolved: None }
04 35 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 004a9 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x35), Register(0x25)], resolved: None }
0b 35 25 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 004ac Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x35), Constant8(0x00=0)], resolved: None }
04 35 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 004af Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x35), Register(0x24)], resolved: None }
0b 35 24 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 004b2 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 004b3 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x24), Register(0x20)], resolved: None }
30 20 24 20 
# 004b7 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t14 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 004b8 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t14 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x39), Register(0x1c)], resolved: None }
0b 39 1c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 004bb Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000000=0)], resolved: None }
20 24 00 00 00 00 
# 004c1 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x24)], resolved: None }
0b 1c 24 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 004c4 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x14), Register(0x24), Register(0x24)], resolved: None }
11 14 24 24 
# 004c8 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x26), Constant8(0x00=0)], resolved: None }
04 26 00 
# 004cb Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x27), Constant8(0x00=0)], resolved: None }
04 27 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t16 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 004ce Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t16 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x15), Register(0x3c)], resolved: None }
0b 15 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 004d1 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000000=0)], resolved: None }
20 14 00 00 00 00 
# 004d7 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x14)], resolved: None }
0b 3c 14 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 004da Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x14), Register(0x38), Register(0x14)], resolved: None }
11 14 38 14 
# 004de Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x16), Constant8(0x00=0)], resolved: None }
04 16 00 
# 004e1 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x17), Constant8(0x00=0)], resolved: None }
04 17 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 004e4 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x38)], resolved: None }
21 24 38 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 004e7 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 004e8 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x14), Register(0x24)], resolved: None }
30 38 14 24 
# 004ec Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t20 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 004ed Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t20 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x26), Register(0x3c)], resolved: None }
0b 26 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 004f0 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x27)], resolved: None }
0b 3c 27 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t21 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 004f3 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t21 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x25), Register(0x3c)], resolved: None }
0b 25 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 004f6 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x26)], resolved: None }
0b 3c 26 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t22 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 004f9 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t22 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x24), Register(0x3c)], resolved: None }
0b 24 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 004fc Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x25)], resolved: None }
0b 3c 25 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 004ff Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x00=0)], resolved: None }
04 3c 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00502 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x24)], resolved: None }
0b 3c 24 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 00505 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x14)], resolved: None }
21 20 14 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00508 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x38)], resolved: None }
21 24 38 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 0050b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0050c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x38), Register(0x14)], resolved: None }
30 14 38 14 
# 00510 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# 00511 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x14), Register(0x20)], resolved: None }
21 14 20 
# goto inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_14_a_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 00514 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_a_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000000=0)], resolved: None }
20 14 00 00 00 00 
# inline_RpnCalc_handle_mul32_32_14_t2 <- inline_RpnCalc_handle_mul32_32_14_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 1)), var_type: None, value: Index(\"a\", Number(U8, 3)) }", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 0051a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t2 <- inline_RpnCalc_handle_mul32_32_14_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"a\\\", Number(U8, 3)) }\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x13), Register(0x1d)], resolved: None }
0b 13 1d 
# inline_RpnCalc_handle_mul32_32_14_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_t2 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 1)), var_type: None, value: Index(\"a\", Number(U8, 3)) }"] }
# 0051d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_t2 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"a\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x15)], resolved: None }
0b 1d 15 
# inline_RpnCalc_handle_mul32_32_14_t3 <- inline_RpnCalc_handle_mul32_32_14_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 0)), var_type: None, value: Index(\"a\", Number(U8, 2)) }", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 00520 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t3 <- inline_RpnCalc_handle_mul32_32_14_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"a\\\", Number(U8, 2)) }\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x12), Register(0x1d)], resolved: None }
0b 12 1d 
# inline_RpnCalc_handle_mul32_32_14_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_t3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 0)), var_type: None, value: Index(\"a\", Number(U8, 2)) }"] }
# 00523 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"a\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x14)], resolved: None }
0b 1d 14 
# inline_RpnCalc_handle_mul32_32_14_b_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 00526 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_b_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000000=0)], resolved: None }
20 38 00 00 00 00 
# inline_RpnCalc_handle_mul32_32_14_t4 <- inline_RpnCalc_handle_mul32_32_14_b[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 1)), var_type: None, value: Index(\"b\", Number(U8, 3)) }", "Index(\"b\", Number(U8, 3))", "Index(\"b\", Number(U8, 3))"] }
# 0052c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t4 <- inline_RpnCalc_handle_mul32_32_14_b[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"b\\\", Number(U8, 3)) }\", \"Index(\\\"b\\\", Number(U8, 3))\", \"Index(\\\"b\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x1b), Register(0x3d)], resolved: None }
0b 1b 3d 
# inline_RpnCalc_handle_mul32_32_14_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_t4 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 1)), var_type: None, value: Index(\"b\", Number(U8, 3)) }"] }
# 0052f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_t4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"b\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x39)], resolved: None }
0b 3d 39 
# inline_RpnCalc_handle_mul32_32_14_t5 <- inline_RpnCalc_handle_mul32_32_14_b[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 0)), var_type: None, value: Index(\"b\", Number(U8, 2)) }", "Index(\"b\", Number(U8, 2))", "Index(\"b\", Number(U8, 2))"] }
# 00532 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t5 <- inline_RpnCalc_handle_mul32_32_14_b[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"b\\\", Number(U8, 2)) }\", \"Index(\\\"b\\\", Number(U8, 2))\", \"Index(\\\"b\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x1a), Register(0x3d)], resolved: None }
0b 1a 3d 
# inline_RpnCalc_handle_mul32_32_14_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_t5 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 0)), var_type: None, value: Index(\"b\", Number(U8, 2)) }"] }
# 00535 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"b\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x38)], resolved: None }
0b 3d 38 
# inline_RpnCalc_handle_mul32_32_14_t7 <- inline_RpnCalc_handle_mul32_32_14_a_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Ident(\"a_hi\")", "Ident(\"a_hi\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t7 <- inline_RpnCalc_handle_mul32_32_14_a_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a_hi\\\")\", \"Ident(\\\"a_hi\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_t8 <- inline_RpnCalc_handle_mul32_32_14_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t8 <- inline_RpnCalc_handle_mul32_32_14_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a <- inline_RpnCalc_handle_mul32_32_14_t7 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a <- inline_RpnCalc_handle_mul32_32_14_t7 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b <- inline_RpnCalc_handle_mul32_32_14_t8 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b <- inline_RpnCalc_handle_mul32_32_14_t8 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 00538 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x14), Register(0x18), Register(0x24)], resolved: None }
11 14 18 24 
# 0053c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x26), Constant8(0x00=0)], resolved: None }
04 26 00 
# 0053f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x27), Constant8(0x00=0)], resolved: None }
04 27 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t3 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00542 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t3 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x15), Register(0x3c)], resolved: None }
0b 15 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00545 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000000=0)], resolved: None }
20 28 00 00 00 00 
# 0054b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x28)], resolved: None }
0b 3c 28 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t5 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 0054e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t5 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x19), Register(0x3d)], resolved: None }
0b 19 3d 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00551 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x00000000=0)], resolved: None }
20 2c 00 00 00 00 
# 00557 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x2c)], resolved: None }
0b 3d 2c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 0055a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x28), Register(0x2c), Register(0x28)], resolved: None }
11 28 2c 28 
# 0055e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x2a), Constant8(0x00=0)], resolved: None }
04 2a 00 
# 00561 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x2b), Constant8(0x00=0)], resolved: None }
04 2b 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 00564 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x29), Register(0x35)], resolved: None }
0b 29 35 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 00567 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x35), Register(0x2b)], resolved: None }
0b 35 2b 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t7 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 0056a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t7 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x28), Register(0x35)], resolved: None }
0b 28 35 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 0056d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x35), Register(0x2a)], resolved: None }
0b 35 2a 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00570 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3e), Constant8(0x00=0)], resolved: None }
04 3e 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 00573 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x29)], resolved: None }
0b 3e 29 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00576 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3e), Constant8(0x00=0)], resolved: None }
04 3e 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00579 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x28)], resolved: None }
0b 3e 28 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 0057c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0057d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x28), Register(0x24)], resolved: None }
30 24 28 24 
# 00581 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t14 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00582 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t14 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x19), Register(0x3d)], resolved: None }
0b 19 3d 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00585 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000000=0)], resolved: None }
20 28 00 00 00 00 
# 0058b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x28)], resolved: None }
0b 3d 28 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 0058e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x14), Register(0x28), Register(0x28)], resolved: None }
11 14 28 28 
# 00592 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x2a), Constant8(0x00=0)], resolved: None }
04 2a 00 
# 00595 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x2b), Constant8(0x00=0)], resolved: None }
04 2b 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t16 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00598 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t16 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x15), Register(0x3c)], resolved: None }
0b 15 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 0059b Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000000=0)], resolved: None }
20 14 00 00 00 00 
# 005a1 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x14)], resolved: None }
0b 3c 14 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 005a4 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
11 14 18 14 
# 005a8 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x16), Constant8(0x00=0)], resolved: None }
04 16 00 
# 005ab Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x17), Constant8(0x00=0)], resolved: None }
04 17 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 005ae Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x18)], resolved: None }
21 28 18 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 005b1 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 005b2 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x14), Register(0x28)], resolved: None }
30 18 14 28 
# 005b6 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t20 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 005b7 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t20 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x2a), Register(0x3c)], resolved: None }
0b 2a 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 005ba Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x2b)], resolved: None }
0b 3c 2b 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t21 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 005bd Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t21 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x29), Register(0x3c)], resolved: None }
0b 29 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 005c0 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x2a)], resolved: None }
0b 3c 2a 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t22 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 005c3 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t22 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x28), Register(0x3c)], resolved: None }
0b 28 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 005c6 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x29)], resolved: None }
0b 3c 29 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 005c9 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x00=0)], resolved: None }
04 3c 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 005cc Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x28)], resolved: None }
0b 3c 28 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 005cf Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x14)], resolved: None }
21 24 14 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 005d2 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x18)], resolved: None }
21 28 18 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 005d5 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 005d6 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 005da Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# 005db Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x14), Register(0x28)], resolved: None }
21 14 28 
# goto inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_14_t10 <- inline_RpnCalc_handle_mul32_32_14_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t10 <- inline_RpnCalc_handle_mul32_32_14_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_t11 <- inline_RpnCalc_handle_mul32_32_14_b_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Ident(\"b_hi\")", "Ident(\"b_hi\")"] }
# 005de Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t11 <- inline_RpnCalc_handle_mul32_32_14_b_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"b_hi\\\")\", \"Ident(\\\"b_hi\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x14)], resolved: None }
21 38 14 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a <- inline_RpnCalc_handle_mul32_32_14_t10 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a <- inline_RpnCalc_handle_mul32_32_14_t10 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b <- inline_RpnCalc_handle_mul32_32_14_t11 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b <- inline_RpnCalc_handle_mul32_32_14_t11 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 005e1 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x10), Register(0x14), Register(0x18)], resolved: None }
11 10 14 18 
# 005e5 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x1a), Constant8(0x00=0)], resolved: None }
04 1a 00 
# 005e8 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x1b), Constant8(0x00=0)], resolved: None }
04 1b 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t3 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 005eb Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t3 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x11), Register(0x1d)], resolved: None }
0b 11 1d 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 005ee Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000000=0)], resolved: None }
20 38 00 00 00 00 
# 005f4 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x38)], resolved: None }
0b 1d 38 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t5 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 005f7 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t5 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x15), Register(0x3c)], resolved: None }
0b 15 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 005fa Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000000=0)], resolved: None }
20 24 00 00 00 00 
# 00600 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x24)], resolved: None }
0b 3c 24 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00603 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x38), Register(0x24), Register(0x38)], resolved: None }
11 38 24 38 
# 00607 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x3a), Constant8(0x00=0)], resolved: None }
04 3a 00 
# 0060a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x3b), Constant8(0x00=0)], resolved: None }
04 3b 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 0060d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x39), Register(0x1c)], resolved: None }
0b 39 1c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 00610 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x3b)], resolved: None }
0b 1c 3b 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t7 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 00613 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t7 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x38), Register(0x1c)], resolved: None }
0b 38 1c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 00616 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x3a)], resolved: None }
0b 1c 3a 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00619 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x34), Constant8(0x00=0)], resolved: None }
04 34 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 0061c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x34), Register(0x39)], resolved: None }
0b 34 39 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0061f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x34), Constant8(0x00=0)], resolved: None }
04 34 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00622 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x34), Register(0x38)], resolved: None }
0b 34 38 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 00625 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00626 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 0062a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t14 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 0062b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t14 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x15), Register(0x3c)], resolved: None }
0b 15 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 0062e Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000000=0)], resolved: None }
20 38 00 00 00 00 
# 00634 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x38)], resolved: None }
0b 3c 38 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00637 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x10), Register(0x38), Register(0x38)], resolved: None }
11 10 38 38 
# 0063b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x3a), Constant8(0x00=0)], resolved: None }
04 3a 00 
# 0063e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x3b), Constant8(0x00=0)], resolved: None }
04 3b 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t16 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00641 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t16 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x11), Register(0x1d)], resolved: None }
0b 11 1d 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00644 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x00000000=0)], resolved: None }
20 10 00 00 00 00 
# 0064a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x10)], resolved: None }
0b 1d 10 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 0064d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x10), Register(0x14), Register(0x10)], resolved: None }
11 10 14 10 
# 00651 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x00=0)], resolved: None }
04 12 00 
# 00654 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x13), Constant8(0x00=0)], resolved: None }
04 13 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00657 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x14)], resolved: None }
21 38 14 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 0065a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0065b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x10), Register(0x38)], resolved: None }
30 14 10 38 
# 0065f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t20 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 00660 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t20 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x3a), Register(0x1d)], resolved: None }
0b 3a 1d 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 00663 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x3b)], resolved: None }
0b 1d 3b 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t21 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 00666 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t21 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x39), Register(0x1d)], resolved: None }
0b 39 1d 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 00669 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x3a)], resolved: None }
0b 1d 3a 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t22 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 0066c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t22 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x38), Register(0x1d)], resolved: None }
0b 38 1d 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 0066f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x39)], resolved: None }
0b 1d 39 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00672 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x00=0)], resolved: None }
04 1d 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00675 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x38)], resolved: None }
0b 1d 38 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 00678 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 0067b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x14)], resolved: None }
21 38 14 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 0067e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0067f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x10)], resolved: None }
30 10 14 10 
# 00683 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_t9 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t9 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# goto inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_14_d <- inline_RpnCalc_handle_mul32_32_14_t6 Add inline_RpnCalc_handle_mul32_32_14_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))"] }
# 00684 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d <- inline_RpnCalc_handle_mul32_32_14_t6 Add inline_RpnCalc_handle_mul32_32_14_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00685 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d <- inline_RpnCalc_handle_mul32_32_14_t6 Add inline_RpnCalc_handle_mul32_32_14_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\"] }", opcode: AddCarry32_1, args: [Register(0x28), Register(0x10), Register(0x10)], resolved: None }
30 28 10 10 
# 00689 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d <- inline_RpnCalc_handle_mul32_32_14_t6 Add inline_RpnCalc_handle_mul32_32_14_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_t12 <- inline_RpnCalc_handle_mul32_32_14_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 0068a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t12 <- inline_RpnCalc_handle_mul32_32_14_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x11), Register(0x1d)], resolved: None }
0b 11 1d 
# inline_RpnCalc_handle_mul32_32_14_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_t12 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 0068d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_t12 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x13)], resolved: None }
0b 1d 13 
# inline_RpnCalc_handle_mul32_32_14_t13 <- inline_RpnCalc_handle_mul32_32_14_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 00690 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t13 <- inline_RpnCalc_handle_mul32_32_14_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x10), Register(0x1d)], resolved: None }
0b 10 1d 
# inline_RpnCalc_handle_mul32_32_14_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_t13 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 00693 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_t13 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x12)], resolved: None }
0b 1d 12 
# inline_RpnCalc_handle_mul32_32_14_t14 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00696 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t14 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x00=0)], resolved: None }
04 3c 00 
# inline_RpnCalc_handle_mul32_32_14_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_t14 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 00699 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x11)], resolved: None }
0b 3c 11 
# inline_RpnCalc_handle_mul32_32_14_t15 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0069c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t15 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x00=0)], resolved: None }
04 3c 00 
# inline_RpnCalc_handle_mul32_32_14_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_t15 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 0069f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x10)], resolved: None }
0b 3c 10 
# inline_RpnCalc_handle_mul32_32_14_t17 <- inline_RpnCalc_handle_mul32_32_14_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 006a2 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t17 <- inline_RpnCalc_handle_mul32_32_14_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x14)], resolved: None }
21 20 14 
# inline_RpnCalc_handle_mul32_32_14_t18 <- inline_RpnCalc_handle_mul32_32_14_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t18 <- inline_RpnCalc_handle_mul32_32_14_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_t16 <- inline_RpnCalc_handle_mul32_32_14_t17 Add inline_RpnCalc_handle_mul32_32_14_t18
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 006a5 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t16 <- inline_RpnCalc_handle_mul32_32_14_t17 Add inline_RpnCalc_handle_mul32_32_14_t18\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 006a6 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t16 <- inline_RpnCalc_handle_mul32_32_14_t17 Add inline_RpnCalc_handle_mul32_32_14_t18\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x10), Register(0x10)], resolved: None }
30 14 10 10 
# 006aa Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t16 <- inline_RpnCalc_handle_mul32_32_14_t17 Add inline_RpnCalc_handle_mul32_32_14_t18\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# product <- inline_RpnCalc_handle_mul32_32_14_t16 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# 006ab Instruction { source: "product <- inline_RpnCalc_handle_mul32_32_14_t16 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x10), Register(0x14)], resolved: None }
21 10 14 
# goto inline_RpnCalc_handle_mul32_32_14_function_end_mul32_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_14_function_end_mul32_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_14_function_end_mul32_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_14_function_end_mul32_32
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_32_14_function_end_mul32_32
# t62 <- product U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] })", "Ident(\"product\")", "Ident(\"product\")"] }
# 006ae Instruction { source: "t62 <- product U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Ident(\\\"product\\\")\", \"Ident(\\\"product\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x10)], resolved: None }
21 14 10 
# None <= call print_dec32(t62,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] })"] }
# 006b1 Instruction { source: "Arg0[a]=t62 None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 136, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34]
# 006b4 Instruction { source: "Saving reg0x22 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x22)], resolved: None }
09 22 
# 006b6 Instruction { source: "Saving reg0x21 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x21)], resolved: None }
09 21 
# 006b8 Instruction { source: "Saving reg0x20 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x20)], resolved: None }
09 20 
# 006ba Instruction { source: "Saving reg0x1d before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x1d)], resolved: None }
09 1d 
# 006bc Instruction { source: "Saving reg0x1c before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x1c)], resolved: None }
09 1c 
# 006be Instruction { source: "Saving reg0x1b before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x1b)], resolved: None }
09 1b 
# 006c0 Instruction { source: "Saving reg0x1a before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x1a)], resolved: None }
09 1a 
# 006c2 Instruction { source: "Saving reg0x19 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x19)], resolved: None }
09 19 
# 006c4 Instruction { source: "Saving reg0x18 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x18)], resolved: None }
09 18 
# 006c6 Instruction { source: "Saving reg0x17 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x17)], resolved: None }
09 17 
# 006c8 Instruction { source: "Saving reg0x16 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x16)], resolved: None }
09 16 
# 006ca Instruction { source: "Saving reg0x15 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x15)], resolved: None }
09 15 
# 006cc Instruction { source: "Saving reg0x14 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x14)], resolved: None }
09 14 
# 006ce Instruction { source: "Saving reg0x13 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x13)], resolved: None }
09 13 
# 006d0 Instruction { source: "Saving reg0x12 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x12)], resolved: None }
09 12 
# 006d2 Instruction { source: "Saving reg0x11 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x11)], resolved: None }
09 11 
# 006d4 Instruction { source: "Saving reg0x10 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x10)], resolved: None }
09 10 
# 006d6 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 006dc Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c e6 06 00 00 
# 006e2 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 c9 1f 00 
# 006e6 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 006ec Instruction { source: "Restoring reg0x10 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x10)], resolved: None }
0a 10 
# 006ee Instruction { source: "Restoring reg0x11 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x11)], resolved: None }
0a 11 
# 006f0 Instruction { source: "Restoring reg0x12 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x12)], resolved: None }
0a 12 
# 006f2 Instruction { source: "Restoring reg0x13 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x13)], resolved: None }
0a 13 
# 006f4 Instruction { source: "Restoring reg0x14 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x14)], resolved: None }
0a 14 
# 006f6 Instruction { source: "Restoring reg0x15 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x15)], resolved: None }
0a 15 
# 006f8 Instruction { source: "Restoring reg0x16 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x16)], resolved: None }
0a 16 
# 006fa Instruction { source: "Restoring reg0x17 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x17)], resolved: None }
0a 17 
# 006fc Instruction { source: "Restoring reg0x18 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x18)], resolved: None }
0a 18 
# 006fe Instruction { source: "Restoring reg0x19 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x19)], resolved: None }
0a 19 
# 00700 Instruction { source: "Restoring reg0x1a after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x1a)], resolved: None }
0a 1a 
# 00702 Instruction { source: "Restoring reg0x1b after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x1b)], resolved: None }
0a 1b 
# 00704 Instruction { source: "Restoring reg0x1c after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x1c)], resolved: None }
0a 1c 
# 00706 Instruction { source: "Restoring reg0x1d after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x1d)], resolved: None }
0a 1d 
# 00708 Instruction { source: "Restoring reg0x20 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x20)], resolved: None }
0a 20 
# 0070a Instruction { source: "Restoring reg0x21 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x21)], resolved: None }
0a 21 
# 0070c Instruction { source: "Restoring reg0x22 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x22)], resolved: None }
0a 22 
# t64 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 0070e Instruction { source: "t64 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x0a=10)], resolved: None }
04 1d 0a 
# inline_RpnCalc_handle_putc_27_c <- t64 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_27_c <- t64 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_RpnCalc_handle_putc_27_t1 <- inline_RpnCalc_handle_putc_27_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_27_t1 <- inline_RpnCalc_handle_putc_27_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_27_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00711 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_RpnCalc_handle_putc_27_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_27_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_27_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_27_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_27_function_end_putc
# t66 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 00713 Instruction { source: "t66 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x10)], resolved: None }
21 40 10 
# t67 <- product U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Ident(\"product\")", "Ident(\"product\")"] }
# 00716 Instruction { source: "t67 <- product U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Ident(\\\"product\\\")\", \"Ident(\\\"product\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_push_65_s <- t66 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })"] }
# 00719 Instruction { source: "inline_RpnCalc_handle_stack_push_65_s <- t66 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x14)], resolved: None }
21 10 14 
# inline_RpnCalc_handle_stack_push_65_n <- t67 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })"] }
# 0071c Instruction { source: "inline_RpnCalc_handle_stack_push_65_n <- t67 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# inline_RpnCalc_handle_stack_push_65_t0 <- inline_RpnCalc_handle_stack_push_65_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_65_t0 <- inline_RpnCalc_handle_stack_push_65_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_65_values <- inline_RpnCalc_handle_stack_push_65_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 0071f Instruction { source: "inline_RpnCalc_handle_stack_push_65_values <- inline_RpnCalc_handle_stack_push_65_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_push_65_t2 <- inline_RpnCalc_handle_stack_push_65_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_65_t2 <- inline_RpnCalc_handle_stack_push_65_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_push_65_t6 <- inline_RpnCalc_handle_stack_push_65_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_65_t6 <- inline_RpnCalc_handle_stack_push_65_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_65_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00722 Instruction { source: "inline_RpnCalc_handle_stack_push_65_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_stack_push_65_t5 <- inline_RpnCalc_handle_stack_push_65_t6 Add inline_RpnCalc_handle_stack_push_65_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00728 Instruction { source: "inline_RpnCalc_handle_stack_push_65_t5 <- inline_RpnCalc_handle_stack_push_65_t6 Add inline_RpnCalc_handle_stack_push_65_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00729 Instruction { source: "inline_RpnCalc_handle_stack_push_65_t5 <- inline_RpnCalc_handle_stack_push_65_t6 Add inline_RpnCalc_handle_stack_push_65_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x38), Register(0x38)], resolved: None }
30 14 38 38 
# 0072d Instruction { source: "inline_RpnCalc_handle_stack_push_65_t5 <- inline_RpnCalc_handle_stack_push_65_t6 Add inline_RpnCalc_handle_stack_push_65_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_65_t4 <- mem[inline_RpnCalc_handle_stack_push_65_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 0072e Instruction { source: "inline_RpnCalc_handle_stack_push_65_t4 <- mem[inline_RpnCalc_handle_stack_push_65_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x38), Register(0x38)], resolved: None }
22 38 38 
# inline_RpnCalc_handle_stack_push_65_t3 <- inline_RpnCalc_handle_stack_push_65_t4 Add inline_RpnCalc_handle_stack_push_65_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00731 Instruction { source: "inline_RpnCalc_handle_stack_push_65_t3 <- inline_RpnCalc_handle_stack_push_65_t4 Add inline_RpnCalc_handle_stack_push_65_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00732 Instruction { source: "inline_RpnCalc_handle_stack_push_65_t3 <- inline_RpnCalc_handle_stack_push_65_t4 Add inline_RpnCalc_handle_stack_push_65_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 00736 Instruction { source: "inline_RpnCalc_handle_stack_push_65_t3 <- inline_RpnCalc_handle_stack_push_65_t4 Add inline_RpnCalc_handle_stack_push_65_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_65_t3 <- inline_RpnCalc_handle_stack_push_65_t3 Add inline_RpnCalc_handle_stack_push_65_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 00737 Instruction { source: "inline_RpnCalc_handle_stack_push_65_t3 <- inline_RpnCalc_handle_stack_push_65_t3 Add inline_RpnCalc_handle_stack_push_65_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00738 Instruction { source: "inline_RpnCalc_handle_stack_push_65_t3 <- inline_RpnCalc_handle_stack_push_65_t3 Add inline_RpnCalc_handle_stack_push_65_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 0073c Instruction { source: "inline_RpnCalc_handle_stack_push_65_t3 <- inline_RpnCalc_handle_stack_push_65_t3 Add inline_RpnCalc_handle_stack_push_65_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_65_t1 <- inline_RpnCalc_handle_stack_push_65_t2 Add inline_RpnCalc_handle_stack_push_65_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 0073d Instruction { source: "inline_RpnCalc_handle_stack_push_65_t1 <- inline_RpnCalc_handle_stack_push_65_t2 Add inline_RpnCalc_handle_stack_push_65_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0073e Instruction { source: "inline_RpnCalc_handle_stack_push_65_t1 <- inline_RpnCalc_handle_stack_push_65_t2 Add inline_RpnCalc_handle_stack_push_65_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 00742 Instruction { source: "inline_RpnCalc_handle_stack_push_65_t1 <- inline_RpnCalc_handle_stack_push_65_t2 Add inline_RpnCalc_handle_stack_push_65_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_65_t9 <- inline_RpnCalc_handle_stack_push_65_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_65_t9 <- inline_RpnCalc_handle_stack_push_65_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_65_t1] <- inline_RpnCalc_handle_stack_push_65_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 00743 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_65_t1] <- inline_RpnCalc_handle_stack_push_65_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x10), Register(0x18)], resolved: None }
23 10 18 
# 00746 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_65_t1] <- inline_RpnCalc_handle_stack_push_65_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_65_t11 <- inline_RpnCalc_handle_stack_push_65_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 00747 Instruction { source: "inline_RpnCalc_handle_stack_push_65_t11 <- inline_RpnCalc_handle_stack_push_65_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x10)], resolved: None }
21 14 10 
# inline_RpnCalc_handle_stack_push_65_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0074a Instruction { source: "inline_RpnCalc_handle_stack_push_65_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_65_t10 <- inline_RpnCalc_handle_stack_push_65_t11 Add inline_RpnCalc_handle_stack_push_65_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00750 Instruction { source: "inline_RpnCalc_handle_stack_push_65_t10 <- inline_RpnCalc_handle_stack_push_65_t11 Add inline_RpnCalc_handle_stack_push_65_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00751 Instruction { source: "inline_RpnCalc_handle_stack_push_65_t10 <- inline_RpnCalc_handle_stack_push_65_t11 Add inline_RpnCalc_handle_stack_push_65_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x18), Register(0x10)], resolved: None }
30 10 18 10 
# 00755 Instruction { source: "inline_RpnCalc_handle_stack_push_65_t10 <- inline_RpnCalc_handle_stack_push_65_t11 Add inline_RpnCalc_handle_stack_push_65_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_65_t16 <- inline_RpnCalc_handle_stack_push_65_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_65_t16 <- inline_RpnCalc_handle_stack_push_65_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_65_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00756 Instruction { source: "inline_RpnCalc_handle_stack_push_65_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_65_t15 <- inline_RpnCalc_handle_stack_push_65_t16 Add inline_RpnCalc_handle_stack_push_65_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0075c Instruction { source: "inline_RpnCalc_handle_stack_push_65_t15 <- inline_RpnCalc_handle_stack_push_65_t16 Add inline_RpnCalc_handle_stack_push_65_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0075d Instruction { source: "inline_RpnCalc_handle_stack_push_65_t15 <- inline_RpnCalc_handle_stack_push_65_t16 Add inline_RpnCalc_handle_stack_push_65_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00761 Instruction { source: "inline_RpnCalc_handle_stack_push_65_t15 <- inline_RpnCalc_handle_stack_push_65_t16 Add inline_RpnCalc_handle_stack_push_65_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_65_t14 <- mem[inline_RpnCalc_handle_stack_push_65_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00762 Instruction { source: "inline_RpnCalc_handle_stack_push_65_t14 <- mem[inline_RpnCalc_handle_stack_push_65_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# inline_RpnCalc_handle_stack_push_65_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00765 Instruction { source: "inline_RpnCalc_handle_stack_push_65_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# inline_RpnCalc_handle_stack_push_65_t13 <- inline_RpnCalc_handle_stack_push_65_t14 Add inline_RpnCalc_handle_stack_push_65_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 0076b Instruction { source: "inline_RpnCalc_handle_stack_push_65_t13 <- inline_RpnCalc_handle_stack_push_65_t14 Add inline_RpnCalc_handle_stack_push_65_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0076c Instruction { source: "inline_RpnCalc_handle_stack_push_65_t13 <- inline_RpnCalc_handle_stack_push_65_t14 Add inline_RpnCalc_handle_stack_push_65_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00770 Instruction { source: "inline_RpnCalc_handle_stack_push_65_t13 <- inline_RpnCalc_handle_stack_push_65_t14 Add inline_RpnCalc_handle_stack_push_65_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_push_65_t10] <- inline_RpnCalc_handle_stack_push_65_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 00771 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_65_t10] <- inline_RpnCalc_handle_stack_push_65_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x14), Register(0x10)], resolved: None }
23 14 10 
# 00774 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_65_t10] <- inline_RpnCalc_handle_stack_push_65_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_65_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_65_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_65_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_65_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_65_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 00775 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 d4 0c 00 
# :RpnCalc_handle_if_else_2_29
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_2_29
# t68 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t68 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t69 <- 0n47/0x2fu8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }", "Number(U8, 47)", "Number(U8, 47)"] }
# 00779 Instruction { source: "t69 <- 0n47/0x2fu8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\", \"Number(U8, 47)\", \"Number(U8, 47)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x2f=47)], resolved: None }
04 45 2f 
# if t68 == t69 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }"] }
# 0077c Instruction { source: "if t68 == t69 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 0077f Instruction { source: "if t68 == t69 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_3_30)], resolved: None }
72 87 07 00 
# 00783 Instruction { source: "if t68 == t69 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_3_31)], resolved: None }
70 71 08 00 
# :RpnCalc_handle_if_true_3_30
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_3_30
# t70 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t70 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t71 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t71 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# Some(quotient) <= call div32(t70,t71,)
# 	SourceContext { contexts: ["Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] })"] }
# 00787 Instruction { source: "Arg0[a]=t70 Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x00)], resolved: None }
21 14 00 
# 0078a Instruction { source: "Arg1[b]=t71 Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x04)], resolved: None }
21 10 04 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69}
# Registers used by callee tree: {80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248, 249, 250, 251}
# Registers to save: []
# 0078d Instruction { source: "PseudoCall(Label24(:div32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00793 Instruction { source: "PseudoCall(Label24(:div32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 9d 07 00 00 
# 00799 Instruction { source: "PseudoCall(Label24(:div32))", opcode: JmpImm, args: [Label24(:div32)], resolved: None }
70 54 0d 00 
# 0079d Instruction { source: "PseudoCall(Label24(:div32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 007a3 Instruction { source: "Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x00), Register(0x14)], resolved: None }
21 00 14 
# t73 <- quotient U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] })", "Ident(\"quotient\")", "Ident(\"quotient\")"] }
# 007a6 Instruction { source: "t73 <- quotient U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Ident(\\\"quotient\\\")\", \"Ident(\\\"quotient\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x10)], resolved: None }
21 14 10 
# None <= call print_dec32(t73,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] })"] }
# 007a9 Instruction { source: "Arg0[a]=t73 None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 136, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34]
# 007ac Instruction { source: "Saving reg0x22 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x22)], resolved: None }
09 22 
# 007ae Instruction { source: "Saving reg0x21 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x21)], resolved: None }
09 21 
# 007b0 Instruction { source: "Saving reg0x20 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x20)], resolved: None }
09 20 
# 007b2 Instruction { source: "Saving reg0x1d before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x1d)], resolved: None }
09 1d 
# 007b4 Instruction { source: "Saving reg0x1c before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x1c)], resolved: None }
09 1c 
# 007b6 Instruction { source: "Saving reg0x1b before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x1b)], resolved: None }
09 1b 
# 007b8 Instruction { source: "Saving reg0x1a before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x1a)], resolved: None }
09 1a 
# 007ba Instruction { source: "Saving reg0x19 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x19)], resolved: None }
09 19 
# 007bc Instruction { source: "Saving reg0x18 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x18)], resolved: None }
09 18 
# 007be Instruction { source: "Saving reg0x17 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x17)], resolved: None }
09 17 
# 007c0 Instruction { source: "Saving reg0x16 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x16)], resolved: None }
09 16 
# 007c2 Instruction { source: "Saving reg0x15 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x15)], resolved: None }
09 15 
# 007c4 Instruction { source: "Saving reg0x14 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x14)], resolved: None }
09 14 
# 007c6 Instruction { source: "Saving reg0x13 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x13)], resolved: None }
09 13 
# 007c8 Instruction { source: "Saving reg0x12 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x12)], resolved: None }
09 12 
# 007ca Instruction { source: "Saving reg0x11 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x11)], resolved: None }
09 11 
# 007cc Instruction { source: "Saving reg0x10 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x10)], resolved: None }
09 10 
# 007ce Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 007d4 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c de 07 00 00 
# 007da Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 c9 1f 00 
# 007de Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 007e4 Instruction { source: "Restoring reg0x10 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x10)], resolved: None }
0a 10 
# 007e6 Instruction { source: "Restoring reg0x11 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x11)], resolved: None }
0a 11 
# 007e8 Instruction { source: "Restoring reg0x12 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x12)], resolved: None }
0a 12 
# 007ea Instruction { source: "Restoring reg0x13 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x13)], resolved: None }
0a 13 
# 007ec Instruction { source: "Restoring reg0x14 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x14)], resolved: None }
0a 14 
# 007ee Instruction { source: "Restoring reg0x15 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x15)], resolved: None }
0a 15 
# 007f0 Instruction { source: "Restoring reg0x16 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x16)], resolved: None }
0a 16 
# 007f2 Instruction { source: "Restoring reg0x17 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x17)], resolved: None }
0a 17 
# 007f4 Instruction { source: "Restoring reg0x18 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x18)], resolved: None }
0a 18 
# 007f6 Instruction { source: "Restoring reg0x19 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x19)], resolved: None }
0a 19 
# 007f8 Instruction { source: "Restoring reg0x1a after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x1a)], resolved: None }
0a 1a 
# 007fa Instruction { source: "Restoring reg0x1b after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x1b)], resolved: None }
0a 1b 
# 007fc Instruction { source: "Restoring reg0x1c after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x1c)], resolved: None }
0a 1c 
# 007fe Instruction { source: "Restoring reg0x1d after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x1d)], resolved: None }
0a 1d 
# 00800 Instruction { source: "Restoring reg0x20 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x20)], resolved: None }
0a 20 
# 00802 Instruction { source: "Restoring reg0x21 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x21)], resolved: None }
0a 21 
# 00804 Instruction { source: "Restoring reg0x22 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x22)], resolved: None }
0a 22 
# t75 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 00806 Instruction { source: "t75 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x0a=10)], resolved: None }
04 1d 0a 
# inline_RpnCalc_handle_putc_28_c <- t75 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_28_c <- t75 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_RpnCalc_handle_putc_28_t1 <- inline_RpnCalc_handle_putc_28_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_28_t1 <- inline_RpnCalc_handle_putc_28_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_28_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00809 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_RpnCalc_handle_putc_28_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_28_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_28_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_28_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_28_function_end_putc
# t77 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 0080b Instruction { source: "t77 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x10)], resolved: None }
21 40 10 
# t78 <- quotient U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Ident(\"quotient\")", "Ident(\"quotient\")"] }
# 0080e Instruction { source: "t78 <- quotient U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Ident(\\\"quotient\\\")\", \"Ident(\\\"quotient\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_push_66_s <- t77 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })"] }
# 00811 Instruction { source: "inline_RpnCalc_handle_stack_push_66_s <- t77 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x14)], resolved: None }
21 10 14 
# inline_RpnCalc_handle_stack_push_66_n <- t78 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })"] }
# 00814 Instruction { source: "inline_RpnCalc_handle_stack_push_66_n <- t78 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# inline_RpnCalc_handle_stack_push_66_t0 <- inline_RpnCalc_handle_stack_push_66_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_66_t0 <- inline_RpnCalc_handle_stack_push_66_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_66_values <- inline_RpnCalc_handle_stack_push_66_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 00817 Instruction { source: "inline_RpnCalc_handle_stack_push_66_values <- inline_RpnCalc_handle_stack_push_66_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_push_66_t2 <- inline_RpnCalc_handle_stack_push_66_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_66_t2 <- inline_RpnCalc_handle_stack_push_66_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_push_66_t6 <- inline_RpnCalc_handle_stack_push_66_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_66_t6 <- inline_RpnCalc_handle_stack_push_66_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_66_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0081a Instruction { source: "inline_RpnCalc_handle_stack_push_66_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_stack_push_66_t5 <- inline_RpnCalc_handle_stack_push_66_t6 Add inline_RpnCalc_handle_stack_push_66_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00820 Instruction { source: "inline_RpnCalc_handle_stack_push_66_t5 <- inline_RpnCalc_handle_stack_push_66_t6 Add inline_RpnCalc_handle_stack_push_66_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00821 Instruction { source: "inline_RpnCalc_handle_stack_push_66_t5 <- inline_RpnCalc_handle_stack_push_66_t6 Add inline_RpnCalc_handle_stack_push_66_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x38), Register(0x38)], resolved: None }
30 14 38 38 
# 00825 Instruction { source: "inline_RpnCalc_handle_stack_push_66_t5 <- inline_RpnCalc_handle_stack_push_66_t6 Add inline_RpnCalc_handle_stack_push_66_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_66_t4 <- mem[inline_RpnCalc_handle_stack_push_66_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00826 Instruction { source: "inline_RpnCalc_handle_stack_push_66_t4 <- mem[inline_RpnCalc_handle_stack_push_66_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x38), Register(0x38)], resolved: None }
22 38 38 
# inline_RpnCalc_handle_stack_push_66_t3 <- inline_RpnCalc_handle_stack_push_66_t4 Add inline_RpnCalc_handle_stack_push_66_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00829 Instruction { source: "inline_RpnCalc_handle_stack_push_66_t3 <- inline_RpnCalc_handle_stack_push_66_t4 Add inline_RpnCalc_handle_stack_push_66_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0082a Instruction { source: "inline_RpnCalc_handle_stack_push_66_t3 <- inline_RpnCalc_handle_stack_push_66_t4 Add inline_RpnCalc_handle_stack_push_66_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 0082e Instruction { source: "inline_RpnCalc_handle_stack_push_66_t3 <- inline_RpnCalc_handle_stack_push_66_t4 Add inline_RpnCalc_handle_stack_push_66_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_66_t3 <- inline_RpnCalc_handle_stack_push_66_t3 Add inline_RpnCalc_handle_stack_push_66_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 0082f Instruction { source: "inline_RpnCalc_handle_stack_push_66_t3 <- inline_RpnCalc_handle_stack_push_66_t3 Add inline_RpnCalc_handle_stack_push_66_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00830 Instruction { source: "inline_RpnCalc_handle_stack_push_66_t3 <- inline_RpnCalc_handle_stack_push_66_t3 Add inline_RpnCalc_handle_stack_push_66_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 00834 Instruction { source: "inline_RpnCalc_handle_stack_push_66_t3 <- inline_RpnCalc_handle_stack_push_66_t3 Add inline_RpnCalc_handle_stack_push_66_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_66_t1 <- inline_RpnCalc_handle_stack_push_66_t2 Add inline_RpnCalc_handle_stack_push_66_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 00835 Instruction { source: "inline_RpnCalc_handle_stack_push_66_t1 <- inline_RpnCalc_handle_stack_push_66_t2 Add inline_RpnCalc_handle_stack_push_66_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00836 Instruction { source: "inline_RpnCalc_handle_stack_push_66_t1 <- inline_RpnCalc_handle_stack_push_66_t2 Add inline_RpnCalc_handle_stack_push_66_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 0083a Instruction { source: "inline_RpnCalc_handle_stack_push_66_t1 <- inline_RpnCalc_handle_stack_push_66_t2 Add inline_RpnCalc_handle_stack_push_66_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_66_t9 <- inline_RpnCalc_handle_stack_push_66_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_66_t9 <- inline_RpnCalc_handle_stack_push_66_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_66_t1] <- inline_RpnCalc_handle_stack_push_66_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 0083b Instruction { source: "mem[inline_RpnCalc_handle_stack_push_66_t1] <- inline_RpnCalc_handle_stack_push_66_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x10), Register(0x18)], resolved: None }
23 10 18 
# 0083e Instruction { source: "mem[inline_RpnCalc_handle_stack_push_66_t1] <- inline_RpnCalc_handle_stack_push_66_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_66_t11 <- inline_RpnCalc_handle_stack_push_66_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 0083f Instruction { source: "inline_RpnCalc_handle_stack_push_66_t11 <- inline_RpnCalc_handle_stack_push_66_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x10)], resolved: None }
21 14 10 
# inline_RpnCalc_handle_stack_push_66_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00842 Instruction { source: "inline_RpnCalc_handle_stack_push_66_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_66_t10 <- inline_RpnCalc_handle_stack_push_66_t11 Add inline_RpnCalc_handle_stack_push_66_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00848 Instruction { source: "inline_RpnCalc_handle_stack_push_66_t10 <- inline_RpnCalc_handle_stack_push_66_t11 Add inline_RpnCalc_handle_stack_push_66_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00849 Instruction { source: "inline_RpnCalc_handle_stack_push_66_t10 <- inline_RpnCalc_handle_stack_push_66_t11 Add inline_RpnCalc_handle_stack_push_66_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x18), Register(0x10)], resolved: None }
30 10 18 10 
# 0084d Instruction { source: "inline_RpnCalc_handle_stack_push_66_t10 <- inline_RpnCalc_handle_stack_push_66_t11 Add inline_RpnCalc_handle_stack_push_66_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_66_t16 <- inline_RpnCalc_handle_stack_push_66_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_66_t16 <- inline_RpnCalc_handle_stack_push_66_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_66_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0084e Instruction { source: "inline_RpnCalc_handle_stack_push_66_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_66_t15 <- inline_RpnCalc_handle_stack_push_66_t16 Add inline_RpnCalc_handle_stack_push_66_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00854 Instruction { source: "inline_RpnCalc_handle_stack_push_66_t15 <- inline_RpnCalc_handle_stack_push_66_t16 Add inline_RpnCalc_handle_stack_push_66_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00855 Instruction { source: "inline_RpnCalc_handle_stack_push_66_t15 <- inline_RpnCalc_handle_stack_push_66_t16 Add inline_RpnCalc_handle_stack_push_66_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00859 Instruction { source: "inline_RpnCalc_handle_stack_push_66_t15 <- inline_RpnCalc_handle_stack_push_66_t16 Add inline_RpnCalc_handle_stack_push_66_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_66_t14 <- mem[inline_RpnCalc_handle_stack_push_66_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 0085a Instruction { source: "inline_RpnCalc_handle_stack_push_66_t14 <- mem[inline_RpnCalc_handle_stack_push_66_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# inline_RpnCalc_handle_stack_push_66_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0085d Instruction { source: "inline_RpnCalc_handle_stack_push_66_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# inline_RpnCalc_handle_stack_push_66_t13 <- inline_RpnCalc_handle_stack_push_66_t14 Add inline_RpnCalc_handle_stack_push_66_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 00863 Instruction { source: "inline_RpnCalc_handle_stack_push_66_t13 <- inline_RpnCalc_handle_stack_push_66_t14 Add inline_RpnCalc_handle_stack_push_66_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00864 Instruction { source: "inline_RpnCalc_handle_stack_push_66_t13 <- inline_RpnCalc_handle_stack_push_66_t14 Add inline_RpnCalc_handle_stack_push_66_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00868 Instruction { source: "inline_RpnCalc_handle_stack_push_66_t13 <- inline_RpnCalc_handle_stack_push_66_t14 Add inline_RpnCalc_handle_stack_push_66_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_push_66_t10] <- inline_RpnCalc_handle_stack_push_66_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 00869 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_66_t10] <- inline_RpnCalc_handle_stack_push_66_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x14), Register(0x10)], resolved: None }
23 14 10 
# 0086c Instruction { source: "mem[inline_RpnCalc_handle_stack_push_66_t10] <- inline_RpnCalc_handle_stack_push_66_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_66_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_66_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_66_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_66_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_66_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 0086d Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 d4 0c 00 
# :RpnCalc_handle_if_else_3_31
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_3_31
# t79 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t79 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t80 <- 0n115/0x73u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Number(U8, 115)", "Number(U8, 115)"] }
# 00871 Instruction { source: "t80 <- 0n115/0x73u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Number(U8, 115)\", \"Number(U8, 115)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x73=115)], resolved: None }
04 45 73 
# if t79 == t80 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }"] }
# 00874 Instruction { source: "if t79 == t80 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 00877 Instruction { source: "if t79 == t80 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_4_32)], resolved: None }
72 7f 08 00 
# 0087b Instruction { source: "if t79 == t80 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_4_33)], resolved: None }
70 3e 09 00 
# :RpnCalc_handle_if_true_4_32
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_4_32
# t82 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 0087f Instruction { source: "t82 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x18)], resolved: None }
21 40 18 
# t83 <- a U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t83 <- a U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_stack_push_67_s <- t82 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_67_s <- t82 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_push_67_n <- t83 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_67_n <- t83 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_stack_push_67_t0 <- inline_RpnCalc_handle_stack_push_67_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_67_t0 <- inline_RpnCalc_handle_stack_push_67_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_push_67_values <- inline_RpnCalc_handle_stack_push_67_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 00882 Instruction { source: "inline_RpnCalc_handle_stack_push_67_values <- inline_RpnCalc_handle_stack_push_67_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x38)], resolved: None }
21 18 38 
# inline_RpnCalc_handle_stack_push_67_t2 <- inline_RpnCalc_handle_stack_push_67_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_67_t2 <- inline_RpnCalc_handle_stack_push_67_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_67_t6 <- inline_RpnCalc_handle_stack_push_67_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_67_t6 <- inline_RpnCalc_handle_stack_push_67_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_push_67_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00885 Instruction { source: "inline_RpnCalc_handle_stack_push_67_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000040=64)], resolved: None }
20 20 40 00 00 00 
# inline_RpnCalc_handle_stack_push_67_t5 <- inline_RpnCalc_handle_stack_push_67_t6 Add inline_RpnCalc_handle_stack_push_67_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0088b Instruction { source: "inline_RpnCalc_handle_stack_push_67_t5 <- inline_RpnCalc_handle_stack_push_67_t6 Add inline_RpnCalc_handle_stack_push_67_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0088c Instruction { source: "inline_RpnCalc_handle_stack_push_67_t5 <- inline_RpnCalc_handle_stack_push_67_t6 Add inline_RpnCalc_handle_stack_push_67_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x20), Register(0x20)], resolved: None }
30 18 20 20 
# 00890 Instruction { source: "inline_RpnCalc_handle_stack_push_67_t5 <- inline_RpnCalc_handle_stack_push_67_t6 Add inline_RpnCalc_handle_stack_push_67_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_67_t4 <- mem[inline_RpnCalc_handle_stack_push_67_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00891 Instruction { source: "inline_RpnCalc_handle_stack_push_67_t4 <- mem[inline_RpnCalc_handle_stack_push_67_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x20), Register(0x20)], resolved: None }
22 20 20 
# inline_RpnCalc_handle_stack_push_67_t3 <- inline_RpnCalc_handle_stack_push_67_t4 Add inline_RpnCalc_handle_stack_push_67_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00894 Instruction { source: "inline_RpnCalc_handle_stack_push_67_t3 <- inline_RpnCalc_handle_stack_push_67_t4 Add inline_RpnCalc_handle_stack_push_67_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00895 Instruction { source: "inline_RpnCalc_handle_stack_push_67_t3 <- inline_RpnCalc_handle_stack_push_67_t4 Add inline_RpnCalc_handle_stack_push_67_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x20), Register(0x20)], resolved: None }
30 20 20 20 
# 00899 Instruction { source: "inline_RpnCalc_handle_stack_push_67_t3 <- inline_RpnCalc_handle_stack_push_67_t4 Add inline_RpnCalc_handle_stack_push_67_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_67_t3 <- inline_RpnCalc_handle_stack_push_67_t3 Add inline_RpnCalc_handle_stack_push_67_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 0089a Instruction { source: "inline_RpnCalc_handle_stack_push_67_t3 <- inline_RpnCalc_handle_stack_push_67_t3 Add inline_RpnCalc_handle_stack_push_67_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0089b Instruction { source: "inline_RpnCalc_handle_stack_push_67_t3 <- inline_RpnCalc_handle_stack_push_67_t3 Add inline_RpnCalc_handle_stack_push_67_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x20), Register(0x20)], resolved: None }
30 20 20 20 
# 0089f Instruction { source: "inline_RpnCalc_handle_stack_push_67_t3 <- inline_RpnCalc_handle_stack_push_67_t3 Add inline_RpnCalc_handle_stack_push_67_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_67_t1 <- inline_RpnCalc_handle_stack_push_67_t2 Add inline_RpnCalc_handle_stack_push_67_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 008a0 Instruction { source: "inline_RpnCalc_handle_stack_push_67_t1 <- inline_RpnCalc_handle_stack_push_67_t2 Add inline_RpnCalc_handle_stack_push_67_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008a1 Instruction { source: "inline_RpnCalc_handle_stack_push_67_t1 <- inline_RpnCalc_handle_stack_push_67_t2 Add inline_RpnCalc_handle_stack_push_67_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x20), Register(0x38)], resolved: None }
30 38 20 38 
# 008a5 Instruction { source: "inline_RpnCalc_handle_stack_push_67_t1 <- inline_RpnCalc_handle_stack_push_67_t2 Add inline_RpnCalc_handle_stack_push_67_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_67_t9 <- inline_RpnCalc_handle_stack_push_67_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_67_t9 <- inline_RpnCalc_handle_stack_push_67_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_67_t1] <- inline_RpnCalc_handle_stack_push_67_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 008a6 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_67_t1] <- inline_RpnCalc_handle_stack_push_67_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x10), Register(0x38)], resolved: None }
23 10 38 
# 008a9 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_67_t1] <- inline_RpnCalc_handle_stack_push_67_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_67_t11 <- inline_RpnCalc_handle_stack_push_67_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 008aa Instruction { source: "inline_RpnCalc_handle_stack_push_67_t11 <- inline_RpnCalc_handle_stack_push_67_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# inline_RpnCalc_handle_stack_push_67_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 008ad Instruction { source: "inline_RpnCalc_handle_stack_push_67_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_stack_push_67_t10 <- inline_RpnCalc_handle_stack_push_67_t11 Add inline_RpnCalc_handle_stack_push_67_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 008b3 Instruction { source: "inline_RpnCalc_handle_stack_push_67_t10 <- inline_RpnCalc_handle_stack_push_67_t11 Add inline_RpnCalc_handle_stack_push_67_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008b4 Instruction { source: "inline_RpnCalc_handle_stack_push_67_t10 <- inline_RpnCalc_handle_stack_push_67_t11 Add inline_RpnCalc_handle_stack_push_67_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x38), Register(0x10)], resolved: None }
30 10 38 10 
# 008b8 Instruction { source: "inline_RpnCalc_handle_stack_push_67_t10 <- inline_RpnCalc_handle_stack_push_67_t11 Add inline_RpnCalc_handle_stack_push_67_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_67_t16 <- inline_RpnCalc_handle_stack_push_67_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_67_t16 <- inline_RpnCalc_handle_stack_push_67_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_push_67_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 008b9 Instruction { source: "inline_RpnCalc_handle_stack_push_67_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_stack_push_67_t15 <- inline_RpnCalc_handle_stack_push_67_t16 Add inline_RpnCalc_handle_stack_push_67_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 008bf Instruction { source: "inline_RpnCalc_handle_stack_push_67_t15 <- inline_RpnCalc_handle_stack_push_67_t16 Add inline_RpnCalc_handle_stack_push_67_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008c0 Instruction { source: "inline_RpnCalc_handle_stack_push_67_t15 <- inline_RpnCalc_handle_stack_push_67_t16 Add inline_RpnCalc_handle_stack_push_67_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 008c4 Instruction { source: "inline_RpnCalc_handle_stack_push_67_t15 <- inline_RpnCalc_handle_stack_push_67_t16 Add inline_RpnCalc_handle_stack_push_67_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_67_t14 <- mem[inline_RpnCalc_handle_stack_push_67_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 008c5 Instruction { source: "inline_RpnCalc_handle_stack_push_67_t14 <- mem[inline_RpnCalc_handle_stack_push_67_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x18), Register(0x18)], resolved: None }
22 18 18 
# inline_RpnCalc_handle_stack_push_67_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 008c8 Instruction { source: "inline_RpnCalc_handle_stack_push_67_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000001=1)], resolved: None }
20 38 01 00 00 00 
# inline_RpnCalc_handle_stack_push_67_t13 <- inline_RpnCalc_handle_stack_push_67_t14 Add inline_RpnCalc_handle_stack_push_67_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 008ce Instruction { source: "inline_RpnCalc_handle_stack_push_67_t13 <- inline_RpnCalc_handle_stack_push_67_t14 Add inline_RpnCalc_handle_stack_push_67_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008cf Instruction { source: "inline_RpnCalc_handle_stack_push_67_t13 <- inline_RpnCalc_handle_stack_push_67_t14 Add inline_RpnCalc_handle_stack_push_67_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 008d3 Instruction { source: "inline_RpnCalc_handle_stack_push_67_t13 <- inline_RpnCalc_handle_stack_push_67_t14 Add inline_RpnCalc_handle_stack_push_67_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_push_67_t10] <- inline_RpnCalc_handle_stack_push_67_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 008d4 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_67_t10] <- inline_RpnCalc_handle_stack_push_67_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x18), Register(0x10)], resolved: None }
23 18 10 
# 008d7 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_67_t10] <- inline_RpnCalc_handle_stack_push_67_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_67_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_67_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_67_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_67_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_67_function_end_stack_push
# t85 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 008d8 Instruction { source: "t85 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x10)], resolved: None }
21 40 10 
# t86 <- b U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# 008db Instruction { source: "t86 <- b U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_push_68_s <- t85 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })"] }
# 008de Instruction { source: "inline_RpnCalc_handle_stack_push_68_s <- t85 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x14)], resolved: None }
21 10 14 
# inline_RpnCalc_handle_stack_push_68_n <- t86 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })"] }
# 008e1 Instruction { source: "inline_RpnCalc_handle_stack_push_68_n <- t86 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# inline_RpnCalc_handle_stack_push_68_t0 <- inline_RpnCalc_handle_stack_push_68_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_68_t0 <- inline_RpnCalc_handle_stack_push_68_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_68_values <- inline_RpnCalc_handle_stack_push_68_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 008e4 Instruction { source: "inline_RpnCalc_handle_stack_push_68_values <- inline_RpnCalc_handle_stack_push_68_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_push_68_t2 <- inline_RpnCalc_handle_stack_push_68_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_68_t2 <- inline_RpnCalc_handle_stack_push_68_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_push_68_t6 <- inline_RpnCalc_handle_stack_push_68_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_68_t6 <- inline_RpnCalc_handle_stack_push_68_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_68_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 008e7 Instruction { source: "inline_RpnCalc_handle_stack_push_68_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_stack_push_68_t5 <- inline_RpnCalc_handle_stack_push_68_t6 Add inline_RpnCalc_handle_stack_push_68_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 008ed Instruction { source: "inline_RpnCalc_handle_stack_push_68_t5 <- inline_RpnCalc_handle_stack_push_68_t6 Add inline_RpnCalc_handle_stack_push_68_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008ee Instruction { source: "inline_RpnCalc_handle_stack_push_68_t5 <- inline_RpnCalc_handle_stack_push_68_t6 Add inline_RpnCalc_handle_stack_push_68_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x38), Register(0x38)], resolved: None }
30 14 38 38 
# 008f2 Instruction { source: "inline_RpnCalc_handle_stack_push_68_t5 <- inline_RpnCalc_handle_stack_push_68_t6 Add inline_RpnCalc_handle_stack_push_68_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_68_t4 <- mem[inline_RpnCalc_handle_stack_push_68_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 008f3 Instruction { source: "inline_RpnCalc_handle_stack_push_68_t4 <- mem[inline_RpnCalc_handle_stack_push_68_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x38), Register(0x38)], resolved: None }
22 38 38 
# inline_RpnCalc_handle_stack_push_68_t3 <- inline_RpnCalc_handle_stack_push_68_t4 Add inline_RpnCalc_handle_stack_push_68_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 008f6 Instruction { source: "inline_RpnCalc_handle_stack_push_68_t3 <- inline_RpnCalc_handle_stack_push_68_t4 Add inline_RpnCalc_handle_stack_push_68_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008f7 Instruction { source: "inline_RpnCalc_handle_stack_push_68_t3 <- inline_RpnCalc_handle_stack_push_68_t4 Add inline_RpnCalc_handle_stack_push_68_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 008fb Instruction { source: "inline_RpnCalc_handle_stack_push_68_t3 <- inline_RpnCalc_handle_stack_push_68_t4 Add inline_RpnCalc_handle_stack_push_68_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_68_t3 <- inline_RpnCalc_handle_stack_push_68_t3 Add inline_RpnCalc_handle_stack_push_68_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 008fc Instruction { source: "inline_RpnCalc_handle_stack_push_68_t3 <- inline_RpnCalc_handle_stack_push_68_t3 Add inline_RpnCalc_handle_stack_push_68_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008fd Instruction { source: "inline_RpnCalc_handle_stack_push_68_t3 <- inline_RpnCalc_handle_stack_push_68_t3 Add inline_RpnCalc_handle_stack_push_68_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 00901 Instruction { source: "inline_RpnCalc_handle_stack_push_68_t3 <- inline_RpnCalc_handle_stack_push_68_t3 Add inline_RpnCalc_handle_stack_push_68_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_68_t1 <- inline_RpnCalc_handle_stack_push_68_t2 Add inline_RpnCalc_handle_stack_push_68_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 00902 Instruction { source: "inline_RpnCalc_handle_stack_push_68_t1 <- inline_RpnCalc_handle_stack_push_68_t2 Add inline_RpnCalc_handle_stack_push_68_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00903 Instruction { source: "inline_RpnCalc_handle_stack_push_68_t1 <- inline_RpnCalc_handle_stack_push_68_t2 Add inline_RpnCalc_handle_stack_push_68_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 00907 Instruction { source: "inline_RpnCalc_handle_stack_push_68_t1 <- inline_RpnCalc_handle_stack_push_68_t2 Add inline_RpnCalc_handle_stack_push_68_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_68_t9 <- inline_RpnCalc_handle_stack_push_68_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_68_t9 <- inline_RpnCalc_handle_stack_push_68_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_68_t1] <- inline_RpnCalc_handle_stack_push_68_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 00908 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_68_t1] <- inline_RpnCalc_handle_stack_push_68_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x10), Register(0x18)], resolved: None }
23 10 18 
# 0090b Instruction { source: "mem[inline_RpnCalc_handle_stack_push_68_t1] <- inline_RpnCalc_handle_stack_push_68_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_68_t11 <- inline_RpnCalc_handle_stack_push_68_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 0090c Instruction { source: "inline_RpnCalc_handle_stack_push_68_t11 <- inline_RpnCalc_handle_stack_push_68_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x10)], resolved: None }
21 14 10 
# inline_RpnCalc_handle_stack_push_68_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0090f Instruction { source: "inline_RpnCalc_handle_stack_push_68_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_68_t10 <- inline_RpnCalc_handle_stack_push_68_t11 Add inline_RpnCalc_handle_stack_push_68_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00915 Instruction { source: "inline_RpnCalc_handle_stack_push_68_t10 <- inline_RpnCalc_handle_stack_push_68_t11 Add inline_RpnCalc_handle_stack_push_68_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00916 Instruction { source: "inline_RpnCalc_handle_stack_push_68_t10 <- inline_RpnCalc_handle_stack_push_68_t11 Add inline_RpnCalc_handle_stack_push_68_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x18), Register(0x10)], resolved: None }
30 10 18 10 
# 0091a Instruction { source: "inline_RpnCalc_handle_stack_push_68_t10 <- inline_RpnCalc_handle_stack_push_68_t11 Add inline_RpnCalc_handle_stack_push_68_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_68_t16 <- inline_RpnCalc_handle_stack_push_68_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_68_t16 <- inline_RpnCalc_handle_stack_push_68_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_68_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0091b Instruction { source: "inline_RpnCalc_handle_stack_push_68_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_68_t15 <- inline_RpnCalc_handle_stack_push_68_t16 Add inline_RpnCalc_handle_stack_push_68_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00921 Instruction { source: "inline_RpnCalc_handle_stack_push_68_t15 <- inline_RpnCalc_handle_stack_push_68_t16 Add inline_RpnCalc_handle_stack_push_68_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00922 Instruction { source: "inline_RpnCalc_handle_stack_push_68_t15 <- inline_RpnCalc_handle_stack_push_68_t16 Add inline_RpnCalc_handle_stack_push_68_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00926 Instruction { source: "inline_RpnCalc_handle_stack_push_68_t15 <- inline_RpnCalc_handle_stack_push_68_t16 Add inline_RpnCalc_handle_stack_push_68_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_68_t14 <- mem[inline_RpnCalc_handle_stack_push_68_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00927 Instruction { source: "inline_RpnCalc_handle_stack_push_68_t14 <- mem[inline_RpnCalc_handle_stack_push_68_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# inline_RpnCalc_handle_stack_push_68_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0092a Instruction { source: "inline_RpnCalc_handle_stack_push_68_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# inline_RpnCalc_handle_stack_push_68_t13 <- inline_RpnCalc_handle_stack_push_68_t14 Add inline_RpnCalc_handle_stack_push_68_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 00930 Instruction { source: "inline_RpnCalc_handle_stack_push_68_t13 <- inline_RpnCalc_handle_stack_push_68_t14 Add inline_RpnCalc_handle_stack_push_68_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00931 Instruction { source: "inline_RpnCalc_handle_stack_push_68_t13 <- inline_RpnCalc_handle_stack_push_68_t14 Add inline_RpnCalc_handle_stack_push_68_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00935 Instruction { source: "inline_RpnCalc_handle_stack_push_68_t13 <- inline_RpnCalc_handle_stack_push_68_t14 Add inline_RpnCalc_handle_stack_push_68_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_push_68_t10] <- inline_RpnCalc_handle_stack_push_68_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 00936 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_68_t10] <- inline_RpnCalc_handle_stack_push_68_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x14), Register(0x10)], resolved: None }
23 14 10 
# 00939 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_68_t10] <- inline_RpnCalc_handle_stack_push_68_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_68_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_68_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_68_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_68_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_68_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 0093a Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 d4 0c 00 
# :RpnCalc_handle_if_else_4_33
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_4_33
# t87 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 0093e Instruction { source: "t87 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# t88 <- 0n113/0x71u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Number(U8, 113)", "Number(U8, 113)"] }
# 00941 Instruction { source: "t88 <- 0n113/0x71u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Number(U8, 113)\", \"Number(U8, 113)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x71=113)], resolved: None }
04 3c 71 
# if t87 == t88 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }"] }
# 00944 Instruction { source: "if t87 == t88 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: Cmp8, args: [Register(0x1d), Register(0x3c)], resolved: None }
15 1d 3c 
# 00947 Instruction { source: "if t87 == t88 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_5_34)], resolved: None }
72 4f 09 00 
# 0094b Instruction { source: "if t87 == t88 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_5_35)], resolved: None }
70 5b 09 00 
# :RpnCalc_handle_if_true_5_34
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_5_34
# t89 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0094f Instruction { source: "t89 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x00=0)], resolved: None }
04 1d 00 
# return Some(t89)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 00952 Instruction { source: "return Some(t89)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x00)], resolved: None }
0b 1d 00 
# 00955 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 00957 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 d4 0c 00 
# :RpnCalc_handle_if_else_5_35
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_5_35
# t90 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 0095b Instruction { source: "t90 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# t91 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 0095e Instruction { source: "t91 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x0a=10)], resolved: None }
04 3c 0a 
# if t90 == t91 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }"] }
# 00961 Instruction { source: "if t90 == t91 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x1d), Register(0x3c)], resolved: None }
15 1d 3c 
# 00964 Instruction { source: "if t90 == t91 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_6_36)], resolved: None }
72 6c 09 00 
# 00968 Instruction { source: "if t90 == t91 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_6_37)], resolved: None }
70 20 0a 00 
# :RpnCalc_handle_if_true_6_36
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_6_36
# t93 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# 0096c Instruction { source: "t93 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_c <- t93 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_c <- t93 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t3 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 0096f Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t3 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000048=72)], resolved: None }
20 14 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_t3
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 00975 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00976 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x14)], resolved: None }
30 10 14 14 
# 0097a Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t0 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_t1] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")"] }
# 0097b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t0 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_t1] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\"] }", opcode: Load8, args: [Register(0x14), Register(0x3c)], resolved: None }
05 14 3c 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t4 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0097e Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t4 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3d), Constant8(0x00=0)], resolved: None }
04 3d 00 
# if inline_RpnCalc_handle_RpnCalc_push_pending_71_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_71_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }"] }
# 00981 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_71_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_71_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x3c), Register(0x3d)], resolved: None }
15 3c 3d 
# 00984 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_71_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_71_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_else_0_2)], resolved: None }
72 1c 0a 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_71_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_71_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }"] }
# inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t7 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t7 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t7 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 00988 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t7 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x10), Register(0x18)], resolved: None }
21 10 18 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t11 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 0098b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t11 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000044=68)], resolved: None }
20 14 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_t11
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 00991 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00992 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x14)], resolved: None }
30 10 14 14 
# 00996 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t8 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_t9] U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 00997 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t8 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_t9] U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_s <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t6 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_s <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t6 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_n <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t8 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_n <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t8 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t0 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t0 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_values <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 0099a Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_values <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x38)], resolved: None }
21 18 38 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0099d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000040=64)], resolved: None }
20 20 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 009a3 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 009a4 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x20), Register(0x20)], resolved: None }
30 18 20 20 
# 009a8 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t4 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 009a9 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t4 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x20), Register(0x20)], resolved: None }
22 20 20 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 009ac Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 009ad Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x20), Register(0x20)], resolved: None }
30 20 20 20 
# 009b1 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 009b2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 009b3 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x20), Register(0x20)], resolved: None }
30 20 20 20 
# 009b7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 009b8 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 009b9 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x20), Register(0x38)], resolved: None }
30 38 20 38 
# 009bd Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 009be Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x14), Register(0x38)], resolved: None }
23 14 38 
# 009c1 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t11 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 009c2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t11 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x14)], resolved: None }
21 18 14 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 009c5 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 009cb Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 009cc Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x38), Register(0x14)], resolved: None }
30 14 38 14 
# 009d0 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 009d1 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 009d7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 009d8 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 009dc Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t14 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 009dd Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t14 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x18), Register(0x18)], resolved: None }
22 18 18 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 009e0 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000001=1)], resolved: None }
20 38 01 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 009e6 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 009e7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 009eb Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 009ec Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x18), Register(0x14)], resolved: None }
23 18 14 
# 009ef Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_71_inline_RpnCalc_push_pending_stack_push_69_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t14 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 009f0 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t14 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000044=68)], resolved: None }
20 14 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_t14
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 009f6 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 009f7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x14)], resolved: None }
30 10 14 14 
# 009fb Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t15 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 009fc Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t15 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t15 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 00a02 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t15 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x18), Register(0x14)], resolved: None }
23 18 14 
# 00a05 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t15 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t17 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t17 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t18 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 00a06 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t18 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000048=72)], resolved: None }
20 14 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 00a0c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00a0d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x10)], resolved: None }
30 10 14 10 
# 00a11 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_71_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_71_t19 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00a12 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_71_t19 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x00=0)], resolved: None }
04 3c 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_t16] <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t19 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }"] }
# 00a15 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_71_t16] <- inline_RpnCalc_handle_RpnCalc_push_pending_71_t19 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x3c), Register(0x10)], resolved: None }
06 3c 10 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# 00a18 Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_end_0)], resolved: None }
70 1c 0a 00 
# :inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_71_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_71_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_71_function_end_RpnCalc_push_pending\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_71_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_71_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_71_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 00a1c Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 d4 0c 00 
# :RpnCalc_handle_if_else_6_37
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_6_37
# t94 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 00a20 Instruction { source: "t94 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# t95 <- 0n32/0x20u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }", "Number(U8, 32)", "Number(U8, 32)"] }
# 00a23 Instruction { source: "t95 <- 0n32/0x20u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\", \"Number(U8, 32)\", \"Number(U8, 32)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x20=32)], resolved: None }
04 3c 20 
# if t94 == t95 then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }"] }
# 00a26 Instruction { source: "if t94 == t95 then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\"] }", opcode: Cmp8, args: [Register(0x1d), Register(0x3c)], resolved: None }
15 1d 3c 
# 00a29 Instruction { source: "if t94 == t95 then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_7_38)], resolved: None }
72 31 0a 00 
# 00a2d Instruction { source: "if t94 == t95 then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_7_39)], resolved: None }
70 e5 0a 00 
# :RpnCalc_handle_if_true_7_38
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_7_38
# t97 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# 00a31 Instruction { source: "t97 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_c <- t97 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_c <- t97 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t3 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 00a34 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t3 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000048=72)], resolved: None }
20 14 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_t3
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 00a3a Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00a3b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x14)], resolved: None }
30 10 14 14 
# 00a3f Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t0 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_t1] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")"] }
# 00a40 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t0 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_t1] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\"] }", opcode: Load8, args: [Register(0x14), Register(0x3c)], resolved: None }
05 14 3c 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t4 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00a43 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t4 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3d), Constant8(0x00=0)], resolved: None }
04 3d 00 
# if inline_RpnCalc_handle_RpnCalc_push_pending_72_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_72_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }"] }
# 00a46 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_72_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_72_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x3c), Register(0x3d)], resolved: None }
15 3c 3d 
# 00a49 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_72_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_72_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_else_0_2)], resolved: None }
72 e1 0a 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_72_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_72_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }"] }
# inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t7 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t7 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t7 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 00a4d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t7 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x10), Register(0x18)], resolved: None }
21 10 18 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t11 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 00a50 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t11 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000044=68)], resolved: None }
20 14 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_t11
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 00a56 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00a57 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x14)], resolved: None }
30 10 14 14 
# 00a5b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t8 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_t9] U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 00a5c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t8 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_t9] U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_s <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t6 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_s <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t6 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_n <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t8 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_n <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t8 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t0 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t0 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_values <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 00a5f Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_values <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x38)], resolved: None }
21 18 38 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00a62 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000040=64)], resolved: None }
20 20 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00a68 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00a69 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x20), Register(0x20)], resolved: None }
30 18 20 20 
# 00a6d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t4 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00a6e Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t4 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x20), Register(0x20)], resolved: None }
22 20 20 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00a71 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00a72 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x20), Register(0x20)], resolved: None }
30 20 20 20 
# 00a76 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 00a77 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00a78 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x20), Register(0x20)], resolved: None }
30 20 20 20 
# 00a7c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 00a7d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00a7e Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x20), Register(0x38)], resolved: None }
30 38 20 38 
# 00a82 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 00a83 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x14), Register(0x38)], resolved: None }
23 14 38 
# 00a86 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t11 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 00a87 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t11 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x14)], resolved: None }
21 18 14 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00a8a Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00a90 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00a91 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x38), Register(0x14)], resolved: None }
30 14 38 14 
# 00a95 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00a96 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00a9c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00a9d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 00aa1 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t14 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00aa2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t14 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x18), Register(0x18)], resolved: None }
22 18 18 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00aa5 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000001=1)], resolved: None }
20 38 01 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 00aab Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00aac Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 00ab0 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 00ab1 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x18), Register(0x14)], resolved: None }
23 18 14 
# 00ab4 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_72_inline_RpnCalc_push_pending_stack_push_69_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t14 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 00ab5 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t14 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000044=68)], resolved: None }
20 14 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_t14
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 00abb Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00abc Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x14)], resolved: None }
30 10 14 14 
# 00ac0 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t15 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 00ac1 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t15 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t15 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 00ac7 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t15 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x18), Register(0x14)], resolved: None }
23 18 14 
# 00aca Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t15 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t17 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t17 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t18 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 00acb Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t18 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000048=72)], resolved: None }
20 14 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 00ad1 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00ad2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x10)], resolved: None }
30 10 14 10 
# 00ad6 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_72_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_72_t19 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00ad7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_72_t19 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x00=0)], resolved: None }
04 3c 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_t16] <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t19 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }"] }
# 00ada Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_72_t16] <- inline_RpnCalc_handle_RpnCalc_push_pending_72_t19 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x3c), Register(0x10)], resolved: None }
06 3c 10 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# 00add Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_end_0)], resolved: None }
70 e1 0a 00 
# :inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_72_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_72_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_72_function_end_RpnCalc_push_pending\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_72_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_72_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_72_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 00ae1 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 d4 0c 00 
# :RpnCalc_handle_if_else_7_39
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_7_39
# t98 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 00ae5 Instruction { source: "t98 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# t99 <- 0n99/0x63u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }", "Number(U8, 99)", "Number(U8, 99)"] }
# 00ae8 Instruction { source: "t99 <- 0n99/0x63u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\", \"Number(U8, 99)\", \"Number(U8, 99)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x63=99)], resolved: None }
04 3c 63 
# if t98 == t99 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }"] }
# 00aeb Instruction { source: "if t98 == t99 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\"] }", opcode: Cmp8, args: [Register(0x1d), Register(0x3c)], resolved: None }
15 1d 3c 
# 00aee Instruction { source: "if t98 == t99 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_8_40)], resolved: None }
72 f6 0a 00 
# 00af2 Instruction { source: "if t98 == t99 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_8_41)], resolved: None }
70 2c 0b 00 
# :RpnCalc_handle_if_true_8_40
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_8_40
# t101 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# 00af6 Instruction { source: "t101 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# inline_RpnCalc_handle_RpnCalc_init_59_c <- t101 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_59_c <- t101 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_59_t0 <- inline_RpnCalc_handle_RpnCalc_init_59_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_59_t0 <- inline_RpnCalc_handle_RpnCalc_init_59_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"s\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_59_s <- inline_RpnCalc_handle_RpnCalc_init_59_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 00af9 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_59_s <- inline_RpnCalc_handle_RpnCalc_init_59_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"s\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x10), Register(0x14)], resolved: None }
21 10 14 
# inline_RpnCalc_handle_RpnCalc_init_59_t2 <- inline_RpnCalc_handle_RpnCalc_init_59_s U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Ident(\"s\")", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_59_t2 <- inline_RpnCalc_handle_RpnCalc_init_59_s U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] }) }\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Ident(\\\"s\\\")\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_s <- inline_RpnCalc_handle_RpnCalc_init_59_t2 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_s <- inline_RpnCalc_handle_RpnCalc_init_59_t2 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] }) }\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t1 <- inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t1 <- inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t2 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00afc Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t2 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t0 <- inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t1 Add inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t2
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00b02 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t0 <- inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t1 Add inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b03 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t0 <- inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t1 Add inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00b07 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t0 <- inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t1 Add inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t3 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 00b08 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t3 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t0] <- inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t3 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }"] }
# 00b0e Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t0] <- inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x18), Register(0x14)], resolved: None }
23 18 14 
# 00b11 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t0] <- inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_function_end_stack_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_function_end_stack_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_function_end_stack_init)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_function_end_stack_init
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_init_59_inline_RpnCalc_init_stack_init_58_function_end_stack_init
# inline_RpnCalc_handle_RpnCalc_init_59_t4 <- inline_RpnCalc_handle_RpnCalc_init_59_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_59_t4 <- inline_RpnCalc_handle_RpnCalc_init_59_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_59_t5 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 00b12 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_59_t5 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000044=68)], resolved: None }
20 14 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_init_59_t3 <- inline_RpnCalc_handle_RpnCalc_init_59_t4 Add inline_RpnCalc_handle_RpnCalc_init_59_t5
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 00b18 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_59_t3 <- inline_RpnCalc_handle_RpnCalc_init_59_t4 Add inline_RpnCalc_handle_RpnCalc_init_59_t5\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b19 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_59_t3 <- inline_RpnCalc_handle_RpnCalc_init_59_t4 Add inline_RpnCalc_handle_RpnCalc_init_59_t5\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x10)], resolved: None }
30 10 14 10 
# 00b1d Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_59_t3 <- inline_RpnCalc_handle_RpnCalc_init_59_t4 Add inline_RpnCalc_handle_RpnCalc_init_59_t5\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_init_59_t6 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 00b1e Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_59_t6 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000000=0)], resolved: None }
20 14 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_init_59_t3] <- inline_RpnCalc_handle_RpnCalc_init_59_t6 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 00b24 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_init_59_t3] <- inline_RpnCalc_handle_RpnCalc_init_59_t6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x14), Register(0x10)], resolved: None }
23 14 10 
# 00b27 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_init_59_t3] <- inline_RpnCalc_handle_RpnCalc_init_59_t6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_init_59_function_end_RpnCalc_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_init_59_function_end_RpnCalc_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_init_59_function_end_RpnCalc_init)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_init_59_function_end_RpnCalc_init
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_init_59_function_end_RpnCalc_init
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 00b28 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 d4 0c 00 
# :RpnCalc_handle_if_else_8_41
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_8_41
# t102 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 00b2c Instruction { source: "t102 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# t103 <- 0n100/0x64u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }", "Number(U8, 100)", "Number(U8, 100)"] }
# 00b2f Instruction { source: "t103 <- 0n100/0x64u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\", \"Number(U8, 100)\", \"Number(U8, 100)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x64=100)], resolved: None }
04 3c 64 
# if t102 == t103 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }"] }
# 00b32 Instruction { source: "if t102 == t103 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\"] }", opcode: Cmp8, args: [Register(0x1d), Register(0x3c)], resolved: None }
15 1d 3c 
# 00b35 Instruction { source: "if t102 == t103 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_9_42)], resolved: None }
72 3d 0b 00 
# 00b39 Instruction { source: "if t102 == t103 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_9_43)], resolved: None }
70 0c 0c 00 
# :RpnCalc_handle_if_true_9_42
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_9_42
# i <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 00b3d Instruction { source: "i <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x00=0)], resolved: None }
04 1d 00 
# :RpnCalc_handle_while_predicate_44
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# RpnCalc_handle_while_predicate_44
# t104 <- i U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t104 <- i U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# t105 <- stack_count U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }", "Ident(\"stack_count\")", "Ident(\"stack_count\")"] }
# 00b40 Instruction { source: "t105 <- stack_count U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\", \"Ident(\\\"stack_count\\\")\", \"Ident(\\\"stack_count\\\")\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x3c)], resolved: None }
0b 3e 3c 
# if t104 < t105 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }"] }
# 00b43 Instruction { source: "if t104 < t105 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: Cmp8, args: [Register(0x3c), Register(0x1d)], resolved: None }
15 3c 1d 
# 00b46 Instruction { source: "if t104 < t105 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_while_end_46)], resolved: None }
71 08 0c 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t104 < t105 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_while_body_45)], resolved: None }
# :RpnCalc_handle_while_body_45
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# RpnCalc_handle_while_body_45
# t107 <- i U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t107 <- i U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# None <= call print_dec8(t107,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })"] }
# 00b4a Instruction { source: "Arg0[a]=t107 None <= call print_dec8(t107,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x00)], resolved: None }
0b 1d 00 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69}
# Registers used by callee tree: {32, 33, 34, 136}
# Registers to save: [32, 33, 34]
# 00b4d Instruction { source: "Saving reg0x22 before None <= call print_dec8(t107,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x22)], resolved: None }
09 22 
# 00b4f Instruction { source: "Saving reg0x21 before None <= call print_dec8(t107,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x21)], resolved: None }
09 21 
# 00b51 Instruction { source: "Saving reg0x20 before None <= call print_dec8(t107,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x20)], resolved: None }
09 20 
# 00b53 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00b59 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 63 0b 00 00 
# 00b5f Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: JmpImm, args: [Label24(:print_dec8)], resolved: None }
70 a9 21 00 
# 00b63 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 00b69 Instruction { source: "Restoring reg0x20 after None <= call print_dec8(t107,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x20)], resolved: None }
0a 20 
# 00b6b Instruction { source: "Restoring reg0x21 after None <= call print_dec8(t107,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x21)], resolved: None }
0a 21 
# 00b6d Instruction { source: "Restoring reg0x22 after None <= call print_dec8(t107,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x22)], resolved: None }
0a 22 
# t109 <- 0n58/0x3au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })", "Number(U8, 58)", "Number(U8, 58)"] }
# 00b6f Instruction { source: "t109 <- 0n58/0x3au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] })\", \"Number(U8, 58)\", \"Number(U8, 58)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x3a=58)], resolved: None }
04 3c 3a 
# inline_RpnCalc_handle_putc_29_c <- t109 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_29_c <- t109 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] })\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_putc_29_t1 <- inline_RpnCalc_handle_putc_29_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_29_t1 <- inline_RpnCalc_handle_putc_29_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x3c)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_29_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00b72 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x3c)], resolved: None }
68 3c 
# goto inline_RpnCalc_handle_putc_29_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_29_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_29_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_29_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_29_function_end_putc
# t112 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 00b74 Instruction { source: "t112 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x14)], resolved: None }
21 40 14 
# t114 <- i U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t114 <- i U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# t113 U32 <- t114 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }"] }
# 00b77 Instruction { source: "Zero-pad for t113 U32 <- t114 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000000=0)], resolved: None }
20 38 00 00 00 00 
# 00b7d Instruction { source: "t113 U32 <- t114 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x38)], resolved: None }
0b 1d 38 
# inline_RpnCalc_handle_stack_get_57_s <- t112 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })"] }
# 00b80 Instruction { source: "inline_RpnCalc_handle_stack_get_57_s <- t112 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_get_57_n <- t113 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })"] }
# 00b83 Instruction { source: "inline_RpnCalc_handle_stack_get_57_n <- t113 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\"] }", opcode: Copy32, args: [Register(0x38), Register(0x14)], resolved: None }
21 38 14 
# inline_RpnCalc_handle_stack_get_57_t0 <- inline_RpnCalc_handle_stack_get_57_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_57_t0 <- inline_RpnCalc_handle_stack_get_57_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_get_57_values <- inline_RpnCalc_handle_stack_get_57_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_57_values <- inline_RpnCalc_handle_stack_get_57_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_get_57_t3 <- inline_RpnCalc_handle_stack_get_57_values U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_57_t3 <- inline_RpnCalc_handle_stack_get_57_values U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_get_57_t5 <- inline_RpnCalc_handle_stack_get_57_n U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_57_t5 <- inline_RpnCalc_handle_stack_get_57_n U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_get_57_t4 <- inline_RpnCalc_handle_stack_get_57_t5 Add inline_RpnCalc_handle_stack_get_57_t5
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00b86 Instruction { source: "inline_RpnCalc_handle_stack_get_57_t4 <- inline_RpnCalc_handle_stack_get_57_t5 Add inline_RpnCalc_handle_stack_get_57_t5\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b87 Instruction { source: "inline_RpnCalc_handle_stack_get_57_t4 <- inline_RpnCalc_handle_stack_get_57_t5 Add inline_RpnCalc_handle_stack_get_57_t5\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x14), Register(0x14)], resolved: None }
30 14 14 14 
# 00b8b Instruction { source: "inline_RpnCalc_handle_stack_get_57_t4 <- inline_RpnCalc_handle_stack_get_57_t5 Add inline_RpnCalc_handle_stack_get_57_t5\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_get_57_t4 <- inline_RpnCalc_handle_stack_get_57_t4 Add inline_RpnCalc_handle_stack_get_57_t4
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))"] }
# 00b8c Instruction { source: "inline_RpnCalc_handle_stack_get_57_t4 <- inline_RpnCalc_handle_stack_get_57_t4 Add inline_RpnCalc_handle_stack_get_57_t4\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b8d Instruction { source: "inline_RpnCalc_handle_stack_get_57_t4 <- inline_RpnCalc_handle_stack_get_57_t4 Add inline_RpnCalc_handle_stack_get_57_t4\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x14), Register(0x14)], resolved: None }
30 14 14 14 
# 00b91 Instruction { source: "inline_RpnCalc_handle_stack_get_57_t4 <- inline_RpnCalc_handle_stack_get_57_t4 Add inline_RpnCalc_handle_stack_get_57_t4\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_get_57_t2 <- inline_RpnCalc_handle_stack_get_57_t3 Add inline_RpnCalc_handle_stack_get_57_t4
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))"] }
# 00b92 Instruction { source: "inline_RpnCalc_handle_stack_get_57_t2 <- inline_RpnCalc_handle_stack_get_57_t3 Add inline_RpnCalc_handle_stack_get_57_t4\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b93 Instruction { source: "inline_RpnCalc_handle_stack_get_57_t2 <- inline_RpnCalc_handle_stack_get_57_t3 Add inline_RpnCalc_handle_stack_get_57_t4\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x14), Register(0x14)], resolved: None }
30 18 14 14 
# 00b97 Instruction { source: "inline_RpnCalc_handle_stack_get_57_t2 <- inline_RpnCalc_handle_stack_get_57_t3 Add inline_RpnCalc_handle_stack_get_57_t4\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_get_57_t1 <- mem[inline_RpnCalc_handle_stack_get_57_t2] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))"] }
# 00b98 Instruction { source: "inline_RpnCalc_handle_stack_get_57_t1 <- mem[inline_RpnCalc_handle_stack_get_57_t2] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# t111 <- inline_RpnCalc_handle_stack_get_57_t1 U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }"] }
# optimized away noop copy Instruction { source: "t111 <- inline_RpnCalc_handle_stack_get_57_t1 U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# goto inline_RpnCalc_handle_stack_get_57_function_end_stack_get
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_get_57_function_end_stack_get\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_get_57_function_end_stack_get)], resolved: None }
# :inline_RpnCalc_handle_stack_get_57_function_end_stack_get
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_get_57_function_end_stack_get
# None <= call print_dec32(t111,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })"] }
# 00b9b Instruction { source: "Arg0[a]=t111 None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x00)], resolved: None }
21 14 00 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 136, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34]
# 00b9e Instruction { source: "Saving reg0x22 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x22)], resolved: None }
09 22 
# 00ba0 Instruction { source: "Saving reg0x21 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x21)], resolved: None }
09 21 
# 00ba2 Instruction { source: "Saving reg0x20 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x20)], resolved: None }
09 20 
# 00ba4 Instruction { source: "Saving reg0x1d before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x1d)], resolved: None }
09 1d 
# 00ba6 Instruction { source: "Saving reg0x1c before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x1c)], resolved: None }
09 1c 
# 00ba8 Instruction { source: "Saving reg0x1b before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x1b)], resolved: None }
09 1b 
# 00baa Instruction { source: "Saving reg0x1a before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x1a)], resolved: None }
09 1a 
# 00bac Instruction { source: "Saving reg0x19 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x19)], resolved: None }
09 19 
# 00bae Instruction { source: "Saving reg0x18 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x18)], resolved: None }
09 18 
# 00bb0 Instruction { source: "Saving reg0x17 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x17)], resolved: None }
09 17 
# 00bb2 Instruction { source: "Saving reg0x16 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x16)], resolved: None }
09 16 
# 00bb4 Instruction { source: "Saving reg0x15 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x15)], resolved: None }
09 15 
# 00bb6 Instruction { source: "Saving reg0x14 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x14)], resolved: None }
09 14 
# 00bb8 Instruction { source: "Saving reg0x13 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x13)], resolved: None }
09 13 
# 00bba Instruction { source: "Saving reg0x12 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x12)], resolved: None }
09 12 
# 00bbc Instruction { source: "Saving reg0x11 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x11)], resolved: None }
09 11 
# 00bbe Instruction { source: "Saving reg0x10 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x10)], resolved: None }
09 10 
# 00bc0 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00bc6 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c d0 0b 00 00 
# 00bcc Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 c9 1f 00 
# 00bd0 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 00bd6 Instruction { source: "Restoring reg0x10 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x10)], resolved: None }
0a 10 
# 00bd8 Instruction { source: "Restoring reg0x11 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x11)], resolved: None }
0a 11 
# 00bda Instruction { source: "Restoring reg0x12 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x12)], resolved: None }
0a 12 
# 00bdc Instruction { source: "Restoring reg0x13 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x13)], resolved: None }
0a 13 
# 00bde Instruction { source: "Restoring reg0x14 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x14)], resolved: None }
0a 14 
# 00be0 Instruction { source: "Restoring reg0x15 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x15)], resolved: None }
0a 15 
# 00be2 Instruction { source: "Restoring reg0x16 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x16)], resolved: None }
0a 16 
# 00be4 Instruction { source: "Restoring reg0x17 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x17)], resolved: None }
0a 17 
# 00be6 Instruction { source: "Restoring reg0x18 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x18)], resolved: None }
0a 18 
# 00be8 Instruction { source: "Restoring reg0x19 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x19)], resolved: None }
0a 19 
# 00bea Instruction { source: "Restoring reg0x1a after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x1a)], resolved: None }
0a 1a 
# 00bec Instruction { source: "Restoring reg0x1b after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x1b)], resolved: None }
0a 1b 
# 00bee Instruction { source: "Restoring reg0x1c after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x1c)], resolved: None }
0a 1c 
# 00bf0 Instruction { source: "Restoring reg0x1d after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x1d)], resolved: None }
0a 1d 
# 00bf2 Instruction { source: "Restoring reg0x20 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x20)], resolved: None }
0a 20 
# 00bf4 Instruction { source: "Restoring reg0x21 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x21)], resolved: None }
0a 21 
# 00bf6 Instruction { source: "Restoring reg0x22 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x22)], resolved: None }
0a 22 
# t116 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 00bf8 Instruction { source: "t116 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x0a=10)], resolved: None }
04 3c 0a 
# inline_RpnCalc_handle_putc_30_c <- t116 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_30_c <- t116 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_putc_30_t1 <- inline_RpnCalc_handle_putc_30_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_30_t1 <- inline_RpnCalc_handle_putc_30_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x3c)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_30_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00bfb Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x3c)], resolved: None }
68 3c 
# goto inline_RpnCalc_handle_putc_30_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_30_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_30_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_30_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_30_function_end_putc
# t117 <- i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t117 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# t118 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00bfd Instruction { source: "t118 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x01=1)], resolved: None }
04 3c 01 
# i <- t117 Add t118
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))"] }
# 00c00 Instruction { source: "i <- t117 Add t118\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x3c), Register(0x1d)], resolved: None }
14 1d 3c 1d 
# goto RpnCalc_handle_while_predicate_44
# 	SourceContext { contexts: [] }
# 00c04 Instruction { source: "goto RpnCalc_handle_while_predicate_44\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_while_predicate_44)], resolved: None }
70 40 0b 00 
# :RpnCalc_handle_while_end_46
# 	SourceContext { contexts: [] }
# RpnCalc_handle_while_end_46
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 00c08 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 d4 0c 00 
# :RpnCalc_handle_if_else_9_43
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_9_43
# t119 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 00c0c Instruction { source: "t119 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# t120 <- 0n57/0x39u8 
# 	SourceContext { contexts: ["Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Number(U8, 57)", "Number(U8, 57)"] }
# 00c0f Instruction { source: "t120 <- 0n57/0x39u8 \n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Number(U8, 57)\", \"Number(U8, 57)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x39=57)], resolved: None }
04 3c 39 
# if t119 <= t120 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48'
# 	SourceContext { contexts: ["Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }"] }
# 00c12 Instruction { source: "if t119 <= t120 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48'\n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: Cmp8, args: [Register(0x1d), Register(0x3c)], resolved: None }
15 1d 3c 
# 00c15 Instruction { source: "if t119 <= t120 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48'\n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_true_10_47)], resolved: None }
71 1d 0c 00 
# 00c19 Instruction { source: "if t119 <= t120 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48'\n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_10_48)], resolved: None }
70 d4 0c 00 
# :RpnCalc_handle_if_true_10_47
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_10_47
# t121 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 00c1d Instruction { source: "t121 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# t122 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }", "Number(U8, 48)", "Number(U8, 48)"] }
# 00c20 Instruction { source: "t122 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x30=48)], resolved: None }
04 3c 30 
# if t121 >= t122 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }"] }
# 00c23 Instruction { source: "if t121 >= t122 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\"] }", opcode: Cmp8, args: [Register(0x3c), Register(0x1d)], resolved: None }
15 3c 1d 
# 00c26 Instruction { source: "if t121 >= t122 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_true_0_50)], resolved: None }
71 2e 0c 00 
# 00c2a Instruction { source: "if t121 >= t122 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_0_51)], resolved: None }
70 d0 0c 00 
# :RpnCalc_handle_if_true_0_50
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_50
# t124 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 00c2e Instruction { source: "t124 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# t125 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 00c31 Instruction { source: "t125 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000048=72)], resolved: None }
20 14 48 00 00 00 
# t123 <- t124 Add t125
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 00c37 Instruction { source: "t123 <- t124 Add t125\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00c38 Instruction { source: "t123 <- t124 Add t125\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x10)], resolved: None }
30 10 14 10 
# 00c3c Instruction { source: "t123 <- t124 Add t125\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t126 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 00c3d Instruction { source: "t126 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x01=1)], resolved: None }
04 3c 01 
# mem[t123] <- t126 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }"] }
# 00c40 Instruction { source: "mem[t123] <- t126 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\"] }", opcode: Store8, args: [Register(0x3c), Register(0x10)], resolved: None }
06 3c 10 
# t128 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 00c43 Instruction { source: "t128 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# t129 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 00c46 Instruction { source: "t129 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000044=68)], resolved: None }
20 14 44 00 00 00 
# t127 <- t128 Add t129
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 00c4c Instruction { source: "t127 <- t128 Add t129\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00c4d Instruction { source: "t127 <- t128 Add t129\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x24)], resolved: None }
30 10 14 24 
# 00c51 Instruction { source: "t127 <- t128 Add t129\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t133 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 00c52 Instruction { source: "t133 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# t134 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 00c55 Instruction { source: "t134 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000044=68)], resolved: None }
20 14 44 00 00 00 
# t132 <- t133 Add t134
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 00c5b Instruction { source: "t132 <- t133 Add t134\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00c5c Instruction { source: "t132 <- t133 Add t134\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x10)], resolved: None }
30 10 14 10 
# 00c60 Instruction { source: "t132 <- t133 Add t134\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t131 <- mem[t132] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 00c61 Instruction { source: "t131 <- mem[t132] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x10), Register(0x10)], resolved: None }
22 10 10 
# inline_RpnCalc_handle_mul32_by10_15_a <- t131 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_a <- t131 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_15_t0 <- inline_RpnCalc_handle_mul32_by10_15_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t0 <- inline_RpnCalc_handle_mul32_by10_15_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_15_t1 <- inline_RpnCalc_handle_mul32_by10_15_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# 00c64 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t1 <- inline_RpnCalc_handle_mul32_by10_15_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x14)], resolved: None }
21 10 14 
# inline_RpnCalc_handle_mul32_by10_15_a <- inline_RpnCalc_handle_mul32_by10_15_t0 Add inline_RpnCalc_handle_mul32_by10_15_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))"] }
# 00c67 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_a <- inline_RpnCalc_handle_mul32_by10_15_t0 Add inline_RpnCalc_handle_mul32_by10_15_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00c68 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_a <- inline_RpnCalc_handle_mul32_by10_15_t0 Add inline_RpnCalc_handle_mul32_by10_15_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x10)], resolved: None }
30 10 14 10 
# 00c6c Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_a <- inline_RpnCalc_handle_mul32_by10_15_t0 Add inline_RpnCalc_handle_mul32_by10_15_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_by10_15_t2 <- inline_RpnCalc_handle_mul32_by10_15_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t2 <- inline_RpnCalc_handle_mul32_by10_15_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_15_t3 <- inline_RpnCalc_handle_mul32_by10_15_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# 00c6d Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t3 <- inline_RpnCalc_handle_mul32_by10_15_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x14)], resolved: None }
21 10 14 
# inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t2 Add inline_RpnCalc_handle_mul32_by10_15_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))"] }
# 00c70 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t2 Add inline_RpnCalc_handle_mul32_by10_15_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00c71 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t2 Add inline_RpnCalc_handle_mul32_by10_15_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x14)], resolved: None }
30 10 14 14 
# 00c75 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t2 Add inline_RpnCalc_handle_mul32_by10_15_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_by10_15_t4 <- inline_RpnCalc_handle_mul32_by10_15_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t4 <- inline_RpnCalc_handle_mul32_by10_15_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_15_t5 <- inline_RpnCalc_handle_mul32_by10_15_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# 00c76 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t5 <- inline_RpnCalc_handle_mul32_by10_15_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x20)], resolved: None }
21 14 20 
# inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t4 Add inline_RpnCalc_handle_mul32_by10_15_t5
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))"] }
# 00c79 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t4 Add inline_RpnCalc_handle_mul32_by10_15_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00c7a Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t4 Add inline_RpnCalc_handle_mul32_by10_15_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x20), Register(0x14)], resolved: None }
30 14 20 14 
# 00c7e Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t4 Add inline_RpnCalc_handle_mul32_by10_15_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_by10_15_t7 <- inline_RpnCalc_handle_mul32_by10_15_b U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t7 <- inline_RpnCalc_handle_mul32_by10_15_b U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_15_t8 <- inline_RpnCalc_handle_mul32_by10_15_a U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t8 <- inline_RpnCalc_handle_mul32_by10_15_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_15_t6 <- inline_RpnCalc_handle_mul32_by10_15_t7 Add inline_RpnCalc_handle_mul32_by10_15_t8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))"] }
# 00c7f Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t6 <- inline_RpnCalc_handle_mul32_by10_15_t7 Add inline_RpnCalc_handle_mul32_by10_15_t8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00c80 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t6 <- inline_RpnCalc_handle_mul32_by10_15_t7 Add inline_RpnCalc_handle_mul32_by10_15_t8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x10), Register(0x10)], resolved: None }
30 14 10 10 
# 00c84 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t6 <- inline_RpnCalc_handle_mul32_by10_15_t7 Add inline_RpnCalc_handle_mul32_by10_15_t8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t130 <- inline_RpnCalc_handle_mul32_by10_15_t6 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }"] }
# optimized away noop copy Instruction { source: "t130 <- inline_RpnCalc_handle_mul32_by10_15_t6 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# goto inline_RpnCalc_handle_mul32_by10_15_function_end_mul32_by10
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_by10_15_function_end_mul32_by10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_by10_15_function_end_mul32_by10)], resolved: None }
# :inline_RpnCalc_handle_mul32_by10_15_function_end_mul32_by10
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_by10_15_function_end_mul32_by10
# mem[t127] <- t130 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }"] }
# 00c85 Instruction { source: "mem[t127] <- t130 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\"] }", opcode: Store32_1, args: [Register(0x10), Register(0x24)], resolved: None }
23 10 24 
# 00c88 Instruction { source: "mem[t127] <- t130 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t136 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 00c89 Instruction { source: "t136 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# t137 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 00c8c Instruction { source: "t137 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000044=68)], resolved: None }
20 14 44 00 00 00 
# t135 <- t136 Add t137
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 00c92 Instruction { source: "t135 <- t136 Add t137\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00c93 Instruction { source: "t135 <- t136 Add t137\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x10)], resolved: None }
30 10 14 10 
# 00c97 Instruction { source: "t135 <- t136 Add t137\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t141 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 00c98 Instruction { source: "t141 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x14)], resolved: None }
21 18 14 
# t142 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 00c9b Instruction { source: "t142 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000044=68)], resolved: None }
20 18 44 00 00 00 
# t140 <- t141 Add t142
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 00ca1 Instruction { source: "t140 <- t141 Add t142\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00ca2 Instruction { source: "t140 <- t141 Add t142\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00ca6 Instruction { source: "t140 <- t141 Add t142\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t139 <- mem[t140] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 00ca7 Instruction { source: "t139 <- mem[t140] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# t145 <- ch U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 00caa Instruction { source: "t145 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x3d)], resolved: None }
0b 1c 3d 
# t146 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 00cad Instruction { source: "t146 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x30=48)], resolved: None }
04 1c 30 
# t144 <- t145 Subtract t146
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))"] }
# 00cb0 Instruction { source: "t144 <- t145 Subtract t146\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x00)], resolved: None }
0b 1c 00 
# 00cb3 Instruction { source: "t144 <- t145 Subtract t146\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00cb5 Instruction { source: "t144 <- t145 Subtract t146\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x3d), Register(0x00), Register(0x3d)], resolved: None }
14 3d 00 3d 
# t143 U32 <- t144 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }"] }
# 00cb9 Instruction { source: "Zero-pad for t143 U32 <- t144 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# 00cbf Instruction { source: "t143 U32 <- t144 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x18)], resolved: None }
0b 3d 18 
# t138 <- t139 Add t143
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })"] }
# 00cc2 Instruction { source: "t138 <- t139 Add t143\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00cc3 Instruction { source: "t138 <- t139 Add t143\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00cc7 Instruction { source: "t138 <- t139 Add t143\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[t135] <- t138 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }"] }
# 00cc8 Instruction { source: "mem[t135] <- t138 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\"] }", opcode: Store32_1, args: [Register(0x14), Register(0x10)], resolved: None }
23 14 10 
# 00ccb Instruction { source: "mem[t135] <- t138 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto RpnCalc_handle_if_end_49
# 	SourceContext { contexts: [] }
# 00ccc Instruction { source: "goto RpnCalc_handle_if_end_49\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_49)], resolved: None }
70 d0 0c 00 
# :RpnCalc_handle_if_else_0_51
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_51
# :RpnCalc_handle_if_end_49
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_49
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 00cd0 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 d4 0c 00 
# :RpnCalc_handle_if_else_10_48
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_10_48
# :RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_23
# t147 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 1)) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 00cd4 Instruction { source: "t147 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 1)) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x01=1)], resolved: None }
04 1d 01 
# return Some(t147)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 1)) }"] }
# 00cd7 Instruction { source: "return Some(t147)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x00)], resolved: None }
0b 1d 00 
# 00cda Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_RpnCalc_handle
# 	SourceContext { contexts: [] }
# function_end_RpnCalc_handle
# Unreachable
# 	SourceContext { contexts: [] }
# 00cdc Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :RpnCalc_run
# Ret Some(U8)
# Arg0=calc
# Var calc (Arg0 calc Ptr(Struct("RpnCalc"))) Reg(U32) Some([72, 73, 74, 75])
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([76])
# Var inline_RpnCalc_run_getchar_3_t0 (t0 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))) Reg(U8) Some([76])
# Var inline_RpnCalc_run_getchar_3_t1 (t1 Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([76])
# Var inline_RpnCalc_run_getchar_3_t2 (t2 Number(U8, 1)) Reg(U8) Some([77])
# Var inline_RpnCalc_run_getchar_3_t3 (t3 Number(U8, 0)) Reg(U8) Some([77])
# Var inline_RpnCalc_run_getchar_3_t4 (t4 TtyIn) Reg(U8) Some([76])
# Var result (Local result Number(U8) Reg(U8)) Reg(U8) Some([76])
# Var t0 (t0 Number(U8, 0)) Reg(U8) Some([76])
# Var t1 (t1 Number(U8, 0)) Reg(U8) Some([77])
# Var t2 (t2 Ident("calc")) Reg(U32) Some([72, 73, 74, 75])
# Var t3 (t3 Ident("ch")) Reg(U8) Some([76])
# Var t4 (t4 Ident("result")) Reg(U8) Some([76])
# Var t5 (t5 Number(U8, 0)) Reg(U8) Some([77])
# Var t6 (t6 Number(U8, 0)) Reg(U8) Some([78])
# 00ce1 Instruction { source: "Save function parameter 'calc' registers [0, 1, 2, 3] to locals [72, 73, 74, 75].", opcode: Copy32, args: [Register(0x00), Register(0x48)], resolved: None }
21 00 48 
# :RpnCalc_run_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }"] }
# RpnCalc_run_while_predicate_0
# t0 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00ce4 Instruction { source: "t0 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x4c), Constant8(0x00=0)], resolved: None }
04 4c 00 
# t1 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00ce7 Instruction { source: "t1 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x4d), Constant8(0x00=0)], resolved: None }
04 4d 00 
# if t0 == t1 then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }"] }
# 00cea Instruction { source: "if t0 == t1 then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x4c), Register(0x4d)], resolved: None }
15 4c 4d 
# 00ced Instruction { source: "if t0 == t1 then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_run_while_body_1)], resolved: None }
72 f5 0c 00 
# 00cf1 Instruction { source: "if t0 == t1 then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_run_while_end_2)], resolved: None }
70 4f 0d 00 
# :RpnCalc_run_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }"] }
# RpnCalc_run_while_body_1
# :inline_RpnCalc_run_getchar_3_getchar_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_RpnCalc_run_getchar_3_getchar_while_predicate_0
# Some(inline_RpnCalc_run_getchar_3_t1) <= call io_ready_to_read()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Call(Call { function: \"io_ready_to_read\", parameters: [] })", "Call(Call { function: \"io_ready_to_read\", parameters: [] })"] }
# 00cf5 Instruction { source: "ReadyToRead", opcode: IoReadyToRead, args: [Register(0x4c)], resolved: None }
79 4c 
# inline_RpnCalc_run_getchar_3_t2 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00cf7 Instruction { source: "inline_RpnCalc_run_getchar_3_t2 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x4d), Constant8(0x01=1)], resolved: None }
04 4d 01 
# inline_RpnCalc_run_getchar_3_t0 <- inline_RpnCalc_run_getchar_3_t1 BitwiseAnd inline_RpnCalc_run_getchar_3_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))"] }
# 00cfa Instruction { source: "inline_RpnCalc_run_getchar_3_t0 <- inline_RpnCalc_run_getchar_3_t1 BitwiseAnd inline_RpnCalc_run_getchar_3_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\"] }", opcode: And8, args: [Register(0x4c), Register(0x4d), Register(0x4c)], resolved: None }
1b 4c 4d 4c 
# inline_RpnCalc_run_getchar_3_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00cfe Instruction { source: "inline_RpnCalc_run_getchar_3_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x4d), Constant8(0x00=0)], resolved: None }
04 4d 00 
# if inline_RpnCalc_run_getchar_3_t0 == inline_RpnCalc_run_getchar_3_t3 then 'inline_RpnCalc_run_getchar_3_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_3_getchar_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }"] }
# 00d01 Instruction { source: "if inline_RpnCalc_run_getchar_3_t0 == inline_RpnCalc_run_getchar_3_t3 then 'inline_RpnCalc_run_getchar_3_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_3_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x4c), Register(0x4d)], resolved: None }
15 4c 4d 
# 00d04 Instruction { source: "if inline_RpnCalc_run_getchar_3_t0 == inline_RpnCalc_run_getchar_3_t3 then 'inline_RpnCalc_run_getchar_3_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_3_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_run_getchar_3_getchar_while_body_1)], resolved: None }
72 0c 0d 00 
# 00d08 Instruction { source: "if inline_RpnCalc_run_getchar_3_t0 == inline_RpnCalc_run_getchar_3_t3 then 'inline_RpnCalc_run_getchar_3_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_3_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_3_getchar_while_end_2)], resolved: None }
70 10 0d 00 
# :inline_RpnCalc_run_getchar_3_getchar_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_RpnCalc_run_getchar_3_getchar_while_body_1
# goto inline_RpnCalc_run_getchar_3_getchar_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# 00d0c Instruction { source: "goto inline_RpnCalc_run_getchar_3_getchar_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_3_getchar_while_predicate_0)], resolved: None }
70 f5 0c 00 
# :inline_RpnCalc_run_getchar_3_getchar_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_RpnCalc_run_getchar_3_getchar_while_end_2
# inline_RpnCalc_run_getchar_3_t4 <- ttyin
# 	SourceContext { contexts: ["Return { value: Some(TtyIn) }", "TtyIn", "TtyIn"] }
# 00d10 Instruction { source: "inline_RpnCalc_run_getchar_3_t4 <- ttyin\n\tSourceContext { contexts: [\"Return { value: Some(TtyIn) }\", \"TtyIn\", \"TtyIn\"] }", opcode: In0, args: [Register(0x4c)], resolved: None }
60 4c 
# ch <- inline_RpnCalc_run_getchar_3_t4 U8
# 	SourceContext { contexts: ["Return { value: Some(TtyIn) }"] }
# optimized away noop copy Instruction { source: "ch <- inline_RpnCalc_run_getchar_3_t4 U8\n\tSourceContext { contexts: [\"Return { value: Some(TtyIn) }\"] }", opcode: Copy8, args: [Register(0x4c), Register(0x4c)], resolved: None }
# goto inline_RpnCalc_run_getchar_3_function_end_getchar
# 	SourceContext { contexts: ["Return { value: Some(TtyIn) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_run_getchar_3_function_end_getchar\n\tSourceContext { contexts: [\"Return { value: Some(TtyIn) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_3_function_end_getchar)], resolved: None }
# :inline_RpnCalc_run_getchar_3_function_end_getchar
# 	SourceContext { contexts: [] }
# inline_RpnCalc_run_getchar_3_function_end_getchar
# t2 <- calc U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }", "Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })", "Ident(\"calc\")", "Ident(\"calc\")"] }
# optimized away noop copy Instruction { source: "t2 <- calc U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\", \"Ident(\\\"calc\\\")\", \"Ident(\\\"calc\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# t3 <- ch U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }", "Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t3 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x4c), Register(0x4c)], resolved: None }
# Some(result) <= call RpnCalc_handle(t2,t3,)
# 	SourceContext { contexts: ["Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }", "Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })"] }
# 00d12 Instruction { source: "Arg0[c]=t2 Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Copy32, args: [Register(0x48), Register(0x00)], resolved: None }
21 48 00 
# 00d15 Instruction { source: "Arg1[ch]=t3 Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x4c), Register(0x04)], resolved: None }
0b 4c 04 
# Registers used by this function: {72, 73, 74, 75, 76, 77, 78}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 00d18 Instruction { source: "PseudoCall(Label24(:RpnCalc_handle))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00d1e Instruction { source: "PseudoCall(Label24(:RpnCalc_handle))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 28 0d 00 00 
# 00d24 Instruction { source: "PseudoCall(Label24(:RpnCalc_handle))", opcode: JmpImm, args: [Label24(:RpnCalc_handle)], resolved: None }
70 22 00 00 
# 00d28 Instruction { source: "PseudoCall(Label24(:RpnCalc_handle))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 00d2e Instruction { source: "Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x00), Register(0x4c)], resolved: None }
0b 00 4c 
# t4 <- result U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }", "Ident(\"result\")", "Ident(\"result\")"] }
# optimized away noop copy Instruction { source: "t4 <- result U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\", \"Ident(\\\"result\\\")\", \"Ident(\\\"result\\\")\"] }", opcode: Copy8, args: [Register(0x4c), Register(0x4c)], resolved: None }
# t5 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00d31 Instruction { source: "t5 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x4d), Constant8(0x00=0)], resolved: None }
04 4d 00 
# if t4 == t5 then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }"] }
# 00d34 Instruction { source: "if t4 == t5 then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x4c), Register(0x4d)], resolved: None }
15 4c 4d 
# 00d37 Instruction { source: "if t4 == t5 then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_run_if_true_0_4)], resolved: None }
72 3f 0d 00 
# 00d3b Instruction { source: "if t4 == t5 then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_run_if_else_0_5)], resolved: None }
70 4b 0d 00 
# :RpnCalc_run_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }"] }
# RpnCalc_run_if_true_0_4
# t6 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00d3f Instruction { source: "t6 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x4e), Constant8(0x00=0)], resolved: None }
04 4e 00 
# return Some(t6)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 00d42 Instruction { source: "return Some(t6)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x4e), Register(0x00)], resolved: None }
0b 4e 00 
# 00d45 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto RpnCalc_run_if_end_3
# 	SourceContext { contexts: [] }
# 00d47 Instruction { source: "goto RpnCalc_run_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_run_if_end_3)], resolved: None }
70 4b 0d 00 
# :RpnCalc_run_if_else_0_5
# 	SourceContext { contexts: [] }
# RpnCalc_run_if_else_0_5
# :RpnCalc_run_if_end_3
# 	SourceContext { contexts: [] }
# RpnCalc_run_if_end_3
# goto RpnCalc_run_while_predicate_0
# 	SourceContext { contexts: [] }
# 00d4b Instruction { source: "goto RpnCalc_run_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_run_while_predicate_0)], resolved: None }
70 e4 0c 00 
# :RpnCalc_run_while_end_2
# 	SourceContext { contexts: [] }
# RpnCalc_run_while_end_2
# :function_end_RpnCalc_run
# 	SourceContext { contexts: [] }
# function_end_RpnCalc_run
# Unreachable
# 	SourceContext { contexts: [] }
# 00d4f Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :div32
# Ret Some(U32)
# Arg0=a
# Arg1=b
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([80, 81, 82, 83])
# Var b (Arg1 b Number(USIZE)) Reg(U32) Some([84, 85, 86, 87])
# Var hi (Local hi Number(USIZE) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_div32_div16_52_a (Arg0 a Number(USIZE)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_52_b (Arg1 b Number(USIZE)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_52_hi (Local hi Number(USIZE) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_a (Arg0 a Number(USIZE)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_b (Arg1 b Number(USIZE)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t0 (t0 Ident("a")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t1 (t1 Ident("b")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t10 (t10 Ident("c")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t11 (t11 Ident("f")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t12 (t12 Ident("a")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([109])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t17 (t17 Ident("b")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t18 (t18 Ident("d")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t19 (t19 Ident("e")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([109])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([109])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([109])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t23 (t23 Number(U8, 0)) Reg(U8) Some([109])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t25 (t25 Ident("c")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t26 (t26 Ident("d")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([109])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([112, 113, 114, 115])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([116])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([116])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t8 (t8 Number(U8, 0)) Reg(U8) Some([117])
# Var inline_div32_div16_52_inline_div16_mul16_32_6_t9 (t9 Number(U8, 0)) Reg(U8) Some([117])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_a (Arg0 a Number(USIZE)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t0 (t0 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t1 (t1 Index("a", Number(U8, 0))) Reg(U8) Some([109])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t10 (t10 Index("a", Number(U8, 3))) Reg(U8) Some([109])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t11 (t11 Number(U8, 1)) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t12 (t12 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t13 (t13 Index("a", Number(U8, 0))) Reg(U8) Some([109])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t14 (t14 Number(U8, 127)) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t15 (t15 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t16 (t16 Index("a", Number(U8, 0))) Reg(U8) Some([109])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t17 (t17 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t18 (t18 Index("a", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t19 (t19 Number(U8, 128)) Reg(U8) Some([118])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t2 (t2 Number(U8, 1)) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t20 (t20 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t21 (t21 Index("a", Number(U8, 1))) Reg(U8) Some([109])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t22 (t22 Number(U8, 127)) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t23 (t23 Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t24 (t24 Index("a", Number(U8, 1))) Reg(U8) Some([109])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t25 (t25 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t26 (t26 Index("a", Number(U8, 2))) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t27 (t27 Number(U8, 128)) Reg(U8) Some([118])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t28 (t28 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t29 (t29 Index("a", Number(U8, 2))) Reg(U8) Some([109])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t3 (t3 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t30 (t30 Number(U8, 127)) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t31 (t31 Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t32 (t32 Index("a", Number(U8, 2))) Reg(U8) Some([109])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t33 (t33 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t34 (t34 Index("a", Number(U8, 3))) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t35 (t35 Number(U8, 128)) Reg(U8) Some([118])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t36 (t36 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t37 (t37 Index("a", Number(U8, 3))) Reg(U8) Some([109])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t38 (t38 Number(U8, 127)) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t39 (t39 Ident("a")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t4 (t4 Index("a", Number(U8, 1))) Reg(U8) Some([109])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t5 (t5 Number(U8, 1)) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t6 (t6 Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t7 (t7 Index("a", Number(U8, 2))) Reg(U8) Some([109])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t8 (t8 Number(U8, 1)) Reg(U8) Some([108])
# Var inline_div32_div16_52_inline_div16_shiftright1_51_t9 (t9 Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([108])
# Var inline_div32_div16_52_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([120, 121, 122, 123])
# Var inline_div32_div16_52_mid (Local mid Number(USIZE) Reg(U32)) Reg(U32) Some([124, 125, 126, 127])
# Var inline_div32_div16_52_r (Local r Number(USIZE) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_t0 (t0 Ident("a")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_52_t1 (t1 Ident("b")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_52_t10 (t10 Ident("hi")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_div32_div16_52_t11 (t11 Arithmetic(Add, Ident("lo"), Ident("hi"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_t12 (t12 Ident("lo")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_t13 (t13 Ident("hi")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_div32_div16_52_t14 (t14 Ident("mid")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_t15 (t15 Ident("b")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_52_t16 (t16 Index("x", Number(U8, 2))) Reg(U8) Some([109])
# Var inline_div32_div16_52_t17 (t17 Number(U8, 0)) Reg(U8) Some([108])
# Var inline_div32_div16_52_t18 (t18 Ident("mid")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_div32_div16_52_t19 (t19 Number(USIZE, 1)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_t2 (t2 Number(USIZE, 0)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_52_t20 (t20 Index("x", Number(U8, 3))) Reg(U8) Some([109])
# Var inline_div32_div16_52_t21 (t21 Number(U8, 0)) Reg(U8) Some([108])
# Var inline_div32_div16_52_t22 (t22 Ident("mid")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_div32_div16_52_t23 (t23 Number(USIZE, 1)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_t24 (t24 Ident("x")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_t25 (t25 Ident("a")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_52_t26 (t26 Ident("mid")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_div32_div16_52_t27 (t27 Number(USIZE, 1)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_t28 (t28 Ident("x")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_t29 (t29 Ident("a")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_52_t3 (t3 Ident("a")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_52_t30 (t30 Ident("mid")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_52_t31 (t31 Ident("a")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_52_t32 (t32 Ident("x")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_t33 (t33 Ident("r")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_t34 (t34 Ident("b")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_52_t35 (t35 Ident("mid")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_52_t36 (t36 Ident("mid")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_t37 (t37 Number(USIZE, 1)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_div32_div16_52_t38 (t38 Ident("lo")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_52_t4 (t4 Number(USIZE, 256)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_div32_div16_52_t5 (t5 Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_52_t6 (t6 Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))) Reg(U8) Some([128])
# Var inline_div32_div16_52_t7 (t7 Index("a", Number(U8, 0))) Reg(U8) Some([128])
# Var inline_div32_div16_52_t8 (t8 Index("b", Number(U8, 0))) Reg(U8) Some([129])
# Var inline_div32_div16_52_t9 (t9 Ident("lo")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_52_x (Local x Number(USIZE) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_shiftright1_53_a (Arg0 a Number(USIZE)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_shiftright1_53_t0 (t0 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t1 (t1 Index("a", Number(U8, 0))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_53_t10 (t10 Index("a", Number(U8, 3))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_53_t11 (t11 Number(U8, 1)) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t12 (t12 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t13 (t13 Index("a", Number(U8, 0))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_53_t14 (t14 Number(U8, 127)) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t15 (t15 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t16 (t16 Index("a", Number(U8, 0))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_53_t17 (t17 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t18 (t18 Index("a", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t19 (t19 Number(U8, 128)) Reg(U8) Some([118])
# Var inline_div32_shiftright1_53_t2 (t2 Number(U8, 1)) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t20 (t20 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t21 (t21 Index("a", Number(U8, 1))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_53_t22 (t22 Number(U8, 127)) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t23 (t23 Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t24 (t24 Index("a", Number(U8, 1))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_53_t25 (t25 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t26 (t26 Index("a", Number(U8, 2))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t27 (t27 Number(U8, 128)) Reg(U8) Some([118])
# Var inline_div32_shiftright1_53_t28 (t28 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t29 (t29 Index("a", Number(U8, 2))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_53_t3 (t3 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t30 (t30 Number(U8, 127)) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t31 (t31 Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t32 (t32 Index("a", Number(U8, 2))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_53_t33 (t33 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t34 (t34 Index("a", Number(U8, 3))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t35 (t35 Number(U8, 128)) Reg(U8) Some([118])
# Var inline_div32_shiftright1_53_t36 (t36 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t37 (t37 Index("a", Number(U8, 3))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_53_t38 (t38 Number(U8, 127)) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t39 (t39 Ident("a")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_shiftright1_53_t4 (t4 Index("a", Number(U8, 1))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_53_t5 (t5 Number(U8, 1)) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t6 (t6 Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t7 (t7 Index("a", Number(U8, 2))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_53_t8 (t8 Number(U8, 1)) Reg(U8) Some([108])
# Var inline_div32_shiftright1_53_t9 (t9 Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_a (Arg0 a Number(USIZE)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_shiftright1_54_t0 (t0 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t1 (t1 Index("a", Number(U8, 0))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_54_t10 (t10 Index("a", Number(U8, 3))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_54_t11 (t11 Number(U8, 1)) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t12 (t12 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t13 (t13 Index("a", Number(U8, 0))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_54_t14 (t14 Number(U8, 127)) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t15 (t15 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t16 (t16 Index("a", Number(U8, 0))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_54_t17 (t17 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t18 (t18 Index("a", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t19 (t19 Number(U8, 128)) Reg(U8) Some([118])
# Var inline_div32_shiftright1_54_t2 (t2 Number(U8, 1)) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t20 (t20 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t21 (t21 Index("a", Number(U8, 1))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_54_t22 (t22 Number(U8, 127)) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t23 (t23 Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t24 (t24 Index("a", Number(U8, 1))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_54_t25 (t25 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t26 (t26 Index("a", Number(U8, 2))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t27 (t27 Number(U8, 128)) Reg(U8) Some([118])
# Var inline_div32_shiftright1_54_t28 (t28 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t29 (t29 Index("a", Number(U8, 2))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_54_t3 (t3 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t30 (t30 Number(U8, 127)) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t31 (t31 Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t32 (t32 Index("a", Number(U8, 2))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_54_t33 (t33 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t34 (t34 Index("a", Number(U8, 3))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t35 (t35 Number(U8, 128)) Reg(U8) Some([118])
# Var inline_div32_shiftright1_54_t36 (t36 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t37 (t37 Index("a", Number(U8, 3))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_54_t38 (t38 Number(U8, 127)) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t39 (t39 Ident("a")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_shiftright1_54_t4 (t4 Index("a", Number(U8, 1))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_54_t5 (t5 Number(U8, 1)) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t6 (t6 Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t7 (t7 Index("a", Number(U8, 2))) Reg(U8) Some([109])
# Var inline_div32_shiftright1_54_t8 (t8 Number(U8, 1)) Reg(U8) Some([108])
# Var inline_div32_shiftright1_54_t9 (t9 Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([108])
# Var lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var mid (Local mid Number(USIZE) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var r (Local r Number(USIZE) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var t0 (Stack size negated) Reg(U32) Some([88, 89, 90, 91])
# Var t1 (t1 Ident("a")) Reg(U32) Some([80, 81, 82, 83])
# Var t10 (Stack size) Reg(U32) Some([80, 81, 82, 83])
# Var t11 (t11 Ident("lo")) Reg(U32) Some([92, 93, 94, 95])
# Var t12 (t12 Ident("hi")) Reg(U32) Some([88, 89, 90, 91])
# Var t13 (t13 Call(Call { function: "shiftright1", parameters: [Ident("lo")] })) Reg(U32) Some([112, 113, 114, 115])
# Var t14 (t14 Ident("lo")) Reg(U32) Some([92, 93, 94, 95])
# Var t15 (t15 Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) Reg(U32) Some([92, 93, 94, 95])
# Var t16 (t16 Ident("hi")) Reg(U32) Some([88, 89, 90, 91])
# Var t17 (t17 Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })) Reg(U8) Some([130])
# Var t18 (t18 Ident("mid")) Reg(U32) Some([92, 93, 94, 95])
# Var t19 (t19 Ident("b")) Reg(U32) Some([84, 85, 86, 87])
# Var t2 (t2 Ident("b")) Reg(U32) Some([84, 85, 86, 87])
# Var t20 (t20 AddressOf(Ident("x64"))) Reg(U32) Some([96, 97, 98, 99])
# Var t21 (t21 Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))) Reg(U32) Some([96, 97, 98, 99])
# Var t22 (t22 Ident("__frame_pointer")) Reg(U32) Some([132, 133, 134, 135])
# Var t23 (t23 Number(USIZE, 0)) Reg(U32) Some([96, 97, 98, 99])
# Var t24 (t24 LocalFieldDeref("x64", "hi")) Reg(U32) Some([96, 97, 98, 99])
# Var t25 (t25 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([96, 97, 98, 99])
# Var t26 (t26 Ident("__frame_pointer")) Reg(U32) Some([132, 133, 134, 135])
# Var t27 (t27 Number(USIZE, 4)) Reg(U32) Some([96, 97, 98, 99])
# Var t28 (t28 Number(USIZE, 0)) Reg(U32) Some([100, 101, 102, 103])
# Var t29 (t29 Ident("mid")) Reg(U32) Some([88, 89, 90, 91])
# Var t3 (t3 Number(USIZE, 0)) Reg(U32) Some([80, 81, 82, 83])
# Var t30 (t30 Number(USIZE, 1)) Reg(U32) Some([92, 93, 94, 95])
# Var t31 (t31 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([132, 133, 134, 135])
# Var t32 (t32 Ident("x")) Reg(U32) Some([96, 97, 98, 99])
# Var t33 (t33 Ident("a")) Reg(U32) Some([80, 81, 82, 83])
# Var t34 (t34 Ident("mid")) Reg(U32) Some([88, 89, 90, 91])
# Var t35 (t35 Number(USIZE, 1)) Reg(U32) Some([92, 93, 94, 95])
# Var t36 (t36 Ident("x")) Reg(U32) Some([96, 97, 98, 99])
# Var t37 (t37 Ident("a")) Reg(U32) Some([80, 81, 82, 83])
# Var t38 (t38 Ident("mid")) Reg(U32) Some([80, 81, 82, 83])
# Var t39 (Stack size) Reg(U32) Some([84, 85, 86, 87])
# Var t4 (Stack size) Reg(U32) Some([84, 85, 86, 87])
# Var t40 (t40 Ident("a")) Reg(U32) Some([80, 81, 82, 83])
# Var t41 (t41 Ident("x")) Reg(U32) Some([96, 97, 98, 99])
# Var t42 (t42 Ident("r")) Reg(U32) Some([96, 97, 98, 99])
# Var t43 (t43 Ident("b")) Reg(U32) Some([84, 85, 86, 87])
# Var t44 (t44 Ident("mid")) Reg(U32) Some([80, 81, 82, 83])
# Var t45 (Stack size) Reg(U32) Some([84, 85, 86, 87])
# Var t46 (t46 Ident("mid")) Reg(U32) Some([92, 93, 94, 95])
# Var t47 (t47 Number(USIZE, 1)) Reg(U32) Some([96, 97, 98, 99])
# Var t48 (t48 Ident("lo")) Reg(U32) Some([80, 81, 82, 83])
# Var t49 (Stack size) Reg(U32) Some([84, 85, 86, 87])
# Var t5 (t5 Ident("a")) Reg(U32) Some([80, 81, 82, 83])
# Var t6 (t6 Number(USIZE, 65536)) Reg(U32) Some([88, 89, 90, 91])
# Var t7 (t7 Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([84, 85, 86, 87])
# Var t8 (t8 Ident("a")) Reg(U32) Some([80, 81, 82, 83])
# Var t9 (t9 Ident("b")) Reg(U32) Some([84, 85, 86, 87])
# Var x (Local x Number(USIZE) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var x64 (Local x64 Struct("U64") FrameOffset(0)) FrameOffset(0) None
# 00d54 Instruction { source: "reserve 8 bytes of stack space for locals", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffff8=4294967288)], resolved: None }
32 0c f8 ff ff ff 
# 00d5a Instruction { source: "Save function parameter 'a' registers [0, 1, 2, 3] to locals [80, 81, 82, 83].", opcode: Copy32, args: [Register(0x00), Register(0x50)], resolved: None }
21 00 50 
# 00d5d Instruction { source: "Save function parameter 'b' registers [4, 5, 6, 7] to locals [84, 85, 86, 87].", opcode: Copy32, args: [Register(0x04), Register(0x54)], resolved: None }
21 04 54 
# t0 <- 0xfffffff8u32 
# 	SourceContext { contexts: [] }
# 00d60 Instruction { source: "t0 <- 0xfffffff8u32 \n\tSourceContext { contexts: [] }", opcode: LoadImm32, args: [Register(0x58), Constant32(0xfffffff8=4294967288)], resolved: None }
20 58 f8 ff ff ff 
# __frame_pointer <- __frame_pointer Add t0
# 	SourceContext { contexts: [] }
# 00d66 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00d67 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x58), Register(0x0c)], resolved: None }
30 0c 58 0c 
# 00d6b Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t1 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t1 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# t2 <- b U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t2 <- b U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }"] }
# 00d6c Instruction { source: "if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8, args: [Register(0x57), Register(0x53)], resolved: None }
15 57 53 
# 00d6f Instruction { source: "if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x56), Register(0x52)], resolved: None }
16 56 52 
# 00d72 Instruction { source: "if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x55), Register(0x51)], resolved: None }
16 55 51 
# 00d75 Instruction { source: "if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x54), Register(0x50)], resolved: None }
16 54 50 
# 00d78 Instruction { source: "if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_2)], resolved: None }
71 9d 0d 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_1)], resolved: None }
# :div32_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }"] }
# div32_if_true_0_1
# t3 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 00d7c Instruction { source: "t3 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000000=0)], resolved: None }
20 50 00 00 00 00 
# t4 <- 0n8/0x00000008u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# 00d82 Instruction { source: "t4 <- 0n8/0x00000008u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000008=8)], resolved: None }
20 54 08 00 00 00 
# __frame_pointer <- __frame_pointer Add t4
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# 00d88 Instruction { source: "__frame_pointer <- __frame_pointer Add t4\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00d89 Instruction { source: "__frame_pointer <- __frame_pointer Add t4\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x54), Register(0x0c)], resolved: None }
30 0c 54 0c 
# 00d8d Instruction { source: "__frame_pointer <- __frame_pointer Add t4\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t3)
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# 00d8e Instruction { source: "return Some(t3)\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: Copy32, args: [Register(0x50), Register(0x00)], resolved: None }
21 50 00 
# 00d91 Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 00d97 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto div32_if_end_0
# 	SourceContext { contexts: [] }
# 00d99 Instruction { source: "goto div32_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_0)], resolved: None }
70 9d 0d 00 
# :div32_if_else_0_2
# 	SourceContext { contexts: [] }
# div32_if_else_0_2
# :div32_if_end_0
# 	SourceContext { contexts: [] }
# div32_if_end_0
# t5 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t5 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# t6 <- 0n65536/0x00010000u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }", "Number(USIZE, 65536)", "Number(USIZE, 65536)"] }
# 00d9d Instruction { source: "t6 <- 0n65536/0x00010000u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\", \"Number(USIZE, 65536)\", \"Number(USIZE, 65536)\"] }", opcode: LoadImm32, args: [Register(0x58), Constant32(0x00010000=65536)], resolved: None }
20 58 00 00 01 00 
# if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }"] }
# 00da3 Instruction { source: "if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: Cmp8, args: [Register(0x5b), Register(0x53)], resolved: None }
15 5b 53 
# 00da6 Instruction { source: "if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: Cmp8IfZero, args: [Register(0x5a), Register(0x52)], resolved: None }
16 5a 52 
# 00da9 Instruction { source: "if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: Cmp8IfZero, args: [Register(0x59), Register(0x51)], resolved: None }
16 59 51 
# 00dac Instruction { source: "if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: Cmp8IfZero, args: [Register(0x58), Register(0x50)], resolved: None }
16 58 50 
# 00daf Instruction { source: "if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_5)], resolved: None }
71 b5 10 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_4)], resolved: None }
# :div32_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }"] }
# div32_if_true_0_4
# t8 <- a U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t8 <- a U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# t9 <- b U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t9 <- b U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_div32_div16_52_a <- t8 U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_a <- t8 U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_div32_div16_52_b <- t9 U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_b <- t9 U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_div32_div16_52_t0 <- inline_div32_div16_52_a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_t0 <- inline_div32_div16_52_a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_div32_div16_52_t1 <- inline_div32_div16_52_b U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_t1 <- inline_div32_div16_52_b U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# if inline_div32_div16_52_t0 < inline_div32_div16_52_t1 then 'inline_div32_div16_52_div16_if_true_0_1' else 'inline_div32_div16_52_div16_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }"] }
# 00db3 Instruction { source: "if inline_div32_div16_52_t0 < inline_div32_div16_52_t1 then 'inline_div32_div16_52_div16_if_true_0_1' else 'inline_div32_div16_52_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8, args: [Register(0x57), Register(0x53)], resolved: None }
15 57 53 
# 00db6 Instruction { source: "if inline_div32_div16_52_t0 < inline_div32_div16_52_t1 then 'inline_div32_div16_52_div16_if_true_0_1' else 'inline_div32_div16_52_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x56), Register(0x52)], resolved: None }
16 56 52 
# 00db9 Instruction { source: "if inline_div32_div16_52_t0 < inline_div32_div16_52_t1 then 'inline_div32_div16_52_div16_if_true_0_1' else 'inline_div32_div16_52_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x55), Register(0x51)], resolved: None }
16 55 51 
# 00dbc Instruction { source: "if inline_div32_div16_52_t0 < inline_div32_div16_52_t1 then 'inline_div32_div16_52_div16_if_true_0_1' else 'inline_div32_div16_52_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x54), Register(0x50)], resolved: None }
16 54 50 
# 00dbf Instruction { source: "if inline_div32_div16_52_t0 < inline_div32_div16_52_t1 then 'inline_div32_div16_52_div16_if_true_0_1' else 'inline_div32_div16_52_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_52_div16_if_else_0_2)], resolved: None }
71 d4 0d 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_52_t0 < inline_div32_div16_52_t1 then 'inline_div32_div16_52_div16_if_true_0_1' else 'inline_div32_div16_52_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_if_true_0_1)], resolved: None }
# :inline_div32_div16_52_div16_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }"] }
# inline_div32_div16_52_div16_if_true_0_1
# inline_div32_div16_52_t2 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 00dc3 Instruction { source: "inline_div32_div16_52_t2 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000000=0)], resolved: None }
20 50 00 00 00 00 
# t7 <- inline_div32_div16_52_t2 U32
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# 00dc9 Instruction { source: "t7 <- inline_div32_div16_52_t2 U32\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: Copy32, args: [Register(0x50), Register(0x54)], resolved: None }
21 50 54 
# goto inline_div32_div16_52_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# 00dcc Instruction { source: "goto inline_div32_div16_52_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_function_end_div16)], resolved: None }
70 9a 10 00 
# goto inline_div32_div16_52_div16_if_end_0
# 	SourceContext { contexts: [] }
# 00dd0 Instruction { source: "goto inline_div32_div16_52_div16_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_if_end_0)], resolved: None }
70 d4 0d 00 
# :inline_div32_div16_52_div16_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_div32_div16_52_div16_if_else_0_2
# :inline_div32_div16_52_div16_if_end_0
# 	SourceContext { contexts: [] }
# inline_div32_div16_52_div16_if_end_0
# inline_div32_div16_52_t3 <- inline_div32_div16_52_a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_t3 <- inline_div32_div16_52_a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_div32_div16_52_t4 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 00dd4 Instruction { source: "inline_div32_div16_52_t4 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0x58), Constant32(0x00000100=256)], resolved: None }
20 58 00 01 00 00 
# if inline_div32_div16_52_t3 < inline_div32_div16_52_t4 then 'inline_div32_div16_52_div16_if_true_0_4' else 'inline_div32_div16_52_div16_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }"] }
# 00dda Instruction { source: "if inline_div32_div16_52_t3 < inline_div32_div16_52_t4 then 'inline_div32_div16_52_div16_if_true_0_4' else 'inline_div32_div16_52_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8, args: [Register(0x5b), Register(0x53)], resolved: None }
15 5b 53 
# 00ddd Instruction { source: "if inline_div32_div16_52_t3 < inline_div32_div16_52_t4 then 'inline_div32_div16_52_div16_if_true_0_4' else 'inline_div32_div16_52_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0x5a), Register(0x52)], resolved: None }
16 5a 52 
# 00de0 Instruction { source: "if inline_div32_div16_52_t3 < inline_div32_div16_52_t4 then 'inline_div32_div16_52_div16_if_true_0_4' else 'inline_div32_div16_52_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0x59), Register(0x51)], resolved: None }
16 59 51 
# 00de3 Instruction { source: "if inline_div32_div16_52_t3 < inline_div32_div16_52_t4 then 'inline_div32_div16_52_div16_if_true_0_4' else 'inline_div32_div16_52_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0x58), Register(0x50)], resolved: None }
16 58 50 
# 00de6 Instruction { source: "if inline_div32_div16_52_t3 < inline_div32_div16_52_t4 then 'inline_div32_div16_52_div16_if_true_0_4' else 'inline_div32_div16_52_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_52_div16_if_else_0_5)], resolved: None }
71 08 0e 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_52_t3 < inline_div32_div16_52_t4 then 'inline_div32_div16_52_div16_if_true_0_4' else 'inline_div32_div16_52_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_if_true_0_4)], resolved: None }
# :inline_div32_div16_52_div16_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }"] }
# inline_div32_div16_52_div16_if_true_0_4
# inline_div32_div16_52_t7 <- inline_div32_div16_52_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 00dea Instruction { source: "inline_div32_div16_52_t7 <- inline_div32_div16_52_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x50), Register(0x80)], resolved: None }
0b 50 80 
# inline_div32_div16_52_t8 <- inline_div32_div16_52_b[0x00..0x01] U8
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Index(\"b\", Number(U8, 0))", "Index(\"b\", Number(U8, 0))"] }
# 00ded Instruction { source: "inline_div32_div16_52_t8 <- inline_div32_div16_52_b[0x00..0x01] U8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Index(\\\"b\\\", Number(U8, 0))\", \"Index(\\\"b\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x54), Register(0x81)], resolved: None }
0b 54 81 
# inline_div32_div16_52_t6 <- inline_div32_div16_52_t7 Divide inline_div32_div16_52_t8
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))"] }
# 00df0 Instruction { source: "inline_div32_div16_52_t6 <- inline_div32_div16_52_t7 Divide inline_div32_div16_52_t8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\"] }", opcode: Divide8, args: [Register(0x80), Register(0x81), Register(0x80)], resolved: None }
17 80 81 80 
# inline_div32_div16_52_t5 U32 <- inline_div32_div16_52_t6 U8
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }"] }
# 00df4 Instruction { source: "Zero-pad for inline_div32_div16_52_t5 U32 <- inline_div32_div16_52_t6 U8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000000=0)], resolved: None }
20 50 00 00 00 00 
# 00dfa Instruction { source: "inline_div32_div16_52_t5 U32 <- inline_div32_div16_52_t6 U8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\"] }", opcode: Copy8, args: [Register(0x80), Register(0x50)], resolved: None }
0b 80 50 
# t7 <- inline_div32_div16_52_t5 U32
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }"] }
# 00dfd Instruction { source: "t7 <- inline_div32_div16_52_t5 U32\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\"] }", opcode: Copy32, args: [Register(0x50), Register(0x54)], resolved: None }
21 50 54 
# goto inline_div32_div16_52_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }"] }
# 00e00 Instruction { source: "goto inline_div32_div16_52_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_function_end_div16)], resolved: None }
70 9a 10 00 
# goto inline_div32_div16_52_div16_if_end_3
# 	SourceContext { contexts: [] }
# 00e04 Instruction { source: "goto inline_div32_div16_52_div16_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_if_end_3)], resolved: None }
70 08 0e 00 
# :inline_div32_div16_52_div16_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_div32_div16_52_div16_if_else_0_5
# :inline_div32_div16_52_div16_if_end_3
# 	SourceContext { contexts: [] }
# inline_div32_div16_52_div16_if_end_3
# inline_div32_div16_52_lo <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 00e08 Instruction { source: "inline_div32_div16_52_lo <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x78), Constant32(0x00000000=0)], resolved: None }
20 78 00 00 00 00 
# inline_div32_div16_52_hi <- 0n65535/0x0000ffffu32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 65535) }", "Number(USIZE, 65535)"] }
# 00e0e Instruction { source: "inline_div32_div16_52_hi <- 0n65535/0x0000ffffu32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 65535) }\", \"Number(USIZE, 65535)\"] }", opcode: LoadImm32, args: [Register(0x58), Constant32(0x0000ffff=65535)], resolved: None }
20 58 ff ff 00 00 
# :inline_div32_div16_52_div16_while_predicate_6
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }"] }
# inline_div32_div16_52_div16_while_predicate_6
# inline_div32_div16_52_t9 <- inline_div32_div16_52_lo U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 00e14 Instruction { source: "inline_div32_div16_52_t9 <- inline_div32_div16_52_lo U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0x78), Register(0x5c)], resolved: None }
21 78 5c 
# inline_div32_div16_52_t10 <- inline_div32_div16_52_hi U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }", "Ident(\"hi\")", "Ident(\"hi\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_t10 <- inline_div32_div16_52_hi U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\", \"Ident(\\\"hi\\\")\", \"Ident(\\\"hi\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# if inline_div32_div16_52_t9 < inline_div32_div16_52_t10 then 'inline_div32_div16_52_div16_while_body_7' else 'inline_div32_div16_52_div16_while_end_8'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }"] }
# 00e17 Instruction { source: "if inline_div32_div16_52_t9 < inline_div32_div16_52_t10 then 'inline_div32_div16_52_div16_while_body_7' else 'inline_div32_div16_52_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8, args: [Register(0x5b), Register(0x5f)], resolved: None }
15 5b 5f 
# 00e1a Instruction { source: "if inline_div32_div16_52_t9 < inline_div32_div16_52_t10 then 'inline_div32_div16_52_div16_while_body_7' else 'inline_div32_div16_52_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x5a), Register(0x5e)], resolved: None }
16 5a 5e 
# 00e1d Instruction { source: "if inline_div32_div16_52_t9 < inline_div32_div16_52_t10 then 'inline_div32_div16_52_div16_while_body_7' else 'inline_div32_div16_52_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x59), Register(0x5d)], resolved: None }
16 59 5d 
# 00e20 Instruction { source: "if inline_div32_div16_52_t9 < inline_div32_div16_52_t10 then 'inline_div32_div16_52_div16_while_body_7' else 'inline_div32_div16_52_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x58), Register(0x5c)], resolved: None }
16 58 5c 
# 00e23 Instruction { source: "if inline_div32_div16_52_t9 < inline_div32_div16_52_t10 then 'inline_div32_div16_52_div16_while_body_7' else 'inline_div32_div16_52_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_52_div16_while_end_8)], resolved: None }
71 90 10 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_52_t9 < inline_div32_div16_52_t10 then 'inline_div32_div16_52_div16_while_body_7' else 'inline_div32_div16_52_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_while_body_7)], resolved: None }
# :inline_div32_div16_52_div16_while_body_7
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }"] }
# inline_div32_div16_52_div16_while_body_7
# inline_div32_div16_52_t12 <- inline_div32_div16_52_lo U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }", "Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 00e27 Instruction { source: "inline_div32_div16_52_t12 <- inline_div32_div16_52_lo U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0x78), Register(0x5c)], resolved: None }
21 78 5c 
# inline_div32_div16_52_t13 <- inline_div32_div16_52_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }", "Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Ident(\"hi\")", "Ident(\"hi\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_t13 <- inline_div32_div16_52_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Ident(\\\"hi\\\")\", \"Ident(\\\"hi\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_div32_div16_52_t11 <- inline_div32_div16_52_t12 Add inline_div32_div16_52_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }", "Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))"] }
# 00e2a Instruction { source: "inline_div32_div16_52_t11 <- inline_div32_div16_52_t12 Add inline_div32_div16_52_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00e2b Instruction { source: "inline_div32_div16_52_t11 <- inline_div32_div16_52_t12 Add inline_div32_div16_52_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x5c), Register(0x58), Register(0x5c)], resolved: None }
30 5c 58 5c 
# 00e2f Instruction { source: "inline_div32_div16_52_t11 <- inline_div32_div16_52_t12 Add inline_div32_div16_52_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_52_inline_div16_shiftright1_51_a <- inline_div32_div16_52_t11 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }", "Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_a <- inline_div32_div16_52_t11 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_div32_div16_52_inline_div16_shiftright1_51_t1 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 00e30 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t1 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x6d)], resolved: None }
0b 5c 6d 
# inline_div32_div16_52_inline_div16_shiftright1_51_t2 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00e33 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t2 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x01=1)], resolved: None }
04 6c 01 
# inline_div32_div16_52_inline_div16_shiftright1_51_t0 <- inline_div32_div16_52_inline_div16_shiftright1_51_t1 RotateRight inline_div32_div16_52_inline_div16_shiftright1_51_t2
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))"] }
# 00e36 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t0 <- inline_div32_div16_52_inline_div16_shiftright1_51_t1 RotateRight inline_div32_div16_52_inline_div16_shiftright1_51_t2\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x6c), Register(0x6d), Register(0x6c)], resolved: None }
1e 04 6c 6d 6c 
# inline_div32_div16_52_inline_div16_shiftright1_51_a[0x00..0x01] <- inline_div32_div16_52_inline_div16_shiftright1_51_t0 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }"] }
# 00e3b Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_a[0x00..0x01] <- inline_div32_div16_52_inline_div16_shiftright1_51_t0 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5c)], resolved: None }
0b 6c 5c 
# inline_div32_div16_52_inline_div16_shiftright1_51_t4 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00e3e Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t4 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x5d), Register(0x6d)], resolved: None }
0b 5d 6d 
# inline_div32_div16_52_inline_div16_shiftright1_51_t5 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00e41 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t5 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x01=1)], resolved: None }
04 6c 01 
# inline_div32_div16_52_inline_div16_shiftright1_51_t3 <- inline_div32_div16_52_inline_div16_shiftright1_51_t4 RotateRight inline_div32_div16_52_inline_div16_shiftright1_51_t5
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))"] }
# 00e44 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t3 <- inline_div32_div16_52_inline_div16_shiftright1_51_t4 RotateRight inline_div32_div16_52_inline_div16_shiftright1_51_t5\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x6c), Register(0x6d), Register(0x6c)], resolved: None }
1e 04 6c 6d 6c 
# inline_div32_div16_52_inline_div16_shiftright1_51_a[0x01..0x02] <- inline_div32_div16_52_inline_div16_shiftright1_51_t3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }"] }
# 00e49 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_a[0x01..0x02] <- inline_div32_div16_52_inline_div16_shiftright1_51_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5d)], resolved: None }
0b 6c 5d 
# inline_div32_div16_52_inline_div16_shiftright1_51_t7 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 00e4c Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t7 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x5e), Register(0x6d)], resolved: None }
0b 5e 6d 
# inline_div32_div16_52_inline_div16_shiftright1_51_t8 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00e4f Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t8 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x01=1)], resolved: None }
04 6c 01 
# inline_div32_div16_52_inline_div16_shiftright1_51_t6 <- inline_div32_div16_52_inline_div16_shiftright1_51_t7 RotateRight inline_div32_div16_52_inline_div16_shiftright1_51_t8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))"] }
# 00e52 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t6 <- inline_div32_div16_52_inline_div16_shiftright1_51_t7 RotateRight inline_div32_div16_52_inline_div16_shiftright1_51_t8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x6c), Register(0x6d), Register(0x6c)], resolved: None }
1e 04 6c 6d 6c 
# inline_div32_div16_52_inline_div16_shiftright1_51_a[0x02..0x03] <- inline_div32_div16_52_inline_div16_shiftright1_51_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }"] }
# 00e57 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_a[0x02..0x03] <- inline_div32_div16_52_inline_div16_shiftright1_51_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5e)], resolved: None }
0b 6c 5e 
# inline_div32_div16_52_inline_div16_shiftright1_51_t10 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 00e5a Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t10 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x5f), Register(0x6d)], resolved: None }
0b 5f 6d 
# inline_div32_div16_52_inline_div16_shiftright1_51_t11 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00e5d Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t11 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x01=1)], resolved: None }
04 6c 01 
# inline_div32_div16_52_inline_div16_shiftright1_51_t9 <- inline_div32_div16_52_inline_div16_shiftright1_51_t10 RotateRight inline_div32_div16_52_inline_div16_shiftright1_51_t11
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))"] }
# 00e60 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t9 <- inline_div32_div16_52_inline_div16_shiftright1_51_t10 RotateRight inline_div32_div16_52_inline_div16_shiftright1_51_t11\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x6c), Register(0x6d), Register(0x6c)], resolved: None }
1e 04 6c 6d 6c 
# inline_div32_div16_52_inline_div16_shiftright1_51_a[0x03..0x04] <- inline_div32_div16_52_inline_div16_shiftright1_51_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }"] }
# 00e65 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_a[0x03..0x04] <- inline_div32_div16_52_inline_div16_shiftright1_51_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5f)], resolved: None }
0b 6c 5f 
# inline_div32_div16_52_inline_div16_shiftright1_51_t13 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 00e68 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t13 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x6d)], resolved: None }
0b 5c 6d 
# inline_div32_div16_52_inline_div16_shiftright1_51_t14 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 00e6b Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t14 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x7f=127)], resolved: None }
04 6c 7f 
# inline_div32_div16_52_inline_div16_shiftright1_51_t12 <- inline_div32_div16_52_inline_div16_shiftright1_51_t13 BitwiseAnd inline_div32_div16_52_inline_div16_shiftright1_51_t14
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))"] }
# 00e6e Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t12 <- inline_div32_div16_52_inline_div16_shiftright1_51_t13 BitwiseAnd inline_div32_div16_52_inline_div16_shiftright1_51_t14\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1b 6d 6c 6c 
# inline_div32_div16_52_inline_div16_shiftright1_51_a[0x00..0x01] <- inline_div32_div16_52_inline_div16_shiftright1_51_t12 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }"] }
# 00e72 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_a[0x00..0x01] <- inline_div32_div16_52_inline_div16_shiftright1_51_t12 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5c)], resolved: None }
0b 6c 5c 
# inline_div32_div16_52_inline_div16_shiftright1_51_t16 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 00e75 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t16 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x6d)], resolved: None }
0b 5c 6d 
# inline_div32_div16_52_inline_div16_shiftright1_51_t18 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00e78 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t18 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x5d), Register(0x6c)], resolved: None }
0b 5d 6c 
# inline_div32_div16_52_inline_div16_shiftright1_51_t19 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00e7b Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t19 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x76), Constant8(0x80=128)], resolved: None }
04 76 80 
# inline_div32_div16_52_inline_div16_shiftright1_51_t17 <- inline_div32_div16_52_inline_div16_shiftright1_51_t18 BitwiseAnd inline_div32_div16_52_inline_div16_shiftright1_51_t19
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))"] }
# 00e7e Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t17 <- inline_div32_div16_52_inline_div16_shiftright1_51_t18 BitwiseAnd inline_div32_div16_52_inline_div16_shiftright1_51_t19\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x6c), Register(0x76), Register(0x6c)], resolved: None }
1b 6c 76 6c 
# inline_div32_div16_52_inline_div16_shiftright1_51_t15 <- inline_div32_div16_52_inline_div16_shiftright1_51_t16 BitwiseOr inline_div32_div16_52_inline_div16_shiftright1_51_t17
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))"] }
# 00e82 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t15 <- inline_div32_div16_52_inline_div16_shiftright1_51_t16 BitwiseOr inline_div32_div16_52_inline_div16_shiftright1_51_t17\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1c 6d 6c 6c 
# inline_div32_div16_52_inline_div16_shiftright1_51_a[0x00..0x01] <- inline_div32_div16_52_inline_div16_shiftright1_51_t15 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }"] }
# 00e86 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_a[0x00..0x01] <- inline_div32_div16_52_inline_div16_shiftright1_51_t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5c)], resolved: None }
0b 6c 5c 
# inline_div32_div16_52_inline_div16_shiftright1_51_t21 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00e89 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t21 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x5d), Register(0x6d)], resolved: None }
0b 5d 6d 
# inline_div32_div16_52_inline_div16_shiftright1_51_t22 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 00e8c Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t22 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x7f=127)], resolved: None }
04 6c 7f 
# inline_div32_div16_52_inline_div16_shiftright1_51_t20 <- inline_div32_div16_52_inline_div16_shiftright1_51_t21 BitwiseAnd inline_div32_div16_52_inline_div16_shiftright1_51_t22
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))"] }
# 00e8f Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t20 <- inline_div32_div16_52_inline_div16_shiftright1_51_t21 BitwiseAnd inline_div32_div16_52_inline_div16_shiftright1_51_t22\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1b 6d 6c 6c 
# inline_div32_div16_52_inline_div16_shiftright1_51_a[0x01..0x02] <- inline_div32_div16_52_inline_div16_shiftright1_51_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }"] }
# 00e93 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_a[0x01..0x02] <- inline_div32_div16_52_inline_div16_shiftright1_51_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5d)], resolved: None }
0b 6c 5d 
# inline_div32_div16_52_inline_div16_shiftright1_51_t24 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00e96 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t24 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x5d), Register(0x6d)], resolved: None }
0b 5d 6d 
# inline_div32_div16_52_inline_div16_shiftright1_51_t26 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 00e99 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t26 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x5e), Register(0x6c)], resolved: None }
0b 5e 6c 
# inline_div32_div16_52_inline_div16_shiftright1_51_t27 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00e9c Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t27 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x76), Constant8(0x80=128)], resolved: None }
04 76 80 
# inline_div32_div16_52_inline_div16_shiftright1_51_t25 <- inline_div32_div16_52_inline_div16_shiftright1_51_t26 BitwiseAnd inline_div32_div16_52_inline_div16_shiftright1_51_t27
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))"] }
# 00e9f Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t25 <- inline_div32_div16_52_inline_div16_shiftright1_51_t26 BitwiseAnd inline_div32_div16_52_inline_div16_shiftright1_51_t27\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x6c), Register(0x76), Register(0x6c)], resolved: None }
1b 6c 76 6c 
# inline_div32_div16_52_inline_div16_shiftright1_51_t23 <- inline_div32_div16_52_inline_div16_shiftright1_51_t24 BitwiseOr inline_div32_div16_52_inline_div16_shiftright1_51_t25
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))"] }
# 00ea3 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t23 <- inline_div32_div16_52_inline_div16_shiftright1_51_t24 BitwiseOr inline_div32_div16_52_inline_div16_shiftright1_51_t25\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1c 6d 6c 6c 
# inline_div32_div16_52_inline_div16_shiftright1_51_a[0x01..0x02] <- inline_div32_div16_52_inline_div16_shiftright1_51_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }"] }
# 00ea7 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_a[0x01..0x02] <- inline_div32_div16_52_inline_div16_shiftright1_51_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5d)], resolved: None }
0b 6c 5d 
# inline_div32_div16_52_inline_div16_shiftright1_51_t29 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 00eaa Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t29 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x5e), Register(0x6d)], resolved: None }
0b 5e 6d 
# inline_div32_div16_52_inline_div16_shiftright1_51_t30 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 00ead Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t30 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x7f=127)], resolved: None }
04 6c 7f 
# inline_div32_div16_52_inline_div16_shiftright1_51_t28 <- inline_div32_div16_52_inline_div16_shiftright1_51_t29 BitwiseAnd inline_div32_div16_52_inline_div16_shiftright1_51_t30
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))"] }
# 00eb0 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t28 <- inline_div32_div16_52_inline_div16_shiftright1_51_t29 BitwiseAnd inline_div32_div16_52_inline_div16_shiftright1_51_t30\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1b 6d 6c 6c 
# inline_div32_div16_52_inline_div16_shiftright1_51_a[0x02..0x03] <- inline_div32_div16_52_inline_div16_shiftright1_51_t28 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }"] }
# 00eb4 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_a[0x02..0x03] <- inline_div32_div16_52_inline_div16_shiftright1_51_t28 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5e)], resolved: None }
0b 6c 5e 
# inline_div32_div16_52_inline_div16_shiftright1_51_t32 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 00eb7 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t32 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x5e), Register(0x6d)], resolved: None }
0b 5e 6d 
# inline_div32_div16_52_inline_div16_shiftright1_51_t34 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 00eba Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t34 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x5f), Register(0x6c)], resolved: None }
0b 5f 6c 
# inline_div32_div16_52_inline_div16_shiftright1_51_t35 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00ebd Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t35 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x76), Constant8(0x80=128)], resolved: None }
04 76 80 
# inline_div32_div16_52_inline_div16_shiftright1_51_t33 <- inline_div32_div16_52_inline_div16_shiftright1_51_t34 BitwiseAnd inline_div32_div16_52_inline_div16_shiftright1_51_t35
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))"] }
# 00ec0 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t33 <- inline_div32_div16_52_inline_div16_shiftright1_51_t34 BitwiseAnd inline_div32_div16_52_inline_div16_shiftright1_51_t35\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x6c), Register(0x76), Register(0x6c)], resolved: None }
1b 6c 76 6c 
# inline_div32_div16_52_inline_div16_shiftright1_51_t31 <- inline_div32_div16_52_inline_div16_shiftright1_51_t32 BitwiseOr inline_div32_div16_52_inline_div16_shiftright1_51_t33
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))"] }
# 00ec4 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t31 <- inline_div32_div16_52_inline_div16_shiftright1_51_t32 BitwiseOr inline_div32_div16_52_inline_div16_shiftright1_51_t33\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1c 6d 6c 6c 
# inline_div32_div16_52_inline_div16_shiftright1_51_a[0x02..0x03] <- inline_div32_div16_52_inline_div16_shiftright1_51_t31 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }"] }
# 00ec8 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_a[0x02..0x03] <- inline_div32_div16_52_inline_div16_shiftright1_51_t31 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5e)], resolved: None }
0b 6c 5e 
# inline_div32_div16_52_inline_div16_shiftright1_51_t37 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 00ecb Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t37 <- inline_div32_div16_52_inline_div16_shiftright1_51_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x5f), Register(0x6d)], resolved: None }
0b 5f 6d 
# inline_div32_div16_52_inline_div16_shiftright1_51_t38 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 00ece Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t38 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x7f=127)], resolved: None }
04 6c 7f 
# inline_div32_div16_52_inline_div16_shiftright1_51_t36 <- inline_div32_div16_52_inline_div16_shiftright1_51_t37 BitwiseAnd inline_div32_div16_52_inline_div16_shiftright1_51_t38
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))"] }
# 00ed1 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t36 <- inline_div32_div16_52_inline_div16_shiftright1_51_t37 BitwiseAnd inline_div32_div16_52_inline_div16_shiftright1_51_t38\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1b 6d 6c 6c 
# inline_div32_div16_52_inline_div16_shiftright1_51_a[0x03..0x04] <- inline_div32_div16_52_inline_div16_shiftright1_51_t36 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }"] }
# 00ed5 Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_a[0x03..0x04] <- inline_div32_div16_52_inline_div16_shiftright1_51_t36 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5f)], resolved: None }
0b 6c 5f 
# inline_div32_div16_52_inline_div16_shiftright1_51_t39 <- inline_div32_div16_52_inline_div16_shiftright1_51_a U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_inline_div16_shiftright1_51_t39 <- inline_div32_div16_52_inline_div16_shiftright1_51_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_div32_div16_52_mid <- inline_div32_div16_52_inline_div16_shiftright1_51_t39 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# 00ed8 Instruction { source: "inline_div32_div16_52_mid <- inline_div32_div16_52_inline_div16_shiftright1_51_t39 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x7c)], resolved: None }
21 5c 7c 
# goto inline_div32_div16_52_inline_div16_shiftright1_51_function_end_shiftright1
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_div16_52_inline_div16_shiftright1_51_function_end_shiftright1\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_inline_div16_shiftright1_51_function_end_shiftright1)], resolved: None }
# :inline_div32_div16_52_inline_div16_shiftright1_51_function_end_shiftright1
# 	SourceContext { contexts: [] }
# inline_div32_div16_52_inline_div16_shiftright1_51_function_end_shiftright1
# inline_div32_div16_52_t14 <- inline_div32_div16_52_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 00edb Instruction { source: "inline_div32_div16_52_t14 <- inline_div32_div16_52_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x5c)], resolved: None }
21 7c 5c 
# inline_div32_div16_52_t15 <- inline_div32_div16_52_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_t15 <- inline_div32_div16_52_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_div32_div16_52_inline_div16_mul16_32_6_a <- inline_div32_div16_52_t14 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_a <- inline_div32_div16_52_t14 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_div32_div16_52_inline_div16_mul16_32_6_b <- inline_div32_div16_52_t15 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })"] }
# 00ede Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_b <- inline_div32_div16_52_t15 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x54), Register(0x60)], resolved: None }
21 54 60 
# inline_div32_div16_52_inline_div16_mul16_32_6_t0 <- inline_div32_div16_52_inline_div16_mul16_32_6_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t0 <- inline_div32_div16_52_inline_div16_mul16_32_6_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_div32_div16_52_inline_div16_mul16_32_6_t1 <- inline_div32_div16_52_inline_div16_mul16_32_6_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t1 <- inline_div32_div16_52_inline_div16_mul16_32_6_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_div32_div16_52_inline_div16_mul16_32_6_c <- inline_div32_div16_52_inline_div16_mul16_32_6_t0 Multiply inline_div32_div16_52_inline_div16_mul16_32_6_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 00ee1 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_c <- inline_div32_div16_52_inline_div16_mul16_32_6_t0 Multiply inline_div32_div16_52_inline_div16_mul16_32_6_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x5c), Register(0x60), Register(0x64)], resolved: None }
11 5c 60 64 
# 00ee5 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_c <- inline_div32_div16_52_inline_div16_mul16_32_6_t0 Multiply inline_div32_div16_52_inline_div16_mul16_32_6_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x66), Constant8(0x00=0)], resolved: None }
04 66 00 
# 00ee8 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_c <- inline_div32_div16_52_inline_div16_mul16_32_6_t0 Multiply inline_div32_div16_52_inline_div16_mul16_32_6_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x67), Constant8(0x00=0)], resolved: None }
04 67 00 
# inline_div32_div16_52_inline_div16_mul16_32_6_t3 <- inline_div32_div16_52_inline_div16_mul16_32_6_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00eeb Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t3 <- inline_div32_div16_52_inline_div16_mul16_32_6_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x5d), Register(0x6d)], resolved: None }
0b 5d 6d 
# inline_div32_div16_52_inline_div16_mul16_32_6_t2 U32 <- inline_div32_div16_52_inline_div16_mul16_32_6_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00eee Instruction { source: "Zero-pad for inline_div32_div16_52_inline_div16_mul16_32_6_t2 U32 <- inline_div32_div16_52_inline_div16_mul16_32_6_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x68), Constant32(0x00000000=0)], resolved: None }
20 68 00 00 00 00 
# 00ef4 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t2 U32 <- inline_div32_div16_52_inline_div16_mul16_32_6_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6d), Register(0x68)], resolved: None }
0b 6d 68 
# inline_div32_div16_52_inline_div16_mul16_32_6_t5 <- inline_div32_div16_52_inline_div16_mul16_32_6_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00ef7 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t5 <- inline_div32_div16_52_inline_div16_mul16_32_6_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x61), Register(0x6c)], resolved: None }
0b 61 6c 
# inline_div32_div16_52_inline_div16_mul16_32_6_t4 U32 <- inline_div32_div16_52_inline_div16_mul16_32_6_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00efa Instruction { source: "Zero-pad for inline_div32_div16_52_inline_div16_mul16_32_6_t4 U32 <- inline_div32_div16_52_inline_div16_mul16_32_6_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x70), Constant32(0x00000000=0)], resolved: None }
20 70 00 00 00 00 
# 00f00 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t4 U32 <- inline_div32_div16_52_inline_div16_mul16_32_6_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x70)], resolved: None }
0b 6c 70 
# inline_div32_div16_52_inline_div16_mul16_32_6_f <- inline_div32_div16_52_inline_div16_mul16_32_6_t2 Multiply inline_div32_div16_52_inline_div16_mul16_32_6_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00f03 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_f <- inline_div32_div16_52_inline_div16_mul16_32_6_t2 Multiply inline_div32_div16_52_inline_div16_mul16_32_6_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x68), Register(0x70), Register(0x68)], resolved: None }
11 68 70 68 
# 00f07 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_f <- inline_div32_div16_52_inline_div16_mul16_32_6_t2 Multiply inline_div32_div16_52_inline_div16_mul16_32_6_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6a), Constant8(0x00=0)], resolved: None }
04 6a 00 
# 00f0a Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_f <- inline_div32_div16_52_inline_div16_mul16_32_6_t2 Multiply inline_div32_div16_52_inline_div16_mul16_32_6_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6b), Constant8(0x00=0)], resolved: None }
04 6b 00 
# inline_div32_div16_52_inline_div16_mul16_32_6_t6 <- inline_div32_div16_52_inline_div16_mul16_32_6_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 00f0d Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t6 <- inline_div32_div16_52_inline_div16_mul16_32_6_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x69), Register(0x74)], resolved: None }
0b 69 74 
# inline_div32_div16_52_inline_div16_mul16_32_6_f[0x03..0x04] <- inline_div32_div16_52_inline_div16_mul16_32_6_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 00f10 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_f[0x03..0x04] <- inline_div32_div16_52_inline_div16_mul16_32_6_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x74), Register(0x6b)], resolved: None }
0b 74 6b 
# inline_div32_div16_52_inline_div16_mul16_32_6_t7 <- inline_div32_div16_52_inline_div16_mul16_32_6_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 00f13 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t7 <- inline_div32_div16_52_inline_div16_mul16_32_6_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x68), Register(0x74)], resolved: None }
0b 68 74 
# inline_div32_div16_52_inline_div16_mul16_32_6_f[0x02..0x03] <- inline_div32_div16_52_inline_div16_mul16_32_6_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 00f16 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_f[0x02..0x03] <- inline_div32_div16_52_inline_div16_mul16_32_6_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x74), Register(0x6a)], resolved: None }
0b 74 6a 
# inline_div32_div16_52_inline_div16_mul16_32_6_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00f19 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x00=0)], resolved: None }
04 75 00 
# inline_div32_div16_52_inline_div16_mul16_32_6_f[0x01..0x02] <- inline_div32_div16_52_inline_div16_mul16_32_6_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 00f1c Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_f[0x01..0x02] <- inline_div32_div16_52_inline_div16_mul16_32_6_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x75), Register(0x69)], resolved: None }
0b 75 69 
# inline_div32_div16_52_inline_div16_mul16_32_6_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00f1f Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x00=0)], resolved: None }
04 75 00 
# inline_div32_div16_52_inline_div16_mul16_32_6_f[0x00..0x01] <- inline_div32_div16_52_inline_div16_mul16_32_6_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00f22 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_f[0x00..0x01] <- inline_div32_div16_52_inline_div16_mul16_32_6_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x75), Register(0x68)], resolved: None }
0b 75 68 
# inline_div32_div16_52_inline_div16_mul16_32_6_t10 <- inline_div32_div16_52_inline_div16_mul16_32_6_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t10 <- inline_div32_div16_52_inline_div16_mul16_32_6_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_div32_div16_52_inline_div16_mul16_32_6_t11 <- inline_div32_div16_52_inline_div16_mul16_32_6_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t11 <- inline_div32_div16_52_inline_div16_mul16_32_6_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_div32_div16_52_inline_div16_mul16_32_6_c <- inline_div32_div16_52_inline_div16_mul16_32_6_t10 Add inline_div32_div16_52_inline_div16_mul16_32_6_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 00f25 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_c <- inline_div32_div16_52_inline_div16_mul16_32_6_t10 Add inline_div32_div16_52_inline_div16_mul16_32_6_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00f26 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_c <- inline_div32_div16_52_inline_div16_mul16_32_6_t10 Add inline_div32_div16_52_inline_div16_mul16_32_6_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x68), Register(0x64)], resolved: None }
30 64 68 64 
# 00f2a Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_c <- inline_div32_div16_52_inline_div16_mul16_32_6_t10 Add inline_div32_div16_52_inline_div16_mul16_32_6_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_52_inline_div16_mul16_32_6_t12 <- inline_div32_div16_52_inline_div16_mul16_32_6_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t12 <- inline_div32_div16_52_inline_div16_mul16_32_6_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_div32_div16_52_inline_div16_mul16_32_6_t14 <- inline_div32_div16_52_inline_div16_mul16_32_6_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00f2b Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t14 <- inline_div32_div16_52_inline_div16_mul16_32_6_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x61), Register(0x6c)], resolved: None }
0b 61 6c 
# inline_div32_div16_52_inline_div16_mul16_32_6_t13 U32 <- inline_div32_div16_52_inline_div16_mul16_32_6_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00f2e Instruction { source: "Zero-pad for inline_div32_div16_52_inline_div16_mul16_32_6_t13 U32 <- inline_div32_div16_52_inline_div16_mul16_32_6_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x68), Constant32(0x00000000=0)], resolved: None }
20 68 00 00 00 00 
# 00f34 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t13 U32 <- inline_div32_div16_52_inline_div16_mul16_32_6_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x68)], resolved: None }
0b 6c 68 
# inline_div32_div16_52_inline_div16_mul16_32_6_d <- inline_div32_div16_52_inline_div16_mul16_32_6_t12 Multiply inline_div32_div16_52_inline_div16_mul16_32_6_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00f37 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_d <- inline_div32_div16_52_inline_div16_mul16_32_6_t12 Multiply inline_div32_div16_52_inline_div16_mul16_32_6_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x5c), Register(0x68), Register(0x68)], resolved: None }
11 5c 68 68 
# 00f3b Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_d <- inline_div32_div16_52_inline_div16_mul16_32_6_t12 Multiply inline_div32_div16_52_inline_div16_mul16_32_6_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6a), Constant8(0x00=0)], resolved: None }
04 6a 00 
# 00f3e Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_d <- inline_div32_div16_52_inline_div16_mul16_32_6_t12 Multiply inline_div32_div16_52_inline_div16_mul16_32_6_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6b), Constant8(0x00=0)], resolved: None }
04 6b 00 
# inline_div32_div16_52_inline_div16_mul16_32_6_t16 <- inline_div32_div16_52_inline_div16_mul16_32_6_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00f41 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t16 <- inline_div32_div16_52_inline_div16_mul16_32_6_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x5d), Register(0x6d)], resolved: None }
0b 5d 6d 
# inline_div32_div16_52_inline_div16_mul16_32_6_t15 U32 <- inline_div32_div16_52_inline_div16_mul16_32_6_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00f44 Instruction { source: "Zero-pad for inline_div32_div16_52_inline_div16_mul16_32_6_t15 U32 <- inline_div32_div16_52_inline_div16_mul16_32_6_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000000=0)], resolved: None }
20 5c 00 00 00 00 
# 00f4a Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t15 U32 <- inline_div32_div16_52_inline_div16_mul16_32_6_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6d), Register(0x5c)], resolved: None }
0b 6d 5c 
# inline_div32_div16_52_inline_div16_mul16_32_6_t17 <- inline_div32_div16_52_inline_div16_mul16_32_6_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t17 <- inline_div32_div16_52_inline_div16_mul16_32_6_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_div32_div16_52_inline_div16_mul16_32_6_e <- inline_div32_div16_52_inline_div16_mul16_32_6_t15 Multiply inline_div32_div16_52_inline_div16_mul16_32_6_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 00f4d Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_e <- inline_div32_div16_52_inline_div16_mul16_32_6_t15 Multiply inline_div32_div16_52_inline_div16_mul16_32_6_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x5c), Register(0x60), Register(0x5c)], resolved: None }
11 5c 60 5c 
# 00f51 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_e <- inline_div32_div16_52_inline_div16_mul16_32_6_t15 Multiply inline_div32_div16_52_inline_div16_mul16_32_6_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x5e), Constant8(0x00=0)], resolved: None }
04 5e 00 
# 00f54 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_e <- inline_div32_div16_52_inline_div16_mul16_32_6_t15 Multiply inline_div32_div16_52_inline_div16_mul16_32_6_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x5f), Constant8(0x00=0)], resolved: None }
04 5f 00 
# inline_div32_div16_52_inline_div16_mul16_32_6_t18 <- inline_div32_div16_52_inline_div16_mul16_32_6_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00f57 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t18 <- inline_div32_div16_52_inline_div16_mul16_32_6_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x60)], resolved: None }
21 68 60 
# inline_div32_div16_52_inline_div16_mul16_32_6_t19 <- inline_div32_div16_52_inline_div16_mul16_32_6_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t19 <- inline_div32_div16_52_inline_div16_mul16_32_6_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_div32_div16_52_inline_div16_mul16_32_6_d <- inline_div32_div16_52_inline_div16_mul16_32_6_t18 Add inline_div32_div16_52_inline_div16_mul16_32_6_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 00f5a Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_d <- inline_div32_div16_52_inline_div16_mul16_32_6_t18 Add inline_div32_div16_52_inline_div16_mul16_32_6_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00f5b Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_d <- inline_div32_div16_52_inline_div16_mul16_32_6_t18 Add inline_div32_div16_52_inline_div16_mul16_32_6_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x60), Register(0x5c), Register(0x68)], resolved: None }
30 60 5c 68 
# 00f5f Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_d <- inline_div32_div16_52_inline_div16_mul16_32_6_t18 Add inline_div32_div16_52_inline_div16_mul16_32_6_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_52_inline_div16_mul16_32_6_t20 <- inline_div32_div16_52_inline_div16_mul16_32_6_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 00f60 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t20 <- inline_div32_div16_52_inline_div16_mul16_32_6_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x6a), Register(0x6d)], resolved: None }
0b 6a 6d 
# inline_div32_div16_52_inline_div16_mul16_32_6_d[0x03..0x04] <- inline_div32_div16_52_inline_div16_mul16_32_6_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 00f63 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_d[0x03..0x04] <- inline_div32_div16_52_inline_div16_mul16_32_6_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x6d), Register(0x6b)], resolved: None }
0b 6d 6b 
# inline_div32_div16_52_inline_div16_mul16_32_6_t21 <- inline_div32_div16_52_inline_div16_mul16_32_6_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 00f66 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t21 <- inline_div32_div16_52_inline_div16_mul16_32_6_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x69), Register(0x6d)], resolved: None }
0b 69 6d 
# inline_div32_div16_52_inline_div16_mul16_32_6_d[0x02..0x03] <- inline_div32_div16_52_inline_div16_mul16_32_6_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 00f69 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_d[0x02..0x03] <- inline_div32_div16_52_inline_div16_mul16_32_6_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6d), Register(0x6a)], resolved: None }
0b 6d 6a 
# inline_div32_div16_52_inline_div16_mul16_32_6_t22 <- inline_div32_div16_52_inline_div16_mul16_32_6_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 00f6c Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t22 <- inline_div32_div16_52_inline_div16_mul16_32_6_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x68), Register(0x6d)], resolved: None }
0b 68 6d 
# inline_div32_div16_52_inline_div16_mul16_32_6_d[0x01..0x02] <- inline_div32_div16_52_inline_div16_mul16_32_6_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 00f6f Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_d[0x01..0x02] <- inline_div32_div16_52_inline_div16_mul16_32_6_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x6d), Register(0x69)], resolved: None }
0b 6d 69 
# inline_div32_div16_52_inline_div16_mul16_32_6_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00f72 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x6d), Constant8(0x00=0)], resolved: None }
04 6d 00 
# inline_div32_div16_52_inline_div16_mul16_32_6_d[0x00..0x01] <- inline_div32_div16_52_inline_div16_mul16_32_6_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00f75 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_d[0x00..0x01] <- inline_div32_div16_52_inline_div16_mul16_32_6_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x6d), Register(0x68)], resolved: None }
0b 6d 68 
# inline_div32_div16_52_inline_div16_mul16_32_6_t25 <- inline_div32_div16_52_inline_div16_mul16_32_6_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 00f78 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t25 <- inline_div32_div16_52_inline_div16_mul16_32_6_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x5c)], resolved: None }
21 64 5c 
# inline_div32_div16_52_inline_div16_mul16_32_6_t26 <- inline_div32_div16_52_inline_div16_mul16_32_6_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00f7b Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t26 <- inline_div32_div16_52_inline_div16_mul16_32_6_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x60)], resolved: None }
21 68 60 
# inline_div32_div16_52_inline_div16_mul16_32_6_t24 <- inline_div32_div16_52_inline_div16_mul16_32_6_t25 Add inline_div32_div16_52_inline_div16_mul16_32_6_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 00f7e Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t24 <- inline_div32_div16_52_inline_div16_mul16_32_6_t25 Add inline_div32_div16_52_inline_div16_mul16_32_6_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00f7f Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t24 <- inline_div32_div16_52_inline_div16_mul16_32_6_t25 Add inline_div32_div16_52_inline_div16_mul16_32_6_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x5c), Register(0x60), Register(0x5c)], resolved: None }
30 5c 60 5c 
# 00f83 Instruction { source: "inline_div32_div16_52_inline_div16_mul16_32_6_t24 <- inline_div32_div16_52_inline_div16_mul16_32_6_t25 Add inline_div32_div16_52_inline_div16_mul16_32_6_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_52_x <- inline_div32_div16_52_inline_div16_mul16_32_6_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_x <- inline_div32_div16_52_inline_div16_mul16_32_6_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# goto inline_div32_div16_52_inline_div16_mul16_32_6_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_div16_52_inline_div16_mul16_32_6_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_inline_div16_mul16_32_6_function_end_mul16_32)], resolved: None }
# :inline_div32_div16_52_inline_div16_mul16_32_6_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_div32_div16_52_inline_div16_mul16_32_6_function_end_mul16_32
# inline_div32_div16_52_t16 <- inline_div32_div16_52_x[0x02..0x03] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }", "Index(\"x\", Number(U8, 2))", "Index(\"x\", Number(U8, 2))"] }
# 00f84 Instruction { source: "inline_div32_div16_52_t16 <- inline_div32_div16_52_x[0x02..0x03] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\", \"Index(\\\"x\\\", Number(U8, 2))\", \"Index(\\\"x\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x5e), Register(0x6d)], resolved: None }
0b 5e 6d 
# inline_div32_div16_52_t17 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00f87 Instruction { source: "inline_div32_div16_52_t17 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x00=0)], resolved: None }
04 6c 00 
# if inline_div32_div16_52_t16 > inline_div32_div16_52_t17 then 'inline_div32_div16_52_div16_if_true_0_10' else 'inline_div32_div16_52_div16_if_else_0_11'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }"] }
# 00f8a Instruction { source: "if inline_div32_div16_52_t16 > inline_div32_div16_52_t17 then 'inline_div32_div16_52_div16_if_true_0_10' else 'inline_div32_div16_52_div16_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x6d), Register(0x6c)], resolved: None }
15 6d 6c 
# 00f8d Instruction { source: "if inline_div32_div16_52_t16 > inline_div32_div16_52_t17 then 'inline_div32_div16_52_div16_if_true_0_10' else 'inline_div32_div16_52_div16_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_52_div16_if_else_0_11)], resolved: None }
71 b9 0f 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_52_t16 > inline_div32_div16_52_t17 then 'inline_div32_div16_52_div16_if_true_0_10' else 'inline_div32_div16_52_div16_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_if_true_0_10)], resolved: None }
# :inline_div32_div16_52_div16_if_true_0_10
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# inline_div32_div16_52_div16_if_true_0_10
# inline_div32_div16_52_t18 <- inline_div32_div16_52_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 00f91 Instruction { source: "inline_div32_div16_52_t18 <- inline_div32_div16_52_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x58)], resolved: None }
21 7c 58 
# inline_div32_div16_52_t19 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00f94 Instruction { source: "inline_div32_div16_52_t19 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000001=1)], resolved: None }
20 5c 01 00 00 00 
# inline_div32_div16_52_hi <- inline_div32_div16_52_t18 Subtract inline_div32_div16_52_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 00f9a Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t18 Subtract inline_div32_div16_52_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x00)], resolved: None }
21 5c 00 
# 00f9d Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t18 Subtract inline_div32_div16_52_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 00f9f Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t18 Subtract inline_div32_div16_52_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 00fa1 Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t18 Subtract inline_div32_div16_52_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 00fa3 Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t18 Subtract inline_div32_div16_52_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 00fa5 Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t18 Subtract inline_div32_div16_52_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 00fab Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t18 Subtract inline_div32_div16_52_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00fac Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t18 Subtract inline_div32_div16_52_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x58), Register(0x00), Register(0x58)], resolved: None }
30 58 00 58 
# 00fb0 Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t18 Subtract inline_div32_div16_52_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_div32_div16_52_div16_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 00fb1 Instruction { source: "goto inline_div32_div16_52_div16_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_while_predicate_6)], resolved: None }
70 14 0e 00 
# goto inline_div32_div16_52_div16_if_end_9
# 	SourceContext { contexts: [] }
# 00fb5 Instruction { source: "goto inline_div32_div16_52_div16_if_end_9\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_if_end_9)], resolved: None }
70 b9 0f 00 
# :inline_div32_div16_52_div16_if_else_0_11
# 	SourceContext { contexts: [] }
# inline_div32_div16_52_div16_if_else_0_11
# :inline_div32_div16_52_div16_if_end_9
# 	SourceContext { contexts: [] }
# inline_div32_div16_52_div16_if_end_9
# inline_div32_div16_52_t20 <- inline_div32_div16_52_x[0x03..0x04] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }", "Index(\"x\", Number(U8, 3))", "Index(\"x\", Number(U8, 3))"] }
# 00fb9 Instruction { source: "inline_div32_div16_52_t20 <- inline_div32_div16_52_x[0x03..0x04] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\", \"Index(\\\"x\\\", Number(U8, 3))\", \"Index(\\\"x\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x5f), Register(0x6d)], resolved: None }
0b 5f 6d 
# inline_div32_div16_52_t21 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00fbc Instruction { source: "inline_div32_div16_52_t21 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x00=0)], resolved: None }
04 6c 00 
# if inline_div32_div16_52_t20 > inline_div32_div16_52_t21 then 'inline_div32_div16_52_div16_if_true_0_13' else 'inline_div32_div16_52_div16_if_else_0_14'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }"] }
# 00fbf Instruction { source: "if inline_div32_div16_52_t20 > inline_div32_div16_52_t21 then 'inline_div32_div16_52_div16_if_true_0_13' else 'inline_div32_div16_52_div16_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x6d), Register(0x6c)], resolved: None }
15 6d 6c 
# 00fc2 Instruction { source: "if inline_div32_div16_52_t20 > inline_div32_div16_52_t21 then 'inline_div32_div16_52_div16_if_true_0_13' else 'inline_div32_div16_52_div16_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_52_div16_if_else_0_14)], resolved: None }
71 ee 0f 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_52_t20 > inline_div32_div16_52_t21 then 'inline_div32_div16_52_div16_if_true_0_13' else 'inline_div32_div16_52_div16_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_if_true_0_13)], resolved: None }
# :inline_div32_div16_52_div16_if_true_0_13
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# inline_div32_div16_52_div16_if_true_0_13
# inline_div32_div16_52_t22 <- inline_div32_div16_52_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 00fc6 Instruction { source: "inline_div32_div16_52_t22 <- inline_div32_div16_52_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x58)], resolved: None }
21 7c 58 
# inline_div32_div16_52_t23 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00fc9 Instruction { source: "inline_div32_div16_52_t23 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000001=1)], resolved: None }
20 5c 01 00 00 00 
# inline_div32_div16_52_hi <- inline_div32_div16_52_t22 Subtract inline_div32_div16_52_t23
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 00fcf Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t22 Subtract inline_div32_div16_52_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x00)], resolved: None }
21 5c 00 
# 00fd2 Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t22 Subtract inline_div32_div16_52_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 00fd4 Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t22 Subtract inline_div32_div16_52_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 00fd6 Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t22 Subtract inline_div32_div16_52_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 00fd8 Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t22 Subtract inline_div32_div16_52_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 00fda Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t22 Subtract inline_div32_div16_52_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 00fe0 Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t22 Subtract inline_div32_div16_52_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00fe1 Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t22 Subtract inline_div32_div16_52_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x58), Register(0x00), Register(0x58)], resolved: None }
30 58 00 58 
# 00fe5 Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t22 Subtract inline_div32_div16_52_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_div32_div16_52_div16_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 00fe6 Instruction { source: "goto inline_div32_div16_52_div16_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_while_predicate_6)], resolved: None }
70 14 0e 00 
# goto inline_div32_div16_52_div16_if_end_12
# 	SourceContext { contexts: [] }
# 00fea Instruction { source: "goto inline_div32_div16_52_div16_if_end_12\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_if_end_12)], resolved: None }
70 ee 0f 00 
# :inline_div32_div16_52_div16_if_else_0_14
# 	SourceContext { contexts: [] }
# inline_div32_div16_52_div16_if_else_0_14
# :inline_div32_div16_52_div16_if_end_12
# 	SourceContext { contexts: [] }
# inline_div32_div16_52_div16_if_end_12
# inline_div32_div16_52_t24 <- inline_div32_div16_52_x U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_t24 <- inline_div32_div16_52_x U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_div32_div16_52_t25 <- inline_div32_div16_52_a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_t25 <- inline_div32_div16_52_a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# if inline_div32_div16_52_t24 > inline_div32_div16_52_t25 then 'inline_div32_div16_52_div16_if_true_0_16' else 'inline_div32_div16_52_div16_if_else_0_17'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }"] }
# 00fee Instruction { source: "if inline_div32_div16_52_t24 > inline_div32_div16_52_t25 then 'inline_div32_div16_52_div16_if_true_0_16' else 'inline_div32_div16_52_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8, args: [Register(0x5f), Register(0x53)], resolved: None }
15 5f 53 
# 00ff1 Instruction { source: "if inline_div32_div16_52_t24 > inline_div32_div16_52_t25 then 'inline_div32_div16_52_div16_if_true_0_16' else 'inline_div32_div16_52_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x5e), Register(0x52)], resolved: None }
16 5e 52 
# 00ff4 Instruction { source: "if inline_div32_div16_52_t24 > inline_div32_div16_52_t25 then 'inline_div32_div16_52_div16_if_true_0_16' else 'inline_div32_div16_52_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x5d), Register(0x51)], resolved: None }
16 5d 51 
# 00ff7 Instruction { source: "if inline_div32_div16_52_t24 > inline_div32_div16_52_t25 then 'inline_div32_div16_52_div16_if_true_0_16' else 'inline_div32_div16_52_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x5c), Register(0x50)], resolved: None }
16 5c 50 
# 00ffa Instruction { source: "if inline_div32_div16_52_t24 > inline_div32_div16_52_t25 then 'inline_div32_div16_52_div16_if_true_0_16' else 'inline_div32_div16_52_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_52_div16_if_else_0_17)], resolved: None }
71 26 10 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_52_t24 > inline_div32_div16_52_t25 then 'inline_div32_div16_52_div16_if_true_0_16' else 'inline_div32_div16_52_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_if_true_0_16)], resolved: None }
# :inline_div32_div16_52_div16_if_true_0_16
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# inline_div32_div16_52_div16_if_true_0_16
# inline_div32_div16_52_t26 <- inline_div32_div16_52_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 00ffe Instruction { source: "inline_div32_div16_52_t26 <- inline_div32_div16_52_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x58)], resolved: None }
21 7c 58 
# inline_div32_div16_52_t27 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01001 Instruction { source: "inline_div32_div16_52_t27 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000001=1)], resolved: None }
20 5c 01 00 00 00 
# inline_div32_div16_52_hi <- inline_div32_div16_52_t26 Subtract inline_div32_div16_52_t27
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 01007 Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t26 Subtract inline_div32_div16_52_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x00)], resolved: None }
21 5c 00 
# 0100a Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t26 Subtract inline_div32_div16_52_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 0100c Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t26 Subtract inline_div32_div16_52_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 0100e Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t26 Subtract inline_div32_div16_52_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 01010 Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t26 Subtract inline_div32_div16_52_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 01012 Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t26 Subtract inline_div32_div16_52_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 01018 Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t26 Subtract inline_div32_div16_52_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01019 Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t26 Subtract inline_div32_div16_52_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x58), Register(0x00), Register(0x58)], resolved: None }
30 58 00 58 
# 0101d Instruction { source: "inline_div32_div16_52_hi <- inline_div32_div16_52_t26 Subtract inline_div32_div16_52_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_div32_div16_52_div16_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 0101e Instruction { source: "goto inline_div32_div16_52_div16_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_while_predicate_6)], resolved: None }
70 14 0e 00 
# goto inline_div32_div16_52_div16_if_end_15
# 	SourceContext { contexts: [] }
# 01022 Instruction { source: "goto inline_div32_div16_52_div16_if_end_15\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_if_end_15)], resolved: None }
70 26 10 00 
# :inline_div32_div16_52_div16_if_else_0_17
# 	SourceContext { contexts: [] }
# inline_div32_div16_52_div16_if_else_0_17
# :inline_div32_div16_52_div16_if_end_15
# 	SourceContext { contexts: [] }
# inline_div32_div16_52_div16_if_end_15
# inline_div32_div16_52_t28 <- inline_div32_div16_52_x U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_t28 <- inline_div32_div16_52_x U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_div32_div16_52_t29 <- inline_div32_div16_52_a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_t29 <- inline_div32_div16_52_a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# if inline_div32_div16_52_t28 == inline_div32_div16_52_t29 then 'inline_div32_div16_52_div16_if_true_0_19' else 'inline_div32_div16_52_div16_if_else_0_20'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }"] }
# 01026 Instruction { source: "if inline_div32_div16_52_t28 == inline_div32_div16_52_t29 then 'inline_div32_div16_52_div16_if_true_0_19' else 'inline_div32_div16_52_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8, args: [Register(0x5f), Register(0x53)], resolved: None }
15 5f 53 
# 01029 Instruction { source: "if inline_div32_div16_52_t28 == inline_div32_div16_52_t29 then 'inline_div32_div16_52_div16_if_true_0_19' else 'inline_div32_div16_52_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x5e), Register(0x52)], resolved: None }
16 5e 52 
# 0102c Instruction { source: "if inline_div32_div16_52_t28 == inline_div32_div16_52_t29 then 'inline_div32_div16_52_div16_if_true_0_19' else 'inline_div32_div16_52_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x5d), Register(0x51)], resolved: None }
16 5d 51 
# 0102f Instruction { source: "if inline_div32_div16_52_t28 == inline_div32_div16_52_t29 then 'inline_div32_div16_52_div16_if_true_0_19' else 'inline_div32_div16_52_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x5c), Register(0x50)], resolved: None }
16 5c 50 
# 01032 Instruction { source: "if inline_div32_div16_52_t28 == inline_div32_div16_52_t29 then 'inline_div32_div16_52_div16_if_true_0_19' else 'inline_div32_div16_52_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JzImm, args: [Label24(inline_div32_div16_52_div16_if_true_0_19)], resolved: None }
72 3a 10 00 
# 01036 Instruction { source: "if inline_div32_div16_52_t28 == inline_div32_div16_52_t29 then 'inline_div32_div16_52_div16_if_true_0_19' else 'inline_div32_div16_52_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_if_else_0_20)], resolved: None }
70 48 10 00 
# :inline_div32_div16_52_div16_if_true_0_19
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }"] }
# inline_div32_div16_52_div16_if_true_0_19
# inline_div32_div16_52_t30 <- inline_div32_div16_52_mid U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 0103a Instruction { source: "inline_div32_div16_52_t30 <- inline_div32_div16_52_mid U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x50)], resolved: None }
21 7c 50 
# t7 <- inline_div32_div16_52_t30 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 0103d Instruction { source: "t7 <- inline_div32_div16_52_t30 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: Copy32, args: [Register(0x50), Register(0x54)], resolved: None }
21 50 54 
# goto inline_div32_div16_52_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01040 Instruction { source: "goto inline_div32_div16_52_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_function_end_div16)], resolved: None }
70 9a 10 00 
# goto inline_div32_div16_52_div16_if_end_18
# 	SourceContext { contexts: [] }
# 01044 Instruction { source: "goto inline_div32_div16_52_div16_if_end_18\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_if_end_18)], resolved: None }
70 48 10 00 
# :inline_div32_div16_52_div16_if_else_0_20
# 	SourceContext { contexts: [] }
# inline_div32_div16_52_div16_if_else_0_20
# :inline_div32_div16_52_div16_if_end_18
# 	SourceContext { contexts: [] }
# inline_div32_div16_52_div16_if_end_18
# inline_div32_div16_52_t31 <- inline_div32_div16_52_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_t31 <- inline_div32_div16_52_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_div32_div16_52_t32 <- inline_div32_div16_52_x U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_t32 <- inline_div32_div16_52_x U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_div32_div16_52_r <- inline_div32_div16_52_t31 Subtract inline_div32_div16_52_t32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))"] }
# 01048 Instruction { source: "inline_div32_div16_52_r <- inline_div32_div16_52_t31 Subtract inline_div32_div16_52_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x00)], resolved: None }
21 5c 00 
# 0104b Instruction { source: "inline_div32_div16_52_r <- inline_div32_div16_52_t31 Subtract inline_div32_div16_52_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 0104d Instruction { source: "inline_div32_div16_52_r <- inline_div32_div16_52_t31 Subtract inline_div32_div16_52_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 0104f Instruction { source: "inline_div32_div16_52_r <- inline_div32_div16_52_t31 Subtract inline_div32_div16_52_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 01051 Instruction { source: "inline_div32_div16_52_r <- inline_div32_div16_52_t31 Subtract inline_div32_div16_52_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 01053 Instruction { source: "inline_div32_div16_52_r <- inline_div32_div16_52_t31 Subtract inline_div32_div16_52_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 01059 Instruction { source: "inline_div32_div16_52_r <- inline_div32_div16_52_t31 Subtract inline_div32_div16_52_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0105a Instruction { source: "inline_div32_div16_52_r <- inline_div32_div16_52_t31 Subtract inline_div32_div16_52_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x00), Register(0x5c)], resolved: None }
30 50 00 5c 
# 0105e Instruction { source: "inline_div32_div16_52_r <- inline_div32_div16_52_t31 Subtract inline_div32_div16_52_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_52_t33 <- inline_div32_div16_52_r U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }", "Ident(\"r\")", "Ident(\"r\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_t33 <- inline_div32_div16_52_r U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"r\\\")\", \"Ident(\\\"r\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_div32_div16_52_t34 <- inline_div32_div16_52_b U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_52_t34 <- inline_div32_div16_52_b U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# if inline_div32_div16_52_t33 < inline_div32_div16_52_t34 then 'inline_div32_div16_52_div16_if_true_0_22' else 'inline_div32_div16_52_div16_if_else_0_23'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }"] }
# 0105f Instruction { source: "if inline_div32_div16_52_t33 < inline_div32_div16_52_t34 then 'inline_div32_div16_52_div16_if_true_0_22' else 'inline_div32_div16_52_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8, args: [Register(0x57), Register(0x5f)], resolved: None }
15 57 5f 
# 01062 Instruction { source: "if inline_div32_div16_52_t33 < inline_div32_div16_52_t34 then 'inline_div32_div16_52_div16_if_true_0_22' else 'inline_div32_div16_52_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x56), Register(0x5e)], resolved: None }
16 56 5e 
# 01065 Instruction { source: "if inline_div32_div16_52_t33 < inline_div32_div16_52_t34 then 'inline_div32_div16_52_div16_if_true_0_22' else 'inline_div32_div16_52_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x55), Register(0x5d)], resolved: None }
16 55 5d 
# 01068 Instruction { source: "if inline_div32_div16_52_t33 < inline_div32_div16_52_t34 then 'inline_div32_div16_52_div16_if_true_0_22' else 'inline_div32_div16_52_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x54), Register(0x5c)], resolved: None }
16 54 5c 
# 0106b Instruction { source: "if inline_div32_div16_52_t33 < inline_div32_div16_52_t34 then 'inline_div32_div16_52_div16_if_true_0_22' else 'inline_div32_div16_52_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_52_div16_if_else_0_23)], resolved: None }
71 7d 10 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_52_t33 < inline_div32_div16_52_t34 then 'inline_div32_div16_52_div16_if_true_0_22' else 'inline_div32_div16_52_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_if_true_0_22)], resolved: None }
# :inline_div32_div16_52_div16_if_true_0_22
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }"] }
# inline_div32_div16_52_div16_if_true_0_22
# inline_div32_div16_52_t35 <- inline_div32_div16_52_mid U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 0106f Instruction { source: "inline_div32_div16_52_t35 <- inline_div32_div16_52_mid U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x50)], resolved: None }
21 7c 50 
# t7 <- inline_div32_div16_52_t35 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01072 Instruction { source: "t7 <- inline_div32_div16_52_t35 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: Copy32, args: [Register(0x50), Register(0x54)], resolved: None }
21 50 54 
# goto inline_div32_div16_52_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01075 Instruction { source: "goto inline_div32_div16_52_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_function_end_div16)], resolved: None }
70 9a 10 00 
# goto inline_div32_div16_52_div16_if_end_21
# 	SourceContext { contexts: [] }
# 01079 Instruction { source: "goto inline_div32_div16_52_div16_if_end_21\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_if_end_21)], resolved: None }
70 7d 10 00 
# :inline_div32_div16_52_div16_if_else_0_23
# 	SourceContext { contexts: [] }
# inline_div32_div16_52_div16_if_else_0_23
# :inline_div32_div16_52_div16_if_end_21
# 	SourceContext { contexts: [] }
# inline_div32_div16_52_div16_if_end_21
# inline_div32_div16_52_t36 <- inline_div32_div16_52_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 0107d Instruction { source: "inline_div32_div16_52_t36 <- inline_div32_div16_52_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x5c)], resolved: None }
21 7c 5c 
# inline_div32_div16_52_t37 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01080 Instruction { source: "inline_div32_div16_52_t37 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x60), Constant32(0x00000001=1)], resolved: None }
20 60 01 00 00 00 
# inline_div32_div16_52_lo <- inline_div32_div16_52_t36 Add inline_div32_div16_52_t37
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))"] }
# 01086 Instruction { source: "inline_div32_div16_52_lo <- inline_div32_div16_52_t36 Add inline_div32_div16_52_t37\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01087 Instruction { source: "inline_div32_div16_52_lo <- inline_div32_div16_52_t36 Add inline_div32_div16_52_t37\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x5c), Register(0x60), Register(0x78)], resolved: None }
30 5c 60 78 
# 0108b Instruction { source: "inline_div32_div16_52_lo <- inline_div32_div16_52_t36 Add inline_div32_div16_52_t37\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_div32_div16_52_div16_while_predicate_6
# 	SourceContext { contexts: [] }
# 0108c Instruction { source: "goto inline_div32_div16_52_div16_while_predicate_6\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_div16_while_predicate_6)], resolved: None }
70 14 0e 00 
# :inline_div32_div16_52_div16_while_end_8
# 	SourceContext { contexts: [] }
# inline_div32_div16_52_div16_while_end_8
# inline_div32_div16_52_t38 <- inline_div32_div16_52_lo U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 01090 Instruction { source: "inline_div32_div16_52_t38 <- inline_div32_div16_52_lo U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0x78), Register(0x50)], resolved: None }
21 78 50 
# t7 <- inline_div32_div16_52_t38 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 01093 Instruction { source: "t7 <- inline_div32_div16_52_t38 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: Copy32, args: [Register(0x50), Register(0x54)], resolved: None }
21 50 54 
# goto inline_div32_div16_52_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 01096 Instruction { source: "goto inline_div32_div16_52_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_52_function_end_div16)], resolved: None }
70 9a 10 00 
# :inline_div32_div16_52_function_end_div16
# 	SourceContext { contexts: [] }
# inline_div32_div16_52_function_end_div16
# t10 <- 0n8/0x00000008u32 
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }"] }
# 0109a Instruction { source: "t10 <- 0n8/0x00000008u32 \n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000008=8)], resolved: None }
20 50 08 00 00 00 
# __frame_pointer <- __frame_pointer Add t10
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }"] }
# 010a0 Instruction { source: "__frame_pointer <- __frame_pointer Add t10\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 010a1 Instruction { source: "__frame_pointer <- __frame_pointer Add t10\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x50), Register(0x0c)], resolved: None }
30 0c 50 0c 
# 010a5 Instruction { source: "__frame_pointer <- __frame_pointer Add t10\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t7)
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }"] }
# 010a6 Instruction { source: "return Some(t7)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\"] }", opcode: Copy32, args: [Register(0x54), Register(0x00)], resolved: None }
21 54 00 
# 010a9 Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 010af Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto div32_if_end_3
# 	SourceContext { contexts: [] }
# 010b1 Instruction { source: "goto div32_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_3)], resolved: None }
70 b5 10 00 
# :div32_if_else_0_5
# 	SourceContext { contexts: [] }
# div32_if_else_0_5
# :div32_if_end_3
# 	SourceContext { contexts: [] }
# div32_if_end_3
# lo <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 010b5 Instruction { source: "lo <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x68), Constant32(0x00000000=0)], resolved: None }
20 68 00 00 00 00 
# hi <- 0xffffffffu32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 4294967295) }", "Number(USIZE, 4294967295)"] }
# 010bb Instruction { source: "hi <- 0xffffffffu32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 4294967295) }\", \"Number(USIZE, 4294967295)\"] }", opcode: LoadImm32, args: [Register(0x58), Constant32(0xffffffff=4294967295)], resolved: None }
20 58 ff ff ff ff 
# :div32_while_predicate_6
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }"] }
# div32_while_predicate_6
# t11 <- lo U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 010c1 Instruction { source: "t11 <- lo U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x5c)], resolved: None }
21 68 5c 
# t12 <- hi U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }", "Ident(\"hi\")", "Ident(\"hi\")"] }
# optimized away noop copy Instruction { source: "t12 <- hi U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\", \"Ident(\\\"hi\\\")\", \"Ident(\\\"hi\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }"] }
# 010c4 Instruction { source: "if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8, args: [Register(0x5b), Register(0x5f)], resolved: None }
15 5b 5f 
# 010c7 Instruction { source: "if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x5a), Register(0x5e)], resolved: None }
16 5a 5e 
# 010ca Instruction { source: "if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x59), Register(0x5d)], resolved: None }
16 59 5d 
# 010cd Instruction { source: "if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x58), Register(0x5c)], resolved: None }
16 58 5c 
# 010d0 Instruction { source: "if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: JcImm, args: [Label24(div32_while_end_8)], resolved: None }
71 76 13 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_while_body_7)], resolved: None }
# :div32_while_body_7
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }"] }
# div32_while_body_7
# t14 <- lo U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 010d4 Instruction { source: "t14 <- lo U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] })\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] })\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x5c)], resolved: None }
21 68 5c 
# inline_div32_shiftright1_53_a <- t14 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })"] }
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_53_a <- t14 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] })\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] })\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_div32_shiftright1_53_t1 <- inline_div32_shiftright1_53_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 010d7 Instruction { source: "inline_div32_shiftright1_53_t1 <- inline_div32_shiftright1_53_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x6d)], resolved: None }
0b 5c 6d 
# inline_div32_shiftright1_53_t2 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 010da Instruction { source: "inline_div32_shiftright1_53_t2 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x01=1)], resolved: None }
04 6c 01 
# inline_div32_shiftright1_53_t0 <- inline_div32_shiftright1_53_t1 RotateRight inline_div32_shiftright1_53_t2
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))"] }
# 010dd Instruction { source: "inline_div32_shiftright1_53_t0 <- inline_div32_shiftright1_53_t1 RotateRight inline_div32_shiftright1_53_t2\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x6c), Register(0x6d), Register(0x6c)], resolved: None }
1e 04 6c 6d 6c 
# inline_div32_shiftright1_53_a[0x00..0x01] <- inline_div32_shiftright1_53_t0 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }"] }
# 010e2 Instruction { source: "inline_div32_shiftright1_53_a[0x00..0x01] <- inline_div32_shiftright1_53_t0 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5c)], resolved: None }
0b 6c 5c 
# inline_div32_shiftright1_53_t4 <- inline_div32_shiftright1_53_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 010e5 Instruction { source: "inline_div32_shiftright1_53_t4 <- inline_div32_shiftright1_53_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x5d), Register(0x6d)], resolved: None }
0b 5d 6d 
# inline_div32_shiftright1_53_t5 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 010e8 Instruction { source: "inline_div32_shiftright1_53_t5 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x01=1)], resolved: None }
04 6c 01 
# inline_div32_shiftright1_53_t3 <- inline_div32_shiftright1_53_t4 RotateRight inline_div32_shiftright1_53_t5
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))"] }
# 010eb Instruction { source: "inline_div32_shiftright1_53_t3 <- inline_div32_shiftright1_53_t4 RotateRight inline_div32_shiftright1_53_t5\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x6c), Register(0x6d), Register(0x6c)], resolved: None }
1e 04 6c 6d 6c 
# inline_div32_shiftright1_53_a[0x01..0x02] <- inline_div32_shiftright1_53_t3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }"] }
# 010f0 Instruction { source: "inline_div32_shiftright1_53_a[0x01..0x02] <- inline_div32_shiftright1_53_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5d)], resolved: None }
0b 6c 5d 
# inline_div32_shiftright1_53_t7 <- inline_div32_shiftright1_53_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 010f3 Instruction { source: "inline_div32_shiftright1_53_t7 <- inline_div32_shiftright1_53_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x5e), Register(0x6d)], resolved: None }
0b 5e 6d 
# inline_div32_shiftright1_53_t8 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 010f6 Instruction { source: "inline_div32_shiftright1_53_t8 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x01=1)], resolved: None }
04 6c 01 
# inline_div32_shiftright1_53_t6 <- inline_div32_shiftright1_53_t7 RotateRight inline_div32_shiftright1_53_t8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))"] }
# 010f9 Instruction { source: "inline_div32_shiftright1_53_t6 <- inline_div32_shiftright1_53_t7 RotateRight inline_div32_shiftright1_53_t8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x6c), Register(0x6d), Register(0x6c)], resolved: None }
1e 04 6c 6d 6c 
# inline_div32_shiftright1_53_a[0x02..0x03] <- inline_div32_shiftright1_53_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }"] }
# 010fe Instruction { source: "inline_div32_shiftright1_53_a[0x02..0x03] <- inline_div32_shiftright1_53_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5e)], resolved: None }
0b 6c 5e 
# inline_div32_shiftright1_53_t10 <- inline_div32_shiftright1_53_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01101 Instruction { source: "inline_div32_shiftright1_53_t10 <- inline_div32_shiftright1_53_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x5f), Register(0x6d)], resolved: None }
0b 5f 6d 
# inline_div32_shiftright1_53_t11 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 01104 Instruction { source: "inline_div32_shiftright1_53_t11 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x01=1)], resolved: None }
04 6c 01 
# inline_div32_shiftright1_53_t9 <- inline_div32_shiftright1_53_t10 RotateRight inline_div32_shiftright1_53_t11
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))"] }
# 01107 Instruction { source: "inline_div32_shiftright1_53_t9 <- inline_div32_shiftright1_53_t10 RotateRight inline_div32_shiftright1_53_t11\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x6c), Register(0x6d), Register(0x6c)], resolved: None }
1e 04 6c 6d 6c 
# inline_div32_shiftright1_53_a[0x03..0x04] <- inline_div32_shiftright1_53_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }"] }
# 0110c Instruction { source: "inline_div32_shiftright1_53_a[0x03..0x04] <- inline_div32_shiftright1_53_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5f)], resolved: None }
0b 6c 5f 
# inline_div32_shiftright1_53_t13 <- inline_div32_shiftright1_53_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 0110f Instruction { source: "inline_div32_shiftright1_53_t13 <- inline_div32_shiftright1_53_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x6d)], resolved: None }
0b 5c 6d 
# inline_div32_shiftright1_53_t14 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 01112 Instruction { source: "inline_div32_shiftright1_53_t14 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x7f=127)], resolved: None }
04 6c 7f 
# inline_div32_shiftright1_53_t12 <- inline_div32_shiftright1_53_t13 BitwiseAnd inline_div32_shiftright1_53_t14
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))"] }
# 01115 Instruction { source: "inline_div32_shiftright1_53_t12 <- inline_div32_shiftright1_53_t13 BitwiseAnd inline_div32_shiftright1_53_t14\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1b 6d 6c 6c 
# inline_div32_shiftright1_53_a[0x00..0x01] <- inline_div32_shiftright1_53_t12 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }"] }
# 01119 Instruction { source: "inline_div32_shiftright1_53_a[0x00..0x01] <- inline_div32_shiftright1_53_t12 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5c)], resolved: None }
0b 6c 5c 
# inline_div32_shiftright1_53_t16 <- inline_div32_shiftright1_53_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 0111c Instruction { source: "inline_div32_shiftright1_53_t16 <- inline_div32_shiftright1_53_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x6d)], resolved: None }
0b 5c 6d 
# inline_div32_shiftright1_53_t18 <- inline_div32_shiftright1_53_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 0111f Instruction { source: "inline_div32_shiftright1_53_t18 <- inline_div32_shiftright1_53_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x5d), Register(0x6c)], resolved: None }
0b 5d 6c 
# inline_div32_shiftright1_53_t19 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 01122 Instruction { source: "inline_div32_shiftright1_53_t19 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x76), Constant8(0x80=128)], resolved: None }
04 76 80 
# inline_div32_shiftright1_53_t17 <- inline_div32_shiftright1_53_t18 BitwiseAnd inline_div32_shiftright1_53_t19
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))"] }
# 01125 Instruction { source: "inline_div32_shiftright1_53_t17 <- inline_div32_shiftright1_53_t18 BitwiseAnd inline_div32_shiftright1_53_t19\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x6c), Register(0x76), Register(0x6c)], resolved: None }
1b 6c 76 6c 
# inline_div32_shiftright1_53_t15 <- inline_div32_shiftright1_53_t16 BitwiseOr inline_div32_shiftright1_53_t17
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))"] }
# 01129 Instruction { source: "inline_div32_shiftright1_53_t15 <- inline_div32_shiftright1_53_t16 BitwiseOr inline_div32_shiftright1_53_t17\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1c 6d 6c 6c 
# inline_div32_shiftright1_53_a[0x00..0x01] <- inline_div32_shiftright1_53_t15 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }"] }
# 0112d Instruction { source: "inline_div32_shiftright1_53_a[0x00..0x01] <- inline_div32_shiftright1_53_t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5c)], resolved: None }
0b 6c 5c 
# inline_div32_shiftright1_53_t21 <- inline_div32_shiftright1_53_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01130 Instruction { source: "inline_div32_shiftright1_53_t21 <- inline_div32_shiftright1_53_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x5d), Register(0x6d)], resolved: None }
0b 5d 6d 
# inline_div32_shiftright1_53_t22 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 01133 Instruction { source: "inline_div32_shiftright1_53_t22 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x7f=127)], resolved: None }
04 6c 7f 
# inline_div32_shiftright1_53_t20 <- inline_div32_shiftright1_53_t21 BitwiseAnd inline_div32_shiftright1_53_t22
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))"] }
# 01136 Instruction { source: "inline_div32_shiftright1_53_t20 <- inline_div32_shiftright1_53_t21 BitwiseAnd inline_div32_shiftright1_53_t22\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1b 6d 6c 6c 
# inline_div32_shiftright1_53_a[0x01..0x02] <- inline_div32_shiftright1_53_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }"] }
# 0113a Instruction { source: "inline_div32_shiftright1_53_a[0x01..0x02] <- inline_div32_shiftright1_53_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5d)], resolved: None }
0b 6c 5d 
# inline_div32_shiftright1_53_t24 <- inline_div32_shiftright1_53_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 0113d Instruction { source: "inline_div32_shiftright1_53_t24 <- inline_div32_shiftright1_53_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x5d), Register(0x6d)], resolved: None }
0b 5d 6d 
# inline_div32_shiftright1_53_t26 <- inline_div32_shiftright1_53_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01140 Instruction { source: "inline_div32_shiftright1_53_t26 <- inline_div32_shiftright1_53_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x5e), Register(0x6c)], resolved: None }
0b 5e 6c 
# inline_div32_shiftright1_53_t27 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 01143 Instruction { source: "inline_div32_shiftright1_53_t27 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x76), Constant8(0x80=128)], resolved: None }
04 76 80 
# inline_div32_shiftright1_53_t25 <- inline_div32_shiftright1_53_t26 BitwiseAnd inline_div32_shiftright1_53_t27
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))"] }
# 01146 Instruction { source: "inline_div32_shiftright1_53_t25 <- inline_div32_shiftright1_53_t26 BitwiseAnd inline_div32_shiftright1_53_t27\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x6c), Register(0x76), Register(0x6c)], resolved: None }
1b 6c 76 6c 
# inline_div32_shiftright1_53_t23 <- inline_div32_shiftright1_53_t24 BitwiseOr inline_div32_shiftright1_53_t25
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))"] }
# 0114a Instruction { source: "inline_div32_shiftright1_53_t23 <- inline_div32_shiftright1_53_t24 BitwiseOr inline_div32_shiftright1_53_t25\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1c 6d 6c 6c 
# inline_div32_shiftright1_53_a[0x01..0x02] <- inline_div32_shiftright1_53_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }"] }
# 0114e Instruction { source: "inline_div32_shiftright1_53_a[0x01..0x02] <- inline_div32_shiftright1_53_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5d)], resolved: None }
0b 6c 5d 
# inline_div32_shiftright1_53_t29 <- inline_div32_shiftright1_53_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01151 Instruction { source: "inline_div32_shiftright1_53_t29 <- inline_div32_shiftright1_53_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x5e), Register(0x6d)], resolved: None }
0b 5e 6d 
# inline_div32_shiftright1_53_t30 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 01154 Instruction { source: "inline_div32_shiftright1_53_t30 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x7f=127)], resolved: None }
04 6c 7f 
# inline_div32_shiftright1_53_t28 <- inline_div32_shiftright1_53_t29 BitwiseAnd inline_div32_shiftright1_53_t30
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))"] }
# 01157 Instruction { source: "inline_div32_shiftright1_53_t28 <- inline_div32_shiftright1_53_t29 BitwiseAnd inline_div32_shiftright1_53_t30\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1b 6d 6c 6c 
# inline_div32_shiftright1_53_a[0x02..0x03] <- inline_div32_shiftright1_53_t28 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }"] }
# 0115b Instruction { source: "inline_div32_shiftright1_53_a[0x02..0x03] <- inline_div32_shiftright1_53_t28 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5e)], resolved: None }
0b 6c 5e 
# inline_div32_shiftright1_53_t32 <- inline_div32_shiftright1_53_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 0115e Instruction { source: "inline_div32_shiftright1_53_t32 <- inline_div32_shiftright1_53_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x5e), Register(0x6d)], resolved: None }
0b 5e 6d 
# inline_div32_shiftright1_53_t34 <- inline_div32_shiftright1_53_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01161 Instruction { source: "inline_div32_shiftright1_53_t34 <- inline_div32_shiftright1_53_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x5f), Register(0x6c)], resolved: None }
0b 5f 6c 
# inline_div32_shiftright1_53_t35 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 01164 Instruction { source: "inline_div32_shiftright1_53_t35 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x76), Constant8(0x80=128)], resolved: None }
04 76 80 
# inline_div32_shiftright1_53_t33 <- inline_div32_shiftright1_53_t34 BitwiseAnd inline_div32_shiftright1_53_t35
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))"] }
# 01167 Instruction { source: "inline_div32_shiftright1_53_t33 <- inline_div32_shiftright1_53_t34 BitwiseAnd inline_div32_shiftright1_53_t35\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x6c), Register(0x76), Register(0x6c)], resolved: None }
1b 6c 76 6c 
# inline_div32_shiftright1_53_t31 <- inline_div32_shiftright1_53_t32 BitwiseOr inline_div32_shiftright1_53_t33
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))"] }
# 0116b Instruction { source: "inline_div32_shiftright1_53_t31 <- inline_div32_shiftright1_53_t32 BitwiseOr inline_div32_shiftright1_53_t33\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1c 6d 6c 6c 
# inline_div32_shiftright1_53_a[0x02..0x03] <- inline_div32_shiftright1_53_t31 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }"] }
# 0116f Instruction { source: "inline_div32_shiftright1_53_a[0x02..0x03] <- inline_div32_shiftright1_53_t31 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5e)], resolved: None }
0b 6c 5e 
# inline_div32_shiftright1_53_t37 <- inline_div32_shiftright1_53_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01172 Instruction { source: "inline_div32_shiftright1_53_t37 <- inline_div32_shiftright1_53_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x5f), Register(0x6d)], resolved: None }
0b 5f 6d 
# inline_div32_shiftright1_53_t38 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 01175 Instruction { source: "inline_div32_shiftright1_53_t38 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x7f=127)], resolved: None }
04 6c 7f 
# inline_div32_shiftright1_53_t36 <- inline_div32_shiftright1_53_t37 BitwiseAnd inline_div32_shiftright1_53_t38
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))"] }
# 01178 Instruction { source: "inline_div32_shiftright1_53_t36 <- inline_div32_shiftright1_53_t37 BitwiseAnd inline_div32_shiftright1_53_t38\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1b 6d 6c 6c 
# inline_div32_shiftright1_53_a[0x03..0x04] <- inline_div32_shiftright1_53_t36 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }"] }
# 0117c Instruction { source: "inline_div32_shiftright1_53_a[0x03..0x04] <- inline_div32_shiftright1_53_t36 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5f)], resolved: None }
0b 6c 5f 
# inline_div32_shiftright1_53_t39 <- inline_div32_shiftright1_53_a U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_53_t39 <- inline_div32_shiftright1_53_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# t13 <- inline_div32_shiftright1_53_t39 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# 0117f Instruction { source: "t13 <- inline_div32_shiftright1_53_t39 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x70)], resolved: None }
21 5c 70 
# goto inline_div32_shiftright1_53_function_end_shiftright1
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_shiftright1_53_function_end_shiftright1\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_shiftright1_53_function_end_shiftright1)], resolved: None }
# :inline_div32_shiftright1_53_function_end_shiftright1
# 	SourceContext { contexts: [] }
# inline_div32_shiftright1_53_function_end_shiftright1
# t16 <- hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })", "Ident(\"hi\")", "Ident(\"hi\")"] }
# optimized away noop copy Instruction { source: "t16 <- hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })\", \"Ident(\\\"hi\\\")\", \"Ident(\\\"hi\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_div32_shiftright1_54_a <- t16 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })"] }
# 01182 Instruction { source: "inline_div32_shiftright1_54_a <- t16 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x58), Register(0x5c)], resolved: None }
21 58 5c 
# inline_div32_shiftright1_54_t1 <- inline_div32_shiftright1_54_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01185 Instruction { source: "inline_div32_shiftright1_54_t1 <- inline_div32_shiftright1_54_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x6d)], resolved: None }
0b 5c 6d 
# inline_div32_shiftright1_54_t2 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 01188 Instruction { source: "inline_div32_shiftright1_54_t2 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x01=1)], resolved: None }
04 6c 01 
# inline_div32_shiftright1_54_t0 <- inline_div32_shiftright1_54_t1 RotateRight inline_div32_shiftright1_54_t2
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))"] }
# 0118b Instruction { source: "inline_div32_shiftright1_54_t0 <- inline_div32_shiftright1_54_t1 RotateRight inline_div32_shiftright1_54_t2\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x6c), Register(0x6d), Register(0x6c)], resolved: None }
1e 04 6c 6d 6c 
# inline_div32_shiftright1_54_a[0x00..0x01] <- inline_div32_shiftright1_54_t0 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }"] }
# 01190 Instruction { source: "inline_div32_shiftright1_54_a[0x00..0x01] <- inline_div32_shiftright1_54_t0 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5c)], resolved: None }
0b 6c 5c 
# inline_div32_shiftright1_54_t4 <- inline_div32_shiftright1_54_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01193 Instruction { source: "inline_div32_shiftright1_54_t4 <- inline_div32_shiftright1_54_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x5d), Register(0x6d)], resolved: None }
0b 5d 6d 
# inline_div32_shiftright1_54_t5 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 01196 Instruction { source: "inline_div32_shiftright1_54_t5 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x01=1)], resolved: None }
04 6c 01 
# inline_div32_shiftright1_54_t3 <- inline_div32_shiftright1_54_t4 RotateRight inline_div32_shiftright1_54_t5
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))"] }
# 01199 Instruction { source: "inline_div32_shiftright1_54_t3 <- inline_div32_shiftright1_54_t4 RotateRight inline_div32_shiftright1_54_t5\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x6c), Register(0x6d), Register(0x6c)], resolved: None }
1e 04 6c 6d 6c 
# inline_div32_shiftright1_54_a[0x01..0x02] <- inline_div32_shiftright1_54_t3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }"] }
# 0119e Instruction { source: "inline_div32_shiftright1_54_a[0x01..0x02] <- inline_div32_shiftright1_54_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5d)], resolved: None }
0b 6c 5d 
# inline_div32_shiftright1_54_t7 <- inline_div32_shiftright1_54_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 011a1 Instruction { source: "inline_div32_shiftright1_54_t7 <- inline_div32_shiftright1_54_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x5e), Register(0x6d)], resolved: None }
0b 5e 6d 
# inline_div32_shiftright1_54_t8 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 011a4 Instruction { source: "inline_div32_shiftright1_54_t8 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x01=1)], resolved: None }
04 6c 01 
# inline_div32_shiftright1_54_t6 <- inline_div32_shiftright1_54_t7 RotateRight inline_div32_shiftright1_54_t8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))"] }
# 011a7 Instruction { source: "inline_div32_shiftright1_54_t6 <- inline_div32_shiftright1_54_t7 RotateRight inline_div32_shiftright1_54_t8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x6c), Register(0x6d), Register(0x6c)], resolved: None }
1e 04 6c 6d 6c 
# inline_div32_shiftright1_54_a[0x02..0x03] <- inline_div32_shiftright1_54_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }"] }
# 011ac Instruction { source: "inline_div32_shiftright1_54_a[0x02..0x03] <- inline_div32_shiftright1_54_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5e)], resolved: None }
0b 6c 5e 
# inline_div32_shiftright1_54_t10 <- inline_div32_shiftright1_54_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 011af Instruction { source: "inline_div32_shiftright1_54_t10 <- inline_div32_shiftright1_54_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x5f), Register(0x6d)], resolved: None }
0b 5f 6d 
# inline_div32_shiftright1_54_t11 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 011b2 Instruction { source: "inline_div32_shiftright1_54_t11 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x01=1)], resolved: None }
04 6c 01 
# inline_div32_shiftright1_54_t9 <- inline_div32_shiftright1_54_t10 RotateRight inline_div32_shiftright1_54_t11
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))"] }
# 011b5 Instruction { source: "inline_div32_shiftright1_54_t9 <- inline_div32_shiftright1_54_t10 RotateRight inline_div32_shiftright1_54_t11\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x6c), Register(0x6d), Register(0x6c)], resolved: None }
1e 04 6c 6d 6c 
# inline_div32_shiftright1_54_a[0x03..0x04] <- inline_div32_shiftright1_54_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }"] }
# 011ba Instruction { source: "inline_div32_shiftright1_54_a[0x03..0x04] <- inline_div32_shiftright1_54_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5f)], resolved: None }
0b 6c 5f 
# inline_div32_shiftright1_54_t13 <- inline_div32_shiftright1_54_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 011bd Instruction { source: "inline_div32_shiftright1_54_t13 <- inline_div32_shiftright1_54_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x6d)], resolved: None }
0b 5c 6d 
# inline_div32_shiftright1_54_t14 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 011c0 Instruction { source: "inline_div32_shiftright1_54_t14 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x7f=127)], resolved: None }
04 6c 7f 
# inline_div32_shiftright1_54_t12 <- inline_div32_shiftright1_54_t13 BitwiseAnd inline_div32_shiftright1_54_t14
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))"] }
# 011c3 Instruction { source: "inline_div32_shiftright1_54_t12 <- inline_div32_shiftright1_54_t13 BitwiseAnd inline_div32_shiftright1_54_t14\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1b 6d 6c 6c 
# inline_div32_shiftright1_54_a[0x00..0x01] <- inline_div32_shiftright1_54_t12 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }"] }
# 011c7 Instruction { source: "inline_div32_shiftright1_54_a[0x00..0x01] <- inline_div32_shiftright1_54_t12 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5c)], resolved: None }
0b 6c 5c 
# inline_div32_shiftright1_54_t16 <- inline_div32_shiftright1_54_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 011ca Instruction { source: "inline_div32_shiftright1_54_t16 <- inline_div32_shiftright1_54_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x6d)], resolved: None }
0b 5c 6d 
# inline_div32_shiftright1_54_t18 <- inline_div32_shiftright1_54_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 011cd Instruction { source: "inline_div32_shiftright1_54_t18 <- inline_div32_shiftright1_54_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x5d), Register(0x6c)], resolved: None }
0b 5d 6c 
# inline_div32_shiftright1_54_t19 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 011d0 Instruction { source: "inline_div32_shiftright1_54_t19 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x76), Constant8(0x80=128)], resolved: None }
04 76 80 
# inline_div32_shiftright1_54_t17 <- inline_div32_shiftright1_54_t18 BitwiseAnd inline_div32_shiftright1_54_t19
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))"] }
# 011d3 Instruction { source: "inline_div32_shiftright1_54_t17 <- inline_div32_shiftright1_54_t18 BitwiseAnd inline_div32_shiftright1_54_t19\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x6c), Register(0x76), Register(0x6c)], resolved: None }
1b 6c 76 6c 
# inline_div32_shiftright1_54_t15 <- inline_div32_shiftright1_54_t16 BitwiseOr inline_div32_shiftright1_54_t17
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))"] }
# 011d7 Instruction { source: "inline_div32_shiftright1_54_t15 <- inline_div32_shiftright1_54_t16 BitwiseOr inline_div32_shiftright1_54_t17\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1c 6d 6c 6c 
# inline_div32_shiftright1_54_a[0x00..0x01] <- inline_div32_shiftright1_54_t15 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }"] }
# 011db Instruction { source: "inline_div32_shiftright1_54_a[0x00..0x01] <- inline_div32_shiftright1_54_t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5c)], resolved: None }
0b 6c 5c 
# inline_div32_shiftright1_54_t21 <- inline_div32_shiftright1_54_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 011de Instruction { source: "inline_div32_shiftright1_54_t21 <- inline_div32_shiftright1_54_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x5d), Register(0x6d)], resolved: None }
0b 5d 6d 
# inline_div32_shiftright1_54_t22 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 011e1 Instruction { source: "inline_div32_shiftright1_54_t22 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x7f=127)], resolved: None }
04 6c 7f 
# inline_div32_shiftright1_54_t20 <- inline_div32_shiftright1_54_t21 BitwiseAnd inline_div32_shiftright1_54_t22
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))"] }
# 011e4 Instruction { source: "inline_div32_shiftright1_54_t20 <- inline_div32_shiftright1_54_t21 BitwiseAnd inline_div32_shiftright1_54_t22\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1b 6d 6c 6c 
# inline_div32_shiftright1_54_a[0x01..0x02] <- inline_div32_shiftright1_54_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }"] }
# 011e8 Instruction { source: "inline_div32_shiftright1_54_a[0x01..0x02] <- inline_div32_shiftright1_54_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5d)], resolved: None }
0b 6c 5d 
# inline_div32_shiftright1_54_t24 <- inline_div32_shiftright1_54_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 011eb Instruction { source: "inline_div32_shiftright1_54_t24 <- inline_div32_shiftright1_54_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x5d), Register(0x6d)], resolved: None }
0b 5d 6d 
# inline_div32_shiftright1_54_t26 <- inline_div32_shiftright1_54_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 011ee Instruction { source: "inline_div32_shiftright1_54_t26 <- inline_div32_shiftright1_54_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x5e), Register(0x6c)], resolved: None }
0b 5e 6c 
# inline_div32_shiftright1_54_t27 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 011f1 Instruction { source: "inline_div32_shiftright1_54_t27 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x76), Constant8(0x80=128)], resolved: None }
04 76 80 
# inline_div32_shiftright1_54_t25 <- inline_div32_shiftright1_54_t26 BitwiseAnd inline_div32_shiftright1_54_t27
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))"] }
# 011f4 Instruction { source: "inline_div32_shiftright1_54_t25 <- inline_div32_shiftright1_54_t26 BitwiseAnd inline_div32_shiftright1_54_t27\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x6c), Register(0x76), Register(0x6c)], resolved: None }
1b 6c 76 6c 
# inline_div32_shiftright1_54_t23 <- inline_div32_shiftright1_54_t24 BitwiseOr inline_div32_shiftright1_54_t25
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))"] }
# 011f8 Instruction { source: "inline_div32_shiftright1_54_t23 <- inline_div32_shiftright1_54_t24 BitwiseOr inline_div32_shiftright1_54_t25\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1c 6d 6c 6c 
# inline_div32_shiftright1_54_a[0x01..0x02] <- inline_div32_shiftright1_54_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }"] }
# 011fc Instruction { source: "inline_div32_shiftright1_54_a[0x01..0x02] <- inline_div32_shiftright1_54_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5d)], resolved: None }
0b 6c 5d 
# inline_div32_shiftright1_54_t29 <- inline_div32_shiftright1_54_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 011ff Instruction { source: "inline_div32_shiftright1_54_t29 <- inline_div32_shiftright1_54_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x5e), Register(0x6d)], resolved: None }
0b 5e 6d 
# inline_div32_shiftright1_54_t30 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 01202 Instruction { source: "inline_div32_shiftright1_54_t30 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x7f=127)], resolved: None }
04 6c 7f 
# inline_div32_shiftright1_54_t28 <- inline_div32_shiftright1_54_t29 BitwiseAnd inline_div32_shiftright1_54_t30
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))"] }
# 01205 Instruction { source: "inline_div32_shiftright1_54_t28 <- inline_div32_shiftright1_54_t29 BitwiseAnd inline_div32_shiftright1_54_t30\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1b 6d 6c 6c 
# inline_div32_shiftright1_54_a[0x02..0x03] <- inline_div32_shiftright1_54_t28 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }"] }
# 01209 Instruction { source: "inline_div32_shiftright1_54_a[0x02..0x03] <- inline_div32_shiftright1_54_t28 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5e)], resolved: None }
0b 6c 5e 
# inline_div32_shiftright1_54_t32 <- inline_div32_shiftright1_54_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 0120c Instruction { source: "inline_div32_shiftright1_54_t32 <- inline_div32_shiftright1_54_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x5e), Register(0x6d)], resolved: None }
0b 5e 6d 
# inline_div32_shiftright1_54_t34 <- inline_div32_shiftright1_54_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 0120f Instruction { source: "inline_div32_shiftright1_54_t34 <- inline_div32_shiftright1_54_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x5f), Register(0x6c)], resolved: None }
0b 5f 6c 
# inline_div32_shiftright1_54_t35 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 01212 Instruction { source: "inline_div32_shiftright1_54_t35 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x76), Constant8(0x80=128)], resolved: None }
04 76 80 
# inline_div32_shiftright1_54_t33 <- inline_div32_shiftright1_54_t34 BitwiseAnd inline_div32_shiftright1_54_t35
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))"] }
# 01215 Instruction { source: "inline_div32_shiftright1_54_t33 <- inline_div32_shiftright1_54_t34 BitwiseAnd inline_div32_shiftright1_54_t35\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x6c), Register(0x76), Register(0x6c)], resolved: None }
1b 6c 76 6c 
# inline_div32_shiftright1_54_t31 <- inline_div32_shiftright1_54_t32 BitwiseOr inline_div32_shiftright1_54_t33
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))"] }
# 01219 Instruction { source: "inline_div32_shiftright1_54_t31 <- inline_div32_shiftright1_54_t32 BitwiseOr inline_div32_shiftright1_54_t33\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1c 6d 6c 6c 
# inline_div32_shiftright1_54_a[0x02..0x03] <- inline_div32_shiftright1_54_t31 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }"] }
# 0121d Instruction { source: "inline_div32_shiftright1_54_a[0x02..0x03] <- inline_div32_shiftright1_54_t31 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5e)], resolved: None }
0b 6c 5e 
# inline_div32_shiftright1_54_t37 <- inline_div32_shiftright1_54_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01220 Instruction { source: "inline_div32_shiftright1_54_t37 <- inline_div32_shiftright1_54_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x5f), Register(0x6d)], resolved: None }
0b 5f 6d 
# inline_div32_shiftright1_54_t38 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 01223 Instruction { source: "inline_div32_shiftright1_54_t38 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x7f=127)], resolved: None }
04 6c 7f 
# inline_div32_shiftright1_54_t36 <- inline_div32_shiftright1_54_t37 BitwiseAnd inline_div32_shiftright1_54_t38
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))"] }
# 01226 Instruction { source: "inline_div32_shiftright1_54_t36 <- inline_div32_shiftright1_54_t37 BitwiseAnd inline_div32_shiftright1_54_t38\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x6d), Register(0x6c), Register(0x6c)], resolved: None }
1b 6d 6c 6c 
# inline_div32_shiftright1_54_a[0x03..0x04] <- inline_div32_shiftright1_54_t36 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }"] }
# 0122a Instruction { source: "inline_div32_shiftright1_54_a[0x03..0x04] <- inline_div32_shiftright1_54_t36 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x5f)], resolved: None }
0b 6c 5f 
# inline_div32_shiftright1_54_t39 <- inline_div32_shiftright1_54_a U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_54_t39 <- inline_div32_shiftright1_54_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# t15 <- inline_div32_shiftright1_54_t39 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# optimized away noop copy Instruction { source: "t15 <- inline_div32_shiftright1_54_t39 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# goto inline_div32_shiftright1_54_function_end_shiftright1
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_shiftright1_54_function_end_shiftright1\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_shiftright1_54_function_end_shiftright1)], resolved: None }
# :inline_div32_shiftright1_54_function_end_shiftright1
# 	SourceContext { contexts: [] }
# inline_div32_shiftright1_54_function_end_shiftright1
# mid <- t13 Add t15
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))"] }
# 0122d Instruction { source: "mid <- t13 Add t15\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0122e Instruction { source: "mid <- t13 Add t15\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\"] }", opcode: AddCarry32_1, args: [Register(0x70), Register(0x5c), Register(0x5c)], resolved: None }
30 70 5c 5c 
# 01232 Instruction { source: "mid <- t13 Add t15\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t18 <- mid U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Ident(\"mid\")", "Ident(\"mid\")"] }
# optimized away noop copy Instruction { source: "t18 <- mid U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# t19 <- b U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t19 <- b U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# t22 <- __frame_pointer U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "AddressOf(Ident(\"x64\"))", "AddressOf(Ident(\"x64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 01233 Instruction { source: "t22 <- __frame_pointer U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x84)], resolved: None }
21 0c 84 
# t23 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "AddressOf(Ident(\"x64\"))", "AddressOf(Ident(\"x64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01236 Instruction { source: "t23 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x60), Constant32(0x00000000=0)], resolved: None }
20 60 00 00 00 00 
# t21 <- t22 Add t23
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "AddressOf(Ident(\"x64\"))", "AddressOf(Ident(\"x64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))"] }
# 0123c Instruction { source: "t21 <- t22 Add t23\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0123d Instruction { source: "t21 <- t22 Add t23\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_1, args: [Register(0x84), Register(0x60), Register(0x60)], resolved: None }
30 84 60 60 
# 01241 Instruction { source: "t21 <- t22 Add t23\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t20 <- t21 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "AddressOf(Ident(\"x64\"))", "AddressOf(Ident(\"x64\"))"] }
# optimized away noop copy Instruction { source: "t20 <- t21 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# None <= call mul32_64(t18,t19,t20,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })"] }
# 01242 Instruction { source: "Arg0[a]=t18 None <= call mul32_64(t18,t19,t20,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x00)], resolved: None }
21 5c 00 
# 01245 Instruction { source: "Arg1[b]=t19 None <= call mul32_64(t18,t19,t20,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\"] }", opcode: Copy32, args: [Register(0x54), Register(0x04)], resolved: None }
21 54 04 
# 01248 Instruction { source: "Arg2[c]=t20 None <= call mul32_64(t18,t19,t20,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\"] }", opcode: Copy32, args: [Register(0x60), Register(0x08)], resolved: None }
21 60 08 
# Registers used by this function: {80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135}
# Registers used by callee tree: {184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248, 249, 250, 251}
# Registers to save: []
# 0124b Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01251 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 5b 12 00 00 
# 01257 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: JmpImm, args: [Label24(:mul32_64)], resolved: None }
70 ef 1a 00 
# 0125b Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t26 <- __frame_pointer U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "LocalFieldDeref(\"x64\", \"hi\")", "LocalFieldDeref(\"x64\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 01261 Instruction { source: "t26 <- __frame_pointer U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x84)], resolved: None }
21 0c 84 
# t27 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "LocalFieldDeref(\"x64\", \"hi\")", "LocalFieldDeref(\"x64\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01264 Instruction { source: "t27 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x60), Constant32(0x00000004=4)], resolved: None }
20 60 04 00 00 00 
# t25 <- t26 Add t27
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "LocalFieldDeref(\"x64\", \"hi\")", "LocalFieldDeref(\"x64\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))"] }
# 0126a Instruction { source: "t25 <- t26 Add t27\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0126b Instruction { source: "t25 <- t26 Add t27\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x84), Register(0x60), Register(0x60)], resolved: None }
30 84 60 60 
# 0126f Instruction { source: "t25 <- t26 Add t27\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t24 <- mem[t25] U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "LocalFieldDeref(\"x64\", \"hi\")", "LocalFieldDeref(\"x64\", \"hi\")"] }
# 01270 Instruction { source: "t24 <- mem[t25] U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0x60), Register(0x60)], resolved: None }
22 60 60 
# t28 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01273 Instruction { source: "t28 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000000=0)], resolved: None }
20 64 00 00 00 00 
# if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }"] }
# 01279 Instruction { source: "if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8, args: [Register(0x63), Register(0x67)], resolved: None }
15 63 67 
# 0127c Instruction { source: "if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x62), Register(0x66)], resolved: None }
16 62 66 
# 0127f Instruction { source: "if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x61), Register(0x65)], resolved: None }
16 61 65 
# 01282 Instruction { source: "if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x60), Register(0x64)], resolved: None }
16 60 64 
# 01285 Instruction { source: "if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_11)], resolved: None }
71 b1 12 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_10)], resolved: None }
# :div32_if_true_0_10
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# div32_if_true_0_10
# t29 <- mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01289 Instruction { source: "t29 <- mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x58)], resolved: None }
21 5c 58 
# t30 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0128c Instruction { source: "t30 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000001=1)], resolved: None }
20 5c 01 00 00 00 
# hi <- t29 Subtract t30
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 01292 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x00)], resolved: None }
21 5c 00 
# 01295 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 01297 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 01299 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 0129b Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 0129d Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 012a3 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 012a4 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x58), Register(0x00), Register(0x58)], resolved: None }
30 58 00 58 
# 012a8 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto div32_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 012a9 Instruction { source: "goto div32_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(div32_while_predicate_6)], resolved: None }
70 c1 10 00 
# goto div32_if_end_9
# 	SourceContext { contexts: [] }
# 012ad Instruction { source: "goto div32_if_end_9\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_9)], resolved: None }
70 b1 12 00 
# :div32_if_else_0_11
# 	SourceContext { contexts: [] }
# div32_if_else_0_11
# :div32_if_end_9
# 	SourceContext { contexts: [] }
# div32_if_end_9
# t31 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }", "LocalFieldDeref(\"x64\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Ident(\"__frame_pointer\")"] }
# 012b1 Instruction { source: "t31 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }\", \"LocalFieldDeref(\\\"x64\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x84)], resolved: None }
21 0c 84 
# x <- mem[t31] U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }", "LocalFieldDeref(\"x64\", \"lo\")"] }
# 012b4 Instruction { source: "x <- mem[t31] U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }\", \"LocalFieldDeref(\\\"x64\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x84), Register(0x60)], resolved: None }
22 84 60 
# t32 <- x U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "t32 <- x U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# t33 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t33 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }"] }
# 012b7 Instruction { source: "if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8, args: [Register(0x63), Register(0x53)], resolved: None }
15 63 53 
# 012ba Instruction { source: "if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x62), Register(0x52)], resolved: None }
16 62 52 
# 012bd Instruction { source: "if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x61), Register(0x51)], resolved: None }
16 61 51 
# 012c0 Instruction { source: "if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x60), Register(0x50)], resolved: None }
16 60 50 
# 012c3 Instruction { source: "if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_14)], resolved: None }
71 ef 12 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_13)], resolved: None }
# :div32_if_true_0_13
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# div32_if_true_0_13
# t34 <- mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 012c7 Instruction { source: "t34 <- mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x58)], resolved: None }
21 5c 58 
# t35 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 012ca Instruction { source: "t35 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000001=1)], resolved: None }
20 5c 01 00 00 00 
# hi <- t34 Subtract t35
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 012d0 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x00)], resolved: None }
21 5c 00 
# 012d3 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 012d5 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 012d7 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 012d9 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 012db Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 012e1 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 012e2 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x58), Register(0x00), Register(0x58)], resolved: None }
30 58 00 58 
# 012e6 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto div32_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 012e7 Instruction { source: "goto div32_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(div32_while_predicate_6)], resolved: None }
70 c1 10 00 
# goto div32_if_end_12
# 	SourceContext { contexts: [] }
# 012eb Instruction { source: "goto div32_if_end_12\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_12)], resolved: None }
70 ef 12 00 
# :div32_if_else_0_14
# 	SourceContext { contexts: [] }
# div32_if_else_0_14
# :div32_if_end_12
# 	SourceContext { contexts: [] }
# div32_if_end_12
# t36 <- x U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "t36 <- x U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# t37 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t37 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }"] }
# 012ef Instruction { source: "if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8, args: [Register(0x63), Register(0x53)], resolved: None }
15 63 53 
# 012f2 Instruction { source: "if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x62), Register(0x52)], resolved: None }
16 62 52 
# 012f5 Instruction { source: "if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x61), Register(0x51)], resolved: None }
16 61 51 
# 012f8 Instruction { source: "if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x60), Register(0x50)], resolved: None }
16 60 50 
# 012fb Instruction { source: "if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JzImm, args: [Label24(div32_if_true_0_16)], resolved: None }
72 03 13 00 
# 012ff Instruction { source: "if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_if_else_0_17)], resolved: None }
70 21 13 00 
# :div32_if_true_0_16
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }"] }
# div32_if_true_0_16
# t38 <- mid U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01303 Instruction { source: "t38 <- mid U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x50)], resolved: None }
21 5c 50 
# t39 <- 0n8/0x00000008u32 
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01306 Instruction { source: "t39 <- 0n8/0x00000008u32 \n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000008=8)], resolved: None }
20 54 08 00 00 00 
# __frame_pointer <- __frame_pointer Add t39
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 0130c Instruction { source: "__frame_pointer <- __frame_pointer Add t39\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0130d Instruction { source: "__frame_pointer <- __frame_pointer Add t39\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x54), Register(0x0c)], resolved: None }
30 0c 54 0c 
# 01311 Instruction { source: "__frame_pointer <- __frame_pointer Add t39\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t38)
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01312 Instruction { source: "return Some(t38)\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: Copy32, args: [Register(0x50), Register(0x00)], resolved: None }
21 50 00 
# 01315 Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 0131b Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto div32_if_end_15
# 	SourceContext { contexts: [] }
# 0131d Instruction { source: "goto div32_if_end_15\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_15)], resolved: None }
70 21 13 00 
# :div32_if_else_0_17
# 	SourceContext { contexts: [] }
# div32_if_else_0_17
# :div32_if_end_15
# 	SourceContext { contexts: [] }
# div32_if_end_15
# t40 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t40 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# t41 <- x U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "t41 <- x U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# r <- t40 Subtract t41
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))"] }
# 01321 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Copy32, args: [Register(0x60), Register(0x00)], resolved: None }
21 60 00 
# 01324 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 01326 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 01328 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 0132a Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 0132c Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 01332 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01333 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x00), Register(0x60)], resolved: None }
30 50 00 60 
# 01337 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t42 <- r U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }", "Ident(\"r\")", "Ident(\"r\")"] }
# optimized away noop copy Instruction { source: "t42 <- r U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"r\\\")\", \"Ident(\\\"r\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# t43 <- b U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t43 <- b U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }"] }
# 01338 Instruction { source: "if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8, args: [Register(0x57), Register(0x63)], resolved: None }
15 57 63 
# 0133b Instruction { source: "if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x56), Register(0x62)], resolved: None }
16 56 62 
# 0133e Instruction { source: "if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x55), Register(0x61)], resolved: None }
16 55 61 
# 01341 Instruction { source: "if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x54), Register(0x60)], resolved: None }
16 54 60 
# 01344 Instruction { source: "if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_20)], resolved: None }
71 66 13 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_19)], resolved: None }
# :div32_if_true_0_19
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }"] }
# div32_if_true_0_19
# t44 <- mid U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01348 Instruction { source: "t44 <- mid U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x50)], resolved: None }
21 5c 50 
# t45 <- 0n8/0x00000008u32 
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 0134b Instruction { source: "t45 <- 0n8/0x00000008u32 \n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000008=8)], resolved: None }
20 54 08 00 00 00 
# __frame_pointer <- __frame_pointer Add t45
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01351 Instruction { source: "__frame_pointer <- __frame_pointer Add t45\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01352 Instruction { source: "__frame_pointer <- __frame_pointer Add t45\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x54), Register(0x0c)], resolved: None }
30 0c 54 0c 
# 01356 Instruction { source: "__frame_pointer <- __frame_pointer Add t45\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t44)
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01357 Instruction { source: "return Some(t44)\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: Copy32, args: [Register(0x50), Register(0x00)], resolved: None }
21 50 00 
# 0135a Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 01360 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto div32_if_end_18
# 	SourceContext { contexts: [] }
# 01362 Instruction { source: "goto div32_if_end_18\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_18)], resolved: None }
70 66 13 00 
# :div32_if_else_0_20
# 	SourceContext { contexts: [] }
# div32_if_else_0_20
# :div32_if_end_18
# 	SourceContext { contexts: [] }
# div32_if_end_18
# t46 <- mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# optimized away noop copy Instruction { source: "t46 <- mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# t47 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01366 Instruction { source: "t47 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x60), Constant32(0x00000001=1)], resolved: None }
20 60 01 00 00 00 
# lo <- t46 Add t47
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))"] }
# 0136c Instruction { source: "lo <- t46 Add t47\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0136d Instruction { source: "lo <- t46 Add t47\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x5c), Register(0x60), Register(0x68)], resolved: None }
30 5c 60 68 
# 01371 Instruction { source: "lo <- t46 Add t47\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto div32_while_predicate_6
# 	SourceContext { contexts: [] }
# 01372 Instruction { source: "goto div32_while_predicate_6\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_while_predicate_6)], resolved: None }
70 c1 10 00 
# :div32_while_end_8
# 	SourceContext { contexts: [] }
# div32_while_end_8
# t48 <- lo U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 01376 Instruction { source: "t48 <- lo U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x50)], resolved: None }
21 68 50 
# t49 <- 0n8/0x00000008u32 
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 01379 Instruction { source: "t49 <- 0n8/0x00000008u32 \n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000008=8)], resolved: None }
20 54 08 00 00 00 
# __frame_pointer <- __frame_pointer Add t49
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 0137f Instruction { source: "__frame_pointer <- __frame_pointer Add t49\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01380 Instruction { source: "__frame_pointer <- __frame_pointer Add t49\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x54), Register(0x0c)], resolved: None }
30 0c 54 0c 
# 01384 Instruction { source: "__frame_pointer <- __frame_pointer Add t49\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t48)
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 01385 Instruction { source: "return Some(t48)\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: Copy32, args: [Register(0x50), Register(0x00)], resolved: None }
21 50 00 
# 01388 Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 0138e Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_div32
# 	SourceContext { contexts: [] }
# function_end_div32
# Unreachable
# 	SourceContext { contexts: [] }
# 01390 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :main
# Ret Some(U8)
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var addr (Local addr Number(USIZE) Reg(U32)) Reg(U32) Some([140, 141, 142, 143])
# Var buf (Local buf Array(Number(U8), Some(20)) FrameOffset(0)) FrameOffset(0) None
# Var calc (Local calc Struct("RpnCalc") Static(987144)) Static(987144) None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([144])
# Var i (Local i Number(USIZE) Reg(U32)) Reg(U32) Some([148, 149, 150, 151])
# Var inline_main_RpnCalc_init_60_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([148, 149, 150, 151])
# Var inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([152, 153, 154, 155])
# Var inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([152, 153, 154, 155])
# Var inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t1 (t1 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([152, 153, 154, 155])
# Var inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t2 (t2 Number(USIZE, 64)) Reg(U32) Some([156, 157, 158, 159])
# Var inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t3 (t3 Number(USIZE, 0)) Reg(U32) Some([156, 157, 158, 159])
# Var inline_main_RpnCalc_init_60_s (Local s Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([152, 153, 154, 155])
# Var inline_main_RpnCalc_init_60_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_main_RpnCalc_init_60_t1 (t1 Call(Call { function: "stack_init", parameters: [Ident("s")] })) Reg(U8) Some([160])
# Var inline_main_RpnCalc_init_60_t2 (t2 Ident("s")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_main_RpnCalc_init_60_t3 (t3 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_main_RpnCalc_init_60_t4 (t4 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_main_RpnCalc_init_60_t5 (t5 Number(USIZE, 68)) Reg(U32) Some([152, 153, 154, 155])
# Var inline_main_RpnCalc_init_60_t6 (t6 Number(USIZE, 0)) Reg(U32) Some([152, 153, 154, 155])
# Var inline_main_parseHex_19_c (Arg0 c Ptr(Number(U8))) Reg(U32) Some([148, 149, 150, 151])
# Var inline_main_parseHex_19_h (Local h Number(U8) Reg(U8)) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_ch (Arg0 ch Number(U8)) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t0 (t0 Ident("ch")) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t1 (t1 Number(U8, 97)) Reg(U8) Some([162])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t10 (t10 Ident("ch")) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t11 (t11 Number(U8, 48)) Reg(U8) Some([162])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t12 (t12 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t13 (t13 Arithmetic(Subtract, Ident("ch"), Number(U8, 65))) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t14 (t14 Ident("ch")) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t15 (t15 Number(U8, 65)) Reg(U8) Some([162])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t16 (t16 Number(U8, 10)) Reg(U8) Some([162])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t2 (t2 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t3 (t3 Arithmetic(Subtract, Ident("ch"), Number(U8, 97))) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t4 (t4 Ident("ch")) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t5 (t5 Number(U8, 97)) Reg(U8) Some([162])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t6 (t6 Number(U8, 10)) Reg(U8) Some([162])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t7 (t7 Ident("ch")) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t8 (t8 Number(U8, 57)) Reg(U8) Some([162])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t9 (t9 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_ch (Arg0 ch Number(U8)) Reg(U8) Some([144])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t0 (t0 Ident("ch")) Reg(U8) Some([144])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t1 (t1 Number(U8, 97)) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t10 (t10 Ident("ch")) Reg(U8) Some([144])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t11 (t11 Number(U8, 48)) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t12 (t12 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) Reg(U8) Some([144])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t13 (t13 Arithmetic(Subtract, Ident("ch"), Number(U8, 65))) Reg(U8) Some([144])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t14 (t14 Ident("ch")) Reg(U8) Some([144])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t15 (t15 Number(U8, 65)) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t16 (t16 Number(U8, 10)) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t2 (t2 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) Reg(U8) Some([144])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t3 (t3 Arithmetic(Subtract, Ident("ch"), Number(U8, 97))) Reg(U8) Some([144])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t4 (t4 Ident("ch")) Reg(U8) Some([144])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t5 (t5 Number(U8, 97)) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t6 (t6 Number(U8, 10)) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t7 (t7 Ident("ch")) Reg(U8) Some([144])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t8 (t8 Number(U8, 57)) Reg(U8) Some([161])
# Var inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t9 (t9 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([144])
# Var inline_main_parseHex_19_t0 (t0 Number(U8, 16)) Reg(U8) Some([163])
# Var inline_main_parseHex_19_t1 (t1 Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) Reg(U8) Some([161])
# Var inline_main_parseHex_19_t10 (t10 Ident("c")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_main_parseHex_19_t11 (t11 Ident("h")) Reg(U8) Some([144])
# Var inline_main_parseHex_19_t2 (t2 Deref(Ident("c"))) Reg(U8) Some([161])
# Var inline_main_parseHex_19_t3 (t3 Ident("c")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_main_parseHex_19_t4 (t4 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1)) }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_main_parseHex_19_t5 (t5 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_main_parseHex_19_t6 (t6 Number(USIZE, 1)) Reg(U32) Some([156, 157, 158, 159])
# Var inline_main_parseHex_19_t7 (t7 Ident("h")) Reg(U8) Some([162])
# Var inline_main_parseHex_19_t8 (t8 Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) Reg(U8) Some([144])
# Var inline_main_parseHex_19_t9 (t9 Deref(Ident("c"))) Reg(U8) Some([144])
# Var inline_main_parseHex_20_c (Arg0 c Ptr(Number(U8))) Reg(U32) Some([152, 153, 154, 155])
# Var inline_main_parseHex_20_h (Local h Number(U8) Reg(U8)) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_ch (Arg0 ch Number(U8)) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t0 (t0 Ident("ch")) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t1 (t1 Number(U8, 97)) Reg(U8) Some([163])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t10 (t10 Ident("ch")) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t11 (t11 Number(U8, 48)) Reg(U8) Some([163])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t12 (t12 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t13 (t13 Arithmetic(Subtract, Ident("ch"), Number(U8, 65))) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t14 (t14 Ident("ch")) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t15 (t15 Number(U8, 65)) Reg(U8) Some([163])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t16 (t16 Number(U8, 10)) Reg(U8) Some([163])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t2 (t2 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t3 (t3 Arithmetic(Subtract, Ident("ch"), Number(U8, 97))) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t4 (t4 Ident("ch")) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t5 (t5 Number(U8, 97)) Reg(U8) Some([163])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t6 (t6 Number(U8, 10)) Reg(U8) Some([163])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t7 (t7 Ident("ch")) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t8 (t8 Number(U8, 57)) Reg(U8) Some([163])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t9 (t9 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_ch (Arg0 ch Number(U8)) Reg(U8) Some([161])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t0 (t0 Ident("ch")) Reg(U8) Some([161])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t1 (t1 Number(U8, 97)) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t10 (t10 Ident("ch")) Reg(U8) Some([161])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t11 (t11 Number(U8, 48)) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t12 (t12 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) Reg(U8) Some([161])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t13 (t13 Arithmetic(Subtract, Ident("ch"), Number(U8, 65))) Reg(U8) Some([161])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t14 (t14 Ident("ch")) Reg(U8) Some([161])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t15 (t15 Number(U8, 65)) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t16 (t16 Number(U8, 10)) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t2 (t2 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) Reg(U8) Some([161])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t3 (t3 Arithmetic(Subtract, Ident("ch"), Number(U8, 97))) Reg(U8) Some([161])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t4 (t4 Ident("ch")) Reg(U8) Some([161])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t5 (t5 Number(U8, 97)) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t6 (t6 Number(U8, 10)) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t7 (t7 Ident("ch")) Reg(U8) Some([161])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t8 (t8 Number(U8, 57)) Reg(U8) Some([162])
# Var inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t9 (t9 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([161])
# Var inline_main_parseHex_20_t0 (t0 Number(U8, 16)) Reg(U8) Some([164])
# Var inline_main_parseHex_20_t1 (t1 Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) Reg(U8) Some([162])
# Var inline_main_parseHex_20_t10 (t10 Ident("c")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_main_parseHex_20_t11 (t11 Ident("h")) Reg(U8) Some([161])
# Var inline_main_parseHex_20_t2 (t2 Deref(Ident("c"))) Reg(U8) Some([162])
# Var inline_main_parseHex_20_t3 (t3 Ident("c")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_main_parseHex_20_t4 (t4 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1)) }) Reg(U32) Some([152, 153, 154, 155])
# Var inline_main_parseHex_20_t5 (t5 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([152, 153, 154, 155])
# Var inline_main_parseHex_20_t6 (t6 Number(USIZE, 1)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_main_parseHex_20_t7 (t7 Ident("h")) Reg(U8) Some([163])
# Var inline_main_parseHex_20_t8 (t8 Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) Reg(U8) Some([161])
# Var inline_main_parseHex_20_t9 (t9 Deref(Ident("c"))) Reg(U8) Some([161])
# Var inline_main_printHex_36_a (Arg0 a Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_36_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([161])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_a (Arg0 a Number(U8)) Reg(U8) Some([162])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c (Arg0 c Number(U8)) Reg(U8) Some([162])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1 (t1 Ident("c")) Reg(U8) Some([162])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c (Arg0 c Number(U8)) Reg(U8) Some([162])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1 (t1 Ident("c")) Reg(U8) Some([162])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_t0 (t0 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_t1 (t1 Number(U8, 10)) Reg(U8) Some([163])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([160])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_t11 (t11 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([160])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([162])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_t4 (t4 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_t5 (t5 Number(U8, 48)) Reg(U8) Some([163])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_t6 (t6 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_t7 (t7 Number(U8, 10)) Reg(U8) Some([163])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_t8 (t8 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_34_t9 (t9 Number(U8, 65)) Reg(U8) Some([163])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_a (Arg0 a Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c (Arg0 c Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1 (t1 Ident("c")) Reg(U8) Some([144])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c (Arg0 c Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1 (t1 Ident("c")) Reg(U8) Some([144])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_t0 (t0 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_t1 (t1 Number(U8, 10)) Reg(U8) Some([161])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([160])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_t11 (t11 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([160])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([144])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_t4 (t4 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_t5 (t5 Number(U8, 48)) Reg(U8) Some([161])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_t6 (t6 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_t7 (t7 Number(U8, 10)) Reg(U8) Some([161])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_t8 (t8 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_36_inline_printHex_printHexDigit_35_t9 (t9 Number(U8, 65)) Reg(U8) Some([161])
# Var inline_main_printHex_36_inline_printHex_putc_31_c (Arg0 c Number(U8)) Reg(U8) Some([161])
# Var inline_main_printHex_36_inline_printHex_putc_31_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_36_inline_printHex_putc_31_t1 (t1 Ident("c")) Reg(U8) Some([161])
# Var inline_main_printHex_36_t0 (t0 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_36_t1 (t1 Number(U8, 15)) Reg(U8) Some([161])
# Var inline_main_printHex_36_t10 (t10 Call(Call { function: "putc", parameters: [Number(U8, 48)] })) Reg(U8) Some([160])
# Var inline_main_printHex_36_t11 (t11 Number(U8, 48)) Reg(U8) Some([161])
# Var inline_main_printHex_36_t12 (t12 Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([160])
# Var inline_main_printHex_36_t13 (t13 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_36_t2 (t2 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_36_t3 (t3 Number(U8, 16)) Reg(U8) Some([161])
# Var inline_main_printHex_36_t4 (t4 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([160])
# Var inline_main_printHex_36_t5 (t5 Ident("b")) Reg(U8) Some([161])
# Var inline_main_printHex_36_t6 (t6 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_36_t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([161])
# Var inline_main_printHex_36_t8 (t8 Ident("b")) Reg(U8) Some([161])
# Var inline_main_printHex_36_t9 (t9 Number(U8, 16)) Reg(U8) Some([162])
# Var inline_main_printHex_37_a (Arg0 a Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_37_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([161])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_a (Arg0 a Number(U8)) Reg(U8) Some([162])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c (Arg0 c Number(U8)) Reg(U8) Some([162])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1 (t1 Ident("c")) Reg(U8) Some([162])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c (Arg0 c Number(U8)) Reg(U8) Some([162])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1 (t1 Ident("c")) Reg(U8) Some([162])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_t0 (t0 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_t1 (t1 Number(U8, 10)) Reg(U8) Some([163])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([160])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_t11 (t11 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([160])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([162])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_t4 (t4 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_t5 (t5 Number(U8, 48)) Reg(U8) Some([163])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_t6 (t6 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_t7 (t7 Number(U8, 10)) Reg(U8) Some([163])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_t8 (t8 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_34_t9 (t9 Number(U8, 65)) Reg(U8) Some([163])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_a (Arg0 a Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c (Arg0 c Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1 (t1 Ident("c")) Reg(U8) Some([144])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c (Arg0 c Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1 (t1 Ident("c")) Reg(U8) Some([144])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_t0 (t0 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_t1 (t1 Number(U8, 10)) Reg(U8) Some([161])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([160])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_t11 (t11 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([160])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([144])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_t4 (t4 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_t5 (t5 Number(U8, 48)) Reg(U8) Some([161])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_t6 (t6 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_t7 (t7 Number(U8, 10)) Reg(U8) Some([161])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_t8 (t8 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_37_inline_printHex_printHexDigit_35_t9 (t9 Number(U8, 65)) Reg(U8) Some([161])
# Var inline_main_printHex_37_inline_printHex_putc_31_c (Arg0 c Number(U8)) Reg(U8) Some([161])
# Var inline_main_printHex_37_inline_printHex_putc_31_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_37_inline_printHex_putc_31_t1 (t1 Ident("c")) Reg(U8) Some([161])
# Var inline_main_printHex_37_t0 (t0 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_37_t1 (t1 Number(U8, 15)) Reg(U8) Some([161])
# Var inline_main_printHex_37_t10 (t10 Call(Call { function: "putc", parameters: [Number(U8, 48)] })) Reg(U8) Some([160])
# Var inline_main_printHex_37_t11 (t11 Number(U8, 48)) Reg(U8) Some([161])
# Var inline_main_printHex_37_t12 (t12 Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([160])
# Var inline_main_printHex_37_t13 (t13 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_37_t2 (t2 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_37_t3 (t3 Number(U8, 16)) Reg(U8) Some([161])
# Var inline_main_printHex_37_t4 (t4 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([160])
# Var inline_main_printHex_37_t5 (t5 Ident("b")) Reg(U8) Some([161])
# Var inline_main_printHex_37_t6 (t6 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_37_t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([161])
# Var inline_main_printHex_37_t8 (t8 Ident("b")) Reg(U8) Some([161])
# Var inline_main_printHex_37_t9 (t9 Number(U8, 16)) Reg(U8) Some([162])
# Var inline_main_printHex_38_a (Arg0 a Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_38_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([161])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_a (Arg0 a Number(U8)) Reg(U8) Some([162])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c (Arg0 c Number(U8)) Reg(U8) Some([162])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1 (t1 Ident("c")) Reg(U8) Some([162])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c (Arg0 c Number(U8)) Reg(U8) Some([162])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1 (t1 Ident("c")) Reg(U8) Some([162])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_t0 (t0 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_t1 (t1 Number(U8, 10)) Reg(U8) Some([163])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([160])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_t11 (t11 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([160])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([162])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_t4 (t4 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_t5 (t5 Number(U8, 48)) Reg(U8) Some([163])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_t6 (t6 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_t7 (t7 Number(U8, 10)) Reg(U8) Some([163])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_t8 (t8 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_34_t9 (t9 Number(U8, 65)) Reg(U8) Some([163])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_a (Arg0 a Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c (Arg0 c Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1 (t1 Ident("c")) Reg(U8) Some([144])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c (Arg0 c Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1 (t1 Ident("c")) Reg(U8) Some([144])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_t0 (t0 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_t1 (t1 Number(U8, 10)) Reg(U8) Some([161])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([160])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_t11 (t11 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([160])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([144])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_t4 (t4 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_t5 (t5 Number(U8, 48)) Reg(U8) Some([161])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_t6 (t6 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_t7 (t7 Number(U8, 10)) Reg(U8) Some([161])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_t8 (t8 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_38_inline_printHex_printHexDigit_35_t9 (t9 Number(U8, 65)) Reg(U8) Some([161])
# Var inline_main_printHex_38_inline_printHex_putc_31_c (Arg0 c Number(U8)) Reg(U8) Some([161])
# Var inline_main_printHex_38_inline_printHex_putc_31_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_38_inline_printHex_putc_31_t1 (t1 Ident("c")) Reg(U8) Some([161])
# Var inline_main_printHex_38_t0 (t0 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_38_t1 (t1 Number(U8, 15)) Reg(U8) Some([161])
# Var inline_main_printHex_38_t10 (t10 Call(Call { function: "putc", parameters: [Number(U8, 48)] })) Reg(U8) Some([160])
# Var inline_main_printHex_38_t11 (t11 Number(U8, 48)) Reg(U8) Some([161])
# Var inline_main_printHex_38_t12 (t12 Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([160])
# Var inline_main_printHex_38_t13 (t13 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_38_t2 (t2 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_38_t3 (t3 Number(U8, 16)) Reg(U8) Some([161])
# Var inline_main_printHex_38_t4 (t4 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([160])
# Var inline_main_printHex_38_t5 (t5 Ident("b")) Reg(U8) Some([161])
# Var inline_main_printHex_38_t6 (t6 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_38_t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([161])
# Var inline_main_printHex_38_t8 (t8 Ident("b")) Reg(U8) Some([161])
# Var inline_main_printHex_38_t9 (t9 Number(U8, 16)) Reg(U8) Some([162])
# Var inline_main_printHex_39_a (Arg0 a Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_39_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([161])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_a (Arg0 a Number(U8)) Reg(U8) Some([162])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c (Arg0 c Number(U8)) Reg(U8) Some([162])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1 (t1 Ident("c")) Reg(U8) Some([162])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c (Arg0 c Number(U8)) Reg(U8) Some([162])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1 (t1 Ident("c")) Reg(U8) Some([162])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_t0 (t0 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_t1 (t1 Number(U8, 10)) Reg(U8) Some([163])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([160])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_t11 (t11 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([160])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([162])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_t4 (t4 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_t5 (t5 Number(U8, 48)) Reg(U8) Some([163])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_t6 (t6 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_t7 (t7 Number(U8, 10)) Reg(U8) Some([163])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_t8 (t8 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_34_t9 (t9 Number(U8, 65)) Reg(U8) Some([163])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_a (Arg0 a Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c (Arg0 c Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1 (t1 Ident("c")) Reg(U8) Some([144])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c (Arg0 c Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1 (t1 Ident("c")) Reg(U8) Some([144])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_t0 (t0 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_t1 (t1 Number(U8, 10)) Reg(U8) Some([161])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([160])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_t11 (t11 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([160])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([144])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_t4 (t4 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_t5 (t5 Number(U8, 48)) Reg(U8) Some([161])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_t6 (t6 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_t7 (t7 Number(U8, 10)) Reg(U8) Some([161])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_t8 (t8 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_39_inline_printHex_printHexDigit_35_t9 (t9 Number(U8, 65)) Reg(U8) Some([161])
# Var inline_main_printHex_39_inline_printHex_putc_31_c (Arg0 c Number(U8)) Reg(U8) Some([161])
# Var inline_main_printHex_39_inline_printHex_putc_31_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_39_inline_printHex_putc_31_t1 (t1 Ident("c")) Reg(U8) Some([161])
# Var inline_main_printHex_39_t0 (t0 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_39_t1 (t1 Number(U8, 15)) Reg(U8) Some([161])
# Var inline_main_printHex_39_t10 (t10 Call(Call { function: "putc", parameters: [Number(U8, 48)] })) Reg(U8) Some([160])
# Var inline_main_printHex_39_t11 (t11 Number(U8, 48)) Reg(U8) Some([161])
# Var inline_main_printHex_39_t12 (t12 Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([160])
# Var inline_main_printHex_39_t13 (t13 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_39_t2 (t2 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_39_t3 (t3 Number(U8, 16)) Reg(U8) Some([161])
# Var inline_main_printHex_39_t4 (t4 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([160])
# Var inline_main_printHex_39_t5 (t5 Ident("b")) Reg(U8) Some([161])
# Var inline_main_printHex_39_t6 (t6 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_39_t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([161])
# Var inline_main_printHex_39_t8 (t8 Ident("b")) Reg(U8) Some([161])
# Var inline_main_printHex_39_t9 (t9 Number(U8, 16)) Reg(U8) Some([162])
# Var inline_main_printHex_40_a (Arg0 a Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_40_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([161])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_a (Arg0 a Number(U8)) Reg(U8) Some([162])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c (Arg0 c Number(U8)) Reg(U8) Some([162])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1 (t1 Ident("c")) Reg(U8) Some([162])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c (Arg0 c Number(U8)) Reg(U8) Some([162])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1 (t1 Ident("c")) Reg(U8) Some([162])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_t0 (t0 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_t1 (t1 Number(U8, 10)) Reg(U8) Some([163])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([160])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_t11 (t11 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([160])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([162])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_t4 (t4 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_t5 (t5 Number(U8, 48)) Reg(U8) Some([163])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_t6 (t6 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_t7 (t7 Number(U8, 10)) Reg(U8) Some([163])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_t8 (t8 Ident("a")) Reg(U8) Some([162])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_34_t9 (t9 Number(U8, 65)) Reg(U8) Some([163])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_a (Arg0 a Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c (Arg0 c Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1 (t1 Ident("c")) Reg(U8) Some([144])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c (Arg0 c Number(U8)) Reg(U8) Some([144])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1 (t1 Ident("c")) Reg(U8) Some([144])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_t0 (t0 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_t1 (t1 Number(U8, 10)) Reg(U8) Some([161])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([160])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_t11 (t11 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([160])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([144])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_t4 (t4 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_t5 (t5 Number(U8, 48)) Reg(U8) Some([161])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_t6 (t6 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_t7 (t7 Number(U8, 10)) Reg(U8) Some([161])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_t8 (t8 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_40_inline_printHex_printHexDigit_35_t9 (t9 Number(U8, 65)) Reg(U8) Some([161])
# Var inline_main_printHex_40_inline_printHex_putc_31_c (Arg0 c Number(U8)) Reg(U8) Some([161])
# Var inline_main_printHex_40_inline_printHex_putc_31_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_main_printHex_40_inline_printHex_putc_31_t1 (t1 Ident("c")) Reg(U8) Some([161])
# Var inline_main_printHex_40_t0 (t0 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_40_t1 (t1 Number(U8, 15)) Reg(U8) Some([161])
# Var inline_main_printHex_40_t10 (t10 Call(Call { function: "putc", parameters: [Number(U8, 48)] })) Reg(U8) Some([160])
# Var inline_main_printHex_40_t11 (t11 Number(U8, 48)) Reg(U8) Some([161])
# Var inline_main_printHex_40_t12 (t12 Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([160])
# Var inline_main_printHex_40_t13 (t13 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_40_t2 (t2 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_40_t3 (t3 Number(U8, 16)) Reg(U8) Some([161])
# Var inline_main_printHex_40_t4 (t4 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([160])
# Var inline_main_printHex_40_t5 (t5 Ident("b")) Reg(U8) Some([161])
# Var inline_main_printHex_40_t6 (t6 Ident("a")) Reg(U8) Some([144])
# Var inline_main_printHex_40_t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([161])
# Var inline_main_printHex_40_t8 (t8 Ident("b")) Reg(U8) Some([161])
# Var inline_main_printHex_40_t9 (t9 Number(U8, 16)) Reg(U8) Some([162])
# Var inline_main_readline_49_buf (Arg0 buf Ptr(Number(U8))) Reg(U32) Some([148, 149, 150, 151])
# Var inline_main_readline_49_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([161])
# Var inline_main_readline_49_inline_readline_getchar_4_t0 (t0 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))) Reg(U8) Some([161])
# Var inline_main_readline_49_inline_readline_getchar_4_t1 (t1 Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([161])
# Var inline_main_readline_49_inline_readline_getchar_4_t2 (t2 Number(U8, 1)) Reg(U8) Some([162])
# Var inline_main_readline_49_inline_readline_getchar_4_t3 (t3 Number(U8, 0)) Reg(U8) Some([162])
# Var inline_main_readline_49_inline_readline_getchar_4_t4 (t4 TtyIn) Reg(U8) Some([161])
# Var inline_main_readline_49_t0 (t0 Number(U8, 0)) Reg(U8) Some([161])
# Var inline_main_readline_49_t1 (t1 Number(U8, 0)) Reg(U8) Some([162])
# Var inline_main_readline_49_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }, Number(USIZE, 1)) }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_main_readline_49_t11 (t11 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_main_readline_49_t12 (t12 Number(USIZE, 1)) Reg(U32) Some([152, 153, 154, 155])
# Var inline_main_readline_49_t2 (t2 Ident("ch")) Reg(U8) Some([161])
# Var inline_main_readline_49_t3 (t3 Number(U8, 13)) Reg(U8) Some([162])
# Var inline_main_readline_49_t4 (t4 Ident("ch")) Reg(U8) Some([161])
# Var inline_main_readline_49_t5 (t5 Number(U8, 10)) Reg(U8) Some([162])
# Var inline_main_readline_49_t6 (t6 Ident("buf")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_main_readline_49_t7 (t7 Number(U8, 0)) Reg(U8) Some([161])
# Var inline_main_readline_49_t8 (t8 Ident("buf")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_main_readline_49_t9 (t9 Ident("ch")) Reg(U8) Some([161])
# Var p_byte (Local p_byte Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([148, 149, 150, 151])
# Var t0 (Stack size negated) Reg(U32) Some([140, 141, 142, 143])
# Var t1 (t1 Number(U8, 82)) Reg(U8) Some([144])
# Var t10 (t10 AddressOf(Index("buf", Number(U8, 0)))) Reg(U32) Some([148, 149, 150, 151])
# Var t11 (t11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }) Reg(U32) Some([148, 149, 150, 151])
# Var t12 (t12 Ident("__frame_pointer")) Reg(U32) Some([172, 173, 174, 175])
# Var t13 (t13 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) Reg(U32) Some([148, 149, 150, 151])
# Var t14 (t14 Number(U8, 0)) Reg(U8) Some([144])
# Var t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0)) }) Reg(U32) Some([148, 149, 150, 151])
# Var t16 (t16 Ident("__frame_pointer")) Reg(U32) Some([172, 173, 174, 175])
# Var t17 (t17 Number(USIZE, 0)) Reg(U32) Some([148, 149, 150, 151])
# Var t18 (t18 Ident("ch")) Reg(U8) Some([144])
# Var t19 (t19 Number(U8, 103)) Reg(U8) Some([161])
# Var t2 (t2 Number(U8, 69)) Reg(U8) Some([144])
# Var t20 (t20 Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([160])
# Var t21 (t21 AddressOf(Ident("calc"))) Reg(U32) Some([148, 149, 150, 151])
# Var t22 (static "calc") Reg(U32) Some([148, 149, 150, 151])
# Var t23 (t23 Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([144])
# Var t24 (t24 AddressOf(Ident("calc"))) Reg(U32) Some([148, 149, 150, 151])
# Var t25 (static "calc") Reg(U32) Some([148, 149, 150, 151])
# Var t26 (t26 Ident("ch")) Reg(U8) Some([144])
# Var t27 (t27 Number(U8, 114)) Reg(U8) Some([161])
# Var t28 (t28 Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] })) Reg(U8) Some([160])
# Var t29 (t29 Deref(Ident("p_byte"))) Reg(U8) Some([144])
# Var t3 (t3 Number(U8, 65)) Reg(U8) Some([144])
# Var t30 (t30 Ident("p_byte")) Reg(U32) Some([148, 149, 150, 151])
# Var t31 (t31 Number(U8, 10)) Reg(U8) Some([144])
# Var t32 (t32 Ident("ch")) Reg(U8) Some([144])
# Var t33 (t33 Number(U8, 119)) Reg(U8) Some([161])
# Var t34 (t34 Ident("p_byte")) Reg(U32) Some([176, 177, 178, 179])
# Var t35 (t35 Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] })) Reg(U8) Some([144])
# Var t36 (t36 AddressOf(Index("buf", Number(USIZE, 1)))) Reg(U32) Some([148, 149, 150, 151])
# Var t37 (t37 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 1)) }) Reg(U32) Some([148, 149, 150, 151])
# Var t38 (t38 Ident("__frame_pointer")) Reg(U32) Some([172, 173, 174, 175])
# Var t39 (t39 Number(USIZE, 1)) Reg(U32) Some([148, 149, 150, 151])
# Var t4 (t4 Number(U8, 68)) Reg(U8) Some([144])
# Var t40 (t40 Ident("ch")) Reg(U8) Some([144])
# Var t41 (t41 Number(U8, 110)) Reg(U8) Some([161])
# Var t42 (t42 Ident("addr")) Reg(U32) Some([140, 141, 142, 143])
# Var t43 (t43 Number(USIZE, 1)) Reg(U32) Some([148, 149, 150, 151])
# Var t44 (t44 Ident("ch")) Reg(U8) Some([144])
# Var t45 (t45 Number(U8, 97)) Reg(U8) Some([161])
# Var t46 (t46 Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] })) Reg(U8) Some([160])
# Var t47 (t47 Index("addr", Number(USIZE, 3))) Reg(U8) Some([180])
# Var t48 (t48 Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] })) Reg(U8) Some([160])
# Var t49 (t49 Index("addr", Number(USIZE, 2))) Reg(U8) Some([180])
# Var t5 (t5 Number(U8, 89)) Reg(U8) Some([144])
# Var t50 (t50 Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] })) Reg(U8) Some([160])
# Var t51 (t51 Index("addr", Number(USIZE, 1))) Reg(U8) Some([180])
# Var t52 (t52 Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] })) Reg(U8) Some([160])
# Var t53 (t53 Index("addr", Number(USIZE, 0))) Reg(U8) Some([180])
# Var t54 (t54 Number(U8, 10)) Reg(U8) Some([144])
# Var t55 (t55 Ident("ch")) Reg(U8) Some([144])
# Var t56 (t56 Number(U8, 115)) Reg(U8) Some([161])
# Var t57 (t57 Index("buf", Ident("i"))) Reg(U8) Some([161])
# Var t58 (t58 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }) Reg(U32) Some([152, 153, 154, 155])
# Var t59 (t59 Ident("__frame_pointer")) Reg(U32) Some([172, 173, 174, 175])
# Var t6 (t6 Number(U8, 10)) Reg(U8) Some([144])
# Var t60 (t60 Ident("i")) Reg(U32) Some([148, 149, 150, 151])
# Var t61 (t61 Number(U8, 0)) Reg(U8) Some([162])
# Var t62 (t62 Index("addr", Number(USIZE, 2))) Reg(U8) Some([180])
# Var t63 (t63 Index("addr", Number(USIZE, 1))) Reg(U8) Some([180])
# Var t64 (t64 Index("addr", Number(USIZE, 0))) Reg(U8) Some([180])
# Var t65 (t65 Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] })) Reg(U8) Some([161])
# Var t66 (t66 AddressOf(Index("buf", Ident("i")))) Reg(U32) Some([152, 153, 154, 155])
# Var t67 (t67 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }) Reg(U32) Some([152, 153, 154, 155])
# Var t68 (t68 Ident("__frame_pointer")) Reg(U32) Some([172, 173, 174, 175])
# Var t69 (t69 Ident("i")) Reg(U32) Some([148, 149, 150, 151])
# Var t7 (t7 Number(U8, 0)) Reg(U8) Some([144])
# Var t70 (t70 Ident("i")) Reg(U32) Some([148, 149, 150, 151])
# Var t71 (t71 Number(USIZE, 2)) Reg(U32) Some([152, 153, 154, 155])
# Var t72 (t72 Ident("ch")) Reg(U8) Some([144])
# Var t73 (t73 Number(U8, 113)) Reg(U8) Some([161])
# Var t74 (t74 Number(U8, 0)) Reg(U8) Some([180])
# Var t75 (Stack size) Reg(U32) Some([148, 149, 150, 151])
# Var t76 (t76 Ident("ch")) Reg(U8) Some([144])
# Var t77 (t77 Number(U8, 105)) Reg(U8) Some([161])
# Var t78 (t78 Number(U8, 66)) Reg(U8) Some([144])
# Var t79 (t79 Number(U8, 111)) Reg(U8) Some([144])
# Var t8 (t8 Number(U8, 0)) Reg(U8) Some([161])
# Var t80 (t80 Number(U8, 111)) Reg(U8) Some([144])
# Var t81 (t81 Number(U8, 116)) Reg(U8) Some([144])
# Var t82 (t82 Number(U8, 114)) Reg(U8) Some([144])
# Var t83 (t83 Number(U8, 97)) Reg(U8) Some([144])
# Var t84 (t84 Number(U8, 109)) Reg(U8) Some([144])
# Var t85 (t85 Number(U8, 10)) Reg(U8) Some([144])
# Var t86 (t86 Number(U8, 72)) Reg(U8) Some([161])
# Var t87 (t87 Number(U8, 117)) Reg(U8) Some([161])
# Var t88 (t88 Number(U8, 104)) Reg(U8) Some([161])
# Var t89 (t89 Number(U8, 63)) Reg(U8) Some([161])
# Var t9 (t9 Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] })) Reg(U8) Some([160])
# Var t90 (t90 Ident("ch")) Reg(U8) Some([144])
# Var t91 (t91 Number(U8, 10)) Reg(U8) Some([144])
# Var t92 (t92 Number(U8, 0)) Reg(U8) Some([180])
# Var t93 (Stack size) Reg(U32) Some([148, 149, 150, 151])
# 01395 Instruction { source: "reserve 20 bytes of stack space for locals", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xffffffec=4294967276)], resolved: None }
32 0c ec ff ff ff 
# t0 <- 0xffffffecu32 
# 	SourceContext { contexts: [] }
# 0139b Instruction { source: "t0 <- 0xffffffecu32 \n\tSourceContext { contexts: [] }", opcode: LoadImm32, args: [Register(0x8c), Constant32(0xffffffec=4294967276)], resolved: None }
20 8c ec ff ff ff 
# __frame_pointer <- __frame_pointer Add t0
# 	SourceContext { contexts: [] }
# 013a1 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 013a2 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x8c), Register(0x0c)], resolved: None }
30 0c 8c 0c 
# 013a6 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# addr <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 013a7 Instruction { source: "addr <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x8c), Constant32(0x00000000=0)], resolved: None }
20 8c 00 00 00 00 
# i <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 013ad Instruction { source: "i <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x94), Constant32(0x00000000=0)], resolved: None }
20 94 00 00 00 00 
# ch <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 013b3 Instruction { source: "ch <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x00=0)], resolved: None }
04 90 00 
# t1 <- 0n82/0x52u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 82) }", "Number(U8, 82)", "Number(U8, 82)"] }
# 013b6 Instruction { source: "t1 <- 0n82/0x52u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 82) }\", \"Number(U8, 82)\", \"Number(U8, 82)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x52=82)], resolved: None }
04 90 52 
# ttyout <- t1
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 82) }"] }
# 013b9 Instruction { source: "ttyout <- t1\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 82) }\"] }", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# t2 <- 0n69/0x45u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 69) }", "Number(U8, 69)", "Number(U8, 69)"] }
# 013bb Instruction { source: "t2 <- 0n69/0x45u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 69) }\", \"Number(U8, 69)\", \"Number(U8, 69)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x45=69)], resolved: None }
04 90 45 
# ttyout <- t2
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 69) }"] }
# 013be Instruction { source: "ttyout <- t2\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 69) }\"] }", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# t3 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 65) }", "Number(U8, 65)", "Number(U8, 65)"] }
# 013c0 Instruction { source: "t3 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 65) }\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x41=65)], resolved: None }
04 90 41 
# ttyout <- t3
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 65) }"] }
# 013c3 Instruction { source: "ttyout <- t3\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 65) }\"] }", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# t4 <- 0n68/0x44u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 68) }", "Number(U8, 68)", "Number(U8, 68)"] }
# 013c5 Instruction { source: "t4 <- 0n68/0x44u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 68) }\", \"Number(U8, 68)\", \"Number(U8, 68)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x44=68)], resolved: None }
04 90 44 
# ttyout <- t4
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 68) }"] }
# 013c8 Instruction { source: "ttyout <- t4\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 68) }\"] }", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# t5 <- 0n89/0x59u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 89) }", "Number(U8, 89)", "Number(U8, 89)"] }
# 013ca Instruction { source: "t5 <- 0n89/0x59u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 89) }\", \"Number(U8, 89)\", \"Number(U8, 89)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x59=89)], resolved: None }
04 90 59 
# ttyout <- t5
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 89) }"] }
# 013cd Instruction { source: "ttyout <- t5\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 89) }\"] }", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 013cf Instruction { source: "t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x0a=10)], resolved: None }
04 90 0a 
# ttyout <- t6
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 013d2 Instruction { source: "ttyout <- t6\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# p_byte <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"p_byte\"), var_type: Some(Ptr(Number(U8))), value: Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 0) } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 013d4 Instruction { source: "p_byte <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"p_byte\\\"), var_type: Some(Ptr(Number(U8))), value: Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 0) } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x94), Constant32(0x00000000=0)], resolved: None }
20 94 00 00 00 00 
# :main_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \"calc\", var_type: Struct(\"RpnCalc\") }, VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }, VoidExpression { expression: Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }"] }
# main_while_predicate_0
# t7 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \"calc\", var_type: Struct(\"RpnCalc\") }, VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }, VoidExpression { expression: Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 013da Instruction { source: "t7 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \\\"calc\\\", var_type: Struct(\\\"RpnCalc\\\") }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x00=0)], resolved: None }
04 90 00 
# t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \"calc\", var_type: Struct(\"RpnCalc\") }, VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }, VoidExpression { expression: Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 013dd Instruction { source: "t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \\\"calc\\\", var_type: Struct(\\\"RpnCalc\\\") }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x00=0)], resolved: None }
04 a1 00 
# if t7 == t8 then 'main_while_body_1' else 'main_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \"calc\", var_type: Struct(\"RpnCalc\") }, VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }, VoidExpression { expression: Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }"] }
# 013e0 Instruction { source: "if t7 == t8 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \\\"calc\\\", var_type: Struct(\\\"RpnCalc\\\") }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x90), Register(0xa1)], resolved: None }
15 90 a1 
# 013e3 Instruction { source: "if t7 == t8 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \\\"calc\\\", var_type: Struct(\\\"RpnCalc\\\") }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_while_body_1)], resolved: None }
72 eb 13 00 
# 013e7 Instruction { source: "if t7 == t8 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \\\"calc\\\", var_type: Struct(\\\"RpnCalc\\\") }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_while_end_2)], resolved: None }
70 d0 1a 00 
# :main_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \"calc\", var_type: Struct(\"RpnCalc\") }, VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }, VoidExpression { expression: Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }"] }
# main_while_body_1
# t12 <- __frame_pointer U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 013eb Instruction { source: "t12 <- __frame_pointer U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xac)], resolved: None }
21 0c ac 
# t14 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 013ee Instruction { source: "t14 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x00=0)], resolved: None }
04 90 00 
# t13 U32 <- t14 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }"] }
# 013f1 Instruction { source: "Zero-pad for t13 U32 <- t14 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\"] }", opcode: LoadImm32, args: [Register(0x94), Constant32(0x00000000=0)], resolved: None }
20 94 00 00 00 00 
# 013f7 Instruction { source: "t13 U32 <- t14 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x90), Register(0x94)], resolved: None }
0b 90 94 
# t11 <- t12 Add t13
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })"] }
# 013fa Instruction { source: "t11 <- t12 Add t13\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 013fb Instruction { source: "t11 <- t12 Add t13\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\"] }", opcode: AddCarry32_1, args: [Register(0xac), Register(0x94), Register(0x94)], resolved: None }
30 ac 94 94 
# 013ff Instruction { source: "t11 <- t12 Add t13\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t10 <- t11 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))"] }
# optimized away noop copy Instruction { source: "t10 <- t11 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_main_readline_49_buf <- t10 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })"] }
# optimized away noop copy Instruction { source: "inline_main_readline_49_buf <- t10 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# :inline_main_readline_49_readline_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }"] }
# inline_main_readline_49_readline_while_predicate_0
# inline_main_readline_49_t0 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01400 Instruction { source: "inline_main_readline_49_t0 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x00=0)], resolved: None }
04 a1 00 
# inline_main_readline_49_t1 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01403 Instruction { source: "inline_main_readline_49_t1 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x00=0)], resolved: None }
04 a2 00 
# if inline_main_readline_49_t0 == inline_main_readline_49_t1 then 'inline_main_readline_49_readline_while_body_1' else 'inline_main_readline_49_readline_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }"] }
# 01406 Instruction { source: "if inline_main_readline_49_t0 == inline_main_readline_49_t1 then 'inline_main_readline_49_readline_while_body_1' else 'inline_main_readline_49_readline_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0xa1), Register(0xa2)], resolved: None }
15 a1 a2 
# 01409 Instruction { source: "if inline_main_readline_49_t0 == inline_main_readline_49_t1 then 'inline_main_readline_49_readline_while_body_1' else 'inline_main_readline_49_readline_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_readline_49_readline_while_body_1)], resolved: None }
72 11 14 00 
# 0140d Instruction { source: "if inline_main_readline_49_t0 == inline_main_readline_49_t1 then 'inline_main_readline_49_readline_while_body_1' else 'inline_main_readline_49_readline_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_49_readline_while_end_2)], resolved: None }
70 6f 14 00 
# :inline_main_readline_49_readline_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }"] }
# inline_main_readline_49_readline_while_body_1
# :inline_main_readline_49_inline_readline_getchar_4_getchar_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_readline_49_inline_readline_getchar_4_getchar_while_predicate_0
# Some(inline_main_readline_49_inline_readline_getchar_4_t1) <= call io_ready_to_read()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Call(Call { function: \"io_ready_to_read\", parameters: [] })", "Call(Call { function: \"io_ready_to_read\", parameters: [] })"] }
# 01411 Instruction { source: "ReadyToRead", opcode: IoReadyToRead, args: [Register(0xa1)], resolved: None }
79 a1 
# inline_main_readline_49_inline_readline_getchar_4_t2 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 01413 Instruction { source: "inline_main_readline_49_inline_readline_getchar_4_t2 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x01=1)], resolved: None }
04 a2 01 
# inline_main_readline_49_inline_readline_getchar_4_t0 <- inline_main_readline_49_inline_readline_getchar_4_t1 BitwiseAnd inline_main_readline_49_inline_readline_getchar_4_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))"] }
# 01416 Instruction { source: "inline_main_readline_49_inline_readline_getchar_4_t0 <- inline_main_readline_49_inline_readline_getchar_4_t1 BitwiseAnd inline_main_readline_49_inline_readline_getchar_4_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\"] }", opcode: And8, args: [Register(0xa1), Register(0xa2), Register(0xa1)], resolved: None }
1b a1 a2 a1 
# inline_main_readline_49_inline_readline_getchar_4_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0141a Instruction { source: "inline_main_readline_49_inline_readline_getchar_4_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x00=0)], resolved: None }
04 a2 00 
# if inline_main_readline_49_inline_readline_getchar_4_t0 == inline_main_readline_49_inline_readline_getchar_4_t3 then 'inline_main_readline_49_inline_readline_getchar_4_getchar_while_body_1' else 'inline_main_readline_49_inline_readline_getchar_4_getchar_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }"] }
# 0141d Instruction { source: "if inline_main_readline_49_inline_readline_getchar_4_t0 == inline_main_readline_49_inline_readline_getchar_4_t3 then 'inline_main_readline_49_inline_readline_getchar_4_getchar_while_body_1' else 'inline_main_readline_49_inline_readline_getchar_4_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0xa1), Register(0xa2)], resolved: None }
15 a1 a2 
# 01420 Instruction { source: "if inline_main_readline_49_inline_readline_getchar_4_t0 == inline_main_readline_49_inline_readline_getchar_4_t3 then 'inline_main_readline_49_inline_readline_getchar_4_getchar_while_body_1' else 'inline_main_readline_49_inline_readline_getchar_4_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_readline_49_inline_readline_getchar_4_getchar_while_body_1)], resolved: None }
72 28 14 00 
# 01424 Instruction { source: "if inline_main_readline_49_inline_readline_getchar_4_t0 == inline_main_readline_49_inline_readline_getchar_4_t3 then 'inline_main_readline_49_inline_readline_getchar_4_getchar_while_body_1' else 'inline_main_readline_49_inline_readline_getchar_4_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_49_inline_readline_getchar_4_getchar_while_end_2)], resolved: None }
70 2c 14 00 
# :inline_main_readline_49_inline_readline_getchar_4_getchar_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_readline_49_inline_readline_getchar_4_getchar_while_body_1
# goto inline_main_readline_49_inline_readline_getchar_4_getchar_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# 01428 Instruction { source: "goto inline_main_readline_49_inline_readline_getchar_4_getchar_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_49_inline_readline_getchar_4_getchar_while_predicate_0)], resolved: None }
70 11 14 00 
# :inline_main_readline_49_inline_readline_getchar_4_getchar_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_readline_49_inline_readline_getchar_4_getchar_while_end_2
# inline_main_readline_49_inline_readline_getchar_4_t4 <- ttyin
# 	SourceContext { contexts: ["Return { value: Some(TtyIn) }", "TtyIn", "TtyIn"] }
# 0142c Instruction { source: "inline_main_readline_49_inline_readline_getchar_4_t4 <- ttyin\n\tSourceContext { contexts: [\"Return { value: Some(TtyIn) }\", \"TtyIn\", \"TtyIn\"] }", opcode: In0, args: [Register(0xa1)], resolved: None }
60 a1 
# inline_main_readline_49_ch <- inline_main_readline_49_inline_readline_getchar_4_t4 U8
# 	SourceContext { contexts: ["Return { value: Some(TtyIn) }"] }
# optimized away noop copy Instruction { source: "inline_main_readline_49_ch <- inline_main_readline_49_inline_readline_getchar_4_t4 U8\n\tSourceContext { contexts: [\"Return { value: Some(TtyIn) }\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# goto inline_main_readline_49_inline_readline_getchar_4_function_end_getchar
# 	SourceContext { contexts: ["Return { value: Some(TtyIn) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_readline_49_inline_readline_getchar_4_function_end_getchar\n\tSourceContext { contexts: [\"Return { value: Some(TtyIn) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_49_inline_readline_getchar_4_function_end_getchar)], resolved: None }
# :inline_main_readline_49_inline_readline_getchar_4_function_end_getchar
# 	SourceContext { contexts: [] }
# inline_main_readline_49_inline_readline_getchar_4_function_end_getchar
# inline_main_readline_49_t2 <- inline_main_readline_49_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_49_t2 <- inline_main_readline_49_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_readline_49_t3 <- 0n13/0x0du8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }", "Number(U8, 13)", "Number(U8, 13)"] }
# 0142e Instruction { source: "inline_main_readline_49_t3 <- 0n13/0x0du8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\", \"Number(U8, 13)\", \"Number(U8, 13)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x0d=13)], resolved: None }
04 a2 0d 
# if inline_main_readline_49_t2 == inline_main_readline_49_t3 then 'inline_main_readline_49_readline_if_true_0_4' else 'inline_main_readline_49_readline_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }"] }
# 01431 Instruction { source: "if inline_main_readline_49_t2 == inline_main_readline_49_t3 then 'inline_main_readline_49_readline_if_true_0_4' else 'inline_main_readline_49_readline_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\"] }", opcode: Cmp8, args: [Register(0xa1), Register(0xa2)], resolved: None }
15 a1 a2 
# 01434 Instruction { source: "if inline_main_readline_49_t2 == inline_main_readline_49_t3 then 'inline_main_readline_49_readline_if_true_0_4' else 'inline_main_readline_49_readline_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\"] }", opcode: JzImm, args: [Label24(inline_main_readline_49_readline_if_true_0_4)], resolved: None }
72 3c 14 00 
# 01438 Instruction { source: "if inline_main_readline_49_t2 == inline_main_readline_49_t3 then 'inline_main_readline_49_readline_if_true_0_4' else 'inline_main_readline_49_readline_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_49_readline_if_else_0_5)], resolved: None }
70 40 14 00 
# :inline_main_readline_49_readline_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# inline_main_readline_49_readline_if_true_0_4
# goto inline_main_readline_49_readline_if_end_3
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# 0143c Instruction { source: "goto inline_main_readline_49_readline_if_end_3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_49_readline_if_end_3)], resolved: None }
70 6b 14 00 
# :inline_main_readline_49_readline_if_else_0_5
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# inline_main_readline_49_readline_if_else_0_5
# inline_main_readline_49_t4 <- inline_main_readline_49_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_49_t4 <- inline_main_readline_49_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_readline_49_t5 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 01440 Instruction { source: "inline_main_readline_49_t5 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x0a=10)], resolved: None }
04 a2 0a 
# if inline_main_readline_49_t4 == inline_main_readline_49_t5 then 'inline_main_readline_49_readline_if_true_1_6' else 'inline_main_readline_49_readline_if_else_1_7'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }"] }
# 01443 Instruction { source: "if inline_main_readline_49_t4 == inline_main_readline_49_t5 then 'inline_main_readline_49_readline_if_true_1_6' else 'inline_main_readline_49_readline_if_else_1_7'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0xa1), Register(0xa2)], resolved: None }
15 a1 a2 
# 01446 Instruction { source: "if inline_main_readline_49_t4 == inline_main_readline_49_t5 then 'inline_main_readline_49_readline_if_true_1_6' else 'inline_main_readline_49_readline_if_else_1_7'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JzImm, args: [Label24(inline_main_readline_49_readline_if_true_1_6)], resolved: None }
72 4e 14 00 
# 0144a Instruction { source: "if inline_main_readline_49_t4 == inline_main_readline_49_t5 then 'inline_main_readline_49_readline_if_true_1_6' else 'inline_main_readline_49_readline_if_else_1_7'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_49_readline_if_else_1_7)], resolved: None }
70 5c 14 00 
# :inline_main_readline_49_readline_if_true_1_6
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# inline_main_readline_49_readline_if_true_1_6
# inline_main_readline_49_t6 <- inline_main_readline_49_buf U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }", "Ident(\"buf\")", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_49_t6 <- inline_main_readline_49_buf U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }\", \"Ident(\\\"buf\\\")\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_main_readline_49_t7 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0144e Instruction { source: "inline_main_readline_49_t7 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x00=0)], resolved: None }
04 a1 00 
# mem[inline_main_readline_49_t6] <- inline_main_readline_49_t7 U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }"] }
# 01451 Instruction { source: "mem[inline_main_readline_49_t6] <- inline_main_readline_49_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0xa1), Register(0x94)], resolved: None }
06 a1 94 
# goto inline_main_readline_49_function_end_readline
# 	SourceContext { contexts: ["Return { value: None }"] }
# 01454 Instruction { source: "goto inline_main_readline_49_function_end_readline\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_49_function_end_readline)], resolved: None }
70 73 14 00 
# goto inline_main_readline_49_readline_if_end_3
# 	SourceContext { contexts: [] }
# 01458 Instruction { source: "goto inline_main_readline_49_readline_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_readline_49_readline_if_end_3)], resolved: None }
70 6b 14 00 
# :inline_main_readline_49_readline_if_else_1_7
# 	SourceContext { contexts: [] }
# inline_main_readline_49_readline_if_else_1_7
# inline_main_readline_49_t8 <- inline_main_readline_49_buf U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }", "Ident(\"buf\")", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_49_t8 <- inline_main_readline_49_buf U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Ident(\\\"buf\\\")\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_main_readline_49_t9 <- inline_main_readline_49_ch U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_49_t9 <- inline_main_readline_49_ch U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# mem[inline_main_readline_49_t8] <- inline_main_readline_49_t9 U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }"] }
# 0145c Instruction { source: "mem[inline_main_readline_49_t8] <- inline_main_readline_49_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }\"] }", opcode: Store8, args: [Register(0xa1), Register(0x94)], resolved: None }
06 a1 94 
# inline_main_readline_49_t11 <- inline_main_readline_49_buf U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_49_t11 <- inline_main_readline_49_buf U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_main_readline_49_t12 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0145f Instruction { source: "inline_main_readline_49_t12 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x98), Constant32(0x00000001=1)], resolved: None }
20 98 01 00 00 00 
# inline_main_readline_49_t10 <- inline_main_readline_49_t11 Add inline_main_readline_49_t12
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))"] }
# 01465 Instruction { source: "inline_main_readline_49_t10 <- inline_main_readline_49_t11 Add inline_main_readline_49_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01466 Instruction { source: "inline_main_readline_49_t10 <- inline_main_readline_49_t11 Add inline_main_readline_49_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x94), Register(0x98), Register(0x94)], resolved: None }
30 94 98 94 
# 0146a Instruction { source: "inline_main_readline_49_t10 <- inline_main_readline_49_t11 Add inline_main_readline_49_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_readline_49_buf <- inline_main_readline_49_t10 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))"] }
# optimized away noop copy Instruction { source: "inline_main_readline_49_buf <- inline_main_readline_49_t10 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# :inline_main_readline_49_readline_if_end_3
# 	SourceContext { contexts: [] }
# inline_main_readline_49_readline_if_end_3
# goto inline_main_readline_49_readline_while_predicate_0
# 	SourceContext { contexts: [] }
# 0146b Instruction { source: "goto inline_main_readline_49_readline_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_readline_49_readline_while_predicate_0)], resolved: None }
70 00 14 00 
# :inline_main_readline_49_readline_while_end_2
# 	SourceContext { contexts: [] }
# inline_main_readline_49_readline_while_end_2
# goto inline_main_readline_49_function_end_readline
# 	SourceContext { contexts: ["Return { value: None }"] }
# 0146f Instruction { source: "goto inline_main_readline_49_function_end_readline\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_49_function_end_readline)], resolved: None }
70 73 14 00 
# :inline_main_readline_49_function_end_readline
# 	SourceContext { contexts: [] }
# inline_main_readline_49_function_end_readline
# t16 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }", "Index(\"buf\", Number(USIZE, 0))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 01473 Instruction { source: "t16 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xac)], resolved: None }
21 0c ac 
# t17 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }", "Index(\"buf\", Number(USIZE, 0))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01476 Instruction { source: "t17 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x94), Constant32(0x00000000=0)], resolved: None }
20 94 00 00 00 00 
# t15 <- t16 Add t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }", "Index(\"buf\", Number(USIZE, 0))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))"] }
# 0147c Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0147d Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_1, args: [Register(0xac), Register(0x94), Register(0x94)], resolved: None }
30 ac 94 94 
# 01481 Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# ch <- mem[t15] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }", "Index(\"buf\", Number(USIZE, 0))"] }
# 01482 Instruction { source: "ch <- mem[t15] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\"] }", opcode: Load8, args: [Register(0x94), Register(0x90)], resolved: None }
05 94 90 
# t18 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \"calc\", var_type: Struct(\"RpnCalc\") }, VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }, VoidExpression { expression: Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 103) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t18 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \\\"calc\\\", var_type: Struct(\\\"RpnCalc\\\") }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 103) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# t19 <- 0n103/0x67u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \"calc\", var_type: Struct(\"RpnCalc\") }, VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }, VoidExpression { expression: Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 103) }", "Number(U8, 103)", "Number(U8, 103)"] }
# 01485 Instruction { source: "t19 <- 0n103/0x67u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \\\"calc\\\", var_type: Struct(\\\"RpnCalc\\\") }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 103) }\", \"Number(U8, 103)\", \"Number(U8, 103)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x67=103)], resolved: None }
04 a1 67 
# if t18 == t19 then 'main_if_true_0_4' else 'main_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \"calc\", var_type: Struct(\"RpnCalc\") }, VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }, VoidExpression { expression: Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 103) }"] }
# 01488 Instruction { source: "if t18 == t19 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \\\"calc\\\", var_type: Struct(\\\"RpnCalc\\\") }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 103) }\"] }", opcode: Cmp8, args: [Register(0x90), Register(0xa1)], resolved: None }
15 90 a1 
# 0148b Instruction { source: "if t18 == t19 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \\\"calc\\\", var_type: Struct(\\\"RpnCalc\\\") }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 103) }\"] }", opcode: JzImm, args: [Label24(main_if_true_0_4)], resolved: None }
72 93 14 00 
# 0148f Instruction { source: "if t18 == t19 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \\\"calc\\\", var_type: Struct(\\\"RpnCalc\\\") }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }, VoidExpression { expression: Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 103) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_0_5)], resolved: None }
70 ee 14 00 
# :main_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \"calc\", var_type: Struct(\"RpnCalc\") }, VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }, VoidExpression { expression: Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }"] }
# main_if_true_0_4
# t22 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "AddressOf(Ident(\"calc\"))", "AddressOf(Ident(\"calc\"))"] }
# 01493 Instruction { source: "t22 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"AddressOf(Ident(\\\"calc\\\"))\", \"AddressOf(Ident(\\\"calc\\\"))\"] }", opcode: LoadImm32, args: [Register(0x94), Constant32(0x000f1008=987144)], resolved: None }
20 94 08 10 0f 00 
# t21 <- t22 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "AddressOf(Ident(\"calc\"))", "AddressOf(Ident(\"calc\"))"] }
# optimized away noop copy Instruction { source: "t21 <- t22 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"AddressOf(Ident(\\\"calc\\\"))\", \"AddressOf(Ident(\\\"calc\\\"))\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_main_RpnCalc_init_60_c <- t21 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_60_c <- t21 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_main_RpnCalc_init_60_t0 <- inline_main_RpnCalc_init_60_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_60_t0 <- inline_main_RpnCalc_init_60_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"s\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_main_RpnCalc_init_60_s <- inline_main_RpnCalc_init_60_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 01499 Instruction { source: "inline_main_RpnCalc_init_60_s <- inline_main_RpnCalc_init_60_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"s\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x94), Register(0x98)], resolved: None }
21 94 98 
# inline_main_RpnCalc_init_60_t2 <- inline_main_RpnCalc_init_60_s U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Ident(\"s\")", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_60_t2 <- inline_main_RpnCalc_init_60_s U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] }) }\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Ident(\\\"s\\\")\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_s <- inline_main_RpnCalc_init_60_t2 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_s <- inline_main_RpnCalc_init_60_t2 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] }) }\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t1 <- inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t1 <- inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t2 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0149c Instruction { source: "inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t2 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x9c), Constant32(0x00000040=64)], resolved: None }
20 9c 40 00 00 00 
# inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t0 <- inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t1 Add inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t2
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 014a2 Instruction { source: "inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t0 <- inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t1 Add inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 014a3 Instruction { source: "inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t0 <- inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t1 Add inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x98), Register(0x9c), Register(0x98)], resolved: None }
30 98 9c 98 
# 014a7 Instruction { source: "inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t0 <- inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t1 Add inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t3 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 014a8 Instruction { source: "inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t3 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x9c), Constant32(0x00000000=0)], resolved: None }
20 9c 00 00 00 00 
# mem[inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t0] <- inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t3 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }"] }
# 014ae Instruction { source: "mem[inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t0] <- inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x9c), Register(0x98)], resolved: None }
23 9c 98 
# 014b1 Instruction { source: "mem[inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t0] <- inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_function_end_stack_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_function_end_stack_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_function_end_stack_init)], resolved: None }
# :inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_function_end_stack_init
# 	SourceContext { contexts: [] }
# inline_main_RpnCalc_init_60_inline_RpnCalc_init_stack_init_58_function_end_stack_init
# inline_main_RpnCalc_init_60_t4 <- inline_main_RpnCalc_init_60_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_60_t4 <- inline_main_RpnCalc_init_60_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_main_RpnCalc_init_60_t5 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 014b2 Instruction { source: "inline_main_RpnCalc_init_60_t5 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x98), Constant32(0x00000044=68)], resolved: None }
20 98 44 00 00 00 
# inline_main_RpnCalc_init_60_t3 <- inline_main_RpnCalc_init_60_t4 Add inline_main_RpnCalc_init_60_t5
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 014b8 Instruction { source: "inline_main_RpnCalc_init_60_t3 <- inline_main_RpnCalc_init_60_t4 Add inline_main_RpnCalc_init_60_t5\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 014b9 Instruction { source: "inline_main_RpnCalc_init_60_t3 <- inline_main_RpnCalc_init_60_t4 Add inline_main_RpnCalc_init_60_t5\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x94), Register(0x98), Register(0x94)], resolved: None }
30 94 98 94 
# 014bd Instruction { source: "inline_main_RpnCalc_init_60_t3 <- inline_main_RpnCalc_init_60_t4 Add inline_main_RpnCalc_init_60_t5\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_RpnCalc_init_60_t6 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 014be Instruction { source: "inline_main_RpnCalc_init_60_t6 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x98), Constant32(0x00000000=0)], resolved: None }
20 98 00 00 00 00 
# mem[inline_main_RpnCalc_init_60_t3] <- inline_main_RpnCalc_init_60_t6 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 014c4 Instruction { source: "mem[inline_main_RpnCalc_init_60_t3] <- inline_main_RpnCalc_init_60_t6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x98), Register(0x94)], resolved: None }
23 98 94 
# 014c7 Instruction { source: "mem[inline_main_RpnCalc_init_60_t3] <- inline_main_RpnCalc_init_60_t6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_main_RpnCalc_init_60_function_end_RpnCalc_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_RpnCalc_init_60_function_end_RpnCalc_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_RpnCalc_init_60_function_end_RpnCalc_init)], resolved: None }
# :inline_main_RpnCalc_init_60_function_end_RpnCalc_init
# 	SourceContext { contexts: [] }
# inline_main_RpnCalc_init_60_function_end_RpnCalc_init
# t25 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })", "AddressOf(Ident(\"calc\"))", "AddressOf(Ident(\"calc\"))"] }
# 014c8 Instruction { source: "t25 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"AddressOf(Ident(\\\"calc\\\"))\", \"AddressOf(Ident(\\\"calc\\\"))\"] }", opcode: LoadImm32, args: [Register(0x94), Constant32(0x000f1008=987144)], resolved: None }
20 94 08 10 0f 00 
# t24 <- t25 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })", "AddressOf(Ident(\"calc\"))", "AddressOf(Ident(\"calc\"))"] }
# optimized away noop copy Instruction { source: "t24 <- t25 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"AddressOf(Ident(\\\"calc\\\"))\", \"AddressOf(Ident(\\\"calc\\\"))\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# Some(t23) <= call RpnCalc_run(t24,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })"] }
# 014ce Instruction { source: "Arg0[calc]=t24 Some(t23) <= call RpnCalc_run(t24,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Copy32, args: [Register(0x94), Register(0x00)], resolved: None }
21 94 00 
# Registers used by this function: {140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 014d1 Instruction { source: "PseudoCall(Label24(:RpnCalc_run))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 014d7 Instruction { source: "PseudoCall(Label24(:RpnCalc_run))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c e1 14 00 00 
# 014dd Instruction { source: "PseudoCall(Label24(:RpnCalc_run))", opcode: JmpImm, args: [Label24(:RpnCalc_run)], resolved: None }
70 e1 0c 00 
# 014e1 Instruction { source: "PseudoCall(Label24(:RpnCalc_run))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 014e7 Instruction { source: "Some(t23) <= call RpnCalc_run(t24,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Copy8, args: [Register(0x00), Register(0x90)], resolved: None }
0b 00 90 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 014ea Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 cc 1a 00 
# :main_if_else_0_5
# 	SourceContext { contexts: [] }
# main_if_else_0_5
# t26 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t26 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# t27 <- 0n114/0x72u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }", "Number(U8, 114)", "Number(U8, 114)"] }
# 014ee Instruction { source: "t27 <- 0n114/0x72u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\", \"Number(U8, 114)\", \"Number(U8, 114)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x72=114)], resolved: None }
04 a1 72 
# if t26 == t27 then 'main_if_true_1_6' else 'main_if_else_1_7'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }"] }
# 014f1 Instruction { source: "if t26 == t27 then 'main_if_true_1_6' else 'main_if_else_1_7'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\"] }", opcode: Cmp8, args: [Register(0x90), Register(0xa1)], resolved: None }
15 90 a1 
# 014f4 Instruction { source: "if t26 == t27 then 'main_if_true_1_6' else 'main_if_else_1_7'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\"] }", opcode: JzImm, args: [Label24(main_if_true_1_6)], resolved: None }
72 fc 14 00 
# 014f8 Instruction { source: "if t26 == t27 then 'main_if_true_1_6' else 'main_if_else_1_7'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_1_7)], resolved: None }
70 90 15 00 
# :main_if_true_1_6
# 	SourceContext { contexts: [] }
# main_if_true_1_6
# p_byte <- addr U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }", "Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") }", "Ident(\"addr\")"] }
# 014fc Instruction { source: "p_byte <- addr U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }\", \"Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") }\", \"Ident(\\\"addr\\\")\"] }", opcode: Copy32, args: [Register(0x8c), Register(0x94)], resolved: None }
21 8c 94 
# t30 <- p_byte U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Deref(Ident(\"p_byte\"))", "Deref(Ident(\"p_byte\"))", "Ident(\"p_byte\")", "Ident(\"p_byte\")"] }
# optimized away noop copy Instruction { source: "t30 <- p_byte U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Deref(Ident(\\\"p_byte\\\"))\", \"Deref(Ident(\\\"p_byte\\\"))\", \"Ident(\\\"p_byte\\\")\", \"Ident(\\\"p_byte\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# t29 <- mem[t30] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Deref(Ident(\"p_byte\"))", "Deref(Ident(\"p_byte\"))"] }
# 014ff Instruction { source: "t29 <- mem[t30] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Deref(Ident(\\\"p_byte\\\"))\", \"Deref(Ident(\\\"p_byte\\\"))\"] }", opcode: Load8, args: [Register(0x94), Register(0x90)], resolved: None }
05 94 90 
# inline_main_printHex_36_a <- t29 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_a <- t29 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_36_t0 <- inline_main_printHex_36_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_t0 <- inline_main_printHex_36_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_36_t1 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Number(U8, 15)", "Number(U8, 15)"] }
# 01502 Instruction { source: "inline_main_printHex_36_t1 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0f=15)], resolved: None }
04 a1 0f 
# if inline_main_printHex_36_t0 > inline_main_printHex_36_t1 then 'inline_main_printHex_36_printHex_if_true_0_1' else 'inline_main_printHex_36_printHex_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }"] }
# 01505 Instruction { source: "if inline_main_printHex_36_t0 > inline_main_printHex_36_t1 then 'inline_main_printHex_36_printHex_if_true_0_1' else 'inline_main_printHex_36_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: Cmp8, args: [Register(0x90), Register(0xa1)], resolved: None }
15 90 a1 
# 01508 Instruction { source: "if inline_main_printHex_36_t0 > inline_main_printHex_36_t1 then 'inline_main_printHex_36_printHex_if_true_0_1' else 'inline_main_printHex_36_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_36_printHex_if_else_0_2)], resolved: None }
71 56 15 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_36_t0 > inline_main_printHex_36_t1 then 'inline_main_printHex_36_printHex_if_true_0_1' else 'inline_main_printHex_36_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_36_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_36_printHex_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }"] }
# inline_main_printHex_36_printHex_if_true_0_1
# inline_main_printHex_36_t2 <- inline_main_printHex_36_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_t2 <- inline_main_printHex_36_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_36_t3 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 0150c Instruction { source: "inline_main_printHex_36_t3 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x10=16)], resolved: None }
04 a1 10 
# inline_main_printHex_36_b <- inline_main_printHex_36_t2 Divide inline_main_printHex_36_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))"] }
# 0150f Instruction { source: "inline_main_printHex_36_b <- inline_main_printHex_36_t2 Divide inline_main_printHex_36_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\"] }", opcode: Divide8, args: [Register(0x90), Register(0xa1), Register(0xa1)], resolved: None }
17 90 a1 a1 
# inline_main_printHex_36_t5 <- inline_main_printHex_36_b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_t5 <- inline_main_printHex_36_b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_printHex_36_inline_printHex_printHexDigit_34_a <- inline_main_printHex_36_t5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })"] }
# 01513 Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_a <- inline_main_printHex_36_t5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa2)], resolved: None }
0b a1 a2 
# inline_main_printHex_36_inline_printHex_printHexDigit_34_t0 <- inline_main_printHex_36_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_t0 <- inline_main_printHex_36_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_36_inline_printHex_printHexDigit_34_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 01516 Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x0a=10)], resolved: None }
04 a3 0a 
# if inline_main_printHex_36_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_36_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 01519 Instruction { source: "if inline_main_printHex_36_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_36_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0xa3), Register(0xa2)], resolved: None }
15 a3 a2 
# 0151c Instruction { source: "if inline_main_printHex_36_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_36_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2)], resolved: None }
71 2d 15 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_36_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_36_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1
# inline_main_printHex_36_inline_printHex_printHexDigit_34_t4 <- inline_main_printHex_36_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_t4 <- inline_main_printHex_36_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_36_inline_printHex_printHexDigit_34_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 01520 Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x30=48)], resolved: None }
04 a3 30 
# inline_main_printHex_36_inline_printHex_printHexDigit_34_t3 <- inline_main_printHex_36_inline_printHex_printHexDigit_34_t4 Add inline_main_printHex_36_inline_printHex_printHexDigit_34_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 01523 Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_t3 <- inline_main_printHex_36_inline_printHex_printHexDigit_34_t4 Add inline_main_printHex_36_inline_printHex_printHexDigit_34_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0xa3), Register(0xa2)], resolved: None }
14 a2 a3 a2 
# inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c <- inline_main_printHex_36_inline_printHex_printHexDigit_34_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c <- inline_main_printHex_36_inline_printHex_printHexDigit_34_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# None <= call io_write0(inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 01527 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xa2)], resolved: None }
68 a2 
# goto inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc)], resolved: None }
# :inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc
# goto inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 01529 Instruction { source: "goto inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_end_0)], resolved: None }
70 42 15 00 
# :inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2
# inline_main_printHex_36_inline_printHex_printHexDigit_34_t6 <- inline_main_printHex_36_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_t6 <- inline_main_printHex_36_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_36_inline_printHex_printHexDigit_34_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 0152d Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x0a=10)], resolved: None }
04 a3 0a 
# inline_main_printHex_36_inline_printHex_printHexDigit_34_a <- inline_main_printHex_36_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_36_inline_printHex_printHexDigit_34_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 01530 Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_a <- inline_main_printHex_36_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_36_inline_printHex_printHexDigit_34_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0xa3), Register(0x00)], resolved: None }
0b a3 00 
# 01533 Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_a <- inline_main_printHex_36_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_36_inline_printHex_printHexDigit_34_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 01535 Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_a <- inline_main_printHex_36_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_36_inline_printHex_printHexDigit_34_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0x00), Register(0xa2)], resolved: None }
14 a2 00 a2 
# inline_main_printHex_36_inline_printHex_printHexDigit_34_t8 <- inline_main_printHex_36_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_t8 <- inline_main_printHex_36_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_36_inline_printHex_printHexDigit_34_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 01539 Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x41=65)], resolved: None }
04 a3 41 
# inline_main_printHex_36_inline_printHex_printHexDigit_34_a <- inline_main_printHex_36_inline_printHex_printHexDigit_34_t8 Add inline_main_printHex_36_inline_printHex_printHexDigit_34_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 0153c Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_a <- inline_main_printHex_36_inline_printHex_printHexDigit_34_t8 Add inline_main_printHex_36_inline_printHex_printHexDigit_34_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0xa3), Register(0xa2)], resolved: None }
14 a2 a3 a2 
# inline_main_printHex_36_inline_printHex_printHexDigit_34_t11 <- inline_main_printHex_36_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_t11 <- inline_main_printHex_36_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c <- inline_main_printHex_36_inline_printHex_printHexDigit_34_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c <- inline_main_printHex_36_inline_printHex_printHexDigit_34_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# None <= call io_write0(inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 01540 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xa2)], resolved: None }
68 a2 
# goto inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc)], resolved: None }
# :inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_36_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc
# :inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_36_inline_printHex_printHexDigit_34_printHexDigit_if_end_0
# goto inline_main_printHex_36_inline_printHex_printHexDigit_34_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_36_inline_printHex_printHexDigit_34_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_36_inline_printHex_printHexDigit_34_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_36_inline_printHex_printHexDigit_34_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_36_inline_printHex_printHexDigit_34_function_end_printHexDigit
# inline_main_printHex_36_t6 <- inline_main_printHex_36_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_t6 <- inline_main_printHex_36_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_36_t8 <- inline_main_printHex_36_b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_t8 <- inline_main_printHex_36_b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_printHex_36_t9 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 01542 Instruction { source: "inline_main_printHex_36_t9 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x10=16)], resolved: None }
04 a2 10 
# inline_main_printHex_36_t7 <- inline_main_printHex_36_t8 Multiply inline_main_printHex_36_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))"] }
# 01545 Instruction { source: "inline_main_printHex_36_t7 <- inline_main_printHex_36_t8 Multiply inline_main_printHex_36_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\"] }", opcode: Mul8_8, args: [Register(0xa1), Register(0xa2), Register(0xa1)], resolved: None }
10 a1 a2 a1 
# inline_main_printHex_36_a <- inline_main_printHex_36_t6 Subtract inline_main_printHex_36_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))"] }
# 01549 Instruction { source: "inline_main_printHex_36_a <- inline_main_printHex_36_t6 Subtract inline_main_printHex_36_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Copy8, args: [Register(0xa1), Register(0x00)], resolved: None }
0b a1 00 
# 0154c Instruction { source: "inline_main_printHex_36_a <- inline_main_printHex_36_t6 Subtract inline_main_printHex_36_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0154e Instruction { source: "inline_main_printHex_36_a <- inline_main_printHex_36_t6 Subtract inline_main_printHex_36_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0x00), Register(0x90)], resolved: None }
14 90 00 90 
# goto inline_main_printHex_36_printHex_if_end_0
# 	SourceContext { contexts: [] }
# 01552 Instruction { source: "goto inline_main_printHex_36_printHex_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_36_printHex_if_end_0)], resolved: None }
70 5b 15 00 
# :inline_main_printHex_36_printHex_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_36_printHex_if_else_0_2
# inline_main_printHex_36_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Number(U8, 48)", "Number(U8, 48)"] }
# 01556 Instruction { source: "inline_main_printHex_36_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x30=48)], resolved: None }
04 a1 30 
# inline_main_printHex_36_inline_printHex_putc_31_c <- inline_main_printHex_36_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_putc_31_c <- inline_main_printHex_36_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_printHex_36_inline_printHex_putc_31_t1 <- inline_main_printHex_36_inline_printHex_putc_31_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_putc_31_t1 <- inline_main_printHex_36_inline_printHex_putc_31_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# None <= call io_write0(inline_main_printHex_36_inline_printHex_putc_31_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 01559 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xa1)], resolved: None }
68 a1 
# goto inline_main_printHex_36_inline_printHex_putc_31_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_36_inline_printHex_putc_31_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_36_inline_printHex_putc_31_function_end_putc)], resolved: None }
# :inline_main_printHex_36_inline_printHex_putc_31_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_36_inline_printHex_putc_31_function_end_putc
# :inline_main_printHex_36_printHex_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_36_printHex_if_end_0
# inline_main_printHex_36_t13 <- inline_main_printHex_36_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_t13 <- inline_main_printHex_36_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_36_inline_printHex_printHexDigit_35_a <- inline_main_printHex_36_t13 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_a <- inline_main_printHex_36_t13 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_36_inline_printHex_printHexDigit_35_t0 <- inline_main_printHex_36_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_t0 <- inline_main_printHex_36_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_36_inline_printHex_printHexDigit_35_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 0155b Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0a=10)], resolved: None }
04 a1 0a 
# if inline_main_printHex_36_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_36_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 0155e Instruction { source: "if inline_main_printHex_36_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_36_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0xa1), Register(0x90)], resolved: None }
15 a1 90 
# 01561 Instruction { source: "if inline_main_printHex_36_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_36_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2)], resolved: None }
71 72 15 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_36_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_36_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1
# inline_main_printHex_36_inline_printHex_printHexDigit_35_t4 <- inline_main_printHex_36_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_t4 <- inline_main_printHex_36_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_36_inline_printHex_printHexDigit_35_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 01565 Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x30=48)], resolved: None }
04 a1 30 
# inline_main_printHex_36_inline_printHex_printHexDigit_35_t3 <- inline_main_printHex_36_inline_printHex_printHexDigit_35_t4 Add inline_main_printHex_36_inline_printHex_printHexDigit_35_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 01568 Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_t3 <- inline_main_printHex_36_inline_printHex_printHexDigit_35_t4 Add inline_main_printHex_36_inline_printHex_printHexDigit_35_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0xa1), Register(0x90)], resolved: None }
14 90 a1 90 
# inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c <- inline_main_printHex_36_inline_printHex_printHexDigit_35_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c <- inline_main_printHex_36_inline_printHex_printHexDigit_35_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# None <= call io_write0(inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0156c Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# goto inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc)], resolved: None }
# :inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc
# goto inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 0156e Instruction { source: "goto inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_end_0)], resolved: None }
70 87 15 00 
# :inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2
# inline_main_printHex_36_inline_printHex_printHexDigit_35_t6 <- inline_main_printHex_36_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_t6 <- inline_main_printHex_36_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_36_inline_printHex_printHexDigit_35_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 01572 Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0a=10)], resolved: None }
04 a1 0a 
# inline_main_printHex_36_inline_printHex_printHexDigit_35_a <- inline_main_printHex_36_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_36_inline_printHex_printHexDigit_35_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 01575 Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_a <- inline_main_printHex_36_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_36_inline_printHex_printHexDigit_35_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0xa1), Register(0x00)], resolved: None }
0b a1 00 
# 01578 Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_a <- inline_main_printHex_36_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_36_inline_printHex_printHexDigit_35_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0157a Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_a <- inline_main_printHex_36_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_36_inline_printHex_printHexDigit_35_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0x00), Register(0x90)], resolved: None }
14 90 00 90 
# inline_main_printHex_36_inline_printHex_printHexDigit_35_t8 <- inline_main_printHex_36_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_t8 <- inline_main_printHex_36_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_36_inline_printHex_printHexDigit_35_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 0157e Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x41=65)], resolved: None }
04 a1 41 
# inline_main_printHex_36_inline_printHex_printHexDigit_35_a <- inline_main_printHex_36_inline_printHex_printHexDigit_35_t8 Add inline_main_printHex_36_inline_printHex_printHexDigit_35_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 01581 Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_a <- inline_main_printHex_36_inline_printHex_printHexDigit_35_t8 Add inline_main_printHex_36_inline_printHex_printHexDigit_35_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0xa1), Register(0x90)], resolved: None }
14 90 a1 90 
# inline_main_printHex_36_inline_printHex_printHexDigit_35_t11 <- inline_main_printHex_36_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_t11 <- inline_main_printHex_36_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c <- inline_main_printHex_36_inline_printHex_printHexDigit_35_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c <- inline_main_printHex_36_inline_printHex_printHexDigit_35_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# None <= call io_write0(inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 01585 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# goto inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc)], resolved: None }
# :inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_36_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc
# :inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_36_inline_printHex_printHexDigit_35_printHexDigit_if_end_0
# goto inline_main_printHex_36_inline_printHex_printHexDigit_35_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_36_inline_printHex_printHexDigit_35_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_36_inline_printHex_printHexDigit_35_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_36_inline_printHex_printHexDigit_35_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_36_inline_printHex_printHexDigit_35_function_end_printHexDigit
# goto inline_main_printHex_36_function_end_printHex
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_36_function_end_printHex\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_36_function_end_printHex)], resolved: None }
# :inline_main_printHex_36_function_end_printHex
# 	SourceContext { contexts: [] }
# inline_main_printHex_36_function_end_printHex
# t31 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 01587 Instruction { source: "t31 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x0a=10)], resolved: None }
04 90 0a 
# ttyout <- t31
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 0158a Instruction { source: "ttyout <- t31\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 0158c Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 cc 1a 00 
# :main_if_else_1_7
# 	SourceContext { contexts: [] }
# main_if_else_1_7
# t32 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t32 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# t33 <- 0n119/0x77u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }", "Number(U8, 119)", "Number(U8, 119)"] }
# 01590 Instruction { source: "t33 <- 0n119/0x77u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\", \"Number(U8, 119)\", \"Number(U8, 119)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x77=119)], resolved: None }
04 a1 77 
# if t32 == t33 then 'main_if_true_2_8' else 'main_if_else_2_9'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }"] }
# 01593 Instruction { source: "if t32 == t33 then 'main_if_true_2_8' else 'main_if_else_2_9'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\"] }", opcode: Cmp8, args: [Register(0x90), Register(0xa1)], resolved: None }
15 90 a1 
# 01596 Instruction { source: "if t32 == t33 then 'main_if_true_2_8' else 'main_if_else_2_9'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\"] }", opcode: JzImm, args: [Label24(main_if_true_2_8)], resolved: None }
72 9e 15 00 
# 0159a Instruction { source: "if t32 == t33 then 'main_if_true_2_8' else 'main_if_else_2_9'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_2_9)], resolved: None }
70 a1 16 00 
# :main_if_true_2_8
# 	SourceContext { contexts: [] }
# main_if_true_2_8
# p_byte <- addr U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }", "Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") }", "Ident(\"addr\")"] }
# 0159e Instruction { source: "p_byte <- addr U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }\", \"Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") }\", \"Ident(\\\"addr\\\")\"] }", opcode: Copy32, args: [Register(0x8c), Register(0x94)], resolved: None }
21 8c 94 
# t34 <- p_byte U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Ident(\"p_byte\")", "Ident(\"p_byte\")"] }
# 015a1 Instruction { source: "t34 <- p_byte U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Ident(\\\"p_byte\\\")\", \"Ident(\\\"p_byte\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0xb0)], resolved: None }
21 94 b0 
# t38 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 015a4 Instruction { source: "t38 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xac)], resolved: None }
21 0c ac 
# t39 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 015a7 Instruction { source: "t39 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x94), Constant32(0x00000001=1)], resolved: None }
20 94 01 00 00 00 
# t37 <- t38 Add t39
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1))"] }
# 015ad Instruction { source: "t37 <- t38 Add t39\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 015ae Instruction { source: "t37 <- t38 Add t39\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0xac), Register(0x94), Register(0x94)], resolved: None }
30 ac 94 94 
# 015b2 Instruction { source: "t37 <- t38 Add t39\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t36 <- t37 U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "AddressOf(Index(\"buf\", Number(USIZE, 1)))"] }
# optimized away noop copy Instruction { source: "t36 <- t37 U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_main_parseHex_19_c <- t36 U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_c <- t36 U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_main_parseHex_19_t0 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Number(U8, 16)", "Number(U8, 16)"] }
# 015b3 Instruction { source: "inline_main_parseHex_19_t0 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x10=16)], resolved: None }
04 a3 10 
# inline_main_parseHex_19_t3 <- inline_main_parseHex_19_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_t3 <- inline_main_parseHex_19_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_main_parseHex_19_t2 <- mem[inline_main_parseHex_19_t3] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))"] }
# 015b6 Instruction { source: "inline_main_parseHex_19_t2 <- mem[inline_main_parseHex_19_t3] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\"] }", opcode: Load8, args: [Register(0x94), Register(0xa1)], resolved: None }
05 94 a1 
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_ch <- inline_main_parseHex_19_t2 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_ch <- inline_main_parseHex_19_t2 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t0 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t0 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t1 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 015b9 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t1 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x61=97)], resolved: None }
04 a2 61 
# if inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t0 >= inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t1 then 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }"] }
# 015bc Instruction { source: "if inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t0 >= inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t1 then 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: Cmp8, args: [Register(0xa2), Register(0xa1)], resolved: None }
15 a2 a1 
# 015bf Instruction { source: "if inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t0 >= inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t1 then 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_1)], resolved: None }
71 c7 15 00 
# 015c3 Instruction { source: "if inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t0 >= inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t1 then 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_2)], resolved: None }
70 e2 15 00 
# :inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }"] }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_1
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t4 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t4 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t5 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Number(U8, 97)", "Number(U8, 97)"] }
# 015c7 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t5 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x61=97)], resolved: None }
04 a2 61 
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t3 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t4 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t5
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))"] }
# 015ca Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t3 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t4 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Copy8, args: [Register(0xa2), Register(0x00)], resolved: None }
0b a2 00 
# 015cd Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t3 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t4 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 015cf Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t3 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t4 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa1), Register(0x00), Register(0xa1)], resolved: None }
14 a1 00 a1 
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 015d3 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x0a=10)], resolved: None }
04 a2 0a 
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t2 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t3 Add inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t6
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))"] }
# 015d6 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t2 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t3 Add inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t6\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa1), Register(0xa2), Register(0xa1)], resolved: None }
14 a1 a2 a1 
# inline_main_parseHex_19_t1 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t2 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_t1 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t2 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# 015da Instruction { source: "goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble)], resolved: None }
70 1b 16 00 
# goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# 015de Instruction { source: "goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_0)], resolved: None }
70 e2 15 00 
# :inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_2
# :inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_0
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t7 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t7 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t8 <- 0n57/0x39u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Number(U8, 57)", "Number(U8, 57)"] }
# 015e2 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t8 <- 0n57/0x39u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Number(U8, 57)\", \"Number(U8, 57)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x39=57)], resolved: None }
04 a2 39 
# if inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t7 <= inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t8 then 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }"] }
# 015e5 Instruction { source: "if inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t7 <= inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t8 then 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: Cmp8, args: [Register(0xa1), Register(0xa2)], resolved: None }
15 a1 a2 
# 015e8 Instruction { source: "if inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t7 <= inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t8 then 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_4)], resolved: None }
71 f0 15 00 
# 015ec Instruction { source: "if inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t7 <= inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t8 then 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_5)], resolved: None }
70 04 16 00 
# :inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }"] }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_4
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t10 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t10 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 015f0 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x30=48)], resolved: None }
04 a2 30 
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t9 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t10 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t11
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))"] }
# 015f3 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t9 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t10 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Copy8, args: [Register(0xa2), Register(0x00)], resolved: None }
0b a2 00 
# 015f6 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t9 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t10 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 015f8 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t9 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t10 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa1), Register(0x00), Register(0xa1)], resolved: None }
14 a1 00 a1 
# inline_main_parseHex_19_t1 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t9 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_t1 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t9 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# 015fc Instruction { source: "goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble)], resolved: None }
70 1b 16 00 
# goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# 01600 Instruction { source: "goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_3)], resolved: None }
70 04 16 00 
# :inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_5
# :inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_3
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t14 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t14 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t15 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 01604 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t15 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x41=65)], resolved: None }
04 a2 41 
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t13 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t14 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t15
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))"] }
# 01607 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t13 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t14 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Copy8, args: [Register(0xa2), Register(0x00)], resolved: None }
0b a2 00 
# 0160a Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t13 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t14 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0160c Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t13 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t14 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa1), Register(0x00), Register(0xa1)], resolved: None }
14 a1 00 a1 
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t16 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 01610 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t16 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x0a=10)], resolved: None }
04 a2 0a 
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t12 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t13 Add inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t16
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))"] }
# 01613 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t12 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t13 Add inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t16\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa1), Register(0xa2), Register(0xa1)], resolved: None }
14 a1 a2 a1 
# inline_main_parseHex_19_t1 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t12 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_t1 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_t12 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# 01617 Instruction { source: "goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble)], resolved: None }
70 1b 16 00 
# :inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble
# 	SourceContext { contexts: [] }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble
# inline_main_parseHex_19_h <- inline_main_parseHex_19_t0 Multiply inline_main_parseHex_19_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))"] }
# 0161b Instruction { source: "inline_main_parseHex_19_h <- inline_main_parseHex_19_t0 Multiply inline_main_parseHex_19_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\"] }", opcode: Mul8_8, args: [Register(0xa3), Register(0xa1), Register(0xa1)], resolved: None }
10 a3 a1 a1 
# inline_main_parseHex_19_t5 <- inline_main_parseHex_19_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_t5 <- inline_main_parseHex_19_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_main_parseHex_19_t6 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0161f Instruction { source: "inline_main_parseHex_19_t6 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x9c), Constant32(0x00000001=1)], resolved: None }
20 9c 01 00 00 00 
# inline_main_parseHex_19_t4 <- inline_main_parseHex_19_t5 Add inline_main_parseHex_19_t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))"] }
# 01625 Instruction { source: "inline_main_parseHex_19_t4 <- inline_main_parseHex_19_t5 Add inline_main_parseHex_19_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01626 Instruction { source: "inline_main_parseHex_19_t4 <- inline_main_parseHex_19_t5 Add inline_main_parseHex_19_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x94), Register(0x9c), Register(0x94)], resolved: None }
30 94 9c 94 
# 0162a Instruction { source: "inline_main_parseHex_19_t4 <- inline_main_parseHex_19_t5 Add inline_main_parseHex_19_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_parseHex_19_c <- inline_main_parseHex_19_t4 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_c <- inline_main_parseHex_19_t4 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_main_parseHex_19_t7 <- inline_main_parseHex_19_h U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Ident(\"h\")", "Ident(\"h\")"] }
# 0162b Instruction { source: "inline_main_parseHex_19_t7 <- inline_main_parseHex_19_h U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Ident(\\\"h\\\")\", \"Ident(\\\"h\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa2)], resolved: None }
0b a1 a2 
# inline_main_parseHex_19_t10 <- inline_main_parseHex_19_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_t10 <- inline_main_parseHex_19_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_main_parseHex_19_t9 <- mem[inline_main_parseHex_19_t10] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))"] }
# 0162e Instruction { source: "inline_main_parseHex_19_t9 <- mem[inline_main_parseHex_19_t10] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\"] }", opcode: Load8, args: [Register(0x94), Register(0x90)], resolved: None }
05 94 90 
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_ch <- inline_main_parseHex_19_t9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_ch <- inline_main_parseHex_19_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t0 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t0 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t1 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 01631 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t1 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x61=97)], resolved: None }
04 a1 61 
# if inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t0 >= inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t1 then 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }"] }
# 01634 Instruction { source: "if inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t0 >= inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t1 then 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: Cmp8, args: [Register(0xa1), Register(0x90)], resolved: None }
15 a1 90 
# 01637 Instruction { source: "if inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t0 >= inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t1 then 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_1)], resolved: None }
71 3f 16 00 
# 0163b Instruction { source: "if inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t0 >= inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t1 then 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_2)], resolved: None }
70 5a 16 00 
# :inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }"] }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_1
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t4 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t4 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t5 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Number(U8, 97)", "Number(U8, 97)"] }
# 0163f Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t5 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x61=97)], resolved: None }
04 a1 61 
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t3 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t4 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t5
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))"] }
# 01642 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t3 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t4 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Copy8, args: [Register(0xa1), Register(0x00)], resolved: None }
0b a1 00 
# 01645 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t3 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t4 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 01647 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t3 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t4 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0x00), Register(0x90)], resolved: None }
14 90 00 90 
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 0164b Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0a=10)], resolved: None }
04 a1 0a 
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t2 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t3 Add inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t6
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))"] }
# 0164e Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t2 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t3 Add inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t6\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0xa1), Register(0x90)], resolved: None }
14 90 a1 90 
# inline_main_parseHex_19_t8 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t2 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_t8 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t2 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# 01652 Instruction { source: "goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble)], resolved: None }
70 93 16 00 
# goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# 01656 Instruction { source: "goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_0)], resolved: None }
70 5a 16 00 
# :inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_2
# :inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_0
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t7 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t7 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t8 <- 0n57/0x39u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Number(U8, 57)", "Number(U8, 57)"] }
# 0165a Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t8 <- 0n57/0x39u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Number(U8, 57)\", \"Number(U8, 57)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x39=57)], resolved: None }
04 a1 39 
# if inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t7 <= inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t8 then 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }"] }
# 0165d Instruction { source: "if inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t7 <= inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t8 then 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: Cmp8, args: [Register(0x90), Register(0xa1)], resolved: None }
15 90 a1 
# 01660 Instruction { source: "if inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t7 <= inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t8 then 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_4)], resolved: None }
71 68 16 00 
# 01664 Instruction { source: "if inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t7 <= inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t8 then 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_5)], resolved: None }
70 7c 16 00 
# :inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }"] }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_4
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t10 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t10 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 01668 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x30=48)], resolved: None }
04 a1 30 
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t9 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t10 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t11
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))"] }
# 0166b Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t9 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t10 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Copy8, args: [Register(0xa1), Register(0x00)], resolved: None }
0b a1 00 
# 0166e Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t9 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t10 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 01670 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t9 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t10 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0x00), Register(0x90)], resolved: None }
14 90 00 90 
# inline_main_parseHex_19_t8 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t9 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_t8 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t9 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# 01674 Instruction { source: "goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble)], resolved: None }
70 93 16 00 
# goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# 01678 Instruction { source: "goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_3)], resolved: None }
70 7c 16 00 
# :inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_5
# :inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_3
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t14 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t14 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t15 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 0167c Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t15 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x41=65)], resolved: None }
04 a1 41 
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t13 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t14 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t15
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))"] }
# 0167f Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t13 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t14 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Copy8, args: [Register(0xa1), Register(0x00)], resolved: None }
0b a1 00 
# 01682 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t13 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t14 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 01684 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t13 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t14 Subtract inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0x00), Register(0x90)], resolved: None }
14 90 00 90 
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t16 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 01688 Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t16 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0a=10)], resolved: None }
04 a1 0a 
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t12 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t13 Add inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t16
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))"] }
# 0168b Instruction { source: "inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t12 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t13 Add inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t16\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0xa1), Register(0x90)], resolved: None }
14 90 a1 90 
# inline_main_parseHex_19_t8 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t12 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_19_t8 <- inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_t12 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# 0168f Instruction { source: "goto inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble)], resolved: None }
70 93 16 00 
# :inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble
# 	SourceContext { contexts: [] }
# inline_main_parseHex_19_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble
# inline_main_parseHex_19_h <- inline_main_parseHex_19_t7 Add inline_main_parseHex_19_t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))"] }
# 01693 Instruction { source: "inline_main_parseHex_19_h <- inline_main_parseHex_19_t7 Add inline_main_parseHex_19_t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0x90), Register(0xa1)], resolved: None }
14 a2 90 a1 
# inline_main_parseHex_19_t11 <- inline_main_parseHex_19_h U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }", "Ident(\"h\")", "Ident(\"h\")"] }
# 01697 Instruction { source: "inline_main_parseHex_19_t11 <- inline_main_parseHex_19_h U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\", \"Ident(\\\"h\\\")\", \"Ident(\\\"h\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0x90)], resolved: None }
0b a1 90 
# t35 <- inline_main_parseHex_19_t11 U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }"] }
# optimized away noop copy Instruction { source: "t35 <- inline_main_parseHex_19_t11 U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# goto inline_main_parseHex_19_function_end_parseHex
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_parseHex_19_function_end_parseHex\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_19_function_end_parseHex)], resolved: None }
# :inline_main_parseHex_19_function_end_parseHex
# 	SourceContext { contexts: [] }
# inline_main_parseHex_19_function_end_parseHex
# mem[t34] <- t35 U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }"] }
# 0169a Instruction { source: "mem[t34] <- t35 U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\"] }", opcode: Store8, args: [Register(0x90), Register(0xb0)], resolved: None }
06 90 b0 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 0169d Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 cc 1a 00 
# :main_if_else_2_9
# 	SourceContext { contexts: [] }
# main_if_else_2_9
# t40 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t40 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# t41 <- 0n110/0x6eu8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }", "Number(U8, 110)", "Number(U8, 110)"] }
# 016a1 Instruction { source: "t41 <- 0n110/0x6eu8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\", \"Number(U8, 110)\", \"Number(U8, 110)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x6e=110)], resolved: None }
04 a1 6e 
# if t40 == t41 then 'main_if_true_3_10' else 'main_if_else_3_11'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }"] }
# 016a4 Instruction { source: "if t40 == t41 then 'main_if_true_3_10' else 'main_if_else_3_11'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\"] }", opcode: Cmp8, args: [Register(0x90), Register(0xa1)], resolved: None }
15 90 a1 
# 016a7 Instruction { source: "if t40 == t41 then 'main_if_true_3_10' else 'main_if_else_3_11'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\"] }", opcode: JzImm, args: [Label24(main_if_true_3_10)], resolved: None }
72 af 16 00 
# 016ab Instruction { source: "if t40 == t41 then 'main_if_true_3_10' else 'main_if_else_3_11'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_3_11)], resolved: None }
70 bf 16 00 
# :main_if_true_3_10
# 	SourceContext { contexts: [] }
# main_if_true_3_10
# t42 <- addr U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"addr\"), Number(U8, 1))", "Ident(\"addr\")", "Ident(\"addr\")"] }
# optimized away noop copy Instruction { source: "t42 <- addr U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\", \"Ident(\\\"addr\\\")\", \"Ident(\\\"addr\\\")\"] }", opcode: Copy32, args: [Register(0x8c), Register(0x8c)], resolved: None }
# t43 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"addr\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 016af Instruction { source: "t43 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x94), Constant32(0x00000001=1)], resolved: None }
20 94 01 00 00 00 
# addr <- t42 Add t43
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"addr\"), Number(U8, 1))"] }
# 016b5 Instruction { source: "addr <- t42 Add t43\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 016b6 Instruction { source: "addr <- t42 Add t43\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x8c), Register(0x94), Register(0x8c)], resolved: None }
30 8c 94 8c 
# 016ba Instruction { source: "addr <- t42 Add t43\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 016bb Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 cc 1a 00 
# :main_if_else_3_11
# 	SourceContext { contexts: [] }
# main_if_else_3_11
# t44 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t44 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# t45 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 016bf Instruction { source: "t45 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x61=97)], resolved: None }
04 a1 61 
# if t44 == t45 then 'main_if_true_4_12' else 'main_if_else_4_13'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }"] }
# 016c2 Instruction { source: "if t44 == t45 then 'main_if_true_4_12' else 'main_if_else_4_13'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: Cmp8, args: [Register(0x90), Register(0xa1)], resolved: None }
15 90 a1 
# 016c5 Instruction { source: "if t44 == t45 then 'main_if_true_4_12' else 'main_if_else_4_13'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JzImm, args: [Label24(main_if_true_4_12)], resolved: None }
72 cd 16 00 
# 016c9 Instruction { source: "if t44 == t45 then 'main_if_true_4_12' else 'main_if_else_4_13'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_4_13)], resolved: None }
70 02 19 00 
# :main_if_true_4_12
# 	SourceContext { contexts: [] }
# main_if_true_4_12
# t47 <- addr[0x03..0x04] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] })", "Index(\"addr\", Number(USIZE, 3))", "Index(\"addr\", Number(USIZE, 3))"] }
# 016cd Instruction { source: "t47 <- addr[0x03..0x04] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] })\", \"Index(\\\"addr\\\", Number(USIZE, 3))\", \"Index(\\\"addr\\\", Number(USIZE, 3))\"] }", opcode: Copy8, args: [Register(0x8f), Register(0xb4)], resolved: None }
0b 8f b4 
# inline_main_printHex_37_a <- t47 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] })"] }
# 016d0 Instruction { source: "inline_main_printHex_37_a <- t47 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] })\"] }", opcode: Copy8, args: [Register(0xb4), Register(0x90)], resolved: None }
0b b4 90 
# inline_main_printHex_37_t0 <- inline_main_printHex_37_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_t0 <- inline_main_printHex_37_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_37_t1 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Number(U8, 15)", "Number(U8, 15)"] }
# 016d3 Instruction { source: "inline_main_printHex_37_t1 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0f=15)], resolved: None }
04 a1 0f 
# if inline_main_printHex_37_t0 > inline_main_printHex_37_t1 then 'inline_main_printHex_37_printHex_if_true_0_1' else 'inline_main_printHex_37_printHex_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }"] }
# 016d6 Instruction { source: "if inline_main_printHex_37_t0 > inline_main_printHex_37_t1 then 'inline_main_printHex_37_printHex_if_true_0_1' else 'inline_main_printHex_37_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: Cmp8, args: [Register(0x90), Register(0xa1)], resolved: None }
15 90 a1 
# 016d9 Instruction { source: "if inline_main_printHex_37_t0 > inline_main_printHex_37_t1 then 'inline_main_printHex_37_printHex_if_true_0_1' else 'inline_main_printHex_37_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_37_printHex_if_else_0_2)], resolved: None }
71 27 17 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_37_t0 > inline_main_printHex_37_t1 then 'inline_main_printHex_37_printHex_if_true_0_1' else 'inline_main_printHex_37_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_37_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_37_printHex_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }"] }
# inline_main_printHex_37_printHex_if_true_0_1
# inline_main_printHex_37_t2 <- inline_main_printHex_37_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_t2 <- inline_main_printHex_37_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_37_t3 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 016dd Instruction { source: "inline_main_printHex_37_t3 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x10=16)], resolved: None }
04 a1 10 
# inline_main_printHex_37_b <- inline_main_printHex_37_t2 Divide inline_main_printHex_37_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))"] }
# 016e0 Instruction { source: "inline_main_printHex_37_b <- inline_main_printHex_37_t2 Divide inline_main_printHex_37_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\"] }", opcode: Divide8, args: [Register(0x90), Register(0xa1), Register(0xa1)], resolved: None }
17 90 a1 a1 
# inline_main_printHex_37_t5 <- inline_main_printHex_37_b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_t5 <- inline_main_printHex_37_b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_printHex_37_inline_printHex_printHexDigit_34_a <- inline_main_printHex_37_t5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })"] }
# 016e4 Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_a <- inline_main_printHex_37_t5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa2)], resolved: None }
0b a1 a2 
# inline_main_printHex_37_inline_printHex_printHexDigit_34_t0 <- inline_main_printHex_37_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_t0 <- inline_main_printHex_37_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_37_inline_printHex_printHexDigit_34_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 016e7 Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x0a=10)], resolved: None }
04 a3 0a 
# if inline_main_printHex_37_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_37_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 016ea Instruction { source: "if inline_main_printHex_37_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_37_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0xa3), Register(0xa2)], resolved: None }
15 a3 a2 
# 016ed Instruction { source: "if inline_main_printHex_37_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_37_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2)], resolved: None }
71 fe 16 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_37_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_37_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1
# inline_main_printHex_37_inline_printHex_printHexDigit_34_t4 <- inline_main_printHex_37_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_t4 <- inline_main_printHex_37_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_37_inline_printHex_printHexDigit_34_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 016f1 Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x30=48)], resolved: None }
04 a3 30 
# inline_main_printHex_37_inline_printHex_printHexDigit_34_t3 <- inline_main_printHex_37_inline_printHex_printHexDigit_34_t4 Add inline_main_printHex_37_inline_printHex_printHexDigit_34_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 016f4 Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_t3 <- inline_main_printHex_37_inline_printHex_printHexDigit_34_t4 Add inline_main_printHex_37_inline_printHex_printHexDigit_34_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0xa3), Register(0xa2)], resolved: None }
14 a2 a3 a2 
# inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c <- inline_main_printHex_37_inline_printHex_printHexDigit_34_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c <- inline_main_printHex_37_inline_printHex_printHexDigit_34_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# None <= call io_write0(inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 016f8 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xa2)], resolved: None }
68 a2 
# goto inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc)], resolved: None }
# :inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc
# goto inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 016fa Instruction { source: "goto inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_end_0)], resolved: None }
70 13 17 00 
# :inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2
# inline_main_printHex_37_inline_printHex_printHexDigit_34_t6 <- inline_main_printHex_37_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_t6 <- inline_main_printHex_37_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_37_inline_printHex_printHexDigit_34_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 016fe Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x0a=10)], resolved: None }
04 a3 0a 
# inline_main_printHex_37_inline_printHex_printHexDigit_34_a <- inline_main_printHex_37_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_37_inline_printHex_printHexDigit_34_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 01701 Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_a <- inline_main_printHex_37_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_37_inline_printHex_printHexDigit_34_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0xa3), Register(0x00)], resolved: None }
0b a3 00 
# 01704 Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_a <- inline_main_printHex_37_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_37_inline_printHex_printHexDigit_34_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 01706 Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_a <- inline_main_printHex_37_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_37_inline_printHex_printHexDigit_34_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0x00), Register(0xa2)], resolved: None }
14 a2 00 a2 
# inline_main_printHex_37_inline_printHex_printHexDigit_34_t8 <- inline_main_printHex_37_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_t8 <- inline_main_printHex_37_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_37_inline_printHex_printHexDigit_34_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 0170a Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x41=65)], resolved: None }
04 a3 41 
# inline_main_printHex_37_inline_printHex_printHexDigit_34_a <- inline_main_printHex_37_inline_printHex_printHexDigit_34_t8 Add inline_main_printHex_37_inline_printHex_printHexDigit_34_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 0170d Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_a <- inline_main_printHex_37_inline_printHex_printHexDigit_34_t8 Add inline_main_printHex_37_inline_printHex_printHexDigit_34_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0xa3), Register(0xa2)], resolved: None }
14 a2 a3 a2 
# inline_main_printHex_37_inline_printHex_printHexDigit_34_t11 <- inline_main_printHex_37_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_t11 <- inline_main_printHex_37_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c <- inline_main_printHex_37_inline_printHex_printHexDigit_34_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c <- inline_main_printHex_37_inline_printHex_printHexDigit_34_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# None <= call io_write0(inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 01711 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xa2)], resolved: None }
68 a2 
# goto inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc)], resolved: None }
# :inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_37_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc
# :inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_37_inline_printHex_printHexDigit_34_printHexDigit_if_end_0
# goto inline_main_printHex_37_inline_printHex_printHexDigit_34_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_37_inline_printHex_printHexDigit_34_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_37_inline_printHex_printHexDigit_34_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_37_inline_printHex_printHexDigit_34_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_37_inline_printHex_printHexDigit_34_function_end_printHexDigit
# inline_main_printHex_37_t6 <- inline_main_printHex_37_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_t6 <- inline_main_printHex_37_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_37_t8 <- inline_main_printHex_37_b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_t8 <- inline_main_printHex_37_b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_printHex_37_t9 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 01713 Instruction { source: "inline_main_printHex_37_t9 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x10=16)], resolved: None }
04 a2 10 
# inline_main_printHex_37_t7 <- inline_main_printHex_37_t8 Multiply inline_main_printHex_37_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))"] }
# 01716 Instruction { source: "inline_main_printHex_37_t7 <- inline_main_printHex_37_t8 Multiply inline_main_printHex_37_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\"] }", opcode: Mul8_8, args: [Register(0xa1), Register(0xa2), Register(0xa1)], resolved: None }
10 a1 a2 a1 
# inline_main_printHex_37_a <- inline_main_printHex_37_t6 Subtract inline_main_printHex_37_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))"] }
# 0171a Instruction { source: "inline_main_printHex_37_a <- inline_main_printHex_37_t6 Subtract inline_main_printHex_37_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Copy8, args: [Register(0xa1), Register(0x00)], resolved: None }
0b a1 00 
# 0171d Instruction { source: "inline_main_printHex_37_a <- inline_main_printHex_37_t6 Subtract inline_main_printHex_37_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0171f Instruction { source: "inline_main_printHex_37_a <- inline_main_printHex_37_t6 Subtract inline_main_printHex_37_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0x00), Register(0x90)], resolved: None }
14 90 00 90 
# goto inline_main_printHex_37_printHex_if_end_0
# 	SourceContext { contexts: [] }
# 01723 Instruction { source: "goto inline_main_printHex_37_printHex_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_37_printHex_if_end_0)], resolved: None }
70 2c 17 00 
# :inline_main_printHex_37_printHex_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_37_printHex_if_else_0_2
# inline_main_printHex_37_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Number(U8, 48)", "Number(U8, 48)"] }
# 01727 Instruction { source: "inline_main_printHex_37_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x30=48)], resolved: None }
04 a1 30 
# inline_main_printHex_37_inline_printHex_putc_31_c <- inline_main_printHex_37_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_putc_31_c <- inline_main_printHex_37_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_printHex_37_inline_printHex_putc_31_t1 <- inline_main_printHex_37_inline_printHex_putc_31_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_putc_31_t1 <- inline_main_printHex_37_inline_printHex_putc_31_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# None <= call io_write0(inline_main_printHex_37_inline_printHex_putc_31_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0172a Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xa1)], resolved: None }
68 a1 
# goto inline_main_printHex_37_inline_printHex_putc_31_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_37_inline_printHex_putc_31_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_37_inline_printHex_putc_31_function_end_putc)], resolved: None }
# :inline_main_printHex_37_inline_printHex_putc_31_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_37_inline_printHex_putc_31_function_end_putc
# :inline_main_printHex_37_printHex_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_37_printHex_if_end_0
# inline_main_printHex_37_t13 <- inline_main_printHex_37_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_t13 <- inline_main_printHex_37_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_37_inline_printHex_printHexDigit_35_a <- inline_main_printHex_37_t13 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_a <- inline_main_printHex_37_t13 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_37_inline_printHex_printHexDigit_35_t0 <- inline_main_printHex_37_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_t0 <- inline_main_printHex_37_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_37_inline_printHex_printHexDigit_35_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 0172c Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0a=10)], resolved: None }
04 a1 0a 
# if inline_main_printHex_37_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_37_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 0172f Instruction { source: "if inline_main_printHex_37_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_37_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0xa1), Register(0x90)], resolved: None }
15 a1 90 
# 01732 Instruction { source: "if inline_main_printHex_37_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_37_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2)], resolved: None }
71 43 17 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_37_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_37_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1
# inline_main_printHex_37_inline_printHex_printHexDigit_35_t4 <- inline_main_printHex_37_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_t4 <- inline_main_printHex_37_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_37_inline_printHex_printHexDigit_35_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 01736 Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x30=48)], resolved: None }
04 a1 30 
# inline_main_printHex_37_inline_printHex_printHexDigit_35_t3 <- inline_main_printHex_37_inline_printHex_printHexDigit_35_t4 Add inline_main_printHex_37_inline_printHex_printHexDigit_35_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 01739 Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_t3 <- inline_main_printHex_37_inline_printHex_printHexDigit_35_t4 Add inline_main_printHex_37_inline_printHex_printHexDigit_35_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0xa1), Register(0x90)], resolved: None }
14 90 a1 90 
# inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c <- inline_main_printHex_37_inline_printHex_printHexDigit_35_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c <- inline_main_printHex_37_inline_printHex_printHexDigit_35_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# None <= call io_write0(inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0173d Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# goto inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc)], resolved: None }
# :inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc
# goto inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 0173f Instruction { source: "goto inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_end_0)], resolved: None }
70 58 17 00 
# :inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2
# inline_main_printHex_37_inline_printHex_printHexDigit_35_t6 <- inline_main_printHex_37_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_t6 <- inline_main_printHex_37_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_37_inline_printHex_printHexDigit_35_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 01743 Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0a=10)], resolved: None }
04 a1 0a 
# inline_main_printHex_37_inline_printHex_printHexDigit_35_a <- inline_main_printHex_37_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_37_inline_printHex_printHexDigit_35_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 01746 Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_a <- inline_main_printHex_37_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_37_inline_printHex_printHexDigit_35_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0xa1), Register(0x00)], resolved: None }
0b a1 00 
# 01749 Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_a <- inline_main_printHex_37_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_37_inline_printHex_printHexDigit_35_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0174b Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_a <- inline_main_printHex_37_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_37_inline_printHex_printHexDigit_35_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0x00), Register(0x90)], resolved: None }
14 90 00 90 
# inline_main_printHex_37_inline_printHex_printHexDigit_35_t8 <- inline_main_printHex_37_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_t8 <- inline_main_printHex_37_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_37_inline_printHex_printHexDigit_35_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 0174f Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x41=65)], resolved: None }
04 a1 41 
# inline_main_printHex_37_inline_printHex_printHexDigit_35_a <- inline_main_printHex_37_inline_printHex_printHexDigit_35_t8 Add inline_main_printHex_37_inline_printHex_printHexDigit_35_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 01752 Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_a <- inline_main_printHex_37_inline_printHex_printHexDigit_35_t8 Add inline_main_printHex_37_inline_printHex_printHexDigit_35_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0xa1), Register(0x90)], resolved: None }
14 90 a1 90 
# inline_main_printHex_37_inline_printHex_printHexDigit_35_t11 <- inline_main_printHex_37_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_t11 <- inline_main_printHex_37_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c <- inline_main_printHex_37_inline_printHex_printHexDigit_35_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c <- inline_main_printHex_37_inline_printHex_printHexDigit_35_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# None <= call io_write0(inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 01756 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# goto inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc)], resolved: None }
# :inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_37_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc
# :inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_37_inline_printHex_printHexDigit_35_printHexDigit_if_end_0
# goto inline_main_printHex_37_inline_printHex_printHexDigit_35_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_37_inline_printHex_printHexDigit_35_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_37_inline_printHex_printHexDigit_35_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_37_inline_printHex_printHexDigit_35_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_37_inline_printHex_printHexDigit_35_function_end_printHexDigit
# goto inline_main_printHex_37_function_end_printHex
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_37_function_end_printHex\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_37_function_end_printHex)], resolved: None }
# :inline_main_printHex_37_function_end_printHex
# 	SourceContext { contexts: [] }
# inline_main_printHex_37_function_end_printHex
# t49 <- addr[0x02..0x03] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] })", "Index(\"addr\", Number(USIZE, 2))", "Index(\"addr\", Number(USIZE, 2))"] }
# 01758 Instruction { source: "t49 <- addr[0x02..0x03] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] })\", \"Index(\\\"addr\\\", Number(USIZE, 2))\", \"Index(\\\"addr\\\", Number(USIZE, 2))\"] }", opcode: Copy8, args: [Register(0x8e), Register(0xb4)], resolved: None }
0b 8e b4 
# inline_main_printHex_38_a <- t49 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] })"] }
# 0175b Instruction { source: "inline_main_printHex_38_a <- t49 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] })\"] }", opcode: Copy8, args: [Register(0xb4), Register(0x90)], resolved: None }
0b b4 90 
# inline_main_printHex_38_t0 <- inline_main_printHex_38_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_t0 <- inline_main_printHex_38_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_38_t1 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Number(U8, 15)", "Number(U8, 15)"] }
# 0175e Instruction { source: "inline_main_printHex_38_t1 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0f=15)], resolved: None }
04 a1 0f 
# if inline_main_printHex_38_t0 > inline_main_printHex_38_t1 then 'inline_main_printHex_38_printHex_if_true_0_1' else 'inline_main_printHex_38_printHex_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }"] }
# 01761 Instruction { source: "if inline_main_printHex_38_t0 > inline_main_printHex_38_t1 then 'inline_main_printHex_38_printHex_if_true_0_1' else 'inline_main_printHex_38_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: Cmp8, args: [Register(0x90), Register(0xa1)], resolved: None }
15 90 a1 
# 01764 Instruction { source: "if inline_main_printHex_38_t0 > inline_main_printHex_38_t1 then 'inline_main_printHex_38_printHex_if_true_0_1' else 'inline_main_printHex_38_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_38_printHex_if_else_0_2)], resolved: None }
71 b2 17 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_38_t0 > inline_main_printHex_38_t1 then 'inline_main_printHex_38_printHex_if_true_0_1' else 'inline_main_printHex_38_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_38_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_38_printHex_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }"] }
# inline_main_printHex_38_printHex_if_true_0_1
# inline_main_printHex_38_t2 <- inline_main_printHex_38_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_t2 <- inline_main_printHex_38_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_38_t3 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 01768 Instruction { source: "inline_main_printHex_38_t3 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x10=16)], resolved: None }
04 a1 10 
# inline_main_printHex_38_b <- inline_main_printHex_38_t2 Divide inline_main_printHex_38_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))"] }
# 0176b Instruction { source: "inline_main_printHex_38_b <- inline_main_printHex_38_t2 Divide inline_main_printHex_38_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\"] }", opcode: Divide8, args: [Register(0x90), Register(0xa1), Register(0xa1)], resolved: None }
17 90 a1 a1 
# inline_main_printHex_38_t5 <- inline_main_printHex_38_b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_t5 <- inline_main_printHex_38_b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_printHex_38_inline_printHex_printHexDigit_34_a <- inline_main_printHex_38_t5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })"] }
# 0176f Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_a <- inline_main_printHex_38_t5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa2)], resolved: None }
0b a1 a2 
# inline_main_printHex_38_inline_printHex_printHexDigit_34_t0 <- inline_main_printHex_38_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_t0 <- inline_main_printHex_38_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_38_inline_printHex_printHexDigit_34_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 01772 Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x0a=10)], resolved: None }
04 a3 0a 
# if inline_main_printHex_38_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_38_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 01775 Instruction { source: "if inline_main_printHex_38_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_38_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0xa3), Register(0xa2)], resolved: None }
15 a3 a2 
# 01778 Instruction { source: "if inline_main_printHex_38_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_38_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2)], resolved: None }
71 89 17 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_38_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_38_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1
# inline_main_printHex_38_inline_printHex_printHexDigit_34_t4 <- inline_main_printHex_38_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_t4 <- inline_main_printHex_38_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_38_inline_printHex_printHexDigit_34_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 0177c Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x30=48)], resolved: None }
04 a3 30 
# inline_main_printHex_38_inline_printHex_printHexDigit_34_t3 <- inline_main_printHex_38_inline_printHex_printHexDigit_34_t4 Add inline_main_printHex_38_inline_printHex_printHexDigit_34_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 0177f Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_t3 <- inline_main_printHex_38_inline_printHex_printHexDigit_34_t4 Add inline_main_printHex_38_inline_printHex_printHexDigit_34_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0xa3), Register(0xa2)], resolved: None }
14 a2 a3 a2 
# inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c <- inline_main_printHex_38_inline_printHex_printHexDigit_34_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c <- inline_main_printHex_38_inline_printHex_printHexDigit_34_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# None <= call io_write0(inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 01783 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xa2)], resolved: None }
68 a2 
# goto inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc)], resolved: None }
# :inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc
# goto inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 01785 Instruction { source: "goto inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_end_0)], resolved: None }
70 9e 17 00 
# :inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2
# inline_main_printHex_38_inline_printHex_printHexDigit_34_t6 <- inline_main_printHex_38_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_t6 <- inline_main_printHex_38_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_38_inline_printHex_printHexDigit_34_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 01789 Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x0a=10)], resolved: None }
04 a3 0a 
# inline_main_printHex_38_inline_printHex_printHexDigit_34_a <- inline_main_printHex_38_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_38_inline_printHex_printHexDigit_34_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 0178c Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_a <- inline_main_printHex_38_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_38_inline_printHex_printHexDigit_34_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0xa3), Register(0x00)], resolved: None }
0b a3 00 
# 0178f Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_a <- inline_main_printHex_38_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_38_inline_printHex_printHexDigit_34_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 01791 Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_a <- inline_main_printHex_38_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_38_inline_printHex_printHexDigit_34_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0x00), Register(0xa2)], resolved: None }
14 a2 00 a2 
# inline_main_printHex_38_inline_printHex_printHexDigit_34_t8 <- inline_main_printHex_38_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_t8 <- inline_main_printHex_38_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_38_inline_printHex_printHexDigit_34_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 01795 Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x41=65)], resolved: None }
04 a3 41 
# inline_main_printHex_38_inline_printHex_printHexDigit_34_a <- inline_main_printHex_38_inline_printHex_printHexDigit_34_t8 Add inline_main_printHex_38_inline_printHex_printHexDigit_34_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 01798 Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_a <- inline_main_printHex_38_inline_printHex_printHexDigit_34_t8 Add inline_main_printHex_38_inline_printHex_printHexDigit_34_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0xa3), Register(0xa2)], resolved: None }
14 a2 a3 a2 
# inline_main_printHex_38_inline_printHex_printHexDigit_34_t11 <- inline_main_printHex_38_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_t11 <- inline_main_printHex_38_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c <- inline_main_printHex_38_inline_printHex_printHexDigit_34_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c <- inline_main_printHex_38_inline_printHex_printHexDigit_34_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# None <= call io_write0(inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0179c Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xa2)], resolved: None }
68 a2 
# goto inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc)], resolved: None }
# :inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_38_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc
# :inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_38_inline_printHex_printHexDigit_34_printHexDigit_if_end_0
# goto inline_main_printHex_38_inline_printHex_printHexDigit_34_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_38_inline_printHex_printHexDigit_34_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_38_inline_printHex_printHexDigit_34_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_38_inline_printHex_printHexDigit_34_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_38_inline_printHex_printHexDigit_34_function_end_printHexDigit
# inline_main_printHex_38_t6 <- inline_main_printHex_38_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_t6 <- inline_main_printHex_38_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_38_t8 <- inline_main_printHex_38_b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_t8 <- inline_main_printHex_38_b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_printHex_38_t9 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 0179e Instruction { source: "inline_main_printHex_38_t9 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x10=16)], resolved: None }
04 a2 10 
# inline_main_printHex_38_t7 <- inline_main_printHex_38_t8 Multiply inline_main_printHex_38_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))"] }
# 017a1 Instruction { source: "inline_main_printHex_38_t7 <- inline_main_printHex_38_t8 Multiply inline_main_printHex_38_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\"] }", opcode: Mul8_8, args: [Register(0xa1), Register(0xa2), Register(0xa1)], resolved: None }
10 a1 a2 a1 
# inline_main_printHex_38_a <- inline_main_printHex_38_t6 Subtract inline_main_printHex_38_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))"] }
# 017a5 Instruction { source: "inline_main_printHex_38_a <- inline_main_printHex_38_t6 Subtract inline_main_printHex_38_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Copy8, args: [Register(0xa1), Register(0x00)], resolved: None }
0b a1 00 
# 017a8 Instruction { source: "inline_main_printHex_38_a <- inline_main_printHex_38_t6 Subtract inline_main_printHex_38_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 017aa Instruction { source: "inline_main_printHex_38_a <- inline_main_printHex_38_t6 Subtract inline_main_printHex_38_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0x00), Register(0x90)], resolved: None }
14 90 00 90 
# goto inline_main_printHex_38_printHex_if_end_0
# 	SourceContext { contexts: [] }
# 017ae Instruction { source: "goto inline_main_printHex_38_printHex_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_38_printHex_if_end_0)], resolved: None }
70 b7 17 00 
# :inline_main_printHex_38_printHex_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_38_printHex_if_else_0_2
# inline_main_printHex_38_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Number(U8, 48)", "Number(U8, 48)"] }
# 017b2 Instruction { source: "inline_main_printHex_38_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x30=48)], resolved: None }
04 a1 30 
# inline_main_printHex_38_inline_printHex_putc_31_c <- inline_main_printHex_38_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_putc_31_c <- inline_main_printHex_38_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_printHex_38_inline_printHex_putc_31_t1 <- inline_main_printHex_38_inline_printHex_putc_31_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_putc_31_t1 <- inline_main_printHex_38_inline_printHex_putc_31_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# None <= call io_write0(inline_main_printHex_38_inline_printHex_putc_31_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 017b5 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xa1)], resolved: None }
68 a1 
# goto inline_main_printHex_38_inline_printHex_putc_31_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_38_inline_printHex_putc_31_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_38_inline_printHex_putc_31_function_end_putc)], resolved: None }
# :inline_main_printHex_38_inline_printHex_putc_31_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_38_inline_printHex_putc_31_function_end_putc
# :inline_main_printHex_38_printHex_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_38_printHex_if_end_0
# inline_main_printHex_38_t13 <- inline_main_printHex_38_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_t13 <- inline_main_printHex_38_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_38_inline_printHex_printHexDigit_35_a <- inline_main_printHex_38_t13 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_a <- inline_main_printHex_38_t13 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_38_inline_printHex_printHexDigit_35_t0 <- inline_main_printHex_38_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_t0 <- inline_main_printHex_38_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_38_inline_printHex_printHexDigit_35_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 017b7 Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0a=10)], resolved: None }
04 a1 0a 
# if inline_main_printHex_38_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_38_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 017ba Instruction { source: "if inline_main_printHex_38_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_38_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0xa1), Register(0x90)], resolved: None }
15 a1 90 
# 017bd Instruction { source: "if inline_main_printHex_38_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_38_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2)], resolved: None }
71 ce 17 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_38_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_38_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1
# inline_main_printHex_38_inline_printHex_printHexDigit_35_t4 <- inline_main_printHex_38_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_t4 <- inline_main_printHex_38_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_38_inline_printHex_printHexDigit_35_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 017c1 Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x30=48)], resolved: None }
04 a1 30 
# inline_main_printHex_38_inline_printHex_printHexDigit_35_t3 <- inline_main_printHex_38_inline_printHex_printHexDigit_35_t4 Add inline_main_printHex_38_inline_printHex_printHexDigit_35_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 017c4 Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_t3 <- inline_main_printHex_38_inline_printHex_printHexDigit_35_t4 Add inline_main_printHex_38_inline_printHex_printHexDigit_35_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0xa1), Register(0x90)], resolved: None }
14 90 a1 90 
# inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c <- inline_main_printHex_38_inline_printHex_printHexDigit_35_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c <- inline_main_printHex_38_inline_printHex_printHexDigit_35_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# None <= call io_write0(inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 017c8 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# goto inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc)], resolved: None }
# :inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc
# goto inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 017ca Instruction { source: "goto inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_end_0)], resolved: None }
70 e3 17 00 
# :inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2
# inline_main_printHex_38_inline_printHex_printHexDigit_35_t6 <- inline_main_printHex_38_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_t6 <- inline_main_printHex_38_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_38_inline_printHex_printHexDigit_35_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 017ce Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0a=10)], resolved: None }
04 a1 0a 
# inline_main_printHex_38_inline_printHex_printHexDigit_35_a <- inline_main_printHex_38_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_38_inline_printHex_printHexDigit_35_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 017d1 Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_a <- inline_main_printHex_38_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_38_inline_printHex_printHexDigit_35_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0xa1), Register(0x00)], resolved: None }
0b a1 00 
# 017d4 Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_a <- inline_main_printHex_38_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_38_inline_printHex_printHexDigit_35_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 017d6 Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_a <- inline_main_printHex_38_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_38_inline_printHex_printHexDigit_35_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0x00), Register(0x90)], resolved: None }
14 90 00 90 
# inline_main_printHex_38_inline_printHex_printHexDigit_35_t8 <- inline_main_printHex_38_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_t8 <- inline_main_printHex_38_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_38_inline_printHex_printHexDigit_35_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 017da Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x41=65)], resolved: None }
04 a1 41 
# inline_main_printHex_38_inline_printHex_printHexDigit_35_a <- inline_main_printHex_38_inline_printHex_printHexDigit_35_t8 Add inline_main_printHex_38_inline_printHex_printHexDigit_35_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 017dd Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_a <- inline_main_printHex_38_inline_printHex_printHexDigit_35_t8 Add inline_main_printHex_38_inline_printHex_printHexDigit_35_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0xa1), Register(0x90)], resolved: None }
14 90 a1 90 
# inline_main_printHex_38_inline_printHex_printHexDigit_35_t11 <- inline_main_printHex_38_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_t11 <- inline_main_printHex_38_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c <- inline_main_printHex_38_inline_printHex_printHexDigit_35_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c <- inline_main_printHex_38_inline_printHex_printHexDigit_35_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# None <= call io_write0(inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 017e1 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# goto inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc)], resolved: None }
# :inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_38_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc
# :inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_38_inline_printHex_printHexDigit_35_printHexDigit_if_end_0
# goto inline_main_printHex_38_inline_printHex_printHexDigit_35_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_38_inline_printHex_printHexDigit_35_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_38_inline_printHex_printHexDigit_35_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_38_inline_printHex_printHexDigit_35_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_38_inline_printHex_printHexDigit_35_function_end_printHexDigit
# goto inline_main_printHex_38_function_end_printHex
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_38_function_end_printHex\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_38_function_end_printHex)], resolved: None }
# :inline_main_printHex_38_function_end_printHex
# 	SourceContext { contexts: [] }
# inline_main_printHex_38_function_end_printHex
# t51 <- addr[0x01..0x02] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] })", "Index(\"addr\", Number(USIZE, 1))", "Index(\"addr\", Number(USIZE, 1))"] }
# 017e3 Instruction { source: "t51 <- addr[0x01..0x02] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] })\", \"Index(\\\"addr\\\", Number(USIZE, 1))\", \"Index(\\\"addr\\\", Number(USIZE, 1))\"] }", opcode: Copy8, args: [Register(0x8d), Register(0xb4)], resolved: None }
0b 8d b4 
# inline_main_printHex_39_a <- t51 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] })"] }
# 017e6 Instruction { source: "inline_main_printHex_39_a <- t51 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] })\"] }", opcode: Copy8, args: [Register(0xb4), Register(0x90)], resolved: None }
0b b4 90 
# inline_main_printHex_39_t0 <- inline_main_printHex_39_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_t0 <- inline_main_printHex_39_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_39_t1 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Number(U8, 15)", "Number(U8, 15)"] }
# 017e9 Instruction { source: "inline_main_printHex_39_t1 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0f=15)], resolved: None }
04 a1 0f 
# if inline_main_printHex_39_t0 > inline_main_printHex_39_t1 then 'inline_main_printHex_39_printHex_if_true_0_1' else 'inline_main_printHex_39_printHex_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }"] }
# 017ec Instruction { source: "if inline_main_printHex_39_t0 > inline_main_printHex_39_t1 then 'inline_main_printHex_39_printHex_if_true_0_1' else 'inline_main_printHex_39_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: Cmp8, args: [Register(0x90), Register(0xa1)], resolved: None }
15 90 a1 
# 017ef Instruction { source: "if inline_main_printHex_39_t0 > inline_main_printHex_39_t1 then 'inline_main_printHex_39_printHex_if_true_0_1' else 'inline_main_printHex_39_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_39_printHex_if_else_0_2)], resolved: None }
71 3d 18 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_39_t0 > inline_main_printHex_39_t1 then 'inline_main_printHex_39_printHex_if_true_0_1' else 'inline_main_printHex_39_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_39_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_39_printHex_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }"] }
# inline_main_printHex_39_printHex_if_true_0_1
# inline_main_printHex_39_t2 <- inline_main_printHex_39_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_t2 <- inline_main_printHex_39_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_39_t3 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 017f3 Instruction { source: "inline_main_printHex_39_t3 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x10=16)], resolved: None }
04 a1 10 
# inline_main_printHex_39_b <- inline_main_printHex_39_t2 Divide inline_main_printHex_39_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))"] }
# 017f6 Instruction { source: "inline_main_printHex_39_b <- inline_main_printHex_39_t2 Divide inline_main_printHex_39_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\"] }", opcode: Divide8, args: [Register(0x90), Register(0xa1), Register(0xa1)], resolved: None }
17 90 a1 a1 
# inline_main_printHex_39_t5 <- inline_main_printHex_39_b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_t5 <- inline_main_printHex_39_b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_printHex_39_inline_printHex_printHexDigit_34_a <- inline_main_printHex_39_t5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })"] }
# 017fa Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_a <- inline_main_printHex_39_t5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa2)], resolved: None }
0b a1 a2 
# inline_main_printHex_39_inline_printHex_printHexDigit_34_t0 <- inline_main_printHex_39_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_t0 <- inline_main_printHex_39_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_39_inline_printHex_printHexDigit_34_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 017fd Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x0a=10)], resolved: None }
04 a3 0a 
# if inline_main_printHex_39_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_39_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 01800 Instruction { source: "if inline_main_printHex_39_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_39_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0xa3), Register(0xa2)], resolved: None }
15 a3 a2 
# 01803 Instruction { source: "if inline_main_printHex_39_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_39_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2)], resolved: None }
71 14 18 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_39_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_39_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1
# inline_main_printHex_39_inline_printHex_printHexDigit_34_t4 <- inline_main_printHex_39_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_t4 <- inline_main_printHex_39_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_39_inline_printHex_printHexDigit_34_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 01807 Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x30=48)], resolved: None }
04 a3 30 
# inline_main_printHex_39_inline_printHex_printHexDigit_34_t3 <- inline_main_printHex_39_inline_printHex_printHexDigit_34_t4 Add inline_main_printHex_39_inline_printHex_printHexDigit_34_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 0180a Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_t3 <- inline_main_printHex_39_inline_printHex_printHexDigit_34_t4 Add inline_main_printHex_39_inline_printHex_printHexDigit_34_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0xa3), Register(0xa2)], resolved: None }
14 a2 a3 a2 
# inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c <- inline_main_printHex_39_inline_printHex_printHexDigit_34_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c <- inline_main_printHex_39_inline_printHex_printHexDigit_34_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# None <= call io_write0(inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0180e Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xa2)], resolved: None }
68 a2 
# goto inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc)], resolved: None }
# :inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc
# goto inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 01810 Instruction { source: "goto inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_end_0)], resolved: None }
70 29 18 00 
# :inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2
# inline_main_printHex_39_inline_printHex_printHexDigit_34_t6 <- inline_main_printHex_39_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_t6 <- inline_main_printHex_39_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_39_inline_printHex_printHexDigit_34_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 01814 Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x0a=10)], resolved: None }
04 a3 0a 
# inline_main_printHex_39_inline_printHex_printHexDigit_34_a <- inline_main_printHex_39_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_39_inline_printHex_printHexDigit_34_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 01817 Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_a <- inline_main_printHex_39_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_39_inline_printHex_printHexDigit_34_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0xa3), Register(0x00)], resolved: None }
0b a3 00 
# 0181a Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_a <- inline_main_printHex_39_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_39_inline_printHex_printHexDigit_34_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0181c Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_a <- inline_main_printHex_39_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_39_inline_printHex_printHexDigit_34_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0x00), Register(0xa2)], resolved: None }
14 a2 00 a2 
# inline_main_printHex_39_inline_printHex_printHexDigit_34_t8 <- inline_main_printHex_39_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_t8 <- inline_main_printHex_39_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_39_inline_printHex_printHexDigit_34_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 01820 Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x41=65)], resolved: None }
04 a3 41 
# inline_main_printHex_39_inline_printHex_printHexDigit_34_a <- inline_main_printHex_39_inline_printHex_printHexDigit_34_t8 Add inline_main_printHex_39_inline_printHex_printHexDigit_34_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 01823 Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_a <- inline_main_printHex_39_inline_printHex_printHexDigit_34_t8 Add inline_main_printHex_39_inline_printHex_printHexDigit_34_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0xa3), Register(0xa2)], resolved: None }
14 a2 a3 a2 
# inline_main_printHex_39_inline_printHex_printHexDigit_34_t11 <- inline_main_printHex_39_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_t11 <- inline_main_printHex_39_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c <- inline_main_printHex_39_inline_printHex_printHexDigit_34_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c <- inline_main_printHex_39_inline_printHex_printHexDigit_34_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# None <= call io_write0(inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 01827 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xa2)], resolved: None }
68 a2 
# goto inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc)], resolved: None }
# :inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_39_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc
# :inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_39_inline_printHex_printHexDigit_34_printHexDigit_if_end_0
# goto inline_main_printHex_39_inline_printHex_printHexDigit_34_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_39_inline_printHex_printHexDigit_34_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_39_inline_printHex_printHexDigit_34_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_39_inline_printHex_printHexDigit_34_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_39_inline_printHex_printHexDigit_34_function_end_printHexDigit
# inline_main_printHex_39_t6 <- inline_main_printHex_39_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_t6 <- inline_main_printHex_39_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_39_t8 <- inline_main_printHex_39_b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_t8 <- inline_main_printHex_39_b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_printHex_39_t9 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 01829 Instruction { source: "inline_main_printHex_39_t9 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x10=16)], resolved: None }
04 a2 10 
# inline_main_printHex_39_t7 <- inline_main_printHex_39_t8 Multiply inline_main_printHex_39_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))"] }
# 0182c Instruction { source: "inline_main_printHex_39_t7 <- inline_main_printHex_39_t8 Multiply inline_main_printHex_39_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\"] }", opcode: Mul8_8, args: [Register(0xa1), Register(0xa2), Register(0xa1)], resolved: None }
10 a1 a2 a1 
# inline_main_printHex_39_a <- inline_main_printHex_39_t6 Subtract inline_main_printHex_39_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))"] }
# 01830 Instruction { source: "inline_main_printHex_39_a <- inline_main_printHex_39_t6 Subtract inline_main_printHex_39_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Copy8, args: [Register(0xa1), Register(0x00)], resolved: None }
0b a1 00 
# 01833 Instruction { source: "inline_main_printHex_39_a <- inline_main_printHex_39_t6 Subtract inline_main_printHex_39_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 01835 Instruction { source: "inline_main_printHex_39_a <- inline_main_printHex_39_t6 Subtract inline_main_printHex_39_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0x00), Register(0x90)], resolved: None }
14 90 00 90 
# goto inline_main_printHex_39_printHex_if_end_0
# 	SourceContext { contexts: [] }
# 01839 Instruction { source: "goto inline_main_printHex_39_printHex_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_39_printHex_if_end_0)], resolved: None }
70 42 18 00 
# :inline_main_printHex_39_printHex_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_39_printHex_if_else_0_2
# inline_main_printHex_39_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Number(U8, 48)", "Number(U8, 48)"] }
# 0183d Instruction { source: "inline_main_printHex_39_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x30=48)], resolved: None }
04 a1 30 
# inline_main_printHex_39_inline_printHex_putc_31_c <- inline_main_printHex_39_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_putc_31_c <- inline_main_printHex_39_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_printHex_39_inline_printHex_putc_31_t1 <- inline_main_printHex_39_inline_printHex_putc_31_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_putc_31_t1 <- inline_main_printHex_39_inline_printHex_putc_31_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# None <= call io_write0(inline_main_printHex_39_inline_printHex_putc_31_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 01840 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xa1)], resolved: None }
68 a1 
# goto inline_main_printHex_39_inline_printHex_putc_31_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_39_inline_printHex_putc_31_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_39_inline_printHex_putc_31_function_end_putc)], resolved: None }
# :inline_main_printHex_39_inline_printHex_putc_31_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_39_inline_printHex_putc_31_function_end_putc
# :inline_main_printHex_39_printHex_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_39_printHex_if_end_0
# inline_main_printHex_39_t13 <- inline_main_printHex_39_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_t13 <- inline_main_printHex_39_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_39_inline_printHex_printHexDigit_35_a <- inline_main_printHex_39_t13 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_a <- inline_main_printHex_39_t13 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_39_inline_printHex_printHexDigit_35_t0 <- inline_main_printHex_39_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_t0 <- inline_main_printHex_39_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_39_inline_printHex_printHexDigit_35_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 01842 Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0a=10)], resolved: None }
04 a1 0a 
# if inline_main_printHex_39_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_39_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 01845 Instruction { source: "if inline_main_printHex_39_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_39_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0xa1), Register(0x90)], resolved: None }
15 a1 90 
# 01848 Instruction { source: "if inline_main_printHex_39_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_39_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2)], resolved: None }
71 59 18 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_39_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_39_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1
# inline_main_printHex_39_inline_printHex_printHexDigit_35_t4 <- inline_main_printHex_39_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_t4 <- inline_main_printHex_39_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_39_inline_printHex_printHexDigit_35_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 0184c Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x30=48)], resolved: None }
04 a1 30 
# inline_main_printHex_39_inline_printHex_printHexDigit_35_t3 <- inline_main_printHex_39_inline_printHex_printHexDigit_35_t4 Add inline_main_printHex_39_inline_printHex_printHexDigit_35_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 0184f Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_t3 <- inline_main_printHex_39_inline_printHex_printHexDigit_35_t4 Add inline_main_printHex_39_inline_printHex_printHexDigit_35_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0xa1), Register(0x90)], resolved: None }
14 90 a1 90 
# inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c <- inline_main_printHex_39_inline_printHex_printHexDigit_35_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c <- inline_main_printHex_39_inline_printHex_printHexDigit_35_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# None <= call io_write0(inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 01853 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# goto inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc)], resolved: None }
# :inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc
# goto inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 01855 Instruction { source: "goto inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_end_0)], resolved: None }
70 6e 18 00 
# :inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2
# inline_main_printHex_39_inline_printHex_printHexDigit_35_t6 <- inline_main_printHex_39_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_t6 <- inline_main_printHex_39_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_39_inline_printHex_printHexDigit_35_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 01859 Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0a=10)], resolved: None }
04 a1 0a 
# inline_main_printHex_39_inline_printHex_printHexDigit_35_a <- inline_main_printHex_39_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_39_inline_printHex_printHexDigit_35_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 0185c Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_a <- inline_main_printHex_39_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_39_inline_printHex_printHexDigit_35_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0xa1), Register(0x00)], resolved: None }
0b a1 00 
# 0185f Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_a <- inline_main_printHex_39_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_39_inline_printHex_printHexDigit_35_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 01861 Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_a <- inline_main_printHex_39_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_39_inline_printHex_printHexDigit_35_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0x00), Register(0x90)], resolved: None }
14 90 00 90 
# inline_main_printHex_39_inline_printHex_printHexDigit_35_t8 <- inline_main_printHex_39_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_t8 <- inline_main_printHex_39_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_39_inline_printHex_printHexDigit_35_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 01865 Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x41=65)], resolved: None }
04 a1 41 
# inline_main_printHex_39_inline_printHex_printHexDigit_35_a <- inline_main_printHex_39_inline_printHex_printHexDigit_35_t8 Add inline_main_printHex_39_inline_printHex_printHexDigit_35_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 01868 Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_a <- inline_main_printHex_39_inline_printHex_printHexDigit_35_t8 Add inline_main_printHex_39_inline_printHex_printHexDigit_35_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0xa1), Register(0x90)], resolved: None }
14 90 a1 90 
# inline_main_printHex_39_inline_printHex_printHexDigit_35_t11 <- inline_main_printHex_39_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_t11 <- inline_main_printHex_39_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c <- inline_main_printHex_39_inline_printHex_printHexDigit_35_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c <- inline_main_printHex_39_inline_printHex_printHexDigit_35_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# None <= call io_write0(inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0186c Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# goto inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc)], resolved: None }
# :inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_39_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc
# :inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_39_inline_printHex_printHexDigit_35_printHexDigit_if_end_0
# goto inline_main_printHex_39_inline_printHex_printHexDigit_35_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_39_inline_printHex_printHexDigit_35_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_39_inline_printHex_printHexDigit_35_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_39_inline_printHex_printHexDigit_35_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_39_inline_printHex_printHexDigit_35_function_end_printHexDigit
# goto inline_main_printHex_39_function_end_printHex
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_39_function_end_printHex\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_39_function_end_printHex)], resolved: None }
# :inline_main_printHex_39_function_end_printHex
# 	SourceContext { contexts: [] }
# inline_main_printHex_39_function_end_printHex
# t53 <- addr[0x00..0x01] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] })", "Index(\"addr\", Number(USIZE, 0))", "Index(\"addr\", Number(USIZE, 0))"] }
# 0186e Instruction { source: "t53 <- addr[0x00..0x01] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] })\", \"Index(\\\"addr\\\", Number(USIZE, 0))\", \"Index(\\\"addr\\\", Number(USIZE, 0))\"] }", opcode: Copy8, args: [Register(0x8c), Register(0xb4)], resolved: None }
0b 8c b4 
# inline_main_printHex_40_a <- t53 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] })"] }
# 01871 Instruction { source: "inline_main_printHex_40_a <- t53 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] })\"] }", opcode: Copy8, args: [Register(0xb4), Register(0x90)], resolved: None }
0b b4 90 
# inline_main_printHex_40_t0 <- inline_main_printHex_40_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_t0 <- inline_main_printHex_40_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_40_t1 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Number(U8, 15)", "Number(U8, 15)"] }
# 01874 Instruction { source: "inline_main_printHex_40_t1 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0f=15)], resolved: None }
04 a1 0f 
# if inline_main_printHex_40_t0 > inline_main_printHex_40_t1 then 'inline_main_printHex_40_printHex_if_true_0_1' else 'inline_main_printHex_40_printHex_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }"] }
# 01877 Instruction { source: "if inline_main_printHex_40_t0 > inline_main_printHex_40_t1 then 'inline_main_printHex_40_printHex_if_true_0_1' else 'inline_main_printHex_40_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: Cmp8, args: [Register(0x90), Register(0xa1)], resolved: None }
15 90 a1 
# 0187a Instruction { source: "if inline_main_printHex_40_t0 > inline_main_printHex_40_t1 then 'inline_main_printHex_40_printHex_if_true_0_1' else 'inline_main_printHex_40_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_40_printHex_if_else_0_2)], resolved: None }
71 c8 18 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_40_t0 > inline_main_printHex_40_t1 then 'inline_main_printHex_40_printHex_if_true_0_1' else 'inline_main_printHex_40_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_40_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_40_printHex_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }"] }
# inline_main_printHex_40_printHex_if_true_0_1
# inline_main_printHex_40_t2 <- inline_main_printHex_40_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_t2 <- inline_main_printHex_40_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_40_t3 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 0187e Instruction { source: "inline_main_printHex_40_t3 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x10=16)], resolved: None }
04 a1 10 
# inline_main_printHex_40_b <- inline_main_printHex_40_t2 Divide inline_main_printHex_40_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))"] }
# 01881 Instruction { source: "inline_main_printHex_40_b <- inline_main_printHex_40_t2 Divide inline_main_printHex_40_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\"] }", opcode: Divide8, args: [Register(0x90), Register(0xa1), Register(0xa1)], resolved: None }
17 90 a1 a1 
# inline_main_printHex_40_t5 <- inline_main_printHex_40_b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_t5 <- inline_main_printHex_40_b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_printHex_40_inline_printHex_printHexDigit_34_a <- inline_main_printHex_40_t5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })"] }
# 01885 Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_a <- inline_main_printHex_40_t5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa2)], resolved: None }
0b a1 a2 
# inline_main_printHex_40_inline_printHex_printHexDigit_34_t0 <- inline_main_printHex_40_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_t0 <- inline_main_printHex_40_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_40_inline_printHex_printHexDigit_34_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 01888 Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x0a=10)], resolved: None }
04 a3 0a 
# if inline_main_printHex_40_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_40_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 0188b Instruction { source: "if inline_main_printHex_40_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_40_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0xa3), Register(0xa2)], resolved: None }
15 a3 a2 
# 0188e Instruction { source: "if inline_main_printHex_40_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_40_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2)], resolved: None }
71 9f 18 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_40_inline_printHex_printHexDigit_34_t0 < inline_main_printHex_40_inline_printHex_printHexDigit_34_t1 then 'inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1' else 'inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_true_0_1
# inline_main_printHex_40_inline_printHex_printHexDigit_34_t4 <- inline_main_printHex_40_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_t4 <- inline_main_printHex_40_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_40_inline_printHex_printHexDigit_34_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 01892 Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x30=48)], resolved: None }
04 a3 30 
# inline_main_printHex_40_inline_printHex_printHexDigit_34_t3 <- inline_main_printHex_40_inline_printHex_printHexDigit_34_t4 Add inline_main_printHex_40_inline_printHex_printHexDigit_34_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 01895 Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_t3 <- inline_main_printHex_40_inline_printHex_printHexDigit_34_t4 Add inline_main_printHex_40_inline_printHex_printHexDigit_34_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0xa3), Register(0xa2)], resolved: None }
14 a2 a3 a2 
# inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c <- inline_main_printHex_40_inline_printHex_printHexDigit_34_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c <- inline_main_printHex_40_inline_printHex_printHexDigit_34_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# None <= call io_write0(inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 01899 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xa2)], resolved: None }
68 a2 
# goto inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc)], resolved: None }
# :inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_32_function_end_putc
# goto inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 0189b Instruction { source: "goto inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_end_0)], resolved: None }
70 b4 18 00 
# :inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_else_0_2
# inline_main_printHex_40_inline_printHex_printHexDigit_34_t6 <- inline_main_printHex_40_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_t6 <- inline_main_printHex_40_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_40_inline_printHex_printHexDigit_34_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 0189f Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x0a=10)], resolved: None }
04 a3 0a 
# inline_main_printHex_40_inline_printHex_printHexDigit_34_a <- inline_main_printHex_40_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_40_inline_printHex_printHexDigit_34_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 018a2 Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_a <- inline_main_printHex_40_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_40_inline_printHex_printHexDigit_34_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0xa3), Register(0x00)], resolved: None }
0b a3 00 
# 018a5 Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_a <- inline_main_printHex_40_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_40_inline_printHex_printHexDigit_34_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 018a7 Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_a <- inline_main_printHex_40_inline_printHex_printHexDigit_34_t6 Subtract inline_main_printHex_40_inline_printHex_printHexDigit_34_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0x00), Register(0xa2)], resolved: None }
14 a2 00 a2 
# inline_main_printHex_40_inline_printHex_printHexDigit_34_t8 <- inline_main_printHex_40_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_t8 <- inline_main_printHex_40_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_40_inline_printHex_printHexDigit_34_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 018ab Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x41=65)], resolved: None }
04 a3 41 
# inline_main_printHex_40_inline_printHex_printHexDigit_34_a <- inline_main_printHex_40_inline_printHex_printHexDigit_34_t8 Add inline_main_printHex_40_inline_printHex_printHexDigit_34_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 018ae Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_a <- inline_main_printHex_40_inline_printHex_printHexDigit_34_t8 Add inline_main_printHex_40_inline_printHex_printHexDigit_34_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0xa3), Register(0xa2)], resolved: None }
14 a2 a3 a2 
# inline_main_printHex_40_inline_printHex_printHexDigit_34_t11 <- inline_main_printHex_40_inline_printHex_printHexDigit_34_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_t11 <- inline_main_printHex_40_inline_printHex_printHexDigit_34_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c <- inline_main_printHex_40_inline_printHex_printHexDigit_34_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c <- inline_main_printHex_40_inline_printHex_printHexDigit_34_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# None <= call io_write0(inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 018b2 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xa2)], resolved: None }
68 a2 
# goto inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc)], resolved: None }
# :inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_40_inline_printHex_printHexDigit_34_inline_printHexDigit_putc_33_function_end_putc
# :inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_40_inline_printHex_printHexDigit_34_printHexDigit_if_end_0
# goto inline_main_printHex_40_inline_printHex_printHexDigit_34_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_40_inline_printHex_printHexDigit_34_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_40_inline_printHex_printHexDigit_34_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_40_inline_printHex_printHexDigit_34_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_40_inline_printHex_printHexDigit_34_function_end_printHexDigit
# inline_main_printHex_40_t6 <- inline_main_printHex_40_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_t6 <- inline_main_printHex_40_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_40_t8 <- inline_main_printHex_40_b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_t8 <- inline_main_printHex_40_b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_printHex_40_t9 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 018b4 Instruction { source: "inline_main_printHex_40_t9 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x10=16)], resolved: None }
04 a2 10 
# inline_main_printHex_40_t7 <- inline_main_printHex_40_t8 Multiply inline_main_printHex_40_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))"] }
# 018b7 Instruction { source: "inline_main_printHex_40_t7 <- inline_main_printHex_40_t8 Multiply inline_main_printHex_40_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\"] }", opcode: Mul8_8, args: [Register(0xa1), Register(0xa2), Register(0xa1)], resolved: None }
10 a1 a2 a1 
# inline_main_printHex_40_a <- inline_main_printHex_40_t6 Subtract inline_main_printHex_40_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))"] }
# 018bb Instruction { source: "inline_main_printHex_40_a <- inline_main_printHex_40_t6 Subtract inline_main_printHex_40_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Copy8, args: [Register(0xa1), Register(0x00)], resolved: None }
0b a1 00 
# 018be Instruction { source: "inline_main_printHex_40_a <- inline_main_printHex_40_t6 Subtract inline_main_printHex_40_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 018c0 Instruction { source: "inline_main_printHex_40_a <- inline_main_printHex_40_t6 Subtract inline_main_printHex_40_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0x00), Register(0x90)], resolved: None }
14 90 00 90 
# goto inline_main_printHex_40_printHex_if_end_0
# 	SourceContext { contexts: [] }
# 018c4 Instruction { source: "goto inline_main_printHex_40_printHex_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_40_printHex_if_end_0)], resolved: None }
70 cd 18 00 
# :inline_main_printHex_40_printHex_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_40_printHex_if_else_0_2
# inline_main_printHex_40_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Number(U8, 48)", "Number(U8, 48)"] }
# 018c8 Instruction { source: "inline_main_printHex_40_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x30=48)], resolved: None }
04 a1 30 
# inline_main_printHex_40_inline_printHex_putc_31_c <- inline_main_printHex_40_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_putc_31_c <- inline_main_printHex_40_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_printHex_40_inline_printHex_putc_31_t1 <- inline_main_printHex_40_inline_printHex_putc_31_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_putc_31_t1 <- inline_main_printHex_40_inline_printHex_putc_31_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# None <= call io_write0(inline_main_printHex_40_inline_printHex_putc_31_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 018cb Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xa1)], resolved: None }
68 a1 
# goto inline_main_printHex_40_inline_printHex_putc_31_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_40_inline_printHex_putc_31_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_40_inline_printHex_putc_31_function_end_putc)], resolved: None }
# :inline_main_printHex_40_inline_printHex_putc_31_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_40_inline_printHex_putc_31_function_end_putc
# :inline_main_printHex_40_printHex_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_40_printHex_if_end_0
# inline_main_printHex_40_t13 <- inline_main_printHex_40_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_t13 <- inline_main_printHex_40_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_40_inline_printHex_printHexDigit_35_a <- inline_main_printHex_40_t13 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_a <- inline_main_printHex_40_t13 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_40_inline_printHex_printHexDigit_35_t0 <- inline_main_printHex_40_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_t0 <- inline_main_printHex_40_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_40_inline_printHex_printHexDigit_35_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 018cd Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0a=10)], resolved: None }
04 a1 0a 
# if inline_main_printHex_40_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_40_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 018d0 Instruction { source: "if inline_main_printHex_40_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_40_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0xa1), Register(0x90)], resolved: None }
15 a1 90 
# 018d3 Instruction { source: "if inline_main_printHex_40_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_40_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2)], resolved: None }
71 e4 18 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_40_inline_printHex_printHexDigit_35_t0 < inline_main_printHex_40_inline_printHex_printHexDigit_35_t1 then 'inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1' else 'inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_true_0_1
# inline_main_printHex_40_inline_printHex_printHexDigit_35_t4 <- inline_main_printHex_40_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_t4 <- inline_main_printHex_40_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_40_inline_printHex_printHexDigit_35_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 018d7 Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x30=48)], resolved: None }
04 a1 30 
# inline_main_printHex_40_inline_printHex_printHexDigit_35_t3 <- inline_main_printHex_40_inline_printHex_printHexDigit_35_t4 Add inline_main_printHex_40_inline_printHex_printHexDigit_35_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 018da Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_t3 <- inline_main_printHex_40_inline_printHex_printHexDigit_35_t4 Add inline_main_printHex_40_inline_printHex_printHexDigit_35_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0xa1), Register(0x90)], resolved: None }
14 90 a1 90 
# inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c <- inline_main_printHex_40_inline_printHex_printHexDigit_35_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c <- inline_main_printHex_40_inline_printHex_printHexDigit_35_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1 <- inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# None <= call io_write0(inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 018de Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# goto inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc)], resolved: None }
# :inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_32_function_end_putc
# goto inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 018e0 Instruction { source: "goto inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_end_0)], resolved: None }
70 f9 18 00 
# :inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_else_0_2
# inline_main_printHex_40_inline_printHex_printHexDigit_35_t6 <- inline_main_printHex_40_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_t6 <- inline_main_printHex_40_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_40_inline_printHex_printHexDigit_35_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 018e4 Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0a=10)], resolved: None }
04 a1 0a 
# inline_main_printHex_40_inline_printHex_printHexDigit_35_a <- inline_main_printHex_40_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_40_inline_printHex_printHexDigit_35_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 018e7 Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_a <- inline_main_printHex_40_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_40_inline_printHex_printHexDigit_35_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0xa1), Register(0x00)], resolved: None }
0b a1 00 
# 018ea Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_a <- inline_main_printHex_40_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_40_inline_printHex_printHexDigit_35_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 018ec Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_a <- inline_main_printHex_40_inline_printHex_printHexDigit_35_t6 Subtract inline_main_printHex_40_inline_printHex_printHexDigit_35_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0x00), Register(0x90)], resolved: None }
14 90 00 90 
# inline_main_printHex_40_inline_printHex_printHexDigit_35_t8 <- inline_main_printHex_40_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_t8 <- inline_main_printHex_40_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_40_inline_printHex_printHexDigit_35_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 018f0 Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x41=65)], resolved: None }
04 a1 41 
# inline_main_printHex_40_inline_printHex_printHexDigit_35_a <- inline_main_printHex_40_inline_printHex_printHexDigit_35_t8 Add inline_main_printHex_40_inline_printHex_printHexDigit_35_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 018f3 Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_a <- inline_main_printHex_40_inline_printHex_printHexDigit_35_t8 Add inline_main_printHex_40_inline_printHex_printHexDigit_35_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0xa1), Register(0x90)], resolved: None }
14 90 a1 90 
# inline_main_printHex_40_inline_printHex_printHexDigit_35_t11 <- inline_main_printHex_40_inline_printHex_printHexDigit_35_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_t11 <- inline_main_printHex_40_inline_printHex_printHexDigit_35_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c <- inline_main_printHex_40_inline_printHex_printHexDigit_35_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c <- inline_main_printHex_40_inline_printHex_printHexDigit_35_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1 <- inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# None <= call io_write0(inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 018f7 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# goto inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc)], resolved: None }
# :inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_40_inline_printHex_printHexDigit_35_inline_printHexDigit_putc_33_function_end_putc
# :inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_40_inline_printHex_printHexDigit_35_printHexDigit_if_end_0
# goto inline_main_printHex_40_inline_printHex_printHexDigit_35_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_40_inline_printHex_printHexDigit_35_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_40_inline_printHex_printHexDigit_35_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_40_inline_printHex_printHexDigit_35_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_40_inline_printHex_printHexDigit_35_function_end_printHexDigit
# goto inline_main_printHex_40_function_end_printHex
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_40_function_end_printHex\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_40_function_end_printHex)], resolved: None }
# :inline_main_printHex_40_function_end_printHex
# 	SourceContext { contexts: [] }
# inline_main_printHex_40_function_end_printHex
# t54 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 018f9 Instruction { source: "t54 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x0a=10)], resolved: None }
04 90 0a 
# ttyout <- t54
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 018fc Instruction { source: "ttyout <- t54\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 018fe Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 cc 1a 00 
# :main_if_else_4_13
# 	SourceContext { contexts: [] }
# main_if_else_4_13
# t55 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t55 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# t56 <- 0n115/0x73u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Number(U8, 115)", "Number(U8, 115)"] }
# 01902 Instruction { source: "t56 <- 0n115/0x73u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Number(U8, 115)\", \"Number(U8, 115)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x73=115)], resolved: None }
04 a1 73 
# if t55 == t56 then 'main_if_true_5_14' else 'main_if_else_5_15'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }"] }
# 01905 Instruction { source: "if t55 == t56 then 'main_if_true_5_14' else 'main_if_else_5_15'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: Cmp8, args: [Register(0x90), Register(0xa1)], resolved: None }
15 90 a1 
# 01908 Instruction { source: "if t55 == t56 then 'main_if_true_5_14' else 'main_if_else_5_15'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JzImm, args: [Label24(main_if_true_5_14)], resolved: None }
72 10 19 00 
# 0190c Instruction { source: "if t55 == t56 then 'main_if_true_5_14' else 'main_if_else_5_15'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_5_15)], resolved: None }
70 4b 1a 00 
# :main_if_true_5_14
# 	SourceContext { contexts: [] }
# main_if_true_5_14
# i <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }", "Number(USIZE, 1)"] }
# 01910 Instruction { source: "i <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x94), Constant32(0x00000001=1)], resolved: None }
20 94 01 00 00 00 
# addr <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 01916 Instruction { source: "addr <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x8c), Constant32(0x00000000=0)], resolved: None }
20 8c 00 00 00 00 
# :main_while_predicate_16
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }"] }
# main_while_predicate_16
# t59 <- __frame_pointer U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Index(\"buf\", Ident(\"i\"))", "Index(\"buf\", Ident(\"i\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 0191c Instruction { source: "t59 <- __frame_pointer U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xac)], resolved: None }
21 0c ac 
# t60 <- i U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Index(\"buf\", Ident(\"i\"))", "Index(\"buf\", Ident(\"i\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t60 <- i U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# t58 <- t59 Add t60
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Index(\"buf\", Ident(\"i\"))", "Index(\"buf\", Ident(\"i\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))"] }
# 0191f Instruction { source: "t58 <- t59 Add t60\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01920 Instruction { source: "t58 <- t59 Add t60\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xac), Register(0x94), Register(0x98)], resolved: None }
30 ac 94 98 
# 01924 Instruction { source: "t58 <- t59 Add t60\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t57 <- mem[t58] U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Index(\"buf\", Ident(\"i\"))", "Index(\"buf\", Ident(\"i\"))"] }
# 01925 Instruction { source: "t57 <- mem[t58] U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\"] }", opcode: Load8, args: [Register(0x98), Register(0xa1)], resolved: None }
05 98 a1 
# t61 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01928 Instruction { source: "t61 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x00=0)], resolved: None }
04 a2 00 
# if t57 != t61 then 'main_while_body_17' else 'main_while_end_18'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }"] }
# 0192b Instruction { source: "if t57 != t61 then 'main_while_body_17' else 'main_while_end_18'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0xa1), Register(0xa2)], resolved: None }
15 a1 a2 
# 0192e Instruction { source: "if t57 != t61 then 'main_while_body_17' else 'main_while_end_18'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_while_end_18)], resolved: None }
72 47 1a 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t57 != t61 then 'main_while_body_17' else 'main_while_end_18'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_while_body_17)], resolved: None }
# :main_while_body_17
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }"] }
# main_while_body_17
# t62 <- addr[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }", "Index(\"addr\", Number(USIZE, 2))", "Index(\"addr\", Number(USIZE, 2))"] }
# 01932 Instruction { source: "t62 <- addr[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }\", \"Index(\\\"addr\\\", Number(USIZE, 2))\", \"Index(\\\"addr\\\", Number(USIZE, 2))\"] }", opcode: Copy8, args: [Register(0x8e), Register(0xb4)], resolved: None }
0b 8e b4 
# addr[0x03..0x04] <- t62 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }"] }
# 01935 Instruction { source: "addr[0x03..0x04] <- t62 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }\"] }", opcode: Copy8, args: [Register(0xb4), Register(0x8f)], resolved: None }
0b b4 8f 
# t63 <- addr[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }", "Index(\"addr\", Number(USIZE, 1))", "Index(\"addr\", Number(USIZE, 1))"] }
# 01938 Instruction { source: "t63 <- addr[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }\", \"Index(\\\"addr\\\", Number(USIZE, 1))\", \"Index(\\\"addr\\\", Number(USIZE, 1))\"] }", opcode: Copy8, args: [Register(0x8d), Register(0xb4)], resolved: None }
0b 8d b4 
# addr[0x02..0x03] <- t63 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }"] }
# 0193b Instruction { source: "addr[0x02..0x03] <- t63 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }\"] }", opcode: Copy8, args: [Register(0xb4), Register(0x8e)], resolved: None }
0b b4 8e 
# t64 <- addr[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }", "Index(\"addr\", Number(USIZE, 0))", "Index(\"addr\", Number(USIZE, 0))"] }
# 0193e Instruction { source: "t64 <- addr[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }\", \"Index(\\\"addr\\\", Number(USIZE, 0))\", \"Index(\\\"addr\\\", Number(USIZE, 0))\"] }", opcode: Copy8, args: [Register(0x8c), Register(0xb4)], resolved: None }
0b 8c b4 
# addr[0x01..0x02] <- t64 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }"] }
# 01941 Instruction { source: "addr[0x01..0x02] <- t64 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }\"] }", opcode: Copy8, args: [Register(0xb4), Register(0x8d)], resolved: None }
0b b4 8d 
# t68 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "AddressOf(Index(\"buf\", Ident(\"i\")))", "AddressOf(Index(\"buf\", Ident(\"i\")))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 01944 Instruction { source: "t68 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xac)], resolved: None }
21 0c ac 
# t69 <- i U32
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "AddressOf(Index(\"buf\", Ident(\"i\")))", "AddressOf(Index(\"buf\", Ident(\"i\")))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t69 <- i U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# t67 <- t68 Add t69
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "AddressOf(Index(\"buf\", Ident(\"i\")))", "AddressOf(Index(\"buf\", Ident(\"i\")))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))"] }
# 01947 Instruction { source: "t67 <- t68 Add t69\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01948 Instruction { source: "t67 <- t68 Add t69\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xac), Register(0x94), Register(0x98)], resolved: None }
30 ac 94 98 
# 0194c Instruction { source: "t67 <- t68 Add t69\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t66 <- t67 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "AddressOf(Index(\"buf\", Ident(\"i\")))", "AddressOf(Index(\"buf\", Ident(\"i\")))"] }
# optimized away noop copy Instruction { source: "t66 <- t67 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_main_parseHex_20_c <- t66 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_c <- t66 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_main_parseHex_20_t0 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Number(U8, 16)", "Number(U8, 16)"] }
# 0194d Instruction { source: "inline_main_parseHex_20_t0 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0xa4), Constant8(0x10=16)], resolved: None }
04 a4 10 
# inline_main_parseHex_20_t3 <- inline_main_parseHex_20_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_t3 <- inline_main_parseHex_20_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_main_parseHex_20_t2 <- mem[inline_main_parseHex_20_t3] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))"] }
# 01950 Instruction { source: "inline_main_parseHex_20_t2 <- mem[inline_main_parseHex_20_t3] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\"] }", opcode: Load8, args: [Register(0x98), Register(0xa2)], resolved: None }
05 98 a2 
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_ch <- inline_main_parseHex_20_t2 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_ch <- inline_main_parseHex_20_t2 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t0 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t0 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t1 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 01953 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t1 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x61=97)], resolved: None }
04 a3 61 
# if inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t0 >= inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t1 then 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }"] }
# 01956 Instruction { source: "if inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t0 >= inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t1 then 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: Cmp8, args: [Register(0xa3), Register(0xa2)], resolved: None }
15 a3 a2 
# 01959 Instruction { source: "if inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t0 >= inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t1 then 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_1)], resolved: None }
71 61 19 00 
# 0195d Instruction { source: "if inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t0 >= inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t1 then 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_2)], resolved: None }
70 7c 19 00 
# :inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }"] }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_1
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t4 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t4 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t5 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Number(U8, 97)", "Number(U8, 97)"] }
# 01961 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t5 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x61=97)], resolved: None }
04 a3 61 
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t3 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t4 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t5
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))"] }
# 01964 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t3 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t4 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Copy8, args: [Register(0xa3), Register(0x00)], resolved: None }
0b a3 00 
# 01967 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t3 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t4 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 01969 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t3 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t4 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0x00), Register(0xa2)], resolved: None }
14 a2 00 a2 
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 0196d Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x0a=10)], resolved: None }
04 a3 0a 
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t2 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t3 Add inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t6
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))"] }
# 01970 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t2 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t3 Add inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t6\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0xa3), Register(0xa2)], resolved: None }
14 a2 a3 a2 
# inline_main_parseHex_20_t1 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t2 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_t1 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t2 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# 01974 Instruction { source: "goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble)], resolved: None }
70 b5 19 00 
# goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# 01978 Instruction { source: "goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_0)], resolved: None }
70 7c 19 00 
# :inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_2
# :inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_0
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t7 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t7 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t8 <- 0n57/0x39u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Number(U8, 57)", "Number(U8, 57)"] }
# 0197c Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t8 <- 0n57/0x39u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Number(U8, 57)\", \"Number(U8, 57)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x39=57)], resolved: None }
04 a3 39 
# if inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t7 <= inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t8 then 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }"] }
# 0197f Instruction { source: "if inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t7 <= inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t8 then 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: Cmp8, args: [Register(0xa2), Register(0xa3)], resolved: None }
15 a2 a3 
# 01982 Instruction { source: "if inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t7 <= inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t8 then 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_4)], resolved: None }
71 8a 19 00 
# 01986 Instruction { source: "if inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t7 <= inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t8 then 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_5)], resolved: None }
70 9e 19 00 
# :inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }"] }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_true_0_4
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t10 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t10 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 0198a Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x30=48)], resolved: None }
04 a3 30 
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t9 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t10 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t11
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))"] }
# 0198d Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t9 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t10 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Copy8, args: [Register(0xa3), Register(0x00)], resolved: None }
0b a3 00 
# 01990 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t9 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t10 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 01992 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t9 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t10 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0x00), Register(0xa2)], resolved: None }
14 a2 00 a2 
# inline_main_parseHex_20_t1 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t9 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_t1 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t9 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# 01996 Instruction { source: "goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble)], resolved: None }
70 b5 19 00 
# goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# 0199a Instruction { source: "goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_3)], resolved: None }
70 9e 19 00 
# :inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_else_0_5
# :inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_parseHexNibble_if_end_3
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t14 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t14 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t15 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 0199e Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t15 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x41=65)], resolved: None }
04 a3 41 
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t13 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t14 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t15
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))"] }
# 019a1 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t13 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t14 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Copy8, args: [Register(0xa3), Register(0x00)], resolved: None }
0b a3 00 
# 019a4 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t13 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t14 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 019a6 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t13 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t14 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0x00), Register(0xa2)], resolved: None }
14 a2 00 a2 
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t16 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 019aa Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t16 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x0a=10)], resolved: None }
04 a3 0a 
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t12 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t13 Add inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t16
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))"] }
# 019ad Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t12 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t13 Add inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t16\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa2), Register(0xa3), Register(0xa2)], resolved: None }
14 a2 a3 a2 
# inline_main_parseHex_20_t1 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t12 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_t1 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_t12 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa2)], resolved: None }
# goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# 019b1 Instruction { source: "goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble)], resolved: None }
70 b5 19 00 
# :inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble
# 	SourceContext { contexts: [] }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_17_function_end_parseHexNibble
# inline_main_parseHex_20_h <- inline_main_parseHex_20_t0 Multiply inline_main_parseHex_20_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))"] }
# 019b5 Instruction { source: "inline_main_parseHex_20_h <- inline_main_parseHex_20_t0 Multiply inline_main_parseHex_20_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\"] }", opcode: Mul8_8, args: [Register(0xa4), Register(0xa2), Register(0xa2)], resolved: None }
10 a4 a2 a2 
# inline_main_parseHex_20_t5 <- inline_main_parseHex_20_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_t5 <- inline_main_parseHex_20_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_main_parseHex_20_t6 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 019b9 Instruction { source: "inline_main_parseHex_20_t6 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x00000001=1)], resolved: None }
20 a8 01 00 00 00 
# inline_main_parseHex_20_t4 <- inline_main_parseHex_20_t5 Add inline_main_parseHex_20_t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))"] }
# 019bf Instruction { source: "inline_main_parseHex_20_t4 <- inline_main_parseHex_20_t5 Add inline_main_parseHex_20_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 019c0 Instruction { source: "inline_main_parseHex_20_t4 <- inline_main_parseHex_20_t5 Add inline_main_parseHex_20_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x98), Register(0xa8), Register(0x98)], resolved: None }
30 98 a8 98 
# 019c4 Instruction { source: "inline_main_parseHex_20_t4 <- inline_main_parseHex_20_t5 Add inline_main_parseHex_20_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_parseHex_20_c <- inline_main_parseHex_20_t4 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_c <- inline_main_parseHex_20_t4 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_main_parseHex_20_t7 <- inline_main_parseHex_20_h U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Ident(\"h\")", "Ident(\"h\")"] }
# 019c5 Instruction { source: "inline_main_parseHex_20_t7 <- inline_main_parseHex_20_h U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Ident(\\\"h\\\")\", \"Ident(\\\"h\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa3)], resolved: None }
0b a2 a3 
# inline_main_parseHex_20_t10 <- inline_main_parseHex_20_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_t10 <- inline_main_parseHex_20_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_main_parseHex_20_t9 <- mem[inline_main_parseHex_20_t10] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))"] }
# 019c8 Instruction { source: "inline_main_parseHex_20_t9 <- mem[inline_main_parseHex_20_t10] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\"] }", opcode: Load8, args: [Register(0x98), Register(0xa1)], resolved: None }
05 98 a1 
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_ch <- inline_main_parseHex_20_t9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_ch <- inline_main_parseHex_20_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t0 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t0 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t1 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 019cb Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t1 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x61=97)], resolved: None }
04 a2 61 
# if inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t0 >= inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t1 then 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }"] }
# 019ce Instruction { source: "if inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t0 >= inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t1 then 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: Cmp8, args: [Register(0xa2), Register(0xa1)], resolved: None }
15 a2 a1 
# 019d1 Instruction { source: "if inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t0 >= inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t1 then 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_1)], resolved: None }
71 d9 19 00 
# 019d5 Instruction { source: "if inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t0 >= inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t1 then 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_2)], resolved: None }
70 f4 19 00 
# :inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }"] }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_1
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t4 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t4 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t5 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Number(U8, 97)", "Number(U8, 97)"] }
# 019d9 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t5 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x61=97)], resolved: None }
04 a2 61 
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t3 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t4 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t5
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))"] }
# 019dc Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t3 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t4 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Copy8, args: [Register(0xa2), Register(0x00)], resolved: None }
0b a2 00 
# 019df Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t3 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t4 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 019e1 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t3 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t4 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa1), Register(0x00), Register(0xa1)], resolved: None }
14 a1 00 a1 
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 019e5 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x0a=10)], resolved: None }
04 a2 0a 
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t2 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t3 Add inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t6
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))"] }
# 019e8 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t2 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t3 Add inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t6\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa1), Register(0xa2), Register(0xa1)], resolved: None }
14 a1 a2 a1 
# inline_main_parseHex_20_t8 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t2 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_t8 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t2 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# 019ec Instruction { source: "goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble)], resolved: None }
70 2d 1a 00 
# goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# 019f0 Instruction { source: "goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_0)], resolved: None }
70 f4 19 00 
# :inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_2
# :inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_0
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t7 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t7 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t8 <- 0n57/0x39u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Number(U8, 57)", "Number(U8, 57)"] }
# 019f4 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t8 <- 0n57/0x39u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Number(U8, 57)\", \"Number(U8, 57)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x39=57)], resolved: None }
04 a2 39 
# if inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t7 <= inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t8 then 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }"] }
# 019f7 Instruction { source: "if inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t7 <= inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t8 then 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: Cmp8, args: [Register(0xa1), Register(0xa2)], resolved: None }
15 a1 a2 
# 019fa Instruction { source: "if inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t7 <= inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t8 then 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_4)], resolved: None }
71 02 1a 00 
# 019fe Instruction { source: "if inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t7 <= inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t8 then 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_5)], resolved: None }
70 16 1a 00 
# :inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }"] }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_true_0_4
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t10 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t10 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 01a02 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x30=48)], resolved: None }
04 a2 30 
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t9 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t10 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t11
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))"] }
# 01a05 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t9 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t10 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Copy8, args: [Register(0xa2), Register(0x00)], resolved: None }
0b a2 00 
# 01a08 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t9 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t10 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 01a0a Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t9 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t10 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa1), Register(0x00), Register(0xa1)], resolved: None }
14 a1 00 a1 
# inline_main_parseHex_20_t8 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t9 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_t8 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t9 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# 01a0e Instruction { source: "goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble)], resolved: None }
70 2d 1a 00 
# goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# 01a12 Instruction { source: "goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_3)], resolved: None }
70 16 1a 00 
# :inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_else_0_5
# :inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_parseHexNibble_if_end_3
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t14 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t14 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t15 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 01a16 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t15 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x41=65)], resolved: None }
04 a2 41 
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t13 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t14 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t15
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))"] }
# 01a19 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t13 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t14 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Copy8, args: [Register(0xa2), Register(0x00)], resolved: None }
0b a2 00 
# 01a1c Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t13 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t14 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 01a1e Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t13 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t14 Subtract inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa1), Register(0x00), Register(0xa1)], resolved: None }
14 a1 00 a1 
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t16 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 01a22 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t16 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x0a=10)], resolved: None }
04 a2 0a 
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t12 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t13 Add inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t16
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))"] }
# 01a25 Instruction { source: "inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t12 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t13 Add inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t16\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa1), Register(0xa2), Register(0xa1)], resolved: None }
14 a1 a2 a1 
# inline_main_parseHex_20_t8 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t12 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_20_t8 <- inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_t12 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# 01a29 Instruction { source: "goto inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble)], resolved: None }
70 2d 1a 00 
# :inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble
# 	SourceContext { contexts: [] }
# inline_main_parseHex_20_inline_parseHex_parseHexNibble_18_function_end_parseHexNibble
# inline_main_parseHex_20_h <- inline_main_parseHex_20_t7 Add inline_main_parseHex_20_t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))"] }
# 01a2d Instruction { source: "inline_main_parseHex_20_h <- inline_main_parseHex_20_t7 Add inline_main_parseHex_20_t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa3), Register(0xa1), Register(0xa2)], resolved: None }
14 a3 a1 a2 
# inline_main_parseHex_20_t11 <- inline_main_parseHex_20_h U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }", "Ident(\"h\")", "Ident(\"h\")"] }
# 01a31 Instruction { source: "inline_main_parseHex_20_t11 <- inline_main_parseHex_20_h U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\", \"Ident(\\\"h\\\")\", \"Ident(\\\"h\\\")\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xa1)], resolved: None }
0b a2 a1 
# t65 <- inline_main_parseHex_20_t11 U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }"] }
# optimized away noop copy Instruction { source: "t65 <- inline_main_parseHex_20_t11 U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# goto inline_main_parseHex_20_function_end_parseHex
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_parseHex_20_function_end_parseHex\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_20_function_end_parseHex)], resolved: None }
# :inline_main_parseHex_20_function_end_parseHex
# 	SourceContext { contexts: [] }
# inline_main_parseHex_20_function_end_parseHex
# addr[0x00..0x01] <- t65 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }"] }
# 01a34 Instruction { source: "addr[0x00..0x01] <- t65 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\"] }", opcode: Copy8, args: [Register(0xa1), Register(0x8c)], resolved: None }
0b a1 8c 
# t70 <- i U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }", "Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t70 <- i U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# t71 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }", "Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2))", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 01a37 Instruction { source: "t71 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x98), Constant32(0x00000002=2)], resolved: None }
20 98 02 00 00 00 
# i <- t70 Add t71
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }", "Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2))"] }
# 01a3d Instruction { source: "i <- t70 Add t71\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01a3e Instruction { source: "i <- t70 Add t71\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\"] }", opcode: AddCarry32_1, args: [Register(0x94), Register(0x98), Register(0x94)], resolved: None }
30 94 98 94 
# 01a42 Instruction { source: "i <- t70 Add t71\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto main_while_predicate_16
# 	SourceContext { contexts: [] }
# 01a43 Instruction { source: "goto main_while_predicate_16\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_while_predicate_16)], resolved: None }
70 1c 19 00 
# :main_while_end_18
# 	SourceContext { contexts: [] }
# main_while_end_18
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 01a47 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 cc 1a 00 
# :main_if_else_5_15
# 	SourceContext { contexts: [] }
# main_if_else_5_15
# t72 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t72 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# t73 <- 0n113/0x71u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Number(U8, 113)", "Number(U8, 113)"] }
# 01a4b Instruction { source: "t73 <- 0n113/0x71u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Number(U8, 113)\", \"Number(U8, 113)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x71=113)], resolved: None }
04 a1 71 
# if t72 == t73 then 'main_if_true_6_19' else 'main_if_else_6_20'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }"] }
# 01a4e Instruction { source: "if t72 == t73 then 'main_if_true_6_19' else 'main_if_else_6_20'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: Cmp8, args: [Register(0x90), Register(0xa1)], resolved: None }
15 90 a1 
# 01a51 Instruction { source: "if t72 == t73 then 'main_if_true_6_19' else 'main_if_else_6_20'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JzImm, args: [Label24(main_if_true_6_19)], resolved: None }
72 59 1a 00 
# 01a55 Instruction { source: "if t72 == t73 then 'main_if_true_6_19' else 'main_if_else_6_20'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_6_20)], resolved: None }
70 77 1a 00 
# :main_if_true_6_19
# 	SourceContext { contexts: [] }
# main_if_true_6_19
# t74 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01a59 Instruction { source: "t74 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xb4), Constant8(0x00=0)], resolved: None }
04 b4 00 
# t75 <- 0n20/0x00000014u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 01a5c Instruction { source: "t75 <- 0n20/0x00000014u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: LoadImm32, args: [Register(0x94), Constant32(0x00000014=20)], resolved: None }
20 94 14 00 00 00 
# __frame_pointer <- __frame_pointer Add t75
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 01a62 Instruction { source: "__frame_pointer <- __frame_pointer Add t75\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01a63 Instruction { source: "__frame_pointer <- __frame_pointer Add t75\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x94), Register(0x0c)], resolved: None }
30 0c 94 0c 
# 01a67 Instruction { source: "__frame_pointer <- __frame_pointer Add t75\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t74)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 01a68 Instruction { source: "return Some(t74)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xb4), Register(0x00)], resolved: None }
0b b4 00 
# 01a6b Instruction { source: "Dealloc 20 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000014=20)], resolved: None }
32 0c 14 00 00 00 
# 01a71 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 01a73 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 cc 1a 00 
# :main_if_else_6_20
# 	SourceContext { contexts: [] }
# main_if_else_6_20
# t76 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t76 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# t77 <- 0n105/0x69u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }", "Number(U8, 105)", "Number(U8, 105)"] }
# 01a77 Instruction { source: "t77 <- 0n105/0x69u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\", \"Number(U8, 105)\", \"Number(U8, 105)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x69=105)], resolved: None }
04 a1 69 
# if t76 == t77 then 'main_if_true_7_21' else 'main_if_else_7_22'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }"] }
# 01a7a Instruction { source: "if t76 == t77 then 'main_if_true_7_21' else 'main_if_else_7_22'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\"] }", opcode: Cmp8, args: [Register(0x90), Register(0xa1)], resolved: None }
15 90 a1 
# 01a7d Instruction { source: "if t76 == t77 then 'main_if_true_7_21' else 'main_if_else_7_22'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\"] }", opcode: JzImm, args: [Label24(main_if_true_7_21)], resolved: None }
72 85 1a 00 
# 01a81 Instruction { source: "if t76 == t77 then 'main_if_true_7_21' else 'main_if_else_7_22'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_7_22)], resolved: None }
70 b1 1a 00 
# :main_if_true_7_21
# 	SourceContext { contexts: [] }
# main_if_true_7_21
# t78 <- 0n66/0x42u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 66) }", "Number(U8, 66)", "Number(U8, 66)"] }
# 01a85 Instruction { source: "t78 <- 0n66/0x42u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 66) }\", \"Number(U8, 66)\", \"Number(U8, 66)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x42=66)], resolved: None }
04 90 42 
# ttyout <- t78
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 66) }"] }
# 01a88 Instruction { source: "ttyout <- t78\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 66) }\"] }", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# t79 <- 0n111/0x6fu8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 111) }", "Number(U8, 111)", "Number(U8, 111)"] }
# 01a8a Instruction { source: "t79 <- 0n111/0x6fu8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 111) }\", \"Number(U8, 111)\", \"Number(U8, 111)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x6f=111)], resolved: None }
04 90 6f 
# ttyout <- t79
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 111) }"] }
# 01a8d Instruction { source: "ttyout <- t79\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 111) }\"] }", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# t80 <- 0n111/0x6fu8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 111) }", "Number(U8, 111)", "Number(U8, 111)"] }
# 01a8f Instruction { source: "t80 <- 0n111/0x6fu8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 111) }\", \"Number(U8, 111)\", \"Number(U8, 111)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x6f=111)], resolved: None }
04 90 6f 
# ttyout <- t80
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 111) }"] }
# 01a92 Instruction { source: "ttyout <- t80\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 111) }\"] }", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# t81 <- 0n116/0x74u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 116) }", "Number(U8, 116)", "Number(U8, 116)"] }
# 01a94 Instruction { source: "t81 <- 0n116/0x74u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 116) }\", \"Number(U8, 116)\", \"Number(U8, 116)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x74=116)], resolved: None }
04 90 74 
# ttyout <- t81
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 116) }"] }
# 01a97 Instruction { source: "ttyout <- t81\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 116) }\"] }", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# t82 <- 0n114/0x72u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 114) }", "Number(U8, 114)", "Number(U8, 114)"] }
# 01a99 Instruction { source: "t82 <- 0n114/0x72u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 114) }\", \"Number(U8, 114)\", \"Number(U8, 114)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x72=114)], resolved: None }
04 90 72 
# ttyout <- t82
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 114) }"] }
# 01a9c Instruction { source: "ttyout <- t82\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 114) }\"] }", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# t83 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 01a9e Instruction { source: "t83 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x61=97)], resolved: None }
04 90 61 
# ttyout <- t83
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 97) }"] }
# 01aa1 Instruction { source: "ttyout <- t83\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 97) }\"] }", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# t84 <- 0n109/0x6du8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 109) }", "Number(U8, 109)", "Number(U8, 109)"] }
# 01aa3 Instruction { source: "t84 <- 0n109/0x6du8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 109) }\", \"Number(U8, 109)\", \"Number(U8, 109)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x6d=109)], resolved: None }
04 90 6d 
# ttyout <- t84
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 109) }"] }
# 01aa6 Instruction { source: "ttyout <- t84\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 109) }\"] }", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# t85 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 01aa8 Instruction { source: "t85 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x0a=10)], resolved: None }
04 90 0a 
# ttyout <- t85
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 01aab Instruction { source: "ttyout <- t85\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 01aad Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 cc 1a 00 
# :main_if_else_7_22
# 	SourceContext { contexts: [] }
# main_if_else_7_22
# t86 <- 0n72/0x48u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 72) }", "Number(U8, 72)", "Number(U8, 72)"] }
# 01ab1 Instruction { source: "t86 <- 0n72/0x48u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 72) }\", \"Number(U8, 72)\", \"Number(U8, 72)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x48=72)], resolved: None }
04 a1 48 
# ttyout <- t86
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 72) }"] }
# 01ab4 Instruction { source: "ttyout <- t86\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 72) }\"] }", opcode: Out0, args: [Register(0xa1)], resolved: None }
68 a1 
# t87 <- 0n117/0x75u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 117) }", "Number(U8, 117)", "Number(U8, 117)"] }
# 01ab6 Instruction { source: "t87 <- 0n117/0x75u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 117) }\", \"Number(U8, 117)\", \"Number(U8, 117)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x75=117)], resolved: None }
04 a1 75 
# ttyout <- t87
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 117) }"] }
# 01ab9 Instruction { source: "ttyout <- t87\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 117) }\"] }", opcode: Out0, args: [Register(0xa1)], resolved: None }
68 a1 
# t88 <- 0n104/0x68u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 104) }", "Number(U8, 104)", "Number(U8, 104)"] }
# 01abb Instruction { source: "t88 <- 0n104/0x68u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 104) }\", \"Number(U8, 104)\", \"Number(U8, 104)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x68=104)], resolved: None }
04 a1 68 
# ttyout <- t88
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 104) }"] }
# 01abe Instruction { source: "ttyout <- t88\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 104) }\"] }", opcode: Out0, args: [Register(0xa1)], resolved: None }
68 a1 
# t89 <- 0n63/0x3fu8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 63) }", "Number(U8, 63)", "Number(U8, 63)"] }
# 01ac0 Instruction { source: "t89 <- 0n63/0x3fu8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 63) }\", \"Number(U8, 63)\", \"Number(U8, 63)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x3f=63)], resolved: None }
04 a1 3f 
# ttyout <- t89
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 63) }"] }
# 01ac3 Instruction { source: "ttyout <- t89\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 63) }\"] }", opcode: Out0, args: [Register(0xa1)], resolved: None }
68 a1 
# t90 <- ch U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t90 <- ch U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x90), Register(0x90)], resolved: None }
# ttyout <- t90
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"ch\") }"] }
# 01ac5 Instruction { source: "ttyout <- t90\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"ch\\\") }\"] }", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# t91 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 01ac7 Instruction { source: "t91 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x0a=10)], resolved: None }
04 90 0a 
# ttyout <- t91
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 01aca Instruction { source: "ttyout <- t91\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: Out0, args: [Register(0x90)], resolved: None }
68 90 
# :main_if_end_3
# 	SourceContext { contexts: [] }
# main_if_end_3
# goto main_while_predicate_0
# 	SourceContext { contexts: [] }
# 01acc Instruction { source: "goto main_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_while_predicate_0)], resolved: None }
70 da 13 00 
# :main_while_end_2
# 	SourceContext { contexts: [] }
# main_while_end_2
# t92 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01ad0 Instruction { source: "t92 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xb4), Constant8(0x00=0)], resolved: None }
04 b4 00 
# t93 <- 0n20/0x00000014u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 01ad3 Instruction { source: "t93 <- 0n20/0x00000014u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: LoadImm32, args: [Register(0x94), Constant32(0x00000014=20)], resolved: None }
20 94 14 00 00 00 
# __frame_pointer <- __frame_pointer Add t93
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 01ad9 Instruction { source: "__frame_pointer <- __frame_pointer Add t93\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01ada Instruction { source: "__frame_pointer <- __frame_pointer Add t93\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x94), Register(0x0c)], resolved: None }
30 0c 94 0c 
# 01ade Instruction { source: "__frame_pointer <- __frame_pointer Add t93\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t92)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 01adf Instruction { source: "return Some(t92)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xb4), Register(0x00)], resolved: None }
0b b4 00 
# 01ae2 Instruction { source: "Dealloc 20 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000014=20)], resolved: None }
32 0c 14 00 00 00 
# 01ae8 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_main
# 	SourceContext { contexts: [] }
# function_end_main
# Unreachable
# 	SourceContext { contexts: [] }
# 01aea Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :mul32_64
# Ret None
# Arg0=a
# Arg1=b
# Arg2=c
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([184, 185, 186, 187])
# Var a_hi (Local a_hi Number(USIZE) Reg(U32)) Reg(U32) Some([188, 189, 190, 191])
# Var b (Arg1 b Number(USIZE)) Reg(U32) Some([192, 193, 194, 195])
# Var b_hi (Local b_hi Number(USIZE) Reg(U32)) Reg(U32) Some([196, 197, 198, 199])
# Var c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([200, 201, 202, 203])
# Var inline_mul32_64_add_U64_0_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_0_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_add_U64_0_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_add_U64_0_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([208, 209, 210, 211])
# Var inline_mul32_64_add_U64_0_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_0_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([212, 213, 214, 215])
# Var inline_mul32_64_add_U64_0_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }) Reg(U32) Some([216, 217, 218, 219])
# Var inline_mul32_64_add_U64_0_t11 (t11 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_add_U64_0_t12 (t12 Number(USIZE, 4)) Reg(U32) Some([216, 217, 218, 219])
# Var inline_mul32_64_add_U64_0_t13 (t13 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_add_U64_0_t14 (t14 Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_0_t15 (t15 PtrFieldDeref("a", "lo")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_0_t16 (t16 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_0_t17 (t17 PtrFieldDeref("b", "lo")) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_add_U64_0_t18 (t18 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_add_U64_0_t19 (t19 PtrFieldDeref("c", "lo")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_0_t2 (t2 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_add_U64_0_t20 (t20 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_0_t21 (t21 Ident("lo")) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_add_U64_0_t22 (t22 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_0_t23 (t23 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_0_t24 (t24 Number(USIZE, 4)) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_add_U64_0_t25 (t25 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_add_U64_0_t26 (t26 PtrFieldDeref("c", "hi")) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_add_U64_0_t27 (t27 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_add_U64_0_t28 (t28 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_add_U64_0_t29 (t29 Number(USIZE, 4)) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_add_U64_0_t3 (t3 Number(USIZE, 4)) Reg(U32) Some([212, 213, 214, 215])
# Var inline_mul32_64_add_U64_0_t30 (t30 Number(USIZE, 1)) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_add_U64_0_t4 (t4 Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([216, 217, 218, 219])
# Var inline_mul32_64_add_U64_0_t5 (t5 PtrFieldDeref("a", "hi")) Reg(U32) Some([220, 221, 222, 223])
# Var inline_mul32_64_add_U64_0_t6 (t6 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }) Reg(U32) Some([216, 217, 218, 219])
# Var inline_mul32_64_add_U64_0_t7 (t7 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_0_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([216, 217, 218, 219])
# Var inline_mul32_64_add_U64_0_t9 (t9 PtrFieldDeref("b", "hi")) Reg(U32) Some([216, 217, 218, 219])
# Var inline_mul32_64_add_U64_1_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_add_U64_1_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_1_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_add_U64_1_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([196, 197, 198, 199])
# Var inline_mul32_64_add_U64_1_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_add_U64_1_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([200, 201, 202, 203])
# Var inline_mul32_64_add_U64_1_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_add_U64_1_t11 (t11 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_1_t12 (t12 Number(USIZE, 4)) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_add_U64_1_t13 (t13 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_add_U64_1_t14 (t14 Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_add_U64_1_t15 (t15 PtrFieldDeref("a", "lo")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_add_U64_1_t16 (t16 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_add_U64_1_t17 (t17 PtrFieldDeref("b", "lo")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_1_t18 (t18 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_1_t19 (t19 PtrFieldDeref("c", "lo")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_add_U64_1_t2 (t2 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_add_U64_1_t20 (t20 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_add_U64_1_t21 (t21 Ident("lo")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_1_t22 (t22 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_add_U64_1_t23 (t23 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_add_U64_1_t24 (t24 Number(USIZE, 4)) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_1_t25 (t25 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_1_t26 (t26 PtrFieldDeref("c", "hi")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_1_t27 (t27 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_1_t28 (t28 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_add_U64_1_t29 (t29 Number(USIZE, 4)) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_add_U64_1_t3 (t3 Number(USIZE, 4)) Reg(U32) Some([200, 201, 202, 203])
# Var inline_mul32_64_add_U64_1_t30 (t30 Number(USIZE, 1)) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_add_U64_1_t4 (t4 Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_add_U64_1_t5 (t5 PtrFieldDeref("a", "hi")) Reg(U32) Some([208, 209, 210, 211])
# Var inline_mul32_64_add_U64_1_t6 (t6 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_add_U64_1_t7 (t7 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_add_U64_1_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_add_U64_1_t9 (t9 PtrFieldDeref("b", "hi")) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_10_a (Arg0 a Number(USIZE)) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_10_b (Arg1 b Number(USIZE)) Reg(U32) Some([208, 209, 210, 211])
# Var inline_mul32_64_mul16_32_10_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([212, 213, 214, 215])
# Var inline_mul32_64_mul16_32_10_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([216, 217, 218, 219])
# Var inline_mul32_64_mul16_32_10_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_10_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([216, 217, 218, 219])
# Var inline_mul32_64_mul16_32_10_t0 (t0 Ident("a")) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_10_t1 (t1 Ident("b")) Reg(U32) Some([208, 209, 210, 211])
# Var inline_mul32_64_mul16_32_10_t10 (t10 Ident("c")) Reg(U32) Some([212, 213, 214, 215])
# Var inline_mul32_64_mul16_32_10_t11 (t11 Ident("f")) Reg(U32) Some([216, 217, 218, 219])
# Var inline_mul32_64_mul16_32_10_t12 (t12 Ident("a")) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_10_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([216, 217, 218, 219])
# Var inline_mul32_64_mul16_32_10_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([224])
# Var inline_mul32_64_mul16_32_10_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_10_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([225])
# Var inline_mul32_64_mul16_32_10_t17 (t17 Ident("b")) Reg(U32) Some([208, 209, 210, 211])
# Var inline_mul32_64_mul16_32_10_t18 (t18 Ident("d")) Reg(U32) Some([208, 209, 210, 211])
# Var inline_mul32_64_mul16_32_10_t19 (t19 Ident("e")) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_10_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([216, 217, 218, 219])
# Var inline_mul32_64_mul16_32_10_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([225])
# Var inline_mul32_64_mul16_32_10_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([225])
# Var inline_mul32_64_mul16_32_10_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([225])
# Var inline_mul32_64_mul16_32_10_t23 (t23 Number(U8, 0)) Reg(U8) Some([225])
# Var inline_mul32_64_mul16_32_10_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_10_t25 (t25 Ident("c")) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_10_t26 (t26 Ident("d")) Reg(U32) Some([208, 209, 210, 211])
# Var inline_mul32_64_mul16_32_10_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([225])
# Var inline_mul32_64_mul16_32_10_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([220, 221, 222, 223])
# Var inline_mul32_64_mul16_32_10_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([224])
# Var inline_mul32_64_mul16_32_10_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([226])
# Var inline_mul32_64_mul16_32_10_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([226])
# Var inline_mul32_64_mul16_32_10_t8 (t8 Number(U8, 0)) Reg(U8) Some([227])
# Var inline_mul32_64_mul16_32_10_t9 (t9 Number(U8, 0)) Reg(U8) Some([227])
# Var inline_mul32_64_mul16_32_11_a (Arg0 a Number(USIZE)) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_11_b (Arg1 b Number(USIZE)) Reg(U32) Some([208, 209, 210, 211])
# Var inline_mul32_64_mul16_32_11_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([212, 213, 214, 215])
# Var inline_mul32_64_mul16_32_11_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([216, 217, 218, 219])
# Var inline_mul32_64_mul16_32_11_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_11_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([216, 217, 218, 219])
# Var inline_mul32_64_mul16_32_11_t0 (t0 Ident("a")) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_11_t1 (t1 Ident("b")) Reg(U32) Some([208, 209, 210, 211])
# Var inline_mul32_64_mul16_32_11_t10 (t10 Ident("c")) Reg(U32) Some([212, 213, 214, 215])
# Var inline_mul32_64_mul16_32_11_t11 (t11 Ident("f")) Reg(U32) Some([216, 217, 218, 219])
# Var inline_mul32_64_mul16_32_11_t12 (t12 Ident("a")) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_11_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([216, 217, 218, 219])
# Var inline_mul32_64_mul16_32_11_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([224])
# Var inline_mul32_64_mul16_32_11_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_11_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([225])
# Var inline_mul32_64_mul16_32_11_t17 (t17 Ident("b")) Reg(U32) Some([208, 209, 210, 211])
# Var inline_mul32_64_mul16_32_11_t18 (t18 Ident("d")) Reg(U32) Some([208, 209, 210, 211])
# Var inline_mul32_64_mul16_32_11_t19 (t19 Ident("e")) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_11_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([216, 217, 218, 219])
# Var inline_mul32_64_mul16_32_11_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([225])
# Var inline_mul32_64_mul16_32_11_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([225])
# Var inline_mul32_64_mul16_32_11_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([225])
# Var inline_mul32_64_mul16_32_11_t23 (t23 Number(U8, 0)) Reg(U8) Some([225])
# Var inline_mul32_64_mul16_32_11_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_11_t25 (t25 Ident("c")) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_11_t26 (t26 Ident("d")) Reg(U32) Some([208, 209, 210, 211])
# Var inline_mul32_64_mul16_32_11_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([225])
# Var inline_mul32_64_mul16_32_11_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([220, 221, 222, 223])
# Var inline_mul32_64_mul16_32_11_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([224])
# Var inline_mul32_64_mul16_32_11_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([226])
# Var inline_mul32_64_mul16_32_11_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([226])
# Var inline_mul32_64_mul16_32_11_t8 (t8 Number(U8, 0)) Reg(U8) Some([227])
# Var inline_mul32_64_mul16_32_11_t9 (t9 Number(U8, 0)) Reg(U8) Some([227])
# Var inline_mul32_64_mul16_32_12_a (Arg0 a Number(USIZE)) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_mul16_32_12_b (Arg1 b Number(USIZE)) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_mul16_32_12_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_12_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([208, 209, 210, 211])
# Var inline_mul32_64_mul16_32_12_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_mul16_32_12_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([208, 209, 210, 211])
# Var inline_mul32_64_mul16_32_12_t0 (t0 Ident("a")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_mul16_32_12_t1 (t1 Ident("b")) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_mul16_32_12_t10 (t10 Ident("c")) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_12_t11 (t11 Ident("f")) Reg(U32) Some([208, 209, 210, 211])
# Var inline_mul32_64_mul16_32_12_t12 (t12 Ident("a")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_mul16_32_12_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([208, 209, 210, 211])
# Var inline_mul32_64_mul16_32_12_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([228])
# Var inline_mul32_64_mul16_32_12_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_mul16_32_12_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([229])
# Var inline_mul32_64_mul16_32_12_t17 (t17 Ident("b")) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_mul16_32_12_t18 (t18 Ident("d")) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_mul16_32_12_t19 (t19 Ident("e")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_mul16_32_12_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([208, 209, 210, 211])
# Var inline_mul32_64_mul16_32_12_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([229])
# Var inline_mul32_64_mul16_32_12_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([229])
# Var inline_mul32_64_mul16_32_12_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([229])
# Var inline_mul32_64_mul16_32_12_t23 (t23 Number(U8, 0)) Reg(U8) Some([229])
# Var inline_mul32_64_mul16_32_12_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_mul16_32_12_t25 (t25 Ident("c")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_mul16_32_12_t26 (t26 Ident("d")) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_mul16_32_12_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([229])
# Var inline_mul32_64_mul16_32_12_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([212, 213, 214, 215])
# Var inline_mul32_64_mul16_32_12_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([228])
# Var inline_mul32_64_mul16_32_12_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([224])
# Var inline_mul32_64_mul16_32_12_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([224])
# Var inline_mul32_64_mul16_32_12_t8 (t8 Number(U8, 0)) Reg(U8) Some([230])
# Var inline_mul32_64_mul16_32_12_t9 (t9 Number(U8, 0)) Reg(U8) Some([230])
# Var inline_mul32_64_mul16_32_13_a (Arg0 a Number(USIZE)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_mul16_32_13_b (Arg1 b Number(USIZE)) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_mul16_32_13_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_mul16_32_13_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([196, 197, 198, 199])
# Var inline_mul32_64_mul16_32_13_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_mul16_32_13_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([196, 197, 198, 199])
# Var inline_mul32_64_mul16_32_13_t0 (t0 Ident("a")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_mul16_32_13_t1 (t1 Ident("b")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_mul16_32_13_t10 (t10 Ident("c")) Reg(U32) Some([192, 193, 194, 195])
# Var inline_mul32_64_mul16_32_13_t11 (t11 Ident("f")) Reg(U32) Some([196, 197, 198, 199])
# Var inline_mul32_64_mul16_32_13_t12 (t12 Ident("a")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_mul16_32_13_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([196, 197, 198, 199])
# Var inline_mul32_64_mul16_32_13_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([229])
# Var inline_mul32_64_mul16_32_13_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_mul16_32_13_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([231])
# Var inline_mul32_64_mul16_32_13_t17 (t17 Ident("b")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_mul16_32_13_t18 (t18 Ident("d")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_mul16_32_13_t19 (t19 Ident("e")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_mul16_32_13_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([196, 197, 198, 199])
# Var inline_mul32_64_mul16_32_13_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([231])
# Var inline_mul32_64_mul16_32_13_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([231])
# Var inline_mul32_64_mul16_32_13_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([231])
# Var inline_mul32_64_mul16_32_13_t23 (t23 Number(U8, 0)) Reg(U8) Some([231])
# Var inline_mul32_64_mul16_32_13_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_mul16_32_13_t25 (t25 Ident("c")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_mul16_32_13_t26 (t26 Ident("d")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_mul32_64_mul16_32_13_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([231])
# Var inline_mul32_64_mul16_32_13_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([204, 205, 206, 207])
# Var inline_mul32_64_mul16_32_13_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([229])
# Var inline_mul32_64_mul16_32_13_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([232])
# Var inline_mul32_64_mul16_32_13_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([232])
# Var inline_mul32_64_mul16_32_13_t8 (t8 Number(U8, 0)) Reg(U8) Some([225])
# Var inline_mul32_64_mul16_32_13_t9 (t9 Number(U8, 0)) Reg(U8) Some([225])
# Var t0 (Stack size negated) Reg(U32) Some([188, 189, 190, 191])
# Var t1 (t1 Index("a", Number(U8, 3))) Reg(U8) Some([231])
# Var t10 (t10 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([200, 201, 202, 203])
# Var t11 (t11 Number(USIZE, 4)) Reg(U32) Some([204, 205, 206, 207])
# Var t12 (t12 Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })) Reg(U32) Some([204, 205, 206, 207])
# Var t13 (t13 Ident("a_hi")) Reg(U32) Some([188, 189, 190, 191])
# Var t14 (t14 Ident("b_hi")) Reg(U32) Some([196, 197, 198, 199])
# Var t15 (t15 Ident("a_hi")) Reg(U32) Some([188, 189, 190, 191])
# Var t16 (t16 Ident("b")) Reg(U32) Some([192, 193, 194, 195])
# Var t17 (t17 Index("temp", Number(U8, 0))) Reg(U8) Some([229])
# Var t18 (t18 Index("temp", Number(U8, 1))) Reg(U8) Some([229])
# Var t19 (t19 Index("temp", Number(U8, 2))) Reg(U8) Some([229])
# Var t2 (t2 Index("a", Number(U8, 2))) Reg(U8) Some([231])
# Var t20 (t20 Index("temp", Number(U8, 3))) Reg(U8) Some([229])
# Var t21 (t21 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([236, 237, 238, 239])
# Var t22 (t22 Ident("temp_lo")) Reg(U32) Some([188, 189, 190, 191])
# Var t23 (t23 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([188, 189, 190, 191])
# Var t24 (t24 Ident("__frame_pointer")) Reg(U32) Some([236, 237, 238, 239])
# Var t25 (t25 Number(USIZE, 4)) Reg(U32) Some([188, 189, 190, 191])
# Var t26 (t26 Ident("temp_hi")) Reg(U32) Some([192, 193, 194, 195])
# Var t27 (t27 Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })) Reg(U8) Some([240])
# Var t28 (t28 Ident("c")) Reg(U32) Some([188, 189, 190, 191])
# Var t29 (t29 AddressOf(Ident("temp64"))) Reg(U32) Some([192, 193, 194, 195])
# Var t3 (t3 Index("b", Number(U8, 3))) Reg(U8) Some([228])
# Var t30 (t30 Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))) Reg(U32) Some([192, 193, 194, 195])
# Var t31 (t31 Ident("__frame_pointer")) Reg(U32) Some([236, 237, 238, 239])
# Var t32 (t32 Number(USIZE, 0)) Reg(U32) Some([192, 193, 194, 195])
# Var t33 (t33 Ident("c")) Reg(U32) Some([200, 201, 202, 203])
# Var t34 (t34 Ident("a")) Reg(U32) Some([184, 185, 186, 187])
# Var t35 (t35 Ident("b_hi")) Reg(U32) Some([188, 189, 190, 191])
# Var t36 (t36 Index("temp", Number(U8, 0))) Reg(U8) Some([231])
# Var t37 (t37 Index("temp", Number(U8, 1))) Reg(U8) Some([231])
# Var t38 (t38 Index("temp", Number(U8, 2))) Reg(U8) Some([231])
# Var t39 (t39 Index("temp", Number(U8, 3))) Reg(U8) Some([231])
# Var t4 (t4 Index("b", Number(U8, 2))) Reg(U8) Some([228])
# Var t40 (t40 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([236, 237, 238, 239])
# Var t41 (t41 Ident("temp_lo")) Reg(U32) Some([184, 185, 186, 187])
# Var t42 (t42 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([184, 185, 186, 187])
# Var t43 (t43 Ident("__frame_pointer")) Reg(U32) Some([236, 237, 238, 239])
# Var t44 (t44 Number(USIZE, 4)) Reg(U32) Some([184, 185, 186, 187])
# Var t45 (t45 Ident("temp_hi")) Reg(U32) Some([188, 189, 190, 191])
# Var t46 (t46 Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })) Reg(U8) Some([240])
# Var t47 (t47 Ident("c")) Reg(U32) Some([184, 185, 186, 187])
# Var t48 (t48 AddressOf(Ident("temp64"))) Reg(U32) Some([188, 189, 190, 191])
# Var t49 (t49 Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))) Reg(U32) Some([188, 189, 190, 191])
# Var t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([200, 201, 202, 203])
# Var t50 (t50 Ident("__frame_pointer")) Reg(U32) Some([236, 237, 238, 239])
# Var t51 (t51 Number(USIZE, 0)) Reg(U32) Some([188, 189, 190, 191])
# Var t52 (t52 Ident("c")) Reg(U32) Some([192, 193, 194, 195])
# Var t53 (Stack size) Reg(U32) Some([184, 185, 186, 187])
# Var t6 (t6 Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([204, 205, 206, 207])
# Var t7 (t7 Ident("a")) Reg(U32) Some([184, 185, 186, 187])
# Var t8 (t8 Ident("b")) Reg(U32) Some([192, 193, 194, 195])
# Var t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([244, 245, 246, 247])
# Var temp (Local temp Number(USIZE) Reg(U32)) Reg(U32) Some([188, 189, 190, 191])
# Var temp64 (Local temp64 Struct("U64") FrameOffset(0)) FrameOffset(0) None
# Var temp_hi (Local temp_hi Number(USIZE) Reg(U32)) Reg(U32) Some([244, 245, 246, 247])
# Var temp_lo (Local temp_lo Number(USIZE) Reg(U32)) Reg(U32) Some([248, 249, 250, 251])
# 01aef Instruction { source: "reserve 8 bytes of stack space for locals", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffff8=4294967288)], resolved: None }
32 0c f8 ff ff ff 
# 01af5 Instruction { source: "Save function parameter 'a' registers [0, 1, 2, 3] to locals [184, 185, 186, 187].", opcode: Copy32, args: [Register(0x00), Register(0xb8)], resolved: None }
21 00 b8 
# 01af8 Instruction { source: "Save function parameter 'b' registers [4, 5, 6, 7] to locals [192, 193, 194, 195].", opcode: Copy32, args: [Register(0x04), Register(0xc0)], resolved: None }
21 04 c0 
# 01afb Instruction { source: "Save function parameter 'c' registers [8, 9, 10, 11] to locals [200, 201, 202, 203].", opcode: Copy32, args: [Register(0x08), Register(0xc8)], resolved: None }
21 08 c8 
# t0 <- 0xfffffff8u32 
# 	SourceContext { contexts: [] }
# 01afe Instruction { source: "t0 <- 0xfffffff8u32 \n\tSourceContext { contexts: [] }", opcode: LoadImm32, args: [Register(0xbc), Constant32(0xfffffff8=4294967288)], resolved: None }
20 bc f8 ff ff ff 
# __frame_pointer <- __frame_pointer Add t0
# 	SourceContext { contexts: [] }
# 01b04 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01b05 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0xbc), Register(0x0c)], resolved: None }
30 0c bc 0c 
# 01b09 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# a_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 01b0a Instruction { source: "a_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xbc), Constant32(0x00000000=0)], resolved: None }
20 bc 00 00 00 00 
# t1 <- a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 1)), var_type: None, value: Index(\"a\", Number(U8, 3)) }", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01b10 Instruction { source: "t1 <- a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"a\\\", Number(U8, 3)) }\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xbb), Register(0xe7)], resolved: None }
0b bb e7 
# a_hi[0x01..0x02] <- t1 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 1)), var_type: None, value: Index(\"a\", Number(U8, 3)) }"] }
# 01b13 Instruction { source: "a_hi[0x01..0x02] <- t1 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"a\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0xe7), Register(0xbd)], resolved: None }
0b e7 bd 
# t2 <- a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 0)), var_type: None, value: Index(\"a\", Number(U8, 2)) }", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01b16 Instruction { source: "t2 <- a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"a\\\", Number(U8, 2)) }\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xba), Register(0xe7)], resolved: None }
0b ba e7 
# a_hi[0x00..0x01] <- t2 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 0)), var_type: None, value: Index(\"a\", Number(U8, 2)) }"] }
# 01b19 Instruction { source: "a_hi[0x00..0x01] <- t2 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"a\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0xe7), Register(0xbc)], resolved: None }
0b e7 bc 
# b_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 01b1c Instruction { source: "b_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xc4), Constant32(0x00000000=0)], resolved: None }
20 c4 00 00 00 00 
# t3 <- b[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 1)), var_type: None, value: Index(\"b\", Number(U8, 3)) }", "Index(\"b\", Number(U8, 3))", "Index(\"b\", Number(U8, 3))"] }
# 01b22 Instruction { source: "t3 <- b[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"b\\\", Number(U8, 3)) }\", \"Index(\\\"b\\\", Number(U8, 3))\", \"Index(\\\"b\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xc3), Register(0xe4)], resolved: None }
0b c3 e4 
# b_hi[0x01..0x02] <- t3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 1)), var_type: None, value: Index(\"b\", Number(U8, 3)) }"] }
# 01b25 Instruction { source: "b_hi[0x01..0x02] <- t3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"b\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0xe4), Register(0xc5)], resolved: None }
0b e4 c5 
# t4 <- b[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 0)), var_type: None, value: Index(\"b\", Number(U8, 2)) }", "Index(\"b\", Number(U8, 2))", "Index(\"b\", Number(U8, 2))"] }
# 01b28 Instruction { source: "t4 <- b[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"b\\\", Number(U8, 2)) }\", \"Index(\\\"b\\\", Number(U8, 2))\", \"Index(\\\"b\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xc2), Register(0xe4)], resolved: None }
0b c2 e4 
# b_hi[0x00..0x01] <- t4 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 0)), var_type: None, value: Index(\"b\", Number(U8, 2)) }"] }
# 01b2b Instruction { source: "b_hi[0x00..0x01] <- t4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"b\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0xe4), Register(0xc4)], resolved: None }
0b e4 c4 
# t5 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t5 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xc8), Register(0xc8)], resolved: None }
# t7 <- a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t7 <- a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# t8 <- b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t8 <- b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_mul32_64_mul16_32_10_a <- t7 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# 01b2e Instruction { source: "inline_mul32_64_mul16_32_10_a <- t7 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xcc)], resolved: None }
21 b8 cc 
# inline_mul32_64_mul16_32_10_b <- t8 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# 01b31 Instruction { source: "inline_mul32_64_mul16_32_10_b <- t8 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xd0)], resolved: None }
21 c0 d0 
# inline_mul32_64_mul16_32_10_t0 <- inline_mul32_64_mul16_32_10_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t0 <- inline_mul32_64_mul16_32_10_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xcc)], resolved: None }
# inline_mul32_64_mul16_32_10_t1 <- inline_mul32_64_mul16_32_10_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t1 <- inline_mul32_64_mul16_32_10_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xd0), Register(0xd0)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t0 Multiply inline_mul32_64_mul16_32_10_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 01b34 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t0 Multiply inline_mul32_64_mul16_32_10_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0xcc), Register(0xd0), Register(0xd4)], resolved: None }
11 cc d0 d4 
# 01b38 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t0 Multiply inline_mul32_64_mul16_32_10_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xd6), Constant8(0x00=0)], resolved: None }
04 d6 00 
# 01b3b Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t0 Multiply inline_mul32_64_mul16_32_10_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xd7), Constant8(0x00=0)], resolved: None }
04 d7 00 
# inline_mul32_64_mul16_32_10_t3 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01b3e Instruction { source: "inline_mul32_64_mul16_32_10_t3 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xcd), Register(0xe1)], resolved: None }
0b cd e1 
# inline_mul32_64_mul16_32_10_t2 U32 <- inline_mul32_64_mul16_32_10_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 01b41 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_10_t2 U32 <- inline_mul32_64_mul16_32_10_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xd8), Constant32(0x00000000=0)], resolved: None }
20 d8 00 00 00 00 
# 01b47 Instruction { source: "inline_mul32_64_mul16_32_10_t2 U32 <- inline_mul32_64_mul16_32_10_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe1), Register(0xd8)], resolved: None }
0b e1 d8 
# inline_mul32_64_mul16_32_10_t5 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 01b4a Instruction { source: "inline_mul32_64_mul16_32_10_t5 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xd1), Register(0xe0)], resolved: None }
0b d1 e0 
# inline_mul32_64_mul16_32_10_t4 U32 <- inline_mul32_64_mul16_32_10_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 01b4d Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_10_t4 U32 <- inline_mul32_64_mul16_32_10_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xdc), Constant32(0x00000000=0)], resolved: None }
20 dc 00 00 00 00 
# 01b53 Instruction { source: "inline_mul32_64_mul16_32_10_t4 U32 <- inline_mul32_64_mul16_32_10_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe0), Register(0xdc)], resolved: None }
0b e0 dc 
# inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_t2 Multiply inline_mul32_64_mul16_32_10_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 01b56 Instruction { source: "inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_t2 Multiply inline_mul32_64_mul16_32_10_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0xd8), Register(0xdc), Register(0xd8)], resolved: None }
11 d8 dc d8 
# 01b5a Instruction { source: "inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_t2 Multiply inline_mul32_64_mul16_32_10_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xda), Constant8(0x00=0)], resolved: None }
04 da 00 
# 01b5d Instruction { source: "inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_t2 Multiply inline_mul32_64_mul16_32_10_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xdb), Constant8(0x00=0)], resolved: None }
04 db 00 
# inline_mul32_64_mul16_32_10_t6 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 01b60 Instruction { source: "inline_mul32_64_mul16_32_10_t6 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xd9), Register(0xe2)], resolved: None }
0b d9 e2 
# inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 01b63 Instruction { source: "inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe2), Register(0xdb)], resolved: None }
0b e2 db 
# inline_mul32_64_mul16_32_10_t7 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 01b66 Instruction { source: "inline_mul32_64_mul16_32_10_t7 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xd8), Register(0xe2)], resolved: None }
0b d8 e2 
# inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 01b69 Instruction { source: "inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xe2), Register(0xda)], resolved: None }
0b e2 da 
# inline_mul32_64_mul16_32_10_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01b6c Instruction { source: "inline_mul32_64_mul16_32_10_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xe3), Constant8(0x00=0)], resolved: None }
04 e3 00 
# inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 01b6f Instruction { source: "inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xe3), Register(0xd9)], resolved: None }
0b e3 d9 
# inline_mul32_64_mul16_32_10_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01b72 Instruction { source: "inline_mul32_64_mul16_32_10_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xe3), Constant8(0x00=0)], resolved: None }
04 e3 00 
# inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 01b75 Instruction { source: "inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xe3), Register(0xd8)], resolved: None }
0b e3 d8 
# inline_mul32_64_mul16_32_10_t10 <- inline_mul32_64_mul16_32_10_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t10 <- inline_mul32_64_mul16_32_10_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xd4), Register(0xd4)], resolved: None }
# inline_mul32_64_mul16_32_10_t11 <- inline_mul32_64_mul16_32_10_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t11 <- inline_mul32_64_mul16_32_10_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xd8)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t10 Add inline_mul32_64_mul16_32_10_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 01b78 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t10 Add inline_mul32_64_mul16_32_10_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01b79 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t10 Add inline_mul32_64_mul16_32_10_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xd4), Register(0xd8), Register(0xd4)], resolved: None }
30 d4 d8 d4 
# 01b7d Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t10 Add inline_mul32_64_mul16_32_10_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_10_t12 <- inline_mul32_64_mul16_32_10_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t12 <- inline_mul32_64_mul16_32_10_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xcc)], resolved: None }
# inline_mul32_64_mul16_32_10_t14 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 01b7e Instruction { source: "inline_mul32_64_mul16_32_10_t14 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xd1), Register(0xe0)], resolved: None }
0b d1 e0 
# inline_mul32_64_mul16_32_10_t13 U32 <- inline_mul32_64_mul16_32_10_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 01b81 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_10_t13 U32 <- inline_mul32_64_mul16_32_10_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xd8), Constant32(0x00000000=0)], resolved: None }
20 d8 00 00 00 00 
# 01b87 Instruction { source: "inline_mul32_64_mul16_32_10_t13 U32 <- inline_mul32_64_mul16_32_10_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe0), Register(0xd8)], resolved: None }
0b e0 d8 
# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t12 Multiply inline_mul32_64_mul16_32_10_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 01b8a Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t12 Multiply inline_mul32_64_mul16_32_10_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0xcc), Register(0xd8), Register(0xd8)], resolved: None }
11 cc d8 d8 
# 01b8e Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t12 Multiply inline_mul32_64_mul16_32_10_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xda), Constant8(0x00=0)], resolved: None }
04 da 00 
# 01b91 Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t12 Multiply inline_mul32_64_mul16_32_10_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xdb), Constant8(0x00=0)], resolved: None }
04 db 00 
# inline_mul32_64_mul16_32_10_t16 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01b94 Instruction { source: "inline_mul32_64_mul16_32_10_t16 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xcd), Register(0xe1)], resolved: None }
0b cd e1 
# inline_mul32_64_mul16_32_10_t15 U32 <- inline_mul32_64_mul16_32_10_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 01b97 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_10_t15 U32 <- inline_mul32_64_mul16_32_10_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xcc), Constant32(0x00000000=0)], resolved: None }
20 cc 00 00 00 00 
# 01b9d Instruction { source: "inline_mul32_64_mul16_32_10_t15 U32 <- inline_mul32_64_mul16_32_10_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe1), Register(0xcc)], resolved: None }
0b e1 cc 
# inline_mul32_64_mul16_32_10_t17 <- inline_mul32_64_mul16_32_10_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t17 <- inline_mul32_64_mul16_32_10_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xd0), Register(0xd0)], resolved: None }
# inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_t15 Multiply inline_mul32_64_mul16_32_10_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 01ba0 Instruction { source: "inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_t15 Multiply inline_mul32_64_mul16_32_10_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0xcc), Register(0xd0), Register(0xcc)], resolved: None }
11 cc d0 cc 
# 01ba4 Instruction { source: "inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_t15 Multiply inline_mul32_64_mul16_32_10_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xce), Constant8(0x00=0)], resolved: None }
04 ce 00 
# 01ba7 Instruction { source: "inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_t15 Multiply inline_mul32_64_mul16_32_10_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xcf), Constant8(0x00=0)], resolved: None }
04 cf 00 
# inline_mul32_64_mul16_32_10_t18 <- inline_mul32_64_mul16_32_10_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 01baa Instruction { source: "inline_mul32_64_mul16_32_10_t18 <- inline_mul32_64_mul16_32_10_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xd0)], resolved: None }
21 d8 d0 
# inline_mul32_64_mul16_32_10_t19 <- inline_mul32_64_mul16_32_10_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t19 <- inline_mul32_64_mul16_32_10_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xcc)], resolved: None }
# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t18 Add inline_mul32_64_mul16_32_10_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 01bad Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t18 Add inline_mul32_64_mul16_32_10_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01bae Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t18 Add inline_mul32_64_mul16_32_10_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xd0), Register(0xcc), Register(0xd8)], resolved: None }
30 d0 cc d8 
# 01bb2 Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t18 Add inline_mul32_64_mul16_32_10_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_10_t20 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 01bb3 Instruction { source: "inline_mul32_64_mul16_32_10_t20 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xda), Register(0xe1)], resolved: None }
0b da e1 
# inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 01bb6 Instruction { source: "inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0xe1), Register(0xdb)], resolved: None }
0b e1 db 
# inline_mul32_64_mul16_32_10_t21 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 01bb9 Instruction { source: "inline_mul32_64_mul16_32_10_t21 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xd9), Register(0xe1)], resolved: None }
0b d9 e1 
# inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 01bbc Instruction { source: "inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe1), Register(0xda)], resolved: None }
0b e1 da 
# inline_mul32_64_mul16_32_10_t22 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 01bbf Instruction { source: "inline_mul32_64_mul16_32_10_t22 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xd8), Register(0xe1)], resolved: None }
0b d8 e1 
# inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 01bc2 Instruction { source: "inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xe1), Register(0xd9)], resolved: None }
0b e1 d9 
# inline_mul32_64_mul16_32_10_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01bc5 Instruction { source: "inline_mul32_64_mul16_32_10_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xe1), Constant8(0x00=0)], resolved: None }
04 e1 00 
# inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 01bc8 Instruction { source: "inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xe1), Register(0xd8)], resolved: None }
0b e1 d8 
# inline_mul32_64_mul16_32_10_t25 <- inline_mul32_64_mul16_32_10_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 01bcb Instruction { source: "inline_mul32_64_mul16_32_10_t25 <- inline_mul32_64_mul16_32_10_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xd4), Register(0xcc)], resolved: None }
21 d4 cc 
# inline_mul32_64_mul16_32_10_t26 <- inline_mul32_64_mul16_32_10_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 01bce Instruction { source: "inline_mul32_64_mul16_32_10_t26 <- inline_mul32_64_mul16_32_10_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xd0)], resolved: None }
21 d8 d0 
# inline_mul32_64_mul16_32_10_t24 <- inline_mul32_64_mul16_32_10_t25 Add inline_mul32_64_mul16_32_10_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 01bd1 Instruction { source: "inline_mul32_64_mul16_32_10_t24 <- inline_mul32_64_mul16_32_10_t25 Add inline_mul32_64_mul16_32_10_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01bd2 Instruction { source: "inline_mul32_64_mul16_32_10_t24 <- inline_mul32_64_mul16_32_10_t25 Add inline_mul32_64_mul16_32_10_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xcc), Register(0xd0), Register(0xcc)], resolved: None }
30 cc d0 cc 
# 01bd6 Instruction { source: "inline_mul32_64_mul16_32_10_t24 <- inline_mul32_64_mul16_32_10_t25 Add inline_mul32_64_mul16_32_10_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t6 <- inline_mul32_64_mul16_32_10_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "t6 <- inline_mul32_64_mul16_32_10_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xcc)], resolved: None }
# goto inline_mul32_64_mul16_32_10_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_10_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_10_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_10_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_mul32_64_mul16_32_10_function_end_mul16_32
# mem[t5] <- t6 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }"] }
# 01bd7 Instruction { source: "mem[t5] <- t6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\"] }", opcode: Store32_1, args: [Register(0xcc), Register(0xc8)], resolved: None }
23 cc c8 
# 01bda Instruction { source: "mem[t5] <- t6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t10 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t10 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xc8), Register(0xc8)], resolved: None }
# t11 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01bdb Instruction { source: "t11 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xcc), Constant32(0x00000004=4)], resolved: None }
20 cc 04 00 00 00 
# t9 <- t10 Add t11
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 01be1 Instruction { source: "t9 <- t10 Add t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01be2 Instruction { source: "t9 <- t10 Add t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xc8), Register(0xcc), Register(0xf4)], resolved: None }
30 c8 cc f4 
# 01be6 Instruction { source: "t9 <- t10 Add t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t13 <- a_hi U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Ident(\"a_hi\")", "Ident(\"a_hi\")"] }
# optimized away noop copy Instruction { source: "t13 <- a_hi U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"a_hi\\\")\", \"Ident(\\\"a_hi\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# t14 <- b_hi U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Ident(\"b_hi\")", "Ident(\"b_hi\")"] }
# optimized away noop copy Instruction { source: "t14 <- b_hi U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"b_hi\\\")\", \"Ident(\\\"b_hi\\\")\"] }", opcode: Copy32, args: [Register(0xc4), Register(0xc4)], resolved: None }
# inline_mul32_64_mul16_32_11_a <- t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })"] }
# 01be7 Instruction { source: "inline_mul32_64_mul16_32_11_a <- t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xcc)], resolved: None }
21 bc cc 
# inline_mul32_64_mul16_32_11_b <- t14 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })"] }
# 01bea Instruction { source: "inline_mul32_64_mul16_32_11_b <- t14 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0xc4), Register(0xd0)], resolved: None }
21 c4 d0 
# inline_mul32_64_mul16_32_11_t0 <- inline_mul32_64_mul16_32_11_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t0 <- inline_mul32_64_mul16_32_11_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xcc)], resolved: None }
# inline_mul32_64_mul16_32_11_t1 <- inline_mul32_64_mul16_32_11_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t1 <- inline_mul32_64_mul16_32_11_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xd0), Register(0xd0)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t0 Multiply inline_mul32_64_mul16_32_11_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 01bed Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t0 Multiply inline_mul32_64_mul16_32_11_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0xcc), Register(0xd0), Register(0xd4)], resolved: None }
11 cc d0 d4 
# 01bf1 Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t0 Multiply inline_mul32_64_mul16_32_11_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xd6), Constant8(0x00=0)], resolved: None }
04 d6 00 
# 01bf4 Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t0 Multiply inline_mul32_64_mul16_32_11_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xd7), Constant8(0x00=0)], resolved: None }
04 d7 00 
# inline_mul32_64_mul16_32_11_t3 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01bf7 Instruction { source: "inline_mul32_64_mul16_32_11_t3 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xcd), Register(0xe1)], resolved: None }
0b cd e1 
# inline_mul32_64_mul16_32_11_t2 U32 <- inline_mul32_64_mul16_32_11_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 01bfa Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_11_t2 U32 <- inline_mul32_64_mul16_32_11_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xd8), Constant32(0x00000000=0)], resolved: None }
20 d8 00 00 00 00 
# 01c00 Instruction { source: "inline_mul32_64_mul16_32_11_t2 U32 <- inline_mul32_64_mul16_32_11_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe1), Register(0xd8)], resolved: None }
0b e1 d8 
# inline_mul32_64_mul16_32_11_t5 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 01c03 Instruction { source: "inline_mul32_64_mul16_32_11_t5 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xd1), Register(0xe0)], resolved: None }
0b d1 e0 
# inline_mul32_64_mul16_32_11_t4 U32 <- inline_mul32_64_mul16_32_11_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 01c06 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_11_t4 U32 <- inline_mul32_64_mul16_32_11_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xdc), Constant32(0x00000000=0)], resolved: None }
20 dc 00 00 00 00 
# 01c0c Instruction { source: "inline_mul32_64_mul16_32_11_t4 U32 <- inline_mul32_64_mul16_32_11_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe0), Register(0xdc)], resolved: None }
0b e0 dc 
# inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_t2 Multiply inline_mul32_64_mul16_32_11_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 01c0f Instruction { source: "inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_t2 Multiply inline_mul32_64_mul16_32_11_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0xd8), Register(0xdc), Register(0xd8)], resolved: None }
11 d8 dc d8 
# 01c13 Instruction { source: "inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_t2 Multiply inline_mul32_64_mul16_32_11_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xda), Constant8(0x00=0)], resolved: None }
04 da 00 
# 01c16 Instruction { source: "inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_t2 Multiply inline_mul32_64_mul16_32_11_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xdb), Constant8(0x00=0)], resolved: None }
04 db 00 
# inline_mul32_64_mul16_32_11_t6 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 01c19 Instruction { source: "inline_mul32_64_mul16_32_11_t6 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xd9), Register(0xe2)], resolved: None }
0b d9 e2 
# inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 01c1c Instruction { source: "inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe2), Register(0xdb)], resolved: None }
0b e2 db 
# inline_mul32_64_mul16_32_11_t7 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 01c1f Instruction { source: "inline_mul32_64_mul16_32_11_t7 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xd8), Register(0xe2)], resolved: None }
0b d8 e2 
# inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 01c22 Instruction { source: "inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xe2), Register(0xda)], resolved: None }
0b e2 da 
# inline_mul32_64_mul16_32_11_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01c25 Instruction { source: "inline_mul32_64_mul16_32_11_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xe3), Constant8(0x00=0)], resolved: None }
04 e3 00 
# inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 01c28 Instruction { source: "inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xe3), Register(0xd9)], resolved: None }
0b e3 d9 
# inline_mul32_64_mul16_32_11_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01c2b Instruction { source: "inline_mul32_64_mul16_32_11_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xe3), Constant8(0x00=0)], resolved: None }
04 e3 00 
# inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 01c2e Instruction { source: "inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xe3), Register(0xd8)], resolved: None }
0b e3 d8 
# inline_mul32_64_mul16_32_11_t10 <- inline_mul32_64_mul16_32_11_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t10 <- inline_mul32_64_mul16_32_11_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xd4), Register(0xd4)], resolved: None }
# inline_mul32_64_mul16_32_11_t11 <- inline_mul32_64_mul16_32_11_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t11 <- inline_mul32_64_mul16_32_11_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xd8)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t10 Add inline_mul32_64_mul16_32_11_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 01c31 Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t10 Add inline_mul32_64_mul16_32_11_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01c32 Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t10 Add inline_mul32_64_mul16_32_11_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xd4), Register(0xd8), Register(0xd4)], resolved: None }
30 d4 d8 d4 
# 01c36 Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t10 Add inline_mul32_64_mul16_32_11_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_11_t12 <- inline_mul32_64_mul16_32_11_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t12 <- inline_mul32_64_mul16_32_11_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xcc)], resolved: None }
# inline_mul32_64_mul16_32_11_t14 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 01c37 Instruction { source: "inline_mul32_64_mul16_32_11_t14 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xd1), Register(0xe0)], resolved: None }
0b d1 e0 
# inline_mul32_64_mul16_32_11_t13 U32 <- inline_mul32_64_mul16_32_11_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 01c3a Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_11_t13 U32 <- inline_mul32_64_mul16_32_11_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xd8), Constant32(0x00000000=0)], resolved: None }
20 d8 00 00 00 00 
# 01c40 Instruction { source: "inline_mul32_64_mul16_32_11_t13 U32 <- inline_mul32_64_mul16_32_11_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe0), Register(0xd8)], resolved: None }
0b e0 d8 
# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t12 Multiply inline_mul32_64_mul16_32_11_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 01c43 Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t12 Multiply inline_mul32_64_mul16_32_11_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0xcc), Register(0xd8), Register(0xd8)], resolved: None }
11 cc d8 d8 
# 01c47 Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t12 Multiply inline_mul32_64_mul16_32_11_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xda), Constant8(0x00=0)], resolved: None }
04 da 00 
# 01c4a Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t12 Multiply inline_mul32_64_mul16_32_11_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xdb), Constant8(0x00=0)], resolved: None }
04 db 00 
# inline_mul32_64_mul16_32_11_t16 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01c4d Instruction { source: "inline_mul32_64_mul16_32_11_t16 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xcd), Register(0xe1)], resolved: None }
0b cd e1 
# inline_mul32_64_mul16_32_11_t15 U32 <- inline_mul32_64_mul16_32_11_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 01c50 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_11_t15 U32 <- inline_mul32_64_mul16_32_11_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xcc), Constant32(0x00000000=0)], resolved: None }
20 cc 00 00 00 00 
# 01c56 Instruction { source: "inline_mul32_64_mul16_32_11_t15 U32 <- inline_mul32_64_mul16_32_11_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe1), Register(0xcc)], resolved: None }
0b e1 cc 
# inline_mul32_64_mul16_32_11_t17 <- inline_mul32_64_mul16_32_11_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t17 <- inline_mul32_64_mul16_32_11_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xd0), Register(0xd0)], resolved: None }
# inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_t15 Multiply inline_mul32_64_mul16_32_11_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 01c59 Instruction { source: "inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_t15 Multiply inline_mul32_64_mul16_32_11_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0xcc), Register(0xd0), Register(0xcc)], resolved: None }
11 cc d0 cc 
# 01c5d Instruction { source: "inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_t15 Multiply inline_mul32_64_mul16_32_11_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xce), Constant8(0x00=0)], resolved: None }
04 ce 00 
# 01c60 Instruction { source: "inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_t15 Multiply inline_mul32_64_mul16_32_11_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xcf), Constant8(0x00=0)], resolved: None }
04 cf 00 
# inline_mul32_64_mul16_32_11_t18 <- inline_mul32_64_mul16_32_11_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 01c63 Instruction { source: "inline_mul32_64_mul16_32_11_t18 <- inline_mul32_64_mul16_32_11_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xd0)], resolved: None }
21 d8 d0 
# inline_mul32_64_mul16_32_11_t19 <- inline_mul32_64_mul16_32_11_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t19 <- inline_mul32_64_mul16_32_11_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xcc)], resolved: None }
# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t18 Add inline_mul32_64_mul16_32_11_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 01c66 Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t18 Add inline_mul32_64_mul16_32_11_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01c67 Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t18 Add inline_mul32_64_mul16_32_11_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xd0), Register(0xcc), Register(0xd8)], resolved: None }
30 d0 cc d8 
# 01c6b Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t18 Add inline_mul32_64_mul16_32_11_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_11_t20 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 01c6c Instruction { source: "inline_mul32_64_mul16_32_11_t20 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xda), Register(0xe1)], resolved: None }
0b da e1 
# inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 01c6f Instruction { source: "inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0xe1), Register(0xdb)], resolved: None }
0b e1 db 
# inline_mul32_64_mul16_32_11_t21 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 01c72 Instruction { source: "inline_mul32_64_mul16_32_11_t21 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xd9), Register(0xe1)], resolved: None }
0b d9 e1 
# inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 01c75 Instruction { source: "inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe1), Register(0xda)], resolved: None }
0b e1 da 
# inline_mul32_64_mul16_32_11_t22 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 01c78 Instruction { source: "inline_mul32_64_mul16_32_11_t22 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xd8), Register(0xe1)], resolved: None }
0b d8 e1 
# inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 01c7b Instruction { source: "inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xe1), Register(0xd9)], resolved: None }
0b e1 d9 
# inline_mul32_64_mul16_32_11_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01c7e Instruction { source: "inline_mul32_64_mul16_32_11_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xe1), Constant8(0x00=0)], resolved: None }
04 e1 00 
# inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 01c81 Instruction { source: "inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xe1), Register(0xd8)], resolved: None }
0b e1 d8 
# inline_mul32_64_mul16_32_11_t25 <- inline_mul32_64_mul16_32_11_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 01c84 Instruction { source: "inline_mul32_64_mul16_32_11_t25 <- inline_mul32_64_mul16_32_11_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xd4), Register(0xcc)], resolved: None }
21 d4 cc 
# inline_mul32_64_mul16_32_11_t26 <- inline_mul32_64_mul16_32_11_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 01c87 Instruction { source: "inline_mul32_64_mul16_32_11_t26 <- inline_mul32_64_mul16_32_11_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xd0)], resolved: None }
21 d8 d0 
# inline_mul32_64_mul16_32_11_t24 <- inline_mul32_64_mul16_32_11_t25 Add inline_mul32_64_mul16_32_11_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 01c8a Instruction { source: "inline_mul32_64_mul16_32_11_t24 <- inline_mul32_64_mul16_32_11_t25 Add inline_mul32_64_mul16_32_11_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01c8b Instruction { source: "inline_mul32_64_mul16_32_11_t24 <- inline_mul32_64_mul16_32_11_t25 Add inline_mul32_64_mul16_32_11_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xcc), Register(0xd0), Register(0xcc)], resolved: None }
30 cc d0 cc 
# 01c8f Instruction { source: "inline_mul32_64_mul16_32_11_t24 <- inline_mul32_64_mul16_32_11_t25 Add inline_mul32_64_mul16_32_11_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t12 <- inline_mul32_64_mul16_32_11_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "t12 <- inline_mul32_64_mul16_32_11_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xcc)], resolved: None }
# goto inline_mul32_64_mul16_32_11_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_11_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_11_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_11_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_mul32_64_mul16_32_11_function_end_mul16_32
# mem[t9] <- t12 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }"] }
# 01c90 Instruction { source: "mem[t9] <- t12 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\"] }", opcode: Store32_1, args: [Register(0xcc), Register(0xf4)], resolved: None }
23 cc f4 
# 01c93 Instruction { source: "mem[t9] <- t12 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# temp_lo <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp_lo\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 01c94 Instruction { source: "temp_lo <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp_lo\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xf8), Constant32(0x00000000=0)], resolved: None }
20 f8 00 00 00 00 
# temp_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 01c9a Instruction { source: "temp_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xf4), Constant32(0x00000000=0)], resolved: None }
20 f4 00 00 00 00 
# t15 <- a_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Ident(\"a_hi\")", "Ident(\"a_hi\")"] }
# optimized away noop copy Instruction { source: "t15 <- a_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a_hi\\\")\", \"Ident(\\\"a_hi\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# t16 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t16 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_mul32_64_mul16_32_12_a <- t15 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_a <- t15 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_mul32_64_mul16_32_12_b <- t16 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_b <- t16 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_mul32_64_mul16_32_12_t0 <- inline_mul32_64_mul16_32_12_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t0 <- inline_mul32_64_mul16_32_12_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_mul32_64_mul16_32_12_t1 <- inline_mul32_64_mul16_32_12_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t1 <- inline_mul32_64_mul16_32_12_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t0 Multiply inline_mul32_64_mul16_32_12_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 01ca0 Instruction { source: "inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t0 Multiply inline_mul32_64_mul16_32_12_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0xbc), Register(0xc0), Register(0xcc)], resolved: None }
11 bc c0 cc 
# 01ca4 Instruction { source: "inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t0 Multiply inline_mul32_64_mul16_32_12_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xce), Constant8(0x00=0)], resolved: None }
04 ce 00 
# 01ca7 Instruction { source: "inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t0 Multiply inline_mul32_64_mul16_32_12_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xcf), Constant8(0x00=0)], resolved: None }
04 cf 00 
# inline_mul32_64_mul16_32_12_t3 <- inline_mul32_64_mul16_32_12_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01caa Instruction { source: "inline_mul32_64_mul16_32_12_t3 <- inline_mul32_64_mul16_32_12_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xe5)], resolved: None }
0b bd e5 
# inline_mul32_64_mul16_32_12_t2 U32 <- inline_mul32_64_mul16_32_12_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 01cad Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_12_t2 U32 <- inline_mul32_64_mul16_32_12_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xd0), Constant32(0x00000000=0)], resolved: None }
20 d0 00 00 00 00 
# 01cb3 Instruction { source: "inline_mul32_64_mul16_32_12_t2 U32 <- inline_mul32_64_mul16_32_12_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe5), Register(0xd0)], resolved: None }
0b e5 d0 
# inline_mul32_64_mul16_32_12_t5 <- inline_mul32_64_mul16_32_12_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 01cb6 Instruction { source: "inline_mul32_64_mul16_32_12_t5 <- inline_mul32_64_mul16_32_12_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xc1), Register(0xe4)], resolved: None }
0b c1 e4 
# inline_mul32_64_mul16_32_12_t4 U32 <- inline_mul32_64_mul16_32_12_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 01cb9 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_12_t4 U32 <- inline_mul32_64_mul16_32_12_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xd4), Constant32(0x00000000=0)], resolved: None }
20 d4 00 00 00 00 
# 01cbf Instruction { source: "inline_mul32_64_mul16_32_12_t4 U32 <- inline_mul32_64_mul16_32_12_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe4), Register(0xd4)], resolved: None }
0b e4 d4 
# inline_mul32_64_mul16_32_12_f <- inline_mul32_64_mul16_32_12_t2 Multiply inline_mul32_64_mul16_32_12_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 01cc2 Instruction { source: "inline_mul32_64_mul16_32_12_f <- inline_mul32_64_mul16_32_12_t2 Multiply inline_mul32_64_mul16_32_12_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0xd0), Register(0xd4), Register(0xd0)], resolved: None }
11 d0 d4 d0 
# 01cc6 Instruction { source: "inline_mul32_64_mul16_32_12_f <- inline_mul32_64_mul16_32_12_t2 Multiply inline_mul32_64_mul16_32_12_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xd2), Constant8(0x00=0)], resolved: None }
04 d2 00 
# 01cc9 Instruction { source: "inline_mul32_64_mul16_32_12_f <- inline_mul32_64_mul16_32_12_t2 Multiply inline_mul32_64_mul16_32_12_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xd3), Constant8(0x00=0)], resolved: None }
04 d3 00 
# inline_mul32_64_mul16_32_12_t6 <- inline_mul32_64_mul16_32_12_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 01ccc Instruction { source: "inline_mul32_64_mul16_32_12_t6 <- inline_mul32_64_mul16_32_12_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xd1), Register(0xe0)], resolved: None }
0b d1 e0 
# inline_mul32_64_mul16_32_12_f[0x03..0x04] <- inline_mul32_64_mul16_32_12_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 01ccf Instruction { source: "inline_mul32_64_mul16_32_12_f[0x03..0x04] <- inline_mul32_64_mul16_32_12_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe0), Register(0xd3)], resolved: None }
0b e0 d3 
# inline_mul32_64_mul16_32_12_t7 <- inline_mul32_64_mul16_32_12_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 01cd2 Instruction { source: "inline_mul32_64_mul16_32_12_t7 <- inline_mul32_64_mul16_32_12_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xd0), Register(0xe0)], resolved: None }
0b d0 e0 
# inline_mul32_64_mul16_32_12_f[0x02..0x03] <- inline_mul32_64_mul16_32_12_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 01cd5 Instruction { source: "inline_mul32_64_mul16_32_12_f[0x02..0x03] <- inline_mul32_64_mul16_32_12_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xe0), Register(0xd2)], resolved: None }
0b e0 d2 
# inline_mul32_64_mul16_32_12_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01cd8 Instruction { source: "inline_mul32_64_mul16_32_12_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xe6), Constant8(0x00=0)], resolved: None }
04 e6 00 
# inline_mul32_64_mul16_32_12_f[0x01..0x02] <- inline_mul32_64_mul16_32_12_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 01cdb Instruction { source: "inline_mul32_64_mul16_32_12_f[0x01..0x02] <- inline_mul32_64_mul16_32_12_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xe6), Register(0xd1)], resolved: None }
0b e6 d1 
# inline_mul32_64_mul16_32_12_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01cde Instruction { source: "inline_mul32_64_mul16_32_12_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xe6), Constant8(0x00=0)], resolved: None }
04 e6 00 
# inline_mul32_64_mul16_32_12_f[0x00..0x01] <- inline_mul32_64_mul16_32_12_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 01ce1 Instruction { source: "inline_mul32_64_mul16_32_12_f[0x00..0x01] <- inline_mul32_64_mul16_32_12_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xe6), Register(0xd0)], resolved: None }
0b e6 d0 
# inline_mul32_64_mul16_32_12_t10 <- inline_mul32_64_mul16_32_12_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t10 <- inline_mul32_64_mul16_32_12_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xcc)], resolved: None }
# inline_mul32_64_mul16_32_12_t11 <- inline_mul32_64_mul16_32_12_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t11 <- inline_mul32_64_mul16_32_12_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0xd0), Register(0xd0)], resolved: None }
# inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t10 Add inline_mul32_64_mul16_32_12_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 01ce4 Instruction { source: "inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t10 Add inline_mul32_64_mul16_32_12_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01ce5 Instruction { source: "inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t10 Add inline_mul32_64_mul16_32_12_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xcc), Register(0xd0), Register(0xcc)], resolved: None }
30 cc d0 cc 
# 01ce9 Instruction { source: "inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t10 Add inline_mul32_64_mul16_32_12_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_12_t12 <- inline_mul32_64_mul16_32_12_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t12 <- inline_mul32_64_mul16_32_12_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_mul32_64_mul16_32_12_t14 <- inline_mul32_64_mul16_32_12_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 01cea Instruction { source: "inline_mul32_64_mul16_32_12_t14 <- inline_mul32_64_mul16_32_12_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xc1), Register(0xe4)], resolved: None }
0b c1 e4 
# inline_mul32_64_mul16_32_12_t13 U32 <- inline_mul32_64_mul16_32_12_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 01ced Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_12_t13 U32 <- inline_mul32_64_mul16_32_12_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xd0), Constant32(0x00000000=0)], resolved: None }
20 d0 00 00 00 00 
# 01cf3 Instruction { source: "inline_mul32_64_mul16_32_12_t13 U32 <- inline_mul32_64_mul16_32_12_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe4), Register(0xd0)], resolved: None }
0b e4 d0 
# inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t12 Multiply inline_mul32_64_mul16_32_12_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 01cf6 Instruction { source: "inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t12 Multiply inline_mul32_64_mul16_32_12_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0xbc), Register(0xd0), Register(0xd0)], resolved: None }
11 bc d0 d0 
# 01cfa Instruction { source: "inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t12 Multiply inline_mul32_64_mul16_32_12_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xd2), Constant8(0x00=0)], resolved: None }
04 d2 00 
# 01cfd Instruction { source: "inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t12 Multiply inline_mul32_64_mul16_32_12_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xd3), Constant8(0x00=0)], resolved: None }
04 d3 00 
# inline_mul32_64_mul16_32_12_t16 <- inline_mul32_64_mul16_32_12_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01d00 Instruction { source: "inline_mul32_64_mul16_32_12_t16 <- inline_mul32_64_mul16_32_12_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xe5)], resolved: None }
0b bd e5 
# inline_mul32_64_mul16_32_12_t15 U32 <- inline_mul32_64_mul16_32_12_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 01d03 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_12_t15 U32 <- inline_mul32_64_mul16_32_12_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xbc), Constant32(0x00000000=0)], resolved: None }
20 bc 00 00 00 00 
# 01d09 Instruction { source: "inline_mul32_64_mul16_32_12_t15 U32 <- inline_mul32_64_mul16_32_12_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe5), Register(0xbc)], resolved: None }
0b e5 bc 
# inline_mul32_64_mul16_32_12_t17 <- inline_mul32_64_mul16_32_12_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t17 <- inline_mul32_64_mul16_32_12_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_mul32_64_mul16_32_12_e <- inline_mul32_64_mul16_32_12_t15 Multiply inline_mul32_64_mul16_32_12_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 01d0c Instruction { source: "inline_mul32_64_mul16_32_12_e <- inline_mul32_64_mul16_32_12_t15 Multiply inline_mul32_64_mul16_32_12_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0xbc), Register(0xc0), Register(0xbc)], resolved: None }
11 bc c0 bc 
# 01d10 Instruction { source: "inline_mul32_64_mul16_32_12_e <- inline_mul32_64_mul16_32_12_t15 Multiply inline_mul32_64_mul16_32_12_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xbe), Constant8(0x00=0)], resolved: None }
04 be 00 
# 01d13 Instruction { source: "inline_mul32_64_mul16_32_12_e <- inline_mul32_64_mul16_32_12_t15 Multiply inline_mul32_64_mul16_32_12_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xbf), Constant8(0x00=0)], resolved: None }
04 bf 00 
# inline_mul32_64_mul16_32_12_t18 <- inline_mul32_64_mul16_32_12_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 01d16 Instruction { source: "inline_mul32_64_mul16_32_12_t18 <- inline_mul32_64_mul16_32_12_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xd0), Register(0xc0)], resolved: None }
21 d0 c0 
# inline_mul32_64_mul16_32_12_t19 <- inline_mul32_64_mul16_32_12_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t19 <- inline_mul32_64_mul16_32_12_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t18 Add inline_mul32_64_mul16_32_12_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 01d19 Instruction { source: "inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t18 Add inline_mul32_64_mul16_32_12_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01d1a Instruction { source: "inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t18 Add inline_mul32_64_mul16_32_12_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xc0), Register(0xbc), Register(0xd0)], resolved: None }
30 c0 bc d0 
# 01d1e Instruction { source: "inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t18 Add inline_mul32_64_mul16_32_12_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_12_t20 <- inline_mul32_64_mul16_32_12_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 01d1f Instruction { source: "inline_mul32_64_mul16_32_12_t20 <- inline_mul32_64_mul16_32_12_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xd2), Register(0xe5)], resolved: None }
0b d2 e5 
# inline_mul32_64_mul16_32_12_d[0x03..0x04] <- inline_mul32_64_mul16_32_12_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 01d22 Instruction { source: "inline_mul32_64_mul16_32_12_d[0x03..0x04] <- inline_mul32_64_mul16_32_12_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0xe5), Register(0xd3)], resolved: None }
0b e5 d3 
# inline_mul32_64_mul16_32_12_t21 <- inline_mul32_64_mul16_32_12_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 01d25 Instruction { source: "inline_mul32_64_mul16_32_12_t21 <- inline_mul32_64_mul16_32_12_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xd1), Register(0xe5)], resolved: None }
0b d1 e5 
# inline_mul32_64_mul16_32_12_d[0x02..0x03] <- inline_mul32_64_mul16_32_12_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 01d28 Instruction { source: "inline_mul32_64_mul16_32_12_d[0x02..0x03] <- inline_mul32_64_mul16_32_12_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe5), Register(0xd2)], resolved: None }
0b e5 d2 
# inline_mul32_64_mul16_32_12_t22 <- inline_mul32_64_mul16_32_12_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 01d2b Instruction { source: "inline_mul32_64_mul16_32_12_t22 <- inline_mul32_64_mul16_32_12_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xd0), Register(0xe5)], resolved: None }
0b d0 e5 
# inline_mul32_64_mul16_32_12_d[0x01..0x02] <- inline_mul32_64_mul16_32_12_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 01d2e Instruction { source: "inline_mul32_64_mul16_32_12_d[0x01..0x02] <- inline_mul32_64_mul16_32_12_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xe5), Register(0xd1)], resolved: None }
0b e5 d1 
# inline_mul32_64_mul16_32_12_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01d31 Instruction { source: "inline_mul32_64_mul16_32_12_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xe5), Constant8(0x00=0)], resolved: None }
04 e5 00 
# inline_mul32_64_mul16_32_12_d[0x00..0x01] <- inline_mul32_64_mul16_32_12_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 01d34 Instruction { source: "inline_mul32_64_mul16_32_12_d[0x00..0x01] <- inline_mul32_64_mul16_32_12_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xe5), Register(0xd0)], resolved: None }
0b e5 d0 
# inline_mul32_64_mul16_32_12_t25 <- inline_mul32_64_mul16_32_12_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 01d37 Instruction { source: "inline_mul32_64_mul16_32_12_t25 <- inline_mul32_64_mul16_32_12_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xbc)], resolved: None }
21 cc bc 
# inline_mul32_64_mul16_32_12_t26 <- inline_mul32_64_mul16_32_12_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 01d3a Instruction { source: "inline_mul32_64_mul16_32_12_t26 <- inline_mul32_64_mul16_32_12_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xd0), Register(0xc0)], resolved: None }
21 d0 c0 
# inline_mul32_64_mul16_32_12_t24 <- inline_mul32_64_mul16_32_12_t25 Add inline_mul32_64_mul16_32_12_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 01d3d Instruction { source: "inline_mul32_64_mul16_32_12_t24 <- inline_mul32_64_mul16_32_12_t25 Add inline_mul32_64_mul16_32_12_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01d3e Instruction { source: "inline_mul32_64_mul16_32_12_t24 <- inline_mul32_64_mul16_32_12_t25 Add inline_mul32_64_mul16_32_12_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xbc), Register(0xc0), Register(0xbc)], resolved: None }
30 bc c0 bc 
# 01d42 Instruction { source: "inline_mul32_64_mul16_32_12_t24 <- inline_mul32_64_mul16_32_12_t25 Add inline_mul32_64_mul16_32_12_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# temp <- inline_mul32_64_mul16_32_12_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "temp <- inline_mul32_64_mul16_32_12_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# goto inline_mul32_64_mul16_32_12_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_12_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_12_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_12_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_mul32_64_mul16_32_12_function_end_mul16_32
# t17 <- temp[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 2)), var_type: None, value: Index(\"temp\", Number(U8, 0)) }", "Index(\"temp\", Number(U8, 0))", "Index(\"temp\", Number(U8, 0))"] }
# 01d43 Instruction { source: "t17 <- temp[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 2)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 0)) }\", \"Index(\\\"temp\\\", Number(U8, 0))\", \"Index(\\\"temp\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xe5)], resolved: None }
0b bc e5 
# temp_lo[0x02..0x03] <- t17 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 2)), var_type: None, value: Index(\"temp\", Number(U8, 0)) }"] }
# 01d46 Instruction { source: "temp_lo[0x02..0x03] <- t17 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 2)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xe5), Register(0xfa)], resolved: None }
0b e5 fa 
# t18 <- temp[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 3)), var_type: None, value: Index(\"temp\", Number(U8, 1)) }", "Index(\"temp\", Number(U8, 1))", "Index(\"temp\", Number(U8, 1))"] }
# 01d49 Instruction { source: "t18 <- temp[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 3)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 1)) }\", \"Index(\\\"temp\\\", Number(U8, 1))\", \"Index(\\\"temp\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xe5)], resolved: None }
0b bd e5 
# temp_lo[0x03..0x04] <- t18 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 3)), var_type: None, value: Index(\"temp\", Number(U8, 1)) }"] }
# 01d4c Instruction { source: "temp_lo[0x03..0x04] <- t18 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 3)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe5), Register(0xfb)], resolved: None }
0b e5 fb 
# t19 <- temp[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 0)), var_type: None, value: Index(\"temp\", Number(U8, 2)) }", "Index(\"temp\", Number(U8, 2))", "Index(\"temp\", Number(U8, 2))"] }
# 01d4f Instruction { source: "t19 <- temp[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 2)) }\", \"Index(\\\"temp\\\", Number(U8, 2))\", \"Index(\\\"temp\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xbe), Register(0xe5)], resolved: None }
0b be e5 
# temp_hi[0x00..0x01] <- t19 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 0)), var_type: None, value: Index(\"temp\", Number(U8, 2)) }"] }
# 01d52 Instruction { source: "temp_hi[0x00..0x01] <- t19 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0xe5), Register(0xf4)], resolved: None }
0b e5 f4 
# t20 <- temp[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 1)), var_type: None, value: Index(\"temp\", Number(U8, 3)) }", "Index(\"temp\", Number(U8, 3))", "Index(\"temp\", Number(U8, 3))"] }
# 01d55 Instruction { source: "t20 <- temp[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 3)) }\", \"Index(\\\"temp\\\", Number(U8, 3))\", \"Index(\\\"temp\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xbf), Register(0xe5)], resolved: None }
0b bf e5 
# temp_hi[0x01..0x02] <- t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 1)), var_type: None, value: Index(\"temp\", Number(U8, 3)) }"] }
# 01d58 Instruction { source: "temp_hi[0x01..0x02] <- t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0xe5), Register(0xf5)], resolved: None }
0b e5 f5 
# t21 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Ident(\"__frame_pointer\")"] }
# 01d5b Instruction { source: "t21 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xec)], resolved: None }
21 0c ec 
# t22 <- temp_lo U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }", "Ident(\"temp_lo\")", "Ident(\"temp_lo\")"] }
# 01d5e Instruction { source: "t22 <- temp_lo U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\", \"Ident(\\\"temp_lo\\\")\", \"Ident(\\\"temp_lo\\\")\"] }", opcode: Copy32, args: [Register(0xf8), Register(0xbc)], resolved: None }
21 f8 bc 
# mem[t21] <- t22 U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }"] }
# 01d61 Instruction { source: "mem[t21] <- t22 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\"] }", opcode: Store32_1, args: [Register(0xbc), Register(0xec)], resolved: None }
23 bc ec 
# 01d64 Instruction { source: "mem[t21] <- t22 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t24 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 01d65 Instruction { source: "t24 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xec)], resolved: None }
21 0c ec 
# t25 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01d68 Instruction { source: "t25 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xbc), Constant32(0x00000004=4)], resolved: None }
20 bc 04 00 00 00 
# t23 <- t24 Add t25
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))"] }
# 01d6e Instruction { source: "t23 <- t24 Add t25\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01d6f Instruction { source: "t23 <- t24 Add t25\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xec), Register(0xbc), Register(0xbc)], resolved: None }
30 ec bc bc 
# 01d73 Instruction { source: "t23 <- t24 Add t25\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t26 <- temp_hi U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Ident(\"temp_hi\")", "Ident(\"temp_hi\")"] }
# 01d74 Instruction { source: "t26 <- temp_hi U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Ident(\\\"temp_hi\\\")\", \"Ident(\\\"temp_hi\\\")\"] }", opcode: Copy32, args: [Register(0xf4), Register(0xc0)], resolved: None }
21 f4 c0 
# mem[t23] <- t26 U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }"] }
# 01d77 Instruction { source: "mem[t23] <- t26 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\"] }", opcode: Store32_1, args: [Register(0xc0), Register(0xbc)], resolved: None }
23 c0 bc 
# 01d7a Instruction { source: "mem[t23] <- t26 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t28 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# 01d7b Instruction { source: "t28 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xc8), Register(0xbc)], resolved: None }
21 c8 bc 
# t31 <- __frame_pointer U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 01d7e Instruction { source: "t31 <- __frame_pointer U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xec)], resolved: None }
21 0c ec 
# t32 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01d81 Instruction { source: "t32 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xc0), Constant32(0x00000000=0)], resolved: None }
20 c0 00 00 00 00 
# t30 <- t31 Add t32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))"] }
# 01d87 Instruction { source: "t30 <- t31 Add t32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01d88 Instruction { source: "t30 <- t31 Add t32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_1, args: [Register(0xec), Register(0xc0), Register(0xc0)], resolved: None }
30 ec c0 c0 
# 01d8c Instruction { source: "t30 <- t31 Add t32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t29 <- t30 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))"] }
# optimized away noop copy Instruction { source: "t29 <- t30 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# t33 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t33 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xc8), Register(0xc8)], resolved: None }
# inline_mul32_64_add_U64_0_a <- t28 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_a <- t28 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_mul32_64_add_U64_0_b <- t29 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_b <- t29 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_mul32_64_add_U64_0_c <- t33 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# 01d8d Instruction { source: "inline_mul32_64_add_U64_0_c <- t33 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0xc8), Register(0xcc)], resolved: None }
21 c8 cc 
# inline_mul32_64_add_U64_0_t0 <- inline_mul32_64_add_U64_0_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }", "PtrFieldDeref(\"a\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t0 <- inline_mul32_64_add_U64_0_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"a\\\", \\\"lo\\\") }\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_t0] U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }", "PtrFieldDeref(\"a\", \"lo\")"] }
# 01d90 Instruction { source: "inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_t0] U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"a\\\", \\\"lo\\\") }\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0xbc), Register(0xd0)], resolved: None }
22 bc d0 
# inline_mul32_64_add_U64_0_t2 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xcc)], resolved: None }
# inline_mul32_64_add_U64_0_t3 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01d93 Instruction { source: "inline_mul32_64_add_U64_0_t3 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xd4), Constant32(0x00000004=4)], resolved: None }
20 d4 04 00 00 00 
# inline_mul32_64_add_U64_0_t1 <- inline_mul32_64_add_U64_0_t2 Add inline_mul32_64_add_U64_0_t3
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 01d99 Instruction { source: "inline_mul32_64_add_U64_0_t1 <- inline_mul32_64_add_U64_0_t2 Add inline_mul32_64_add_U64_0_t3\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01d9a Instruction { source: "inline_mul32_64_add_U64_0_t1 <- inline_mul32_64_add_U64_0_t2 Add inline_mul32_64_add_U64_0_t3\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xcc), Register(0xd4), Register(0xd4)], resolved: None }
30 cc d4 d4 
# 01d9e Instruction { source: "inline_mul32_64_add_U64_0_t1 <- inline_mul32_64_add_U64_0_t2 Add inline_mul32_64_add_U64_0_t3\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_0_t7 <- inline_mul32_64_add_U64_0_a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t7 <- inline_mul32_64_add_U64_0_a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_mul32_64_add_U64_0_t8 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01d9f Instruction { source: "inline_mul32_64_add_U64_0_t8 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xd8), Constant32(0x00000004=4)], resolved: None }
20 d8 04 00 00 00 
# inline_mul32_64_add_U64_0_t6 <- inline_mul32_64_add_U64_0_t7 Add inline_mul32_64_add_U64_0_t8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))"] }
# 01da5 Instruction { source: "inline_mul32_64_add_U64_0_t6 <- inline_mul32_64_add_U64_0_t7 Add inline_mul32_64_add_U64_0_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01da6 Instruction { source: "inline_mul32_64_add_U64_0_t6 <- inline_mul32_64_add_U64_0_t7 Add inline_mul32_64_add_U64_0_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xbc), Register(0xd8), Register(0xd8)], resolved: None }
30 bc d8 d8 
# 01daa Instruction { source: "inline_mul32_64_add_U64_0_t6 <- inline_mul32_64_add_U64_0_t7 Add inline_mul32_64_add_U64_0_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_0_t5 <- mem[inline_mul32_64_add_U64_0_t6] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")"] }
# 01dab Instruction { source: "inline_mul32_64_add_U64_0_t5 <- mem[inline_mul32_64_add_U64_0_t6] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0xd8), Register(0xdc)], resolved: None }
22 d8 dc 
# inline_mul32_64_add_U64_0_t11 <- inline_mul32_64_add_U64_0_b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t11 <- inline_mul32_64_add_U64_0_b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_mul32_64_add_U64_0_t12 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01dae Instruction { source: "inline_mul32_64_add_U64_0_t12 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xd8), Constant32(0x00000004=4)], resolved: None }
20 d8 04 00 00 00 
# inline_mul32_64_add_U64_0_t10 <- inline_mul32_64_add_U64_0_t11 Add inline_mul32_64_add_U64_0_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))"] }
# 01db4 Instruction { source: "inline_mul32_64_add_U64_0_t10 <- inline_mul32_64_add_U64_0_t11 Add inline_mul32_64_add_U64_0_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01db5 Instruction { source: "inline_mul32_64_add_U64_0_t10 <- inline_mul32_64_add_U64_0_t11 Add inline_mul32_64_add_U64_0_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xc0), Register(0xd8), Register(0xd8)], resolved: None }
30 c0 d8 d8 
# 01db9 Instruction { source: "inline_mul32_64_add_U64_0_t10 <- inline_mul32_64_add_U64_0_t11 Add inline_mul32_64_add_U64_0_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_0_t9 <- mem[inline_mul32_64_add_U64_0_t10] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")"] }
# 01dba Instruction { source: "inline_mul32_64_add_U64_0_t9 <- mem[inline_mul32_64_add_U64_0_t10] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0xd8), Register(0xd8)], resolved: None }
22 d8 d8 
# inline_mul32_64_add_U64_0_t4 <- inline_mul32_64_add_U64_0_t5 Add inline_mul32_64_add_U64_0_t9
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))"] }
# 01dbd Instruction { source: "inline_mul32_64_add_U64_0_t4 <- inline_mul32_64_add_U64_0_t5 Add inline_mul32_64_add_U64_0_t9\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01dbe Instruction { source: "inline_mul32_64_add_U64_0_t4 <- inline_mul32_64_add_U64_0_t5 Add inline_mul32_64_add_U64_0_t9\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xdc), Register(0xd8), Register(0xd8)], resolved: None }
30 dc d8 d8 
# 01dc2 Instruction { source: "inline_mul32_64_add_U64_0_t4 <- inline_mul32_64_add_U64_0_t5 Add inline_mul32_64_add_U64_0_t9\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_0_t1] <- inline_mul32_64_add_U64_0_t4 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }"] }
# 01dc3 Instruction { source: "mem[inline_mul32_64_add_U64_0_t1] <- inline_mul32_64_add_U64_0_t4 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\"] }", opcode: Store32_1, args: [Register(0xd8), Register(0xd4)], resolved: None }
23 d8 d4 
# 01dc6 Instruction { source: "mem[inline_mul32_64_add_U64_0_t1] <- inline_mul32_64_add_U64_0_t4 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_mul32_64_add_U64_0_t13 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t13 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xcc)], resolved: None }
# inline_mul32_64_add_U64_0_t16 <- inline_mul32_64_add_U64_0_a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"a\", \"lo\")", "PtrFieldDeref(\"a\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t16 <- inline_mul32_64_add_U64_0_a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_mul32_64_add_U64_0_t15 <- mem[inline_mul32_64_add_U64_0_t16] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"a\", \"lo\")", "PtrFieldDeref(\"a\", \"lo\")"] }
# 01dc7 Instruction { source: "inline_mul32_64_add_U64_0_t15 <- mem[inline_mul32_64_add_U64_0_t16] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0xbc), Register(0xbc)], resolved: None }
22 bc bc 
# inline_mul32_64_add_U64_0_t18 <- inline_mul32_64_add_U64_0_b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"b\", \"lo\")", "PtrFieldDeref(\"b\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t18 <- inline_mul32_64_add_U64_0_b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_mul32_64_add_U64_0_t17 <- mem[inline_mul32_64_add_U64_0_t18] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"b\", \"lo\")", "PtrFieldDeref(\"b\", \"lo\")"] }
# 01dca Instruction { source: "inline_mul32_64_add_U64_0_t17 <- mem[inline_mul32_64_add_U64_0_t18] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0xc0), Register(0xc0)], resolved: None }
22 c0 c0 
# inline_mul32_64_add_U64_0_t14 <- inline_mul32_64_add_U64_0_t15 Add inline_mul32_64_add_U64_0_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))"] }
# 01dcd Instruction { source: "inline_mul32_64_add_U64_0_t14 <- inline_mul32_64_add_U64_0_t15 Add inline_mul32_64_add_U64_0_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01dce Instruction { source: "inline_mul32_64_add_U64_0_t14 <- inline_mul32_64_add_U64_0_t15 Add inline_mul32_64_add_U64_0_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xbc), Register(0xc0), Register(0xbc)], resolved: None }
30 bc c0 bc 
# 01dd2 Instruction { source: "inline_mul32_64_add_U64_0_t14 <- inline_mul32_64_add_U64_0_t15 Add inline_mul32_64_add_U64_0_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_0_t13] <- inline_mul32_64_add_U64_0_t14 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }"] }
# 01dd3 Instruction { source: "mem[inline_mul32_64_add_U64_0_t13] <- inline_mul32_64_add_U64_0_t14 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\"] }", opcode: Store32_1, args: [Register(0xbc), Register(0xcc)], resolved: None }
23 bc cc 
# 01dd6 Instruction { source: "mem[inline_mul32_64_add_U64_0_t13] <- inline_mul32_64_add_U64_0_t14 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_mul32_64_add_U64_0_t20 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "PtrFieldDeref(\"c\", \"lo\")", "PtrFieldDeref(\"c\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 01dd7 Instruction { source: "inline_mul32_64_add_U64_0_t20 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xbc)], resolved: None }
21 cc bc 
# inline_mul32_64_add_U64_0_t19 <- mem[inline_mul32_64_add_U64_0_t20] U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "PtrFieldDeref(\"c\", \"lo\")", "PtrFieldDeref(\"c\", \"lo\")"] }
# 01dda Instruction { source: "inline_mul32_64_add_U64_0_t19 <- mem[inline_mul32_64_add_U64_0_t20] U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0xbc), Register(0xbc)], resolved: None }
22 bc bc 
# inline_mul32_64_add_U64_0_t21 <- inline_mul32_64_add_U64_0_lo U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 01ddd Instruction { source: "inline_mul32_64_add_U64_0_t21 <- inline_mul32_64_add_U64_0_lo U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0xd0), Register(0xc0)], resolved: None }
21 d0 c0 
# if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }"] }
# 01de0 Instruction { source: "if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8, args: [Register(0xc3), Register(0xbf)], resolved: None }
15 c3 bf 
# 01de3 Instruction { source: "if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xc2), Register(0xbe)], resolved: None }
16 c2 be 
# 01de6 Instruction { source: "if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xc1), Register(0xbd)], resolved: None }
16 c1 bd 
# 01de9 Instruction { source: "if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xc0), Register(0xbc)], resolved: None }
16 c0 bc 
# 01dec Instruction { source: "if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: JcImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_else_0_2)], resolved: None }
71 25 1e 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_0_add_U64_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }"] }
# inline_mul32_64_add_U64_0_add_U64_if_true_0_1
# inline_mul32_64_add_U64_0_t23 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 01df0 Instruction { source: "inline_mul32_64_add_U64_0_t23 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xbc)], resolved: None }
21 cc bc 
# inline_mul32_64_add_U64_0_t24 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01df3 Instruction { source: "inline_mul32_64_add_U64_0_t24 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xc0), Constant32(0x00000004=4)], resolved: None }
20 c0 04 00 00 00 
# inline_mul32_64_add_U64_0_t22 <- inline_mul32_64_add_U64_0_t23 Add inline_mul32_64_add_U64_0_t24
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 01df9 Instruction { source: "inline_mul32_64_add_U64_0_t22 <- inline_mul32_64_add_U64_0_t23 Add inline_mul32_64_add_U64_0_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01dfa Instruction { source: "inline_mul32_64_add_U64_0_t22 <- inline_mul32_64_add_U64_0_t23 Add inline_mul32_64_add_U64_0_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xbc), Register(0xc0), Register(0xbc)], resolved: None }
30 bc c0 bc 
# 01dfe Instruction { source: "inline_mul32_64_add_U64_0_t22 <- inline_mul32_64_add_U64_0_t23 Add inline_mul32_64_add_U64_0_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_0_t28 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 01dff Instruction { source: "inline_mul32_64_add_U64_0_t28 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xc0)], resolved: None }
21 cc c0 
# inline_mul32_64_add_U64_0_t29 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01e02 Instruction { source: "inline_mul32_64_add_U64_0_t29 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xcc), Constant32(0x00000004=4)], resolved: None }
20 cc 04 00 00 00 
# inline_mul32_64_add_U64_0_t27 <- inline_mul32_64_add_U64_0_t28 Add inline_mul32_64_add_U64_0_t29
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 01e08 Instruction { source: "inline_mul32_64_add_U64_0_t27 <- inline_mul32_64_add_U64_0_t28 Add inline_mul32_64_add_U64_0_t29\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01e09 Instruction { source: "inline_mul32_64_add_U64_0_t27 <- inline_mul32_64_add_U64_0_t28 Add inline_mul32_64_add_U64_0_t29\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xc0), Register(0xcc), Register(0xc0)], resolved: None }
30 c0 cc c0 
# 01e0d Instruction { source: "inline_mul32_64_add_U64_0_t27 <- inline_mul32_64_add_U64_0_t28 Add inline_mul32_64_add_U64_0_t29\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_0_t26 <- mem[inline_mul32_64_add_U64_0_t27] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")"] }
# 01e0e Instruction { source: "inline_mul32_64_add_U64_0_t26 <- mem[inline_mul32_64_add_U64_0_t27] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0xc0), Register(0xc0)], resolved: None }
22 c0 c0 
# inline_mul32_64_add_U64_0_t30 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01e11 Instruction { source: "inline_mul32_64_add_U64_0_t30 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0xcc), Constant32(0x00000001=1)], resolved: None }
20 cc 01 00 00 00 
# inline_mul32_64_add_U64_0_t25 <- inline_mul32_64_add_U64_0_t26 Add inline_mul32_64_add_U64_0_t30
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))"] }
# 01e17 Instruction { source: "inline_mul32_64_add_U64_0_t25 <- inline_mul32_64_add_U64_0_t26 Add inline_mul32_64_add_U64_0_t30\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01e18 Instruction { source: "inline_mul32_64_add_U64_0_t25 <- inline_mul32_64_add_U64_0_t26 Add inline_mul32_64_add_U64_0_t30\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0xc0), Register(0xcc), Register(0xc0)], resolved: None }
30 c0 cc c0 
# 01e1c Instruction { source: "inline_mul32_64_add_U64_0_t25 <- inline_mul32_64_add_U64_0_t26 Add inline_mul32_64_add_U64_0_t30\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_0_t22] <- inline_mul32_64_add_U64_0_t25 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }"] }
# 01e1d Instruction { source: "mem[inline_mul32_64_add_U64_0_t22] <- inline_mul32_64_add_U64_0_t25 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\"] }", opcode: Store32_1, args: [Register(0xc0), Register(0xbc)], resolved: None }
23 c0 bc 
# 01e20 Instruction { source: "mem[inline_mul32_64_add_U64_0_t22] <- inline_mul32_64_add_U64_0_t25 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_mul32_64_add_U64_0_add_U64_if_end_0
# 	SourceContext { contexts: [] }
# 01e21 Instruction { source: "goto inline_mul32_64_add_U64_0_add_U64_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_end_0)], resolved: None }
70 25 1e 00 
# :inline_mul32_64_add_U64_0_add_U64_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_0_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_0_add_U64_if_end_0
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_0_add_U64_if_end_0
# goto inline_mul32_64_add_U64_0_function_end_add_U64
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_add_U64_0_function_end_add_U64\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_function_end_add_U64)], resolved: None }
# :inline_mul32_64_add_U64_0_function_end_add_U64
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_0_function_end_add_U64
# t34 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t34 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# t35 <- b_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Ident(\"b_hi\")", "Ident(\"b_hi\")"] }
# 01e25 Instruction { source: "t35 <- b_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"b_hi\\\")\", \"Ident(\\\"b_hi\\\")\"] }", opcode: Copy32, args: [Register(0xc4), Register(0xbc)], resolved: None }
21 c4 bc 
# inline_mul32_64_mul16_32_13_a <- t34 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_a <- t34 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_mul32_64_mul16_32_13_b <- t35 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_b <- t35 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_mul32_64_mul16_32_13_t0 <- inline_mul32_64_mul16_32_13_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t0 <- inline_mul32_64_mul16_32_13_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_mul32_64_mul16_32_13_t1 <- inline_mul32_64_mul16_32_13_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t1 <- inline_mul32_64_mul16_32_13_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t0 Multiply inline_mul32_64_mul16_32_13_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 01e28 Instruction { source: "inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t0 Multiply inline_mul32_64_mul16_32_13_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0xb8), Register(0xbc), Register(0xc0)], resolved: None }
11 b8 bc c0 
# 01e2c Instruction { source: "inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t0 Multiply inline_mul32_64_mul16_32_13_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xc2), Constant8(0x00=0)], resolved: None }
04 c2 00 
# 01e2f Instruction { source: "inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t0 Multiply inline_mul32_64_mul16_32_13_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xc3), Constant8(0x00=0)], resolved: None }
04 c3 00 
# inline_mul32_64_mul16_32_13_t3 <- inline_mul32_64_mul16_32_13_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01e32 Instruction { source: "inline_mul32_64_mul16_32_13_t3 <- inline_mul32_64_mul16_32_13_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xe7)], resolved: None }
0b b9 e7 
# inline_mul32_64_mul16_32_13_t2 U32 <- inline_mul32_64_mul16_32_13_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 01e35 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_13_t2 U32 <- inline_mul32_64_mul16_32_13_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xc4), Constant32(0x00000000=0)], resolved: None }
20 c4 00 00 00 00 
# 01e3b Instruction { source: "inline_mul32_64_mul16_32_13_t2 U32 <- inline_mul32_64_mul16_32_13_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe7), Register(0xc4)], resolved: None }
0b e7 c4 
# inline_mul32_64_mul16_32_13_t5 <- inline_mul32_64_mul16_32_13_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 01e3e Instruction { source: "inline_mul32_64_mul16_32_13_t5 <- inline_mul32_64_mul16_32_13_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xe5)], resolved: None }
0b bd e5 
# inline_mul32_64_mul16_32_13_t4 U32 <- inline_mul32_64_mul16_32_13_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 01e41 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_13_t4 U32 <- inline_mul32_64_mul16_32_13_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xcc), Constant32(0x00000000=0)], resolved: None }
20 cc 00 00 00 00 
# 01e47 Instruction { source: "inline_mul32_64_mul16_32_13_t4 U32 <- inline_mul32_64_mul16_32_13_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe5), Register(0xcc)], resolved: None }
0b e5 cc 
# inline_mul32_64_mul16_32_13_f <- inline_mul32_64_mul16_32_13_t2 Multiply inline_mul32_64_mul16_32_13_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 01e4a Instruction { source: "inline_mul32_64_mul16_32_13_f <- inline_mul32_64_mul16_32_13_t2 Multiply inline_mul32_64_mul16_32_13_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0xc4), Register(0xcc), Register(0xc4)], resolved: None }
11 c4 cc c4 
# 01e4e Instruction { source: "inline_mul32_64_mul16_32_13_f <- inline_mul32_64_mul16_32_13_t2 Multiply inline_mul32_64_mul16_32_13_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xc6), Constant8(0x00=0)], resolved: None }
04 c6 00 
# 01e51 Instruction { source: "inline_mul32_64_mul16_32_13_f <- inline_mul32_64_mul16_32_13_t2 Multiply inline_mul32_64_mul16_32_13_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xc7), Constant8(0x00=0)], resolved: None }
04 c7 00 
# inline_mul32_64_mul16_32_13_t6 <- inline_mul32_64_mul16_32_13_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 01e54 Instruction { source: "inline_mul32_64_mul16_32_13_t6 <- inline_mul32_64_mul16_32_13_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xc5), Register(0xe8)], resolved: None }
0b c5 e8 
# inline_mul32_64_mul16_32_13_f[0x03..0x04] <- inline_mul32_64_mul16_32_13_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 01e57 Instruction { source: "inline_mul32_64_mul16_32_13_f[0x03..0x04] <- inline_mul32_64_mul16_32_13_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe8), Register(0xc7)], resolved: None }
0b e8 c7 
# inline_mul32_64_mul16_32_13_t7 <- inline_mul32_64_mul16_32_13_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 01e5a Instruction { source: "inline_mul32_64_mul16_32_13_t7 <- inline_mul32_64_mul16_32_13_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xc4), Register(0xe8)], resolved: None }
0b c4 e8 
# inline_mul32_64_mul16_32_13_f[0x02..0x03] <- inline_mul32_64_mul16_32_13_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 01e5d Instruction { source: "inline_mul32_64_mul16_32_13_f[0x02..0x03] <- inline_mul32_64_mul16_32_13_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xe8), Register(0xc6)], resolved: None }
0b e8 c6 
# inline_mul32_64_mul16_32_13_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01e60 Instruction { source: "inline_mul32_64_mul16_32_13_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xe1), Constant8(0x00=0)], resolved: None }
04 e1 00 
# inline_mul32_64_mul16_32_13_f[0x01..0x02] <- inline_mul32_64_mul16_32_13_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 01e63 Instruction { source: "inline_mul32_64_mul16_32_13_f[0x01..0x02] <- inline_mul32_64_mul16_32_13_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xe1), Register(0xc5)], resolved: None }
0b e1 c5 
# inline_mul32_64_mul16_32_13_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01e66 Instruction { source: "inline_mul32_64_mul16_32_13_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xe1), Constant8(0x00=0)], resolved: None }
04 e1 00 
# inline_mul32_64_mul16_32_13_f[0x00..0x01] <- inline_mul32_64_mul16_32_13_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 01e69 Instruction { source: "inline_mul32_64_mul16_32_13_f[0x00..0x01] <- inline_mul32_64_mul16_32_13_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xe1), Register(0xc4)], resolved: None }
0b e1 c4 
# inline_mul32_64_mul16_32_13_t10 <- inline_mul32_64_mul16_32_13_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t10 <- inline_mul32_64_mul16_32_13_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_mul32_64_mul16_32_13_t11 <- inline_mul32_64_mul16_32_13_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t11 <- inline_mul32_64_mul16_32_13_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0xc4), Register(0xc4)], resolved: None }
# inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t10 Add inline_mul32_64_mul16_32_13_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 01e6c Instruction { source: "inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t10 Add inline_mul32_64_mul16_32_13_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01e6d Instruction { source: "inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t10 Add inline_mul32_64_mul16_32_13_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xc0), Register(0xc4), Register(0xc0)], resolved: None }
30 c0 c4 c0 
# 01e71 Instruction { source: "inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t10 Add inline_mul32_64_mul16_32_13_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_13_t12 <- inline_mul32_64_mul16_32_13_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t12 <- inline_mul32_64_mul16_32_13_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_mul32_64_mul16_32_13_t14 <- inline_mul32_64_mul16_32_13_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 01e72 Instruction { source: "inline_mul32_64_mul16_32_13_t14 <- inline_mul32_64_mul16_32_13_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xe5)], resolved: None }
0b bd e5 
# inline_mul32_64_mul16_32_13_t13 U32 <- inline_mul32_64_mul16_32_13_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 01e75 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_13_t13 U32 <- inline_mul32_64_mul16_32_13_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xc4), Constant32(0x00000000=0)], resolved: None }
20 c4 00 00 00 00 
# 01e7b Instruction { source: "inline_mul32_64_mul16_32_13_t13 U32 <- inline_mul32_64_mul16_32_13_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe5), Register(0xc4)], resolved: None }
0b e5 c4 
# inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t12 Multiply inline_mul32_64_mul16_32_13_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 01e7e Instruction { source: "inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t12 Multiply inline_mul32_64_mul16_32_13_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0xb8), Register(0xc4), Register(0xc4)], resolved: None }
11 b8 c4 c4 
# 01e82 Instruction { source: "inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t12 Multiply inline_mul32_64_mul16_32_13_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xc6), Constant8(0x00=0)], resolved: None }
04 c6 00 
# 01e85 Instruction { source: "inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t12 Multiply inline_mul32_64_mul16_32_13_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xc7), Constant8(0x00=0)], resolved: None }
04 c7 00 
# inline_mul32_64_mul16_32_13_t16 <- inline_mul32_64_mul16_32_13_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01e88 Instruction { source: "inline_mul32_64_mul16_32_13_t16 <- inline_mul32_64_mul16_32_13_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xe7)], resolved: None }
0b b9 e7 
# inline_mul32_64_mul16_32_13_t15 U32 <- inline_mul32_64_mul16_32_13_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 01e8b Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_13_t15 U32 <- inline_mul32_64_mul16_32_13_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xb8), Constant32(0x00000000=0)], resolved: None }
20 b8 00 00 00 00 
# 01e91 Instruction { source: "inline_mul32_64_mul16_32_13_t15 U32 <- inline_mul32_64_mul16_32_13_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe7), Register(0xb8)], resolved: None }
0b e7 b8 
# inline_mul32_64_mul16_32_13_t17 <- inline_mul32_64_mul16_32_13_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t17 <- inline_mul32_64_mul16_32_13_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_mul32_64_mul16_32_13_e <- inline_mul32_64_mul16_32_13_t15 Multiply inline_mul32_64_mul16_32_13_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 01e94 Instruction { source: "inline_mul32_64_mul16_32_13_e <- inline_mul32_64_mul16_32_13_t15 Multiply inline_mul32_64_mul16_32_13_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0xb8), Register(0xbc), Register(0xb8)], resolved: None }
11 b8 bc b8 
# 01e98 Instruction { source: "inline_mul32_64_mul16_32_13_e <- inline_mul32_64_mul16_32_13_t15 Multiply inline_mul32_64_mul16_32_13_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xba), Constant8(0x00=0)], resolved: None }
04 ba 00 
# 01e9b Instruction { source: "inline_mul32_64_mul16_32_13_e <- inline_mul32_64_mul16_32_13_t15 Multiply inline_mul32_64_mul16_32_13_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xbb), Constant8(0x00=0)], resolved: None }
04 bb 00 
# inline_mul32_64_mul16_32_13_t18 <- inline_mul32_64_mul16_32_13_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 01e9e Instruction { source: "inline_mul32_64_mul16_32_13_t18 <- inline_mul32_64_mul16_32_13_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xc4), Register(0xbc)], resolved: None }
21 c4 bc 
# inline_mul32_64_mul16_32_13_t19 <- inline_mul32_64_mul16_32_13_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t19 <- inline_mul32_64_mul16_32_13_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t18 Add inline_mul32_64_mul16_32_13_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 01ea1 Instruction { source: "inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t18 Add inline_mul32_64_mul16_32_13_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01ea2 Instruction { source: "inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t18 Add inline_mul32_64_mul16_32_13_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xbc), Register(0xb8), Register(0xc4)], resolved: None }
30 bc b8 c4 
# 01ea6 Instruction { source: "inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t18 Add inline_mul32_64_mul16_32_13_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_13_t20 <- inline_mul32_64_mul16_32_13_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 01ea7 Instruction { source: "inline_mul32_64_mul16_32_13_t20 <- inline_mul32_64_mul16_32_13_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xc6), Register(0xe7)], resolved: None }
0b c6 e7 
# inline_mul32_64_mul16_32_13_d[0x03..0x04] <- inline_mul32_64_mul16_32_13_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 01eaa Instruction { source: "inline_mul32_64_mul16_32_13_d[0x03..0x04] <- inline_mul32_64_mul16_32_13_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0xe7), Register(0xc7)], resolved: None }
0b e7 c7 
# inline_mul32_64_mul16_32_13_t21 <- inline_mul32_64_mul16_32_13_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 01ead Instruction { source: "inline_mul32_64_mul16_32_13_t21 <- inline_mul32_64_mul16_32_13_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xc5), Register(0xe7)], resolved: None }
0b c5 e7 
# inline_mul32_64_mul16_32_13_d[0x02..0x03] <- inline_mul32_64_mul16_32_13_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 01eb0 Instruction { source: "inline_mul32_64_mul16_32_13_d[0x02..0x03] <- inline_mul32_64_mul16_32_13_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe7), Register(0xc6)], resolved: None }
0b e7 c6 
# inline_mul32_64_mul16_32_13_t22 <- inline_mul32_64_mul16_32_13_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 01eb3 Instruction { source: "inline_mul32_64_mul16_32_13_t22 <- inline_mul32_64_mul16_32_13_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xc4), Register(0xe7)], resolved: None }
0b c4 e7 
# inline_mul32_64_mul16_32_13_d[0x01..0x02] <- inline_mul32_64_mul16_32_13_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 01eb6 Instruction { source: "inline_mul32_64_mul16_32_13_d[0x01..0x02] <- inline_mul32_64_mul16_32_13_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xe7), Register(0xc5)], resolved: None }
0b e7 c5 
# inline_mul32_64_mul16_32_13_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01eb9 Instruction { source: "inline_mul32_64_mul16_32_13_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xe7), Constant8(0x00=0)], resolved: None }
04 e7 00 
# inline_mul32_64_mul16_32_13_d[0x00..0x01] <- inline_mul32_64_mul16_32_13_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 01ebc Instruction { source: "inline_mul32_64_mul16_32_13_d[0x00..0x01] <- inline_mul32_64_mul16_32_13_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xe7), Register(0xc4)], resolved: None }
0b e7 c4 
# inline_mul32_64_mul16_32_13_t25 <- inline_mul32_64_mul16_32_13_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 01ebf Instruction { source: "inline_mul32_64_mul16_32_13_t25 <- inline_mul32_64_mul16_32_13_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xb8)], resolved: None }
21 c0 b8 
# inline_mul32_64_mul16_32_13_t26 <- inline_mul32_64_mul16_32_13_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 01ec2 Instruction { source: "inline_mul32_64_mul16_32_13_t26 <- inline_mul32_64_mul16_32_13_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xc4), Register(0xbc)], resolved: None }
21 c4 bc 
# inline_mul32_64_mul16_32_13_t24 <- inline_mul32_64_mul16_32_13_t25 Add inline_mul32_64_mul16_32_13_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 01ec5 Instruction { source: "inline_mul32_64_mul16_32_13_t24 <- inline_mul32_64_mul16_32_13_t25 Add inline_mul32_64_mul16_32_13_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01ec6 Instruction { source: "inline_mul32_64_mul16_32_13_t24 <- inline_mul32_64_mul16_32_13_t25 Add inline_mul32_64_mul16_32_13_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xb8), Register(0xbc), Register(0xb8)], resolved: None }
30 b8 bc b8 
# 01eca Instruction { source: "inline_mul32_64_mul16_32_13_t24 <- inline_mul32_64_mul16_32_13_t25 Add inline_mul32_64_mul16_32_13_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# temp <- inline_mul32_64_mul16_32_13_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# 01ecb Instruction { source: "temp <- inline_mul32_64_mul16_32_13_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xbc)], resolved: None }
21 b8 bc 
# goto inline_mul32_64_mul16_32_13_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_13_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_13_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_13_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_mul32_64_mul16_32_13_function_end_mul16_32
# t36 <- temp[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 2)), var_type: None, value: Index(\"temp\", Number(U8, 0)) }", "Index(\"temp\", Number(U8, 0))", "Index(\"temp\", Number(U8, 0))"] }
# 01ece Instruction { source: "t36 <- temp[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 2)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 0)) }\", \"Index(\\\"temp\\\", Number(U8, 0))\", \"Index(\\\"temp\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xe7)], resolved: None }
0b bc e7 
# temp_lo[0x02..0x03] <- t36 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 2)), var_type: None, value: Index(\"temp\", Number(U8, 0)) }"] }
# 01ed1 Instruction { source: "temp_lo[0x02..0x03] <- t36 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 2)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xe7), Register(0xfa)], resolved: None }
0b e7 fa 
# t37 <- temp[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 3)), var_type: None, value: Index(\"temp\", Number(U8, 1)) }", "Index(\"temp\", Number(U8, 1))", "Index(\"temp\", Number(U8, 1))"] }
# 01ed4 Instruction { source: "t37 <- temp[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 3)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 1)) }\", \"Index(\\\"temp\\\", Number(U8, 1))\", \"Index(\\\"temp\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xe7)], resolved: None }
0b bd e7 
# temp_lo[0x03..0x04] <- t37 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 3)), var_type: None, value: Index(\"temp\", Number(U8, 1)) }"] }
# 01ed7 Instruction { source: "temp_lo[0x03..0x04] <- t37 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 3)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xe7), Register(0xfb)], resolved: None }
0b e7 fb 
# t38 <- temp[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 0)), var_type: None, value: Index(\"temp\", Number(U8, 2)) }", "Index(\"temp\", Number(U8, 2))", "Index(\"temp\", Number(U8, 2))"] }
# 01eda Instruction { source: "t38 <- temp[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 2)) }\", \"Index(\\\"temp\\\", Number(U8, 2))\", \"Index(\\\"temp\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xbe), Register(0xe7)], resolved: None }
0b be e7 
# temp_hi[0x00..0x01] <- t38 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 0)), var_type: None, value: Index(\"temp\", Number(U8, 2)) }"] }
# 01edd Instruction { source: "temp_hi[0x00..0x01] <- t38 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0xe7), Register(0xf4)], resolved: None }
0b e7 f4 
# t39 <- temp[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 1)), var_type: None, value: Index(\"temp\", Number(U8, 3)) }", "Index(\"temp\", Number(U8, 3))", "Index(\"temp\", Number(U8, 3))"] }
# 01ee0 Instruction { source: "t39 <- temp[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 3)) }\", \"Index(\\\"temp\\\", Number(U8, 3))\", \"Index(\\\"temp\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xbf), Register(0xe7)], resolved: None }
0b bf e7 
# temp_hi[0x01..0x02] <- t39 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 1)), var_type: None, value: Index(\"temp\", Number(U8, 3)) }"] }
# 01ee3 Instruction { source: "temp_hi[0x01..0x02] <- t39 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0xe7), Register(0xf5)], resolved: None }
0b e7 f5 
# t40 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Ident(\"__frame_pointer\")"] }
# 01ee6 Instruction { source: "t40 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xec)], resolved: None }
21 0c ec 
# t41 <- temp_lo U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }", "Ident(\"temp_lo\")", "Ident(\"temp_lo\")"] }
# 01ee9 Instruction { source: "t41 <- temp_lo U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\", \"Ident(\\\"temp_lo\\\")\", \"Ident(\\\"temp_lo\\\")\"] }", opcode: Copy32, args: [Register(0xf8), Register(0xb8)], resolved: None }
21 f8 b8 
# mem[t40] <- t41 U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }"] }
# 01eec Instruction { source: "mem[t40] <- t41 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\"] }", opcode: Store32_1, args: [Register(0xb8), Register(0xec)], resolved: None }
23 b8 ec 
# 01eef Instruction { source: "mem[t40] <- t41 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t43 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 01ef0 Instruction { source: "t43 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xec)], resolved: None }
21 0c ec 
# t44 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01ef3 Instruction { source: "t44 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xb8), Constant32(0x00000004=4)], resolved: None }
20 b8 04 00 00 00 
# t42 <- t43 Add t44
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))"] }
# 01ef9 Instruction { source: "t42 <- t43 Add t44\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01efa Instruction { source: "t42 <- t43 Add t44\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xec), Register(0xb8), Register(0xb8)], resolved: None }
30 ec b8 b8 
# 01efe Instruction { source: "t42 <- t43 Add t44\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t45 <- temp_hi U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Ident(\"temp_hi\")", "Ident(\"temp_hi\")"] }
# 01eff Instruction { source: "t45 <- temp_hi U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Ident(\\\"temp_hi\\\")\", \"Ident(\\\"temp_hi\\\")\"] }", opcode: Copy32, args: [Register(0xf4), Register(0xbc)], resolved: None }
21 f4 bc 
# mem[t42] <- t45 U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }"] }
# 01f02 Instruction { source: "mem[t42] <- t45 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\"] }", opcode: Store32_1, args: [Register(0xbc), Register(0xb8)], resolved: None }
23 bc b8 
# 01f05 Instruction { source: "mem[t42] <- t45 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t47 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# 01f06 Instruction { source: "t47 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xc8), Register(0xb8)], resolved: None }
21 c8 b8 
# t50 <- __frame_pointer U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 01f09 Instruction { source: "t50 <- __frame_pointer U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xec)], resolved: None }
21 0c ec 
# t51 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01f0c Instruction { source: "t51 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xbc), Constant32(0x00000000=0)], resolved: None }
20 bc 00 00 00 00 
# t49 <- t50 Add t51
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))"] }
# 01f12 Instruction { source: "t49 <- t50 Add t51\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01f13 Instruction { source: "t49 <- t50 Add t51\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_1, args: [Register(0xec), Register(0xbc), Register(0xbc)], resolved: None }
30 ec bc bc 
# 01f17 Instruction { source: "t49 <- t50 Add t51\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t48 <- t49 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))"] }
# optimized away noop copy Instruction { source: "t48 <- t49 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# t52 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# 01f18 Instruction { source: "t52 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xc8), Register(0xc0)], resolved: None }
21 c8 c0 
# inline_mul32_64_add_U64_1_a <- t47 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_a <- t47 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_mul32_64_add_U64_1_b <- t48 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_b <- t48 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_mul32_64_add_U64_1_c <- t52 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_c <- t52 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_mul32_64_add_U64_1_t0 <- inline_mul32_64_add_U64_1_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }", "PtrFieldDeref(\"a\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t0 <- inline_mul32_64_add_U64_1_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"a\\\", \\\"lo\\\") }\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_t0] U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }", "PtrFieldDeref(\"a\", \"lo\")"] }
# 01f1b Instruction { source: "inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_t0] U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"a\\\", \\\"lo\\\") }\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0xb8), Register(0xc4)], resolved: None }
22 b8 c4 
# inline_mul32_64_add_U64_1_t2 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_mul32_64_add_U64_1_t3 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01f1e Instruction { source: "inline_mul32_64_add_U64_1_t3 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xc8), Constant32(0x00000004=4)], resolved: None }
20 c8 04 00 00 00 
# inline_mul32_64_add_U64_1_t1 <- inline_mul32_64_add_U64_1_t2 Add inline_mul32_64_add_U64_1_t3
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 01f24 Instruction { source: "inline_mul32_64_add_U64_1_t1 <- inline_mul32_64_add_U64_1_t2 Add inline_mul32_64_add_U64_1_t3\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01f25 Instruction { source: "inline_mul32_64_add_U64_1_t1 <- inline_mul32_64_add_U64_1_t2 Add inline_mul32_64_add_U64_1_t3\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xc0), Register(0xc8), Register(0xc8)], resolved: None }
30 c0 c8 c8 
# 01f29 Instruction { source: "inline_mul32_64_add_U64_1_t1 <- inline_mul32_64_add_U64_1_t2 Add inline_mul32_64_add_U64_1_t3\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_1_t7 <- inline_mul32_64_add_U64_1_a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t7 <- inline_mul32_64_add_U64_1_a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_mul32_64_add_U64_1_t8 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01f2a Instruction { source: "inline_mul32_64_add_U64_1_t8 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xcc), Constant32(0x00000004=4)], resolved: None }
20 cc 04 00 00 00 
# inline_mul32_64_add_U64_1_t6 <- inline_mul32_64_add_U64_1_t7 Add inline_mul32_64_add_U64_1_t8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))"] }
# 01f30 Instruction { source: "inline_mul32_64_add_U64_1_t6 <- inline_mul32_64_add_U64_1_t7 Add inline_mul32_64_add_U64_1_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01f31 Instruction { source: "inline_mul32_64_add_U64_1_t6 <- inline_mul32_64_add_U64_1_t7 Add inline_mul32_64_add_U64_1_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xb8), Register(0xcc), Register(0xcc)], resolved: None }
30 b8 cc cc 
# 01f35 Instruction { source: "inline_mul32_64_add_U64_1_t6 <- inline_mul32_64_add_U64_1_t7 Add inline_mul32_64_add_U64_1_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_1_t5 <- mem[inline_mul32_64_add_U64_1_t6] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")"] }
# 01f36 Instruction { source: "inline_mul32_64_add_U64_1_t5 <- mem[inline_mul32_64_add_U64_1_t6] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0xcc), Register(0xd0)], resolved: None }
22 cc d0 
# inline_mul32_64_add_U64_1_t11 <- inline_mul32_64_add_U64_1_b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t11 <- inline_mul32_64_add_U64_1_b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_mul32_64_add_U64_1_t12 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01f39 Instruction { source: "inline_mul32_64_add_U64_1_t12 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xcc), Constant32(0x00000004=4)], resolved: None }
20 cc 04 00 00 00 
# inline_mul32_64_add_U64_1_t10 <- inline_mul32_64_add_U64_1_t11 Add inline_mul32_64_add_U64_1_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))"] }
# 01f3f Instruction { source: "inline_mul32_64_add_U64_1_t10 <- inline_mul32_64_add_U64_1_t11 Add inline_mul32_64_add_U64_1_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01f40 Instruction { source: "inline_mul32_64_add_U64_1_t10 <- inline_mul32_64_add_U64_1_t11 Add inline_mul32_64_add_U64_1_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xbc), Register(0xcc), Register(0xcc)], resolved: None }
30 bc cc cc 
# 01f44 Instruction { source: "inline_mul32_64_add_U64_1_t10 <- inline_mul32_64_add_U64_1_t11 Add inline_mul32_64_add_U64_1_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_1_t9 <- mem[inline_mul32_64_add_U64_1_t10] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")"] }
# 01f45 Instruction { source: "inline_mul32_64_add_U64_1_t9 <- mem[inline_mul32_64_add_U64_1_t10] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0xcc), Register(0xcc)], resolved: None }
22 cc cc 
# inline_mul32_64_add_U64_1_t4 <- inline_mul32_64_add_U64_1_t5 Add inline_mul32_64_add_U64_1_t9
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))"] }
# 01f48 Instruction { source: "inline_mul32_64_add_U64_1_t4 <- inline_mul32_64_add_U64_1_t5 Add inline_mul32_64_add_U64_1_t9\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01f49 Instruction { source: "inline_mul32_64_add_U64_1_t4 <- inline_mul32_64_add_U64_1_t5 Add inline_mul32_64_add_U64_1_t9\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xd0), Register(0xcc), Register(0xcc)], resolved: None }
30 d0 cc cc 
# 01f4d Instruction { source: "inline_mul32_64_add_U64_1_t4 <- inline_mul32_64_add_U64_1_t5 Add inline_mul32_64_add_U64_1_t9\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_1_t1] <- inline_mul32_64_add_U64_1_t4 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }"] }
# 01f4e Instruction { source: "mem[inline_mul32_64_add_U64_1_t1] <- inline_mul32_64_add_U64_1_t4 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\"] }", opcode: Store32_1, args: [Register(0xcc), Register(0xc8)], resolved: None }
23 cc c8 
# 01f51 Instruction { source: "mem[inline_mul32_64_add_U64_1_t1] <- inline_mul32_64_add_U64_1_t4 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_mul32_64_add_U64_1_t13 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t13 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_mul32_64_add_U64_1_t16 <- inline_mul32_64_add_U64_1_a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"a\", \"lo\")", "PtrFieldDeref(\"a\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t16 <- inline_mul32_64_add_U64_1_a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_mul32_64_add_U64_1_t15 <- mem[inline_mul32_64_add_U64_1_t16] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"a\", \"lo\")", "PtrFieldDeref(\"a\", \"lo\")"] }
# 01f52 Instruction { source: "inline_mul32_64_add_U64_1_t15 <- mem[inline_mul32_64_add_U64_1_t16] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0xb8), Register(0xb8)], resolved: None }
22 b8 b8 
# inline_mul32_64_add_U64_1_t18 <- inline_mul32_64_add_U64_1_b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"b\", \"lo\")", "PtrFieldDeref(\"b\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t18 <- inline_mul32_64_add_U64_1_b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_mul32_64_add_U64_1_t17 <- mem[inline_mul32_64_add_U64_1_t18] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"b\", \"lo\")", "PtrFieldDeref(\"b\", \"lo\")"] }
# 01f55 Instruction { source: "inline_mul32_64_add_U64_1_t17 <- mem[inline_mul32_64_add_U64_1_t18] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0xbc), Register(0xbc)], resolved: None }
22 bc bc 
# inline_mul32_64_add_U64_1_t14 <- inline_mul32_64_add_U64_1_t15 Add inline_mul32_64_add_U64_1_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))"] }
# 01f58 Instruction { source: "inline_mul32_64_add_U64_1_t14 <- inline_mul32_64_add_U64_1_t15 Add inline_mul32_64_add_U64_1_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01f59 Instruction { source: "inline_mul32_64_add_U64_1_t14 <- inline_mul32_64_add_U64_1_t15 Add inline_mul32_64_add_U64_1_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xb8), Register(0xbc), Register(0xb8)], resolved: None }
30 b8 bc b8 
# 01f5d Instruction { source: "inline_mul32_64_add_U64_1_t14 <- inline_mul32_64_add_U64_1_t15 Add inline_mul32_64_add_U64_1_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_1_t13] <- inline_mul32_64_add_U64_1_t14 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }"] }
# 01f5e Instruction { source: "mem[inline_mul32_64_add_U64_1_t13] <- inline_mul32_64_add_U64_1_t14 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\"] }", opcode: Store32_1, args: [Register(0xb8), Register(0xc0)], resolved: None }
23 b8 c0 
# 01f61 Instruction { source: "mem[inline_mul32_64_add_U64_1_t13] <- inline_mul32_64_add_U64_1_t14 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_mul32_64_add_U64_1_t20 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "PtrFieldDeref(\"c\", \"lo\")", "PtrFieldDeref(\"c\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 01f62 Instruction { source: "inline_mul32_64_add_U64_1_t20 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xb8)], resolved: None }
21 c0 b8 
# inline_mul32_64_add_U64_1_t19 <- mem[inline_mul32_64_add_U64_1_t20] U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "PtrFieldDeref(\"c\", \"lo\")", "PtrFieldDeref(\"c\", \"lo\")"] }
# 01f65 Instruction { source: "inline_mul32_64_add_U64_1_t19 <- mem[inline_mul32_64_add_U64_1_t20] U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0xb8), Register(0xb8)], resolved: None }
22 b8 b8 
# inline_mul32_64_add_U64_1_t21 <- inline_mul32_64_add_U64_1_lo U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 01f68 Instruction { source: "inline_mul32_64_add_U64_1_t21 <- inline_mul32_64_add_U64_1_lo U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0xc4), Register(0xbc)], resolved: None }
21 c4 bc 
# if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }"] }
# 01f6b Instruction { source: "if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8, args: [Register(0xbf), Register(0xbb)], resolved: None }
15 bf bb 
# 01f6e Instruction { source: "if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xbe), Register(0xba)], resolved: None }
16 be ba 
# 01f71 Instruction { source: "if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xbd), Register(0xb9)], resolved: None }
16 bd b9 
# 01f74 Instruction { source: "if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xbc), Register(0xb8)], resolved: None }
16 bc b8 
# 01f77 Instruction { source: "if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: JcImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_else_0_2)], resolved: None }
71 b0 1f 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_1_add_U64_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }"] }
# inline_mul32_64_add_U64_1_add_U64_if_true_0_1
# inline_mul32_64_add_U64_1_t23 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 01f7b Instruction { source: "inline_mul32_64_add_U64_1_t23 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xb8)], resolved: None }
21 c0 b8 
# inline_mul32_64_add_U64_1_t24 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01f7e Instruction { source: "inline_mul32_64_add_U64_1_t24 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xbc), Constant32(0x00000004=4)], resolved: None }
20 bc 04 00 00 00 
# inline_mul32_64_add_U64_1_t22 <- inline_mul32_64_add_U64_1_t23 Add inline_mul32_64_add_U64_1_t24
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 01f84 Instruction { source: "inline_mul32_64_add_U64_1_t22 <- inline_mul32_64_add_U64_1_t23 Add inline_mul32_64_add_U64_1_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01f85 Instruction { source: "inline_mul32_64_add_U64_1_t22 <- inline_mul32_64_add_U64_1_t23 Add inline_mul32_64_add_U64_1_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xb8), Register(0xbc), Register(0xb8)], resolved: None }
30 b8 bc b8 
# 01f89 Instruction { source: "inline_mul32_64_add_U64_1_t22 <- inline_mul32_64_add_U64_1_t23 Add inline_mul32_64_add_U64_1_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_1_t28 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 01f8a Instruction { source: "inline_mul32_64_add_U64_1_t28 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xbc)], resolved: None }
21 c0 bc 
# inline_mul32_64_add_U64_1_t29 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01f8d Instruction { source: "inline_mul32_64_add_U64_1_t29 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xc0), Constant32(0x00000004=4)], resolved: None }
20 c0 04 00 00 00 
# inline_mul32_64_add_U64_1_t27 <- inline_mul32_64_add_U64_1_t28 Add inline_mul32_64_add_U64_1_t29
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 01f93 Instruction { source: "inline_mul32_64_add_U64_1_t27 <- inline_mul32_64_add_U64_1_t28 Add inline_mul32_64_add_U64_1_t29\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01f94 Instruction { source: "inline_mul32_64_add_U64_1_t27 <- inline_mul32_64_add_U64_1_t28 Add inline_mul32_64_add_U64_1_t29\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xbc), Register(0xc0), Register(0xbc)], resolved: None }
30 bc c0 bc 
# 01f98 Instruction { source: "inline_mul32_64_add_U64_1_t27 <- inline_mul32_64_add_U64_1_t28 Add inline_mul32_64_add_U64_1_t29\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_1_t26 <- mem[inline_mul32_64_add_U64_1_t27] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")"] }
# 01f99 Instruction { source: "inline_mul32_64_add_U64_1_t26 <- mem[inline_mul32_64_add_U64_1_t27] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0xbc), Register(0xbc)], resolved: None }
22 bc bc 
# inline_mul32_64_add_U64_1_t30 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01f9c Instruction { source: "inline_mul32_64_add_U64_1_t30 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0xc0), Constant32(0x00000001=1)], resolved: None }
20 c0 01 00 00 00 
# inline_mul32_64_add_U64_1_t25 <- inline_mul32_64_add_U64_1_t26 Add inline_mul32_64_add_U64_1_t30
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))"] }
# 01fa2 Instruction { source: "inline_mul32_64_add_U64_1_t25 <- inline_mul32_64_add_U64_1_t26 Add inline_mul32_64_add_U64_1_t30\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01fa3 Instruction { source: "inline_mul32_64_add_U64_1_t25 <- inline_mul32_64_add_U64_1_t26 Add inline_mul32_64_add_U64_1_t30\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0xbc), Register(0xc0), Register(0xbc)], resolved: None }
30 bc c0 bc 
# 01fa7 Instruction { source: "inline_mul32_64_add_U64_1_t25 <- inline_mul32_64_add_U64_1_t26 Add inline_mul32_64_add_U64_1_t30\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_1_t22] <- inline_mul32_64_add_U64_1_t25 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }"] }
# 01fa8 Instruction { source: "mem[inline_mul32_64_add_U64_1_t22] <- inline_mul32_64_add_U64_1_t25 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\"] }", opcode: Store32_1, args: [Register(0xbc), Register(0xb8)], resolved: None }
23 bc b8 
# 01fab Instruction { source: "mem[inline_mul32_64_add_U64_1_t22] <- inline_mul32_64_add_U64_1_t25 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_mul32_64_add_U64_1_add_U64_if_end_0
# 	SourceContext { contexts: [] }
# 01fac Instruction { source: "goto inline_mul32_64_add_U64_1_add_U64_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_end_0)], resolved: None }
70 b0 1f 00 
# :inline_mul32_64_add_U64_1_add_U64_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_1_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_1_add_U64_if_end_0
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_1_add_U64_if_end_0
# goto inline_mul32_64_add_U64_1_function_end_add_U64
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_add_U64_1_function_end_add_U64\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_function_end_add_U64)], resolved: None }
# :inline_mul32_64_add_U64_1_function_end_add_U64
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_1_function_end_add_U64
# t53 <- 0n8/0x00000008u32 
# 	SourceContext { contexts: ["Return { value: None }"] }
# 01fb0 Instruction { source: "t53 <- 0n8/0x00000008u32 \n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: LoadImm32, args: [Register(0xb8), Constant32(0x00000008=8)], resolved: None }
20 b8 08 00 00 00 
# __frame_pointer <- __frame_pointer Add t53
# 	SourceContext { contexts: ["Return { value: None }"] }
# 01fb6 Instruction { source: "__frame_pointer <- __frame_pointer Add t53\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01fb7 Instruction { source: "__frame_pointer <- __frame_pointer Add t53\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0xb8), Register(0x0c)], resolved: None }
30 0c b8 0c 
# 01fbb Instruction { source: "__frame_pointer <- __frame_pointer Add t53\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 01fbc Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 01fc2 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_mul32_64
# 	SourceContext { contexts: [] }
# function_end_mul32_64
# Unreachable
# 	SourceContext { contexts: [] }
# 01fc4 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :print_dec32
# Ret None
# Arg0=a
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([252, 253, 254, 255])
# Var b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_print_dec32_div32_by10_56_a (Arg0 a Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a (Arg0 a Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t0 (t0 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t1 (t1 Index("a", Number(U8, 0))) Reg(U8) Some([21])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t10 (t10 Index("a", Number(U8, 3))) Reg(U8) Some([21])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t11 (t11 Number(U8, 3)) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t12 (t12 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t13 (t13 Index("a", Number(U8, 0))) Reg(U8) Some([21])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t14 (t14 Number(U8, 31)) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t15 (t15 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t16 (t16 Index("a", Number(U8, 0))) Reg(U8) Some([21])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t17 (t17 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t18 (t18 Index("a", Number(U8, 1))) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t19 (t19 Number(U8, 224)) Reg(U8) Some([22])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t2 (t2 Number(U8, 3)) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t20 (t20 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t21 (t21 Index("a", Number(U8, 1))) Reg(U8) Some([21])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t22 (t22 Number(U8, 31)) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t23 (t23 Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t24 (t24 Index("a", Number(U8, 1))) Reg(U8) Some([21])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t25 (t25 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t26 (t26 Index("a", Number(U8, 2))) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t27 (t27 Number(U8, 224)) Reg(U8) Some([22])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t28 (t28 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t29 (t29 Index("a", Number(U8, 2))) Reg(U8) Some([21])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t3 (t3 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t30 (t30 Number(U8, 31)) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t31 (t31 Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t32 (t32 Index("a", Number(U8, 2))) Reg(U8) Some([21])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t33 (t33 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t34 (t34 Index("a", Number(U8, 3))) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t35 (t35 Number(U8, 224)) Reg(U8) Some([22])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t36 (t36 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t37 (t37 Index("a", Number(U8, 3))) Reg(U8) Some([21])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t38 (t38 Number(U8, 31)) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t39 (t39 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t4 (t4 Index("a", Number(U8, 1))) Reg(U8) Some([21])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t5 (t5 Number(U8, 3)) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t6 (t6 Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t7 (t7 Index("a", Number(U8, 2))) Reg(U8) Some([21])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t8 (t8 Number(U8, 3)) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t9 (t9 Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))) Reg(U8) Some([20])
# Var inline_print_dec32_div32_by10_56_prod (Local prod Struct("U64") Static(987136)) Static(987136) None
# Var inline_print_dec32_div32_by10_56_t0 (t0 Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })) Reg(U8) Some([23])
# Var inline_print_dec32_div32_by10_56_t1 (t1 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_print_dec32_div32_by10_56_t2 (t2 Number(USIZE, 3435973837)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_print_dec32_div32_by10_56_t3 (t3 AddressOf(Ident("prod"))) Reg(U32) Some([28, 29, 30, 31])
# Var inline_print_dec32_div32_by10_56_t4 (static "prod") Reg(U32) Some([28, 29, 30, 31])
# Var inline_print_dec32_div32_by10_56_t5 (t5 Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) Reg(U32) Some([16, 17, 18, 19])
# Var inline_print_dec32_div32_by10_56_t6 (t6 LocalFieldDeref("prod", "hi")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_print_dec32_div32_by10_56_t7 (t7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_print_dec32_div32_by10_56_t8 (t8 Number(USIZE, 987136)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_print_dec32_div32_by10_56_t9 (t9 Number(USIZE, 4)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_print_dec32_mul32_by10_16_a (Arg0 a Number(USIZE)) Reg(U32) Some([252, 253, 254, 255])
# Var inline_print_dec32_mul32_by10_16_b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_print_dec32_mul32_by10_16_t0 (t0 Ident("a")) Reg(U32) Some([252, 253, 254, 255])
# Var inline_print_dec32_mul32_by10_16_t1 (t1 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_print_dec32_mul32_by10_16_t2 (t2 Ident("a")) Reg(U32) Some([252, 253, 254, 255])
# Var inline_print_dec32_mul32_by10_16_t3 (t3 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_print_dec32_mul32_by10_16_t4 (t4 Ident("b")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_print_dec32_mul32_by10_16_t5 (t5 Ident("b")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_print_dec32_mul32_by10_16_t6 (t6 Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([252, 253, 254, 255])
# Var inline_print_dec32_mul32_by10_16_t7 (t7 Ident("b")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_print_dec32_mul32_by10_16_t8 (t8 Ident("a")) Reg(U32) Some([252, 253, 254, 255])
# Var inline_print_dec32_putc_43_c (Arg0 c Number(U8)) Reg(U8) Some([23])
# Var inline_print_dec32_putc_43_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([23])
# Var inline_print_dec32_putc_43_t1 (t1 Ident("c")) Reg(U8) Some([23])
# Var t0 (t0 Ident("a")) Reg(U32) Some([252, 253, 254, 255])
# Var t1 (t1 Number(USIZE, 256)) Reg(U32) Some([16, 17, 18, 19])
# Var t10 (t10 Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })) Reg(U8) Some([23])
# Var t11 (t11 Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))) Reg(U8) Some([23])
# Var t12 (t12 Index("a", Number(U8, 0))) Reg(U8) Some([23])
# Var t13 (t13 Number(U8, 48)) Reg(U8) Some([21])
# Var t2 (t2 Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })) Reg(U8) Some([23])
# Var t3 (t3 Index("a", Number(U8, 0))) Reg(U8) Some([23])
# Var t4 (t4 Ident("a")) Reg(U32) Some([252, 253, 254, 255])
# Var t5 (t5 Call(Call { function: "print_dec32", parameters: [Ident("b")] })) Reg(U8) Some([23])
# Var t6 (t6 Ident("b")) Reg(U32) Some([16, 17, 18, 19])
# Var t7 (t7 Ident("a")) Reg(U32) Some([28, 29, 30, 31])
# Var t8 (t8 Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) Reg(U32) Some([252, 253, 254, 255])
# Var t9 (t9 Ident("b")) Reg(U32) Some([252, 253, 254, 255])
# 01fc9 Instruction { source: "Save function parameter 'a' registers [0, 1, 2, 3] to locals [252, 253, 254, 255].", opcode: Copy32, args: [Register(0x00), Register(0xfc)], resolved: None }
21 00 fc 
# t0 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t0 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xfc), Register(0xfc)], resolved: None }
# t1 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 01fcc Instruction { source: "t1 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x00000100=256)], resolved: None }
20 10 00 01 00 00 
# if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }"] }
# 01fd2 Instruction { source: "if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8, args: [Register(0x13), Register(0xff)], resolved: None }
15 13 ff 
# 01fd5 Instruction { source: "if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0x12), Register(0xfe)], resolved: None }
16 12 fe 
# 01fd8 Instruction { source: "if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0x11), Register(0xfd)], resolved: None }
16 11 fd 
# 01fdb Instruction { source: "if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0x10), Register(0xfc)], resolved: None }
16 10 fc 
# 01fde Instruction { source: "if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: JcImm, args: [Label24(print_dec32_if_else_0_2)], resolved: None }
71 04 20 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: JmpImm, args: [Label24(print_dec32_if_true_0_1)], resolved: None }
# :print_dec32_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }"] }
# print_dec32_if_true_0_1
# t3 <- a[0x00..0x01] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }", "Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] })", "Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] })", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01fe2 Instruction { source: "t3 <- a[0x00..0x01] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xfc), Register(0x17)], resolved: None }
0b fc 17 
# None <= call print_dec8(t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }", "Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] })", "Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] })"] }
# 01fe5 Instruction { source: "Arg0[a]=t3 None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Copy8, args: [Register(0x17), Register(0x00)], resolved: None }
0b 17 00 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 252, 253, 254, 255}
# Registers used by callee tree: {32, 33, 34, 136}
# Registers to save: []
# 01fe8 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01fee Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c f8 1f 00 00 
# 01ff4 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: JmpImm, args: [Label24(:print_dec8)], resolved: None }
70 a9 21 00 
# 01ff8 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 01ffe Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto print_dec32_if_end_0
# 	SourceContext { contexts: [] }
# 02000 Instruction { source: "goto print_dec32_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(print_dec32_if_end_0)], resolved: None }
70 04 20 00 
# :print_dec32_if_else_0_2
# 	SourceContext { contexts: [] }
# print_dec32_if_else_0_2
# :print_dec32_if_end_0
# 	SourceContext { contexts: [] }
# print_dec32_if_end_0
# t4 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32_by10\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"div32_by10\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t4 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32_by10\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32_by10\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xfc), Register(0xfc)], resolved: None }
# inline_print_dec32_div32_by10_56_a <- t4 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32_by10\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"div32_by10\", parameters: [Ident(\"a\")] })"] }
# 02004 Instruction { source: "inline_print_dec32_div32_by10_56_a <- t4 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32_by10\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32_by10\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0xfc), Register(0x10)], resolved: None }
21 fc 10 
# inline_print_dec32_div32_by10_56_t1 <- inline_print_dec32_div32_by10_56_a U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_56_t1 <- inline_print_dec32_div32_by10_56_a U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_print_dec32_div32_by10_56_t2 <- 0xcccccccdu32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Number(USIZE, 3435973837)", "Number(USIZE, 3435973837)"] }
# 02007 Instruction { source: "inline_print_dec32_div32_by10_56_t2 <- 0xcccccccdu32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Number(USIZE, 3435973837)\", \"Number(USIZE, 3435973837)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0xcccccccd=3435973837)], resolved: None }
20 18 cd cc cc cc 
# inline_print_dec32_div32_by10_56_t4 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "AddressOf(Ident(\"prod\"))", "AddressOf(Ident(\"prod\"))"] }
# 0200d Instruction { source: "inline_print_dec32_div32_by10_56_t4 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"AddressOf(Ident(\\\"prod\\\"))\", \"AddressOf(Ident(\\\"prod\\\"))\"] }", opcode: LoadImm32, args: [Register(0x1c), Constant32(0x000f1000=987136)], resolved: None }
20 1c 00 10 0f 00 
# inline_print_dec32_div32_by10_56_t3 <- inline_print_dec32_div32_by10_56_t4 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "AddressOf(Ident(\"prod\"))", "AddressOf(Ident(\"prod\"))"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_56_t3 <- inline_print_dec32_div32_by10_56_t4 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"AddressOf(Ident(\\\"prod\\\"))\", \"AddressOf(Ident(\\\"prod\\\"))\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# None <= call mul32_64(inline_print_dec32_div32_by10_56_t1,inline_print_dec32_div32_by10_56_t2,inline_print_dec32_div32_by10_56_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })"] }
# 02013 Instruction { source: "Arg0[a]=inline_print_dec32_div32_by10_56_t1 None <= call mul32_64(inline_print_dec32_div32_by10_56_t1,inline_print_dec32_div32_by10_56_t2,inline_print_dec32_div32_by10_56_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# 02016 Instruction { source: "Arg1[b]=inline_print_dec32_div32_by10_56_t2 None <= call mul32_64(inline_print_dec32_div32_by10_56_t1,inline_print_dec32_div32_by10_56_t2,inline_print_dec32_div32_by10_56_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x04)], resolved: None }
21 18 04 
# 02019 Instruction { source: "Arg2[c]=inline_print_dec32_div32_by10_56_t3 None <= call mul32_64(inline_print_dec32_div32_by10_56_t1,inline_print_dec32_div32_by10_56_t2,inline_print_dec32_div32_by10_56_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x08)], resolved: None }
21 1c 08 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 252, 253, 254, 255}
# Registers used by callee tree: {184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248, 249, 250, 251}
# Registers to save: []
# 0201c Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02022 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 2c 20 00 00 
# 02028 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: JmpImm, args: [Label24(:mul32_64)], resolved: None }
70 ef 1a 00 
# 0202c Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# inline_print_dec32_div32_by10_56_t8 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "LocalFieldDeref(\"prod\", \"hi\")", "LocalFieldDeref(\"prod\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 987136)", "Number(USIZE, 987136)"] }
# 02032 Instruction { source: "inline_print_dec32_div32_by10_56_t8 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 987136)\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x000f1000=987136)], resolved: None }
20 10 00 10 0f 00 
# inline_print_dec32_div32_by10_56_t9 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "LocalFieldDeref(\"prod\", \"hi\")", "LocalFieldDeref(\"prod\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 02038 Instruction { source: "inline_print_dec32_div32_by10_56_t9 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000004=4)], resolved: None }
20 18 04 00 00 00 
# inline_print_dec32_div32_by10_56_t7 <- inline_print_dec32_div32_by10_56_t8 Add inline_print_dec32_div32_by10_56_t9
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "LocalFieldDeref(\"prod\", \"hi\")", "LocalFieldDeref(\"prod\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))"] }
# 0203e Instruction { source: "inline_print_dec32_div32_by10_56_t7 <- inline_print_dec32_div32_by10_56_t8 Add inline_print_dec32_div32_by10_56_t9\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0203f Instruction { source: "inline_print_dec32_div32_by10_56_t7 <- inline_print_dec32_div32_by10_56_t8 Add inline_print_dec32_div32_by10_56_t9\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x18), Register(0x10)], resolved: None }
30 10 18 10 
# 02043 Instruction { source: "inline_print_dec32_div32_by10_56_t7 <- inline_print_dec32_div32_by10_56_t8 Add inline_print_dec32_div32_by10_56_t9\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_print_dec32_div32_by10_56_t6 <- mem[inline_print_dec32_div32_by10_56_t7] U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "LocalFieldDeref(\"prod\", \"hi\")", "LocalFieldDeref(\"prod\", \"hi\")"] }
# 02044 Instruction { source: "inline_print_dec32_div32_by10_56_t6 <- mem[inline_print_dec32_div32_by10_56_t7] U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0x10), Register(0x10)], resolved: None }
22 10 10 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a <- inline_print_dec32_div32_by10_56_t6 U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a <- inline_print_dec32_div32_by10_56_t6 U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t1 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 02047 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t1 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x10), Register(0x15)], resolved: None }
0b 10 15 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t2 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))", "Number(U8, 3)", "Number(U8, 3)"] }
# 0204a Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t2 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x03=3)], resolved: None }
04 14 03 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t0 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t1 RotateRight inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t2
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))"] }
# 0204d Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t0 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t1 RotateRight inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t2\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x14), Register(0x15), Register(0x14)], resolved: None }
1e 04 14 15 14 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x00..0x01] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t0 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3)) }"] }
# 02052 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x00..0x01] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t0 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x14), Register(0x10)], resolved: None }
0b 14 10 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t4 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 02055 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t4 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x11), Register(0x15)], resolved: None }
0b 11 15 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t5 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))", "Number(U8, 3)", "Number(U8, 3)"] }
# 02058 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t5 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x03=3)], resolved: None }
04 14 03 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t3 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t4 RotateRight inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t5
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))"] }
# 0205b Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t3 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t4 RotateRight inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t5\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x14), Register(0x15), Register(0x14)], resolved: None }
1e 04 14 15 14 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x01..0x02] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3)) }"] }
# 02060 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x01..0x02] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x14), Register(0x11)], resolved: None }
0b 14 11 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t7 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 02063 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t7 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x12), Register(0x15)], resolved: None }
0b 12 15 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t8 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))", "Number(U8, 3)", "Number(U8, 3)"] }
# 02066 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t8 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x03=3)], resolved: None }
04 14 03 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t6 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t7 RotateRight inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))"] }
# 02069 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t6 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t7 RotateRight inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x14), Register(0x15), Register(0x14)], resolved: None }
1e 04 14 15 14 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x02..0x03] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3)) }"] }
# 0206e Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x02..0x03] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x14), Register(0x12)], resolved: None }
0b 14 12 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t10 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 02071 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t10 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x13), Register(0x15)], resolved: None }
0b 13 15 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t11 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))", "Number(U8, 3)", "Number(U8, 3)"] }
# 02074 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t11 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x03=3)], resolved: None }
04 14 03 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t9 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t10 RotateRight inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t11
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))"] }
# 02077 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t9 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t10 RotateRight inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t11\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x14), Register(0x15), Register(0x14)], resolved: None }
1e 04 14 15 14 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x03..0x04] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3)) }"] }
# 0207c Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x03..0x04] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x14), Register(0x13)], resolved: None }
0b 14 13 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t13 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 0207f Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t13 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x10), Register(0x15)], resolved: None }
0b 10 15 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t14 <- 0n31/0x1fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))", "Number(U8, 31)", "Number(U8, 31)"] }
# 02082 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t14 <- 0n31/0x1fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Number(U8, 31)\", \"Number(U8, 31)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x1f=31)], resolved: None }
04 14 1f 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t12 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t13 BitwiseAnd inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t14
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))"] }
# 02085 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t12 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t13 BitwiseAnd inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t14\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\"] }", opcode: And8, args: [Register(0x15), Register(0x14), Register(0x14)], resolved: None }
1b 15 14 14 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x00..0x01] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t12 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31)) }"] }
# 02089 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x00..0x01] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t12 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31)) }\"] }", opcode: Copy8, args: [Register(0x14), Register(0x10)], resolved: None }
0b 14 10 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t16 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 0208c Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t16 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x10), Register(0x15)], resolved: None }
0b 10 15 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t18 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 0208f Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t18 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x11), Register(0x14)], resolved: None }
0b 11 14 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t19 <- 0n224/0xe0u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))", "Number(U8, 224)", "Number(U8, 224)"] }
# 02092 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t19 <- 0n224/0xe0u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Number(U8, 224)\", \"Number(U8, 224)\"] }", opcode: LoadImm8, args: [Register(0x16), Constant8(0xe0=224)], resolved: None }
04 16 e0 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t17 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t18 BitwiseAnd inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t19
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))"] }
# 02095 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t17 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t18 BitwiseAnd inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t19\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\"] }", opcode: And8, args: [Register(0x14), Register(0x16), Register(0x14)], resolved: None }
1b 14 16 14 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t15 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t16 BitwiseOr inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t17
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))"] }
# 02099 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t15 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t16 BitwiseOr inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t17\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\"] }", opcode: Or8, args: [Register(0x15), Register(0x14), Register(0x14)], resolved: None }
1c 15 14 14 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x00..0x01] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t15 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }"] }
# 0209d Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x00..0x01] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\"] }", opcode: Copy8, args: [Register(0x14), Register(0x10)], resolved: None }
0b 14 10 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t21 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 020a0 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t21 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x11), Register(0x15)], resolved: None }
0b 11 15 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t22 <- 0n31/0x1fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))", "Number(U8, 31)", "Number(U8, 31)"] }
# 020a3 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t22 <- 0n31/0x1fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Number(U8, 31)\", \"Number(U8, 31)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x1f=31)], resolved: None }
04 14 1f 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t20 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t21 BitwiseAnd inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t22
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))"] }
# 020a6 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t20 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t21 BitwiseAnd inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t22\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\"] }", opcode: And8, args: [Register(0x15), Register(0x14), Register(0x14)], resolved: None }
1b 15 14 14 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x01..0x02] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31)) }"] }
# 020aa Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x01..0x02] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31)) }\"] }", opcode: Copy8, args: [Register(0x14), Register(0x11)], resolved: None }
0b 14 11 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t24 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 020ad Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t24 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x11), Register(0x15)], resolved: None }
0b 11 15 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t26 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 020b0 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t26 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x12), Register(0x14)], resolved: None }
0b 12 14 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t27 <- 0n224/0xe0u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))", "Number(U8, 224)", "Number(U8, 224)"] }
# 020b3 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t27 <- 0n224/0xe0u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Number(U8, 224)\", \"Number(U8, 224)\"] }", opcode: LoadImm8, args: [Register(0x16), Constant8(0xe0=224)], resolved: None }
04 16 e0 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t25 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t26 BitwiseAnd inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t27
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))"] }
# 020b6 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t25 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t26 BitwiseAnd inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t27\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\"] }", opcode: And8, args: [Register(0x14), Register(0x16), Register(0x14)], resolved: None }
1b 14 16 14 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t23 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t24 BitwiseOr inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t25
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))"] }
# 020ba Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t23 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t24 BitwiseOr inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t25\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\"] }", opcode: Or8, args: [Register(0x15), Register(0x14), Register(0x14)], resolved: None }
1c 15 14 14 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x01..0x02] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }"] }
# 020be Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x01..0x02] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\"] }", opcode: Copy8, args: [Register(0x14), Register(0x11)], resolved: None }
0b 14 11 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t29 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 020c1 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t29 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x12), Register(0x15)], resolved: None }
0b 12 15 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t30 <- 0n31/0x1fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))", "Number(U8, 31)", "Number(U8, 31)"] }
# 020c4 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t30 <- 0n31/0x1fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Number(U8, 31)\", \"Number(U8, 31)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x1f=31)], resolved: None }
04 14 1f 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t28 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t29 BitwiseAnd inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t30
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))"] }
# 020c7 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t28 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t29 BitwiseAnd inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t30\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\"] }", opcode: And8, args: [Register(0x15), Register(0x14), Register(0x14)], resolved: None }
1b 15 14 14 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x02..0x03] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t28 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31)) }"] }
# 020cb Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x02..0x03] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t28 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31)) }\"] }", opcode: Copy8, args: [Register(0x14), Register(0x12)], resolved: None }
0b 14 12 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t32 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 020ce Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t32 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x12), Register(0x15)], resolved: None }
0b 12 15 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t34 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 020d1 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t34 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x13), Register(0x14)], resolved: None }
0b 13 14 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t35 <- 0n224/0xe0u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))", "Number(U8, 224)", "Number(U8, 224)"] }
# 020d4 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t35 <- 0n224/0xe0u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Number(U8, 224)\", \"Number(U8, 224)\"] }", opcode: LoadImm8, args: [Register(0x16), Constant8(0xe0=224)], resolved: None }
04 16 e0 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t33 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t34 BitwiseAnd inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t35
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))"] }
# 020d7 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t33 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t34 BitwiseAnd inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t35\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\"] }", opcode: And8, args: [Register(0x14), Register(0x16), Register(0x14)], resolved: None }
1b 14 16 14 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t31 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t32 BitwiseOr inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t33
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))"] }
# 020db Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t31 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t32 BitwiseOr inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t33\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\"] }", opcode: Or8, args: [Register(0x15), Register(0x14), Register(0x14)], resolved: None }
1c 15 14 14 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x02..0x03] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t31 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }"] }
# 020df Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x02..0x03] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t31 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\"] }", opcode: Copy8, args: [Register(0x14), Register(0x12)], resolved: None }
0b 14 12 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t37 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 020e2 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t37 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x13), Register(0x15)], resolved: None }
0b 13 15 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t38 <- 0n31/0x1fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))", "Number(U8, 31)", "Number(U8, 31)"] }
# 020e5 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t38 <- 0n31/0x1fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Number(U8, 31)\", \"Number(U8, 31)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x1f=31)], resolved: None }
04 14 1f 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t36 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t37 BitwiseAnd inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t38
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))"] }
# 020e8 Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t36 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t37 BitwiseAnd inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t38\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\"] }", opcode: And8, args: [Register(0x15), Register(0x14), Register(0x14)], resolved: None }
1b 15 14 14 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x03..0x04] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t36 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31)) }"] }
# 020ec Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a[0x03..0x04] <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t36 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31)) }\"] }", opcode: Copy8, args: [Register(0x14), Register(0x13)], resolved: None }
0b 14 13 
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t39 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t39 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_print_dec32_div32_by10_56_t5 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t39 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_56_t5 <- inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_t39 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# goto inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_function_end_shiftright3
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_function_end_shiftright3\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_function_end_shiftright3)], resolved: None }
# :inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_function_end_shiftright3
# 	SourceContext { contexts: [] }
# inline_print_dec32_div32_by10_56_inline_div32_by10_shiftright3_55_function_end_shiftright3
# b <- inline_print_dec32_div32_by10_56_t5 U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }"] }
# optimized away noop copy Instruction { source: "b <- inline_print_dec32_div32_by10_56_t5 U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# goto inline_print_dec32_div32_by10_56_function_end_div32_by10
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_div32_by10_56_function_end_div32_by10\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec32_div32_by10_56_function_end_div32_by10)], resolved: None }
# :inline_print_dec32_div32_by10_56_function_end_div32_by10
# 	SourceContext { contexts: [] }
# inline_print_dec32_div32_by10_56_function_end_div32_by10
# t6 <- b U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t6 <- b U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# None <= call print_dec32(t6,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })"] }
# 020ef Instruction { source: "Arg0[a]=t6 None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 252, 253, 254, 255}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 136, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 252, 253, 254, 255]
# 020f2 Instruction { source: "Saving reg0xff before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xff)], resolved: None }
09 ff 
# 020f4 Instruction { source: "Saving reg0xfe before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xfe)], resolved: None }
09 fe 
# 020f6 Instruction { source: "Saving reg0xfd before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xfd)], resolved: None }
09 fd 
# 020f8 Instruction { source: "Saving reg0xfc before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xfc)], resolved: None }
09 fc 
# 020fa Instruction { source: "Saving reg0x1f before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x1f)], resolved: None }
09 1f 
# 020fc Instruction { source: "Saving reg0x1e before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x1e)], resolved: None }
09 1e 
# 020fe Instruction { source: "Saving reg0x1d before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x1d)], resolved: None }
09 1d 
# 02100 Instruction { source: "Saving reg0x1c before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x1c)], resolved: None }
09 1c 
# 02102 Instruction { source: "Saving reg0x1b before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x1b)], resolved: None }
09 1b 
# 02104 Instruction { source: "Saving reg0x1a before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x1a)], resolved: None }
09 1a 
# 02106 Instruction { source: "Saving reg0x19 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x19)], resolved: None }
09 19 
# 02108 Instruction { source: "Saving reg0x18 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x18)], resolved: None }
09 18 
# 0210a Instruction { source: "Saving reg0x17 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x17)], resolved: None }
09 17 
# 0210c Instruction { source: "Saving reg0x16 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x16)], resolved: None }
09 16 
# 0210e Instruction { source: "Saving reg0x15 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x15)], resolved: None }
09 15 
# 02110 Instruction { source: "Saving reg0x14 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x14)], resolved: None }
09 14 
# 02112 Instruction { source: "Saving reg0x13 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x13)], resolved: None }
09 13 
# 02114 Instruction { source: "Saving reg0x12 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x12)], resolved: None }
09 12 
# 02116 Instruction { source: "Saving reg0x11 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x11)], resolved: None }
09 11 
# 02118 Instruction { source: "Saving reg0x10 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x10)], resolved: None }
09 10 
# 0211a Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02120 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 2a 21 00 00 
# 02126 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 c9 1f 00 
# 0212a Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 02130 Instruction { source: "Restoring reg0x10 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x10)], resolved: None }
0a 10 
# 02132 Instruction { source: "Restoring reg0x11 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x11)], resolved: None }
0a 11 
# 02134 Instruction { source: "Restoring reg0x12 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x12)], resolved: None }
0a 12 
# 02136 Instruction { source: "Restoring reg0x13 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x13)], resolved: None }
0a 13 
# 02138 Instruction { source: "Restoring reg0x14 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x14)], resolved: None }
0a 14 
# 0213a Instruction { source: "Restoring reg0x15 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x15)], resolved: None }
0a 15 
# 0213c Instruction { source: "Restoring reg0x16 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x16)], resolved: None }
0a 16 
# 0213e Instruction { source: "Restoring reg0x17 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x17)], resolved: None }
0a 17 
# 02140 Instruction { source: "Restoring reg0x18 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x18)], resolved: None }
0a 18 
# 02142 Instruction { source: "Restoring reg0x19 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x19)], resolved: None }
0a 19 
# 02144 Instruction { source: "Restoring reg0x1a after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x1a)], resolved: None }
0a 1a 
# 02146 Instruction { source: "Restoring reg0x1b after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x1b)], resolved: None }
0a 1b 
# 02148 Instruction { source: "Restoring reg0x1c after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x1c)], resolved: None }
0a 1c 
# 0214a Instruction { source: "Restoring reg0x1d after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x1d)], resolved: None }
0a 1d 
# 0214c Instruction { source: "Restoring reg0x1e after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x1e)], resolved: None }
0a 1e 
# 0214e Instruction { source: "Restoring reg0x1f after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x1f)], resolved: None }
0a 1f 
# 02150 Instruction { source: "Restoring reg0xfc after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xfc)], resolved: None }
0a fc 
# 02152 Instruction { source: "Restoring reg0xfd after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xfd)], resolved: None }
0a fd 
# 02154 Instruction { source: "Restoring reg0xfe after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xfe)], resolved: None }
0a fe 
# 02156 Instruction { source: "Restoring reg0xff after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xff)], resolved: None }
0a ff 
# t7 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }", "Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))", "Ident(\"a\")", "Ident(\"a\")"] }
# 02158 Instruction { source: "t7 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xfc), Register(0x1c)], resolved: None }
21 fc 1c 
# t9 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }", "Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))", "Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# 0215b Instruction { source: "t9 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0xfc)], resolved: None }
21 10 fc 
# inline_print_dec32_mul32_by10_16_a <- t9 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }", "Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))", "Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_16_a <- t9 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0xfc), Register(0xfc)], resolved: None }
# inline_print_dec32_mul32_by10_16_t0 <- inline_print_dec32_mul32_by10_16_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_16_t0 <- inline_print_dec32_mul32_by10_16_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xfc), Register(0xfc)], resolved: None }
# inline_print_dec32_mul32_by10_16_t1 <- inline_print_dec32_mul32_by10_16_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# 0215e Instruction { source: "inline_print_dec32_mul32_by10_16_t1 <- inline_print_dec32_mul32_by10_16_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xfc), Register(0x10)], resolved: None }
21 fc 10 
# inline_print_dec32_mul32_by10_16_a <- inline_print_dec32_mul32_by10_16_t0 Add inline_print_dec32_mul32_by10_16_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))"] }
# 02161 Instruction { source: "inline_print_dec32_mul32_by10_16_a <- inline_print_dec32_mul32_by10_16_t0 Add inline_print_dec32_mul32_by10_16_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02162 Instruction { source: "inline_print_dec32_mul32_by10_16_a <- inline_print_dec32_mul32_by10_16_t0 Add inline_print_dec32_mul32_by10_16_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xfc), Register(0x10), Register(0xfc)], resolved: None }
30 fc 10 fc 
# 02166 Instruction { source: "inline_print_dec32_mul32_by10_16_a <- inline_print_dec32_mul32_by10_16_t0 Add inline_print_dec32_mul32_by10_16_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_print_dec32_mul32_by10_16_t2 <- inline_print_dec32_mul32_by10_16_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_16_t2 <- inline_print_dec32_mul32_by10_16_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xfc), Register(0xfc)], resolved: None }
# inline_print_dec32_mul32_by10_16_t3 <- inline_print_dec32_mul32_by10_16_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# 02167 Instruction { source: "inline_print_dec32_mul32_by10_16_t3 <- inline_print_dec32_mul32_by10_16_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xfc), Register(0x10)], resolved: None }
21 fc 10 
# inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t2 Add inline_print_dec32_mul32_by10_16_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))"] }
# 0216a Instruction { source: "inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t2 Add inline_print_dec32_mul32_by10_16_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0216b Instruction { source: "inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t2 Add inline_print_dec32_mul32_by10_16_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xfc), Register(0x10), Register(0x10)], resolved: None }
30 fc 10 10 
# 0216f Instruction { source: "inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t2 Add inline_print_dec32_mul32_by10_16_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_print_dec32_mul32_by10_16_t4 <- inline_print_dec32_mul32_by10_16_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_16_t4 <- inline_print_dec32_mul32_by10_16_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_print_dec32_mul32_by10_16_t5 <- inline_print_dec32_mul32_by10_16_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# 02170 Instruction { source: "inline_print_dec32_mul32_by10_16_t5 <- inline_print_dec32_mul32_by10_16_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x18)], resolved: None }
21 10 18 
# inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t4 Add inline_print_dec32_mul32_by10_16_t5
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))"] }
# 02173 Instruction { source: "inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t4 Add inline_print_dec32_mul32_by10_16_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02174 Instruction { source: "inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t4 Add inline_print_dec32_mul32_by10_16_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x18), Register(0x10)], resolved: None }
30 10 18 10 
# 02178 Instruction { source: "inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t4 Add inline_print_dec32_mul32_by10_16_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_print_dec32_mul32_by10_16_t7 <- inline_print_dec32_mul32_by10_16_b U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_16_t7 <- inline_print_dec32_mul32_by10_16_b U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_print_dec32_mul32_by10_16_t8 <- inline_print_dec32_mul32_by10_16_a U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_16_t8 <- inline_print_dec32_mul32_by10_16_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xfc), Register(0xfc)], resolved: None }
# inline_print_dec32_mul32_by10_16_t6 <- inline_print_dec32_mul32_by10_16_t7 Add inline_print_dec32_mul32_by10_16_t8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))"] }
# 02179 Instruction { source: "inline_print_dec32_mul32_by10_16_t6 <- inline_print_dec32_mul32_by10_16_t7 Add inline_print_dec32_mul32_by10_16_t8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0217a Instruction { source: "inline_print_dec32_mul32_by10_16_t6 <- inline_print_dec32_mul32_by10_16_t7 Add inline_print_dec32_mul32_by10_16_t8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0xfc), Register(0xfc)], resolved: None }
30 10 fc fc 
# 0217e Instruction { source: "inline_print_dec32_mul32_by10_16_t6 <- inline_print_dec32_mul32_by10_16_t7 Add inline_print_dec32_mul32_by10_16_t8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t8 <- inline_print_dec32_mul32_by10_16_t6 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }"] }
# optimized away noop copy Instruction { source: "t8 <- inline_print_dec32_mul32_by10_16_t6 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\"] }", opcode: Copy32, args: [Register(0xfc), Register(0xfc)], resolved: None }
# goto inline_print_dec32_mul32_by10_16_function_end_mul32_by10
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_mul32_by10_16_function_end_mul32_by10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec32_mul32_by10_16_function_end_mul32_by10)], resolved: None }
# :inline_print_dec32_mul32_by10_16_function_end_mul32_by10
# 	SourceContext { contexts: [] }
# inline_print_dec32_mul32_by10_16_function_end_mul32_by10
# a <- t7 Subtract t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }", "Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))"] }
# 0217f Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Copy32, args: [Register(0xfc), Register(0x00)], resolved: None }
21 fc 00 
# 02182 Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 02184 Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 02186 Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 02188 Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 0218a Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 02190 Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02191 Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x00), Register(0xfc)], resolved: None }
30 1c 00 fc 
# 02195 Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t12 <- a[0x00..0x01] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 02196 Instruction { source: "t12 <- a[0x00..0x01] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xfc), Register(0x17)], resolved: None }
0b fc 17 
# t13 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 02199 Instruction { source: "t13 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x15), Constant8(0x30=48)], resolved: None }
04 15 30 
# t11 <- t12 Add t13
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))"] }
# 0219c Instruction { source: "t11 <- t12 Add t13\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x17), Register(0x15), Register(0x17)], resolved: None }
14 17 15 17 
# inline_print_dec32_putc_43_c <- t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_43_c <- t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0x17), Register(0x17)], resolved: None }
# inline_print_dec32_putc_43_t1 <- inline_print_dec32_putc_43_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_43_t1 <- inline_print_dec32_putc_43_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x17), Register(0x17)], resolved: None }
# None <= call io_write0(inline_print_dec32_putc_43_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 021a0 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x17)], resolved: None }
68 17 
# goto inline_print_dec32_putc_43_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_putc_43_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec32_putc_43_function_end_putc)], resolved: None }
# :inline_print_dec32_putc_43_function_end_putc
# 	SourceContext { contexts: [] }
# inline_print_dec32_putc_43_function_end_putc
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 021a2 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_print_dec32
# 	SourceContext { contexts: [] }
# function_end_print_dec32
# Unreachable
# 	SourceContext { contexts: [] }
# 021a4 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :print_dec8
# Ret None
# Arg0=a
# Var a (Arg0 a Number(U8)) Reg(U8) Some([32])
# Var b (Local b Number(U8) Reg(U8)) Reg(U8) Some([33])
# Var inline_print_dec8_putc_44_c (Arg0 c Number(U8)) Reg(U8) Some([32])
# Var inline_print_dec8_putc_44_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([32])
# Var inline_print_dec8_putc_44_t1 (t1 Ident("c")) Reg(U8) Some([32])
# Var t0 (t0 Ident("a")) Reg(U8) Some([32])
# Var t1 (t1 Number(U8, 10)) Reg(U8) Some([33])
# Var t10 (t10 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([32])
# Var t11 (t11 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([32])
# Var t12 (t12 Ident("a")) Reg(U8) Some([32])
# Var t13 (t13 Number(U8, 48)) Reg(U8) Some([33])
# Var t2 (t2 Ident("a")) Reg(U8) Some([32])
# Var t3 (t3 Number(U8, 10)) Reg(U8) Some([33])
# Var t4 (t4 Call(Call { function: "print_dec8", parameters: [Ident("b")] })) Reg(U8) Some([32])
# Var t5 (t5 Ident("b")) Reg(U8) Some([33])
# Var t6 (t6 Ident("a")) Reg(U8) Some([32])
# Var t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 10))) Reg(U8) Some([33])
# Var t8 (t8 Ident("b")) Reg(U8) Some([33])
# Var t9 (t9 Number(U8, 10)) Reg(U8) Some([34])
# 021a9 Instruction { source: "Save function parameter 'a' registers [0] to locals [32].", opcode: Copy8, args: [Register(0x00), Register(0x20)], resolved: None }
0b 00 20 
# t0 <- a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t0 <- a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 021ac Instruction { source: "t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x0a=10)], resolved: None }
04 21 0a 
# if t0 >= t1 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 021af Instruction { source: "if t0 >= t1 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x21), Register(0x20)], resolved: None }
15 21 20 
# 021b2 Instruction { source: "if t0 >= t1 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(print_dec8_if_true_0_1)], resolved: None }
71 ba 21 00 
# 021b6 Instruction { source: "if t0 >= t1 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(print_dec8_if_else_0_2)], resolved: None }
70 fa 21 00 
# :print_dec8_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }])], else_block: [] }"] }
# print_dec8_if_true_0_1
# t2 <- a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t2 <- a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# t3 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 021ba Instruction { source: "t3 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x0a=10)], resolved: None }
04 21 0a 
# b <- t2 Divide t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 10))"] }
# 021bd Instruction { source: "b <- t2 Divide t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Divide8, args: [Register(0x20), Register(0x21), Register(0x21)], resolved: None }
17 20 21 21 
# t5 <- b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t5 <- b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# None <= call print_dec8(t5,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })"] }
# 021c1 Instruction { source: "Arg0[a]=t5 None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x00)], resolved: None }
0b 21 00 
# Registers used by this function: {32, 33, 34}
# Registers used by callee tree: {32, 33, 34, 136}
# Registers to save: [32, 33, 34]
# 021c4 Instruction { source: "Saving reg0x22 before None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x22)], resolved: None }
09 22 
# 021c6 Instruction { source: "Saving reg0x21 before None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x21)], resolved: None }
09 21 
# 021c8 Instruction { source: "Saving reg0x20 before None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x20)], resolved: None }
09 20 
# 021ca Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 021d0 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c da 21 00 00 
# 021d6 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: JmpImm, args: [Label24(:print_dec8)], resolved: None }
70 a9 21 00 
# 021da Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 021e0 Instruction { source: "Restoring reg0x20 after None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x20)], resolved: None }
0a 20 
# 021e2 Instruction { source: "Restoring reg0x21 after None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x21)], resolved: None }
0a 21 
# 021e4 Instruction { source: "Restoring reg0x22 after None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x22)], resolved: None }
0a 22 
# t6 <- a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t6 <- a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# t8 <- b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t8 <- b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# t9 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 021e6 Instruction { source: "t9 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0a=10)], resolved: None }
04 22 0a 
# t7 <- t8 Multiply t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))"] }
# 021e9 Instruction { source: "t7 <- t8 Multiply t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\"] }", opcode: Mul8_8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
10 21 22 21 
# a <- t6 Subtract t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))"] }
# 021ed Instruction { source: "a <- t6 Subtract t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\"] }", opcode: Copy8, args: [Register(0x21), Register(0x00)], resolved: None }
0b 21 00 
# 021f0 Instruction { source: "a <- t6 Subtract t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 021f2 Instruction { source: "a <- t6 Subtract t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x20), Register(0x00), Register(0x20)], resolved: None }
14 20 00 20 
# goto print_dec8_if_end_0
# 	SourceContext { contexts: [] }
# 021f6 Instruction { source: "goto print_dec8_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(print_dec8_if_end_0)], resolved: None }
70 fa 21 00 
# :print_dec8_if_else_0_2
# 	SourceContext { contexts: [] }
# print_dec8_if_else_0_2
# :print_dec8_if_end_0
# 	SourceContext { contexts: [] }
# print_dec8_if_end_0
# t12 <- a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t12 <- a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# t13 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 021fa Instruction { source: "t13 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x30=48)], resolved: None }
04 21 30 
# t11 <- t12 Add t13
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 021fd Instruction { source: "t11 <- t12 Add t13\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
14 20 21 20 
# inline_print_dec8_putc_44_c <- t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_44_c <- t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_print_dec8_putc_44_t1 <- inline_print_dec8_putc_44_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_44_t1 <- inline_print_dec8_putc_44_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# None <= call io_write0(inline_print_dec8_putc_44_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 02201 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x20)], resolved: None }
68 20 
# goto inline_print_dec8_putc_44_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec8_putc_44_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec8_putc_44_function_end_putc)], resolved: None }
# :inline_print_dec8_putc_44_function_end_putc
# 	SourceContext { contexts: [] }
# inline_print_dec8_putc_44_function_end_putc
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 02203 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_print_dec8
# 	SourceContext { contexts: [] }
# function_end_print_dec8
# Unreachable
# 	SourceContext { contexts: [] }
# 02205 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
