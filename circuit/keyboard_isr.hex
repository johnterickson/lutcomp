v2.0 raw
# ImageBaseAddress=0x00000000
# entry
# 00000 Instruction { source: "Initialzing flags and internal regs.", opcode: Init, args: [], resolved: None }
00 
# 00001 Instruction { source: "Initialzing stack register to 0x000f0f00.", opcode: LoadImm32, args: [Register(0x0c), Constant32(0x000f0f00=986880)], resolved: None }
20 0c 00 0f 0f 00 
# 00007 Instruction { source: "load address of ISR slot 0x000f0f0c into R10.", opcode: LoadImm32, args: [Register(0x10), Constant32(0x000f0f0c=986892)], resolved: None }
20 10 0c 0f 0f 00 
# 0000d Instruction { source: "store address of ISR isr to ISR slot 0x000f0f0c into R10.", opcode: StoreImm32, args: [Register(0x10), Label32(:isr)], resolved: None }
25 10 f4 05 00 00 
# 00013 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00019 Instruction { source: "PseudoCall(Label24(:main))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 23 00 00 00 
# 0001f Instruction { source: "PseudoCall(Label24(:main))", opcode: JmpImm, args: [Label24(:main)], resolved: None }
70 5e 06 00 
# 00023 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 00029 Instruction { source: "Halting after return from entry function.", opcode: Halt, args: [Constant32(0x00000000=0)], resolved: None }
7e 00 00 00 00 
# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
20 
20 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
0a 
0a 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :handle_ps2
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([16])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([16])
# Var g (Local g Ptr(Struct("Globals")) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var index (Local index Number(USIZE) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_handle_ps2_globals_1_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_handle_ps2_globals_1_g (Local g Struct("Globals") Static(987492)) Static(987492) None
# Var inline_handle_ps2_globals_1_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_handle_ps2_globals_1_t0 (static "g") Reg(U32) Some([28, 29, 30, 31])
# Var inline_handle_ps2_globals_1_t4206 (t4206 AddressOf(Ident("g"))) Reg(U32) Some([28, 29, 30, 31])
# Var inline_handle_ps2_queue_push_25_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_handle_ps2_queue_push_25_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_handle_ps2_queue_push_25_n (Arg1 n Number(U8)) Reg(U8) Some([16])
# Var inline_handle_ps2_queue_push_25_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([32, 33, 34, 35])
# Var inline_handle_ps2_queue_push_25_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_handle_ps2_queue_push_25_t2187 (t2187 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_handle_ps2_queue_push_25_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([40])
# Var inline_handle_ps2_queue_push_25_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_handle_ps2_queue_push_25_t531d (t531d Ident("n")) Reg(U8) Some([16])
# Var inline_handle_ps2_queue_push_25_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_handle_ps2_queue_push_25_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_handle_ps2_queue_push_25_t6778 (t6778 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([16])
# Var inline_handle_ps2_queue_push_25_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([48, 49, 50, 51])
# Var inline_handle_ps2_queue_push_25_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([36, 37, 38, 39])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t23a (t23a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }) Reg(U32) Some([28, 29, 30, 31])
# Var t2ca9 (t2ca9 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))) Reg(U8) Some([16])
# Var t4c8b (t4c8b Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([28, 29, 30, 31])
# Var t528d (t528d Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }) Reg(U32) Some([28, 29, 30, 31])
# Var t5e63 (t5e63 Arithmetic(Add, Ident("index"), Number(USIZE, 3))) Reg(U32) Some([24, 25, 26, 27])
# Var t6113 (t6113 Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] })) Reg(U8) Some([16])
# Var t674 (t674 Arithmetic(Add, Ident("index"), Number(USIZE, 1))) Reg(U32) Some([32, 33, 34, 35])
# Var t6cd9 (t6cd9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }) Reg(U32) Some([28, 29, 30, 31])
# Var t75f (t75f PtrFieldDeref("g", "release_in_progress")) Reg(U8) Some([52])
# Var t7905 (t7905 PtrFieldDeref("g", "shift_held")) Reg(U8) Some([16])
# Var t7b09 (t7b09 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))) Reg(U8) Some([16])
# Var t7d0e (t7d0e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }) Reg(U32) Some([20, 21, 22, 23])
# Var t938b (t938b AddressOf(PtrFieldDeref("g", "stdin"))) Reg(U32) Some([32, 33, 34, 35])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([53])
# Var tb62e (tb62e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([28, 29, 30, 31])
# Var tb70e (tb70e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }) Reg(U32) Some([28, 29, 30, 31])
# Var tbb6d (tbb6d Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }) Reg(U32) Some([20, 21, 22, 23])
# Var td18e (td18e Ident("index")) Reg(U32) Some([24, 25, 26, 27])
# Var td3f9 (td3f9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }) Reg(U32) Some([32, 33, 34, 35])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([16])
# Var te5cf (te5cf Arithmetic(Add, Ident("index"), Number(USIZE, 2))) Reg(U32) Some([32, 33, 34, 35])
# Var ted94 (ted94 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }) Reg(U32) Some([28, 29, 30, 31])
# Var tf68c (tf68c Ident("code")) Reg(U8) Some([16])
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([53])
# inline_handle_ps2_globals_1_t0 <- 0n987492/0x000f1164u32 
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))"] }
# 00433 Instruction { source: "inline_handle_ps2_globals_1_t0 <- 0n987492/0x000f1164u32 \n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\", \"AddressOf(Ident(\\\"g\\\"))\", \"AddressOf(Ident(\\\"g\\\"))\"] }", opcode: LoadImm32, args: [Register(0x1c), Constant32(0x000f1164=987492)], resolved: None }
20 1c 64 11 0f 00 
# inline_handle_ps2_globals_1_t4206 <- inline_handle_ps2_globals_1_t0 U32
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))"] }
# optimized away noop copy Instruction { source: "inline_handle_ps2_globals_1_t4206 <- inline_handle_ps2_globals_1_t0 U32\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\", \"AddressOf(Ident(\\\"g\\\"))\", \"AddressOf(Ident(\\\"g\\\"))\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# g <- inline_handle_ps2_globals_1_t4206 U32
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }"] }
# 00439 Instruction { source: "g <- inline_handle_ps2_globals_1_t4206 U32\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x14)], resolved: None }
21 1c 14 
# goto inline_handle_ps2_globals_1_function_end_globals
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_handle_ps2_globals_1_function_end_globals\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_handle_ps2_globals_1_function_end_globals)], resolved: None }
# :inline_handle_ps2_globals_1_function_end_globals
# 	SourceContext { contexts: [] }
# inline_handle_ps2_globals_1_function_end_globals
# Some(code) <= call io_read2()
# 	SourceContext { contexts: ["Assign { target: Ident(\"code\"), var_type: None, value: Call(Call { function: \"io_read2\", parameters: [] }) }", "Call(Call { function: \"io_read2\", parameters: [] })"] }
# 0043c Instruction { source: "IoRead2", opcode: In2, args: [Register(0x10)], resolved: None }
62 10 
# tf68c <- code U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }", "Ident(\"code\")", "Ident(\"code\")"] }
# optimized away noop copy Instruction { source: "tf68c <- code U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Ident(\\\"code\\\")\", \"Ident(\\\"code\\\")\"] }", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# t528d U32 <- tf68c U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }"] }
# 0043e Instruction { source: "Zero-pad for t528d U32 <- tf68c U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\"] }", opcode: LoadImm32, args: [Register(0x1c), Constant32(0x00000000=0)], resolved: None }
20 1c 00 00 00 00 
# 00444 Instruction { source: "t528d U32 <- tf68c U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\"] }", opcode: Copy8, args: [Register(0x10), Register(0x1c)], resolved: None }
0b 10 1c 
# index <- t528d Multiply Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))"] }
# 00447 Instruction { source: "index <- t528d Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: LoadImm32, args: [Register(0x00), Constant32(0x00000004=4)], resolved: None }
20 00 04 00 00 00 
# 0044d Instruction { source: "index <- t528d Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: Mul8_16, args: [Register(0x1c), Register(0x00), Register(0x18)], resolved: None }
11 1c 00 18 
# 00451 Instruction { source: "index <- t528d Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: LoadImm8, args: [Register(0x1a), Constant8(0x00=0)], resolved: None }
04 1a 00 
# 00454 Instruction { source: "index <- t528d Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: LoadImm8, args: [Register(0x1b), Constant8(0x00=0)], resolved: None }
04 1b 00 
# tbb6d <- g U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"shift_held\")", "PtrFieldDeref(\"g\", \"shift_held\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# optimized away noop copy Instruction { source: "tbb6d <- g U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# tb70e <- tbb6d Add Number(0n264/0x00000108u32)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"shift_held\")", "PtrFieldDeref(\"g\", \"shift_held\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))"] }
# 00457 Instruction { source: "tb70e <- tbb6d Add Number(0n264/0x00000108u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x1c)], resolved: None }
21 14 1c 
# 0045a Instruction { source: "tb70e <- tbb6d Add Number(0n264/0x00000108u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x1c), Constant32(0x00000108=264)], resolved: None }
32 1c 08 01 00 00 
# t7905 <- mem[tb70e] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"shift_held\")", "PtrFieldDeref(\"g\", \"shift_held\")"] }
# 00460 Instruction { source: "t7905 <- mem[tb70e] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\"] }", opcode: Load8, args: [Register(0x1c), Register(0x10)], resolved: None }
05 1c 10 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00463 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x35), Constant8(0x00=0)], resolved: None }
04 35 00 
# if t7905 != tb36e then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }"] }
# 00466 Instruction { source: "if t7905 != tb36e then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x10), Register(0x35)], resolved: None }
15 10 35 
# 00469 Instruction { source: "if t7905 != tb36e then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(handle_ps2_if_else_0_2)], resolved: None }
72 89 04 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t7905 != tb36e then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_1)], resolved: None }
# :handle_ps2_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }"] }
# handle_ps2_if_true_0_1
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 0046d Instruction { source: "t4c8b <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x1c), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 1c 2e 00 00 00 
# td18e <- index U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "td18e <- index U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# t674 <- td18e Add Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))"] }
# 00473 Instruction { source: "t674 <- td18e Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x20)], resolved: None }
21 18 20 
# 00476 Instruction { source: "t674 <- td18e Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x20), Constant32(0x00000001=1)], resolved: None }
32 20 01 00 00 00 
# t23a <- t4c8b Add Var(t674)
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))"] }
# 0047c Instruction { source: "t23a <- t4c8b Add Var(t674)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0047d Instruction { source: "t23a <- t4c8b Add Var(t674)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x20), Register(0x1c)], resolved: None }
30 1c 20 1c 
# 00481 Instruction { source: "t23a <- t4c8b Add Var(t674)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# ch <- mem[t23a] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))"] }
# 00482 Instruction { source: "ch <- mem[t23a] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: Load8, args: [Register(0x1c), Register(0x10)], resolved: None }
05 1c 10 
# goto handle_ps2_if_end_0
# 	SourceContext { contexts: [] }
# 00485 Instruction { source: "goto handle_ps2_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(handle_ps2_if_end_0)], resolved: None }
70 98 04 00 
# :handle_ps2_if_else_0_2
# 	SourceContext { contexts: [] }
# handle_ps2_if_else_0_2
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 00489 Instruction { source: "t4c8b <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x1c), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 1c 2e 00 00 00 
# td18e <- index U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "td18e <- index U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# tb62e <- t4c8b Add Var(td18e)
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))"] }
# 0048f Instruction { source: "tb62e <- t4c8b Add Var(td18e)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00490 Instruction { source: "tb62e <- t4c8b Add Var(td18e)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x18), Register(0x1c)], resolved: None }
30 1c 18 1c 
# 00494 Instruction { source: "tb62e <- t4c8b Add Var(td18e)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# ch <- mem[tb62e] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))"] }
# 00495 Instruction { source: "ch <- mem[tb62e] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\"] }", opcode: Load8, args: [Register(0x1c), Register(0x10)], resolved: None }
05 1c 10 
# :handle_ps2_if_end_0
# 	SourceContext { contexts: [] }
# handle_ps2_if_end_0
# tbb6d <- g U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"release_in_progress\")", "PtrFieldDeref(\"g\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# optimized away noop copy Instruction { source: "tbb6d <- g U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"release_in_progress\")", "PtrFieldDeref(\"g\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))"] }
# 00498 Instruction { source: "td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x20)], resolved: None }
21 14 20 
# 0049b Instruction { source: "td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x20), Constant32(0x0000010c=268)], resolved: None }
32 20 0c 01 00 00 
# t75f <- mem[td3f9] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"release_in_progress\")", "PtrFieldDeref(\"g\", \"release_in_progress\")"] }
# 004a1 Instruction { source: "t75f <- mem[td3f9] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\"] }", opcode: Load8, args: [Register(0x20), Register(0x34)], resolved: None }
05 20 34 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 004a4 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x35), Constant8(0x00=0)], resolved: None }
04 35 00 
# if t75f == tb36e then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }"] }
# 004a7 Instruction { source: "if t75f == tb36e then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x34), Register(0x35)], resolved: None }
15 34 35 
# 004aa Instruction { source: "if t75f == tb36e then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(handle_ps2_if_true_0_4)], resolved: None }
72 b2 04 00 
# 004ae Instruction { source: "if t75f == tb36e then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(handle_ps2_if_else_0_5)], resolved: None }
70 f9 04 00 
# :handle_ps2_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }"] }
# handle_ps2_if_true_0_4
# t7d0e <- g U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# optimized away noop copy Instruction { source: "t7d0e <- g U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Queue\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Queue\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t938b <- t7d0e U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))"] }
# 004b2 Instruction { source: "t938b <- t7d0e U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x20)], resolved: None }
21 14 20 
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_handle_ps2_queue_push_25_s <- t938b U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })"] }
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_25_s <- t938b U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_handle_ps2_queue_push_25_n <- tdcd9 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })"] }
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_25_n <- tdcd9 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_handle_ps2_queue_push_25_t565a <- inline_handle_ps2_queue_push_25_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_25_t565a <- inline_handle_ps2_queue_push_25_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_handle_ps2_queue_push_25_values <- inline_handle_ps2_queue_push_25_t565a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 004b5 Instruction { source: "inline_handle_ps2_queue_push_25_values <- inline_handle_ps2_queue_push_25_t565a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x20), Register(0x24)], resolved: None }
21 20 24 
# inline_handle_ps2_queue_push_25_t1d36 <- inline_handle_ps2_queue_push_25_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_25_t1d36 <- inline_handle_ps2_queue_push_25_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 004b8 Instruction { source: "inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: Copy32, args: [Register(0x20), Register(0x30)], resolved: None }
21 20 30 
# 004bb Instruction { source: "inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x30), Constant32(0x00000104=260)], resolved: None }
32 30 04 01 00 00 
# inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 004c1 Instruction { source: "inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x30), Register(0x28)], resolved: None }
05 30 28 
# inline_handle_ps2_queue_push_25_t5bb7 U32 <- inline_handle_ps2_queue_push_25_t3ee U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }"] }
# 004c4 Instruction { source: "Zero-pad for inline_handle_ps2_queue_push_25_t5bb7 U32 <- inline_handle_ps2_queue_push_25_t3ee U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x00000000=0)], resolved: None }
20 2c 00 00 00 00 
# 004ca Instruction { source: "inline_handle_ps2_queue_push_25_t5bb7 U32 <- inline_handle_ps2_queue_push_25_t3ee U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: Copy8, args: [Register(0x28), Register(0x2c)], resolved: None }
0b 28 2c 
# inline_handle_ps2_queue_push_25_t2187 <- inline_handle_ps2_queue_push_25_t1d36 Add Var(inline_handle_ps2_queue_push_25_t5bb7)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })"] }
# 004cd Instruction { source: "inline_handle_ps2_queue_push_25_t2187 <- inline_handle_ps2_queue_push_25_t1d36 Add Var(inline_handle_ps2_queue_push_25_t5bb7)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 004ce Instruction { source: "inline_handle_ps2_queue_push_25_t2187 <- inline_handle_ps2_queue_push_25_t1d36 Add Var(inline_handle_ps2_queue_push_25_t5bb7)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x2c), Register(0x24)], resolved: None }
30 24 2c 24 
# 004d2 Instruction { source: "inline_handle_ps2_queue_push_25_t2187 <- inline_handle_ps2_queue_push_25_t1d36 Add Var(inline_handle_ps2_queue_push_25_t5bb7)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_handle_ps2_queue_push_25_t531d <- inline_handle_ps2_queue_push_25_n U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_25_t531d <- inline_handle_ps2_queue_push_25_n U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# mem[inline_handle_ps2_queue_push_25_t2187] <- inline_handle_ps2_queue_push_25_t531d U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }"] }
# 004d3 Instruction { source: "mem[inline_handle_ps2_queue_push_25_t2187] <- inline_handle_ps2_queue_push_25_t531d U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store8, args: [Register(0x10), Register(0x24)], resolved: None }
06 10 24 
# inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 004d6 Instruction { source: "inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: Copy32, args: [Register(0x20), Register(0x30)], resolved: None }
21 20 30 
# 004d9 Instruction { source: "inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x30), Constant32(0x00000104=260)], resolved: None }
32 30 04 01 00 00 
# inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 004df Instruction { source: "inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: Copy32, args: [Register(0x20), Register(0x30)], resolved: None }
21 20 30 
# 004e2 Instruction { source: "inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x30), Constant32(0x00000104=260)], resolved: None }
32 30 04 01 00 00 
# inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 004e8 Instruction { source: "inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x30), Register(0x28)], resolved: None }
05 30 28 
# inline_handle_ps2_queue_push_25_t6778 <- inline_handle_ps2_queue_push_25_t3ee Add Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))"] }
# 004eb Instruction { source: "inline_handle_ps2_queue_push_25_t6778 <- inline_handle_ps2_queue_push_25_t3ee Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 004ee Instruction { source: "inline_handle_ps2_queue_push_25_t6778 <- inline_handle_ps2_queue_push_25_t3ee Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x28), Register(0x00), Register(0x10)], resolved: None }
14 28 00 10 
# mem[inline_handle_ps2_queue_push_25_tc1ff] <- inline_handle_ps2_queue_push_25_t6778 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }"] }
# 004f2 Instruction { source: "mem[inline_handle_ps2_queue_push_25_tc1ff] <- inline_handle_ps2_queue_push_25_t6778 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x10), Register(0x30)], resolved: None }
06 10 30 
# goto inline_handle_ps2_queue_push_25_function_end_queue_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_handle_ps2_queue_push_25_function_end_queue_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_handle_ps2_queue_push_25_function_end_queue_push)], resolved: None }
# :inline_handle_ps2_queue_push_25_function_end_queue_push
# 	SourceContext { contexts: [] }
# inline_handle_ps2_queue_push_25_function_end_queue_push
# goto handle_ps2_if_end_3
# 	SourceContext { contexts: [] }
# 004f5 Instruction { source: "goto handle_ps2_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(handle_ps2_if_end_3)], resolved: None }
70 f9 04 00 
# :handle_ps2_if_else_0_5
# 	SourceContext { contexts: [] }
# handle_ps2_if_else_0_5
# :handle_ps2_if_end_3
# 	SourceContext { contexts: [] }
# handle_ps2_if_end_3
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 004f9 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x35), Constant8(0x00=0)], resolved: None }
04 35 00 
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 004fc Instruction { source: "t4c8b <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x1c), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 1c 2e 00 00 00 
# td18e <- index U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "td18e <- index U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# te5cf <- td18e Add Number(0n2/0x00000002u32)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))"] }
# 00502 Instruction { source: "te5cf <- td18e Add Number(0n2/0x00000002u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x20)], resolved: None }
21 18 20 
# 00505 Instruction { source: "te5cf <- td18e Add Number(0n2/0x00000002u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x20), Constant32(0x00000002=2)], resolved: None }
32 20 02 00 00 00 
# ted94 <- t4c8b Add Var(te5cf)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))"] }
# 0050b Instruction { source: "ted94 <- t4c8b Add Var(te5cf)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0050c Instruction { source: "ted94 <- t4c8b Add Var(te5cf)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x20), Register(0x1c)], resolved: None }
30 1c 20 1c 
# 00510 Instruction { source: "ted94 <- t4c8b Add Var(te5cf)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t2ca9 <- mem[ted94] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))"] }
# 00511 Instruction { source: "t2ca9 <- mem[ted94] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: Load8, args: [Register(0x1c), Register(0x10)], resolved: None }
05 1c 10 
# if tb36e != t2ca9 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_else_0_8'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }"] }
# 00514 Instruction { source: "if tb36e != t2ca9 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\"] }", opcode: Cmp8, args: [Register(0x35), Register(0x10)], resolved: None }
15 35 10 
# 00517 Instruction { source: "if tb36e != t2ca9 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\"] }", opcode: JzImm, args: [Label24(handle_ps2_if_else_0_8)], resolved: None }
72 57 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb36e != t2ca9 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\"] }", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_7)], resolved: None }
# :handle_ps2_if_true_0_7
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }"] }
# handle_ps2_if_true_0_7
# tbb6d <- g U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"release_in_progress\")", "PtrFieldDeref(\"g\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# optimized away noop copy Instruction { source: "tbb6d <- g U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"release_in_progress\")", "PtrFieldDeref(\"g\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))"] }
# 0051b Instruction { source: "td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x20)], resolved: None }
21 14 20 
# 0051e Instruction { source: "td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x20), Constant32(0x0000010c=268)], resolved: None }
32 20 0c 01 00 00 
# t75f <- mem[td3f9] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"release_in_progress\")", "PtrFieldDeref(\"g\", \"release_in_progress\")"] }
# 00524 Instruction { source: "t75f <- mem[td3f9] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\"] }", opcode: Load8, args: [Register(0x20), Register(0x34)], resolved: None }
05 20 34 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00527 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x35), Constant8(0x00=0)], resolved: None }
04 35 00 
# if t75f != tb36e then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }"] }
# 0052a Instruction { source: "if t75f != tb36e then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x34), Register(0x35)], resolved: None }
15 34 35 
# 0052d Instruction { source: "if t75f != tb36e then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(handle_ps2_if_else_0_11)], resolved: None }
72 44 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t75f != tb36e then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_10)], resolved: None }
# :handle_ps2_if_true_0_10
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }"] }
# handle_ps2_if_true_0_10
# tbb6d <- g U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# optimized away noop copy Instruction { source: "tbb6d <- g U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# tb70e <- tbb6d Add Number(0n264/0x00000108u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))"] }
# 00531 Instruction { source: "tb70e <- tbb6d Add Number(0n264/0x00000108u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x1c)], resolved: None }
21 14 1c 
# 00534 Instruction { source: "tb70e <- tbb6d Add Number(0n264/0x00000108u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x1c), Constant32(0x00000108=264)], resolved: None }
32 1c 08 01 00 00 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0053a Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x35), Constant8(0x00=0)], resolved: None }
04 35 00 
# mem[tb70e] <- tb36e U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }"] }
# 0053d Instruction { source: "mem[tb70e] <- tb36e U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x35), Register(0x1c)], resolved: None }
06 35 1c 
# goto handle_ps2_if_end_9
# 	SourceContext { contexts: [] }
# 00540 Instruction { source: "goto handle_ps2_if_end_9\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(handle_ps2_if_end_9)], resolved: None }
70 53 05 00 
# :handle_ps2_if_else_0_11
# 	SourceContext { contexts: [] }
# handle_ps2_if_else_0_11
# tbb6d <- g U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# optimized away noop copy Instruction { source: "tbb6d <- g U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# tb70e <- tbb6d Add Number(0n264/0x00000108u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))"] }
# 00544 Instruction { source: "tb70e <- tbb6d Add Number(0n264/0x00000108u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x1c)], resolved: None }
21 14 1c 
# 00547 Instruction { source: "tb70e <- tbb6d Add Number(0n264/0x00000108u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x1c), Constant32(0x00000108=264)], resolved: None }
32 1c 08 01 00 00 
# tfcd <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 0054d Instruction { source: "tfcd <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x35), Constant8(0x01=1)], resolved: None }
04 35 01 
# mem[tb70e] <- tfcd U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }"] }
# 00550 Instruction { source: "mem[tb70e] <- tfcd U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\"] }", opcode: Store8, args: [Register(0x35), Register(0x1c)], resolved: None }
06 35 1c 
# :handle_ps2_if_end_9
# 	SourceContext { contexts: [] }
# handle_ps2_if_end_9
# goto handle_ps2_if_end_6
# 	SourceContext { contexts: [] }
# 00553 Instruction { source: "goto handle_ps2_if_end_6\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(handle_ps2_if_end_6)], resolved: None }
70 57 05 00 
# :handle_ps2_if_else_0_8
# 	SourceContext { contexts: [] }
# handle_ps2_if_else_0_8
# :handle_ps2_if_end_6
# 	SourceContext { contexts: [] }
# handle_ps2_if_end_6
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00557 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x35), Constant8(0x00=0)], resolved: None }
04 35 00 
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 0055a Instruction { source: "t4c8b <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x1c), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 1c 2e 00 00 00 
# td18e <- index U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "td18e <- index U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# t5e63 <- td18e Add Number(0n3/0x00000003u32)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))"] }
# 00560 Instruction { source: "t5e63 <- td18e Add Number(0n3/0x00000003u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x18), Constant32(0x00000003=3)], resolved: None }
32 18 03 00 00 00 
# t6cd9 <- t4c8b Add Var(t5e63)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))"] }
# 00566 Instruction { source: "t6cd9 <- t4c8b Add Var(t5e63)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00567 Instruction { source: "t6cd9 <- t4c8b Add Var(t5e63)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x18), Register(0x1c)], resolved: None }
30 1c 18 1c 
# 0056b Instruction { source: "t6cd9 <- t4c8b Add Var(t5e63)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t7b09 <- mem[t6cd9] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))"] }
# 0056c Instruction { source: "t7b09 <- mem[t6cd9] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: Load8, args: [Register(0x1c), Register(0x10)], resolved: None }
05 1c 10 
# if tb36e != t7b09 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }"] }
# 0056f Instruction { source: "if tb36e != t7b09 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\"] }", opcode: Cmp8, args: [Register(0x35), Register(0x10)], resolved: None }
15 35 10 
# 00572 Instruction { source: "if tb36e != t7b09 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\"] }", opcode: JzImm, args: [Label24(handle_ps2_if_else_0_14)], resolved: None }
72 89 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb36e != t7b09 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\"] }", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_13)], resolved: None }
# :handle_ps2_if_true_0_13
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }"] }
# handle_ps2_if_true_0_13
# tbb6d <- g U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# optimized away noop copy Instruction { source: "tbb6d <- g U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))"] }
# 00576 Instruction { source: "td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x20)], resolved: None }
21 14 20 
# 00579 Instruction { source: "td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x20), Constant32(0x0000010c=268)], resolved: None }
32 20 0c 01 00 00 
# tfcd <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 0057f Instruction { source: "tfcd <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x35), Constant8(0x01=1)], resolved: None }
04 35 01 
# mem[td3f9] <- tfcd U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }"] }
# 00582 Instruction { source: "mem[td3f9] <- tfcd U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\"] }", opcode: Store8, args: [Register(0x35), Register(0x20)], resolved: None }
06 35 20 
# goto handle_ps2_if_end_12
# 	SourceContext { contexts: [] }
# 00585 Instruction { source: "goto handle_ps2_if_end_12\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(handle_ps2_if_end_12)], resolved: None }
70 98 05 00 
# :handle_ps2_if_else_0_14
# 	SourceContext { contexts: [] }
# handle_ps2_if_else_0_14
# tbb6d <- g U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# optimized away noop copy Instruction { source: "tbb6d <- g U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))"] }
# 00589 Instruction { source: "td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x20)], resolved: None }
21 14 20 
# 0058c Instruction { source: "td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x20), Constant32(0x0000010c=268)], resolved: None }
32 20 0c 01 00 00 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00592 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x35), Constant8(0x00=0)], resolved: None }
04 35 00 
# mem[td3f9] <- tb36e U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }"] }
# 00595 Instruction { source: "mem[td3f9] <- tb36e U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x35), Register(0x20)], resolved: None }
06 35 20 
# :handle_ps2_if_end_12
# 	SourceContext { contexts: [] }
# handle_ps2_if_end_12
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 00598 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_handle_ps2
# 	SourceContext { contexts: [] }
# function_end_handle_ps2
# Unreachable
# 	SourceContext { contexts: [] }
# 0059a Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :handle_tty
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var g (Local g Ptr(Struct("Globals")) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_handle_tty_globals_2_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_handle_tty_globals_2_g (Local g Struct("Globals") Static(987492)) Static(987492) None
# Var inline_handle_tty_globals_2_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_handle_tty_globals_2_t0 (static "g") Reg(U32) Some([56, 57, 58, 59])
# Var inline_handle_tty_globals_2_t4206 (t4206 AddressOf(Ident("g"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_handle_tty_queue_push_26_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_handle_tty_queue_push_26_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_handle_tty_queue_push_26_n (Arg1 n Number(U8)) Reg(U8) Some([60])
# Var inline_handle_tty_queue_push_26_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_handle_tty_queue_push_26_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_handle_tty_queue_push_26_t2187 (t2187 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_handle_tty_queue_push_26_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([72])
# Var inline_handle_tty_queue_push_26_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_handle_tty_queue_push_26_t531d (t531d Ident("n")) Reg(U8) Some([60])
# Var inline_handle_tty_queue_push_26_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_handle_tty_queue_push_26_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_handle_tty_queue_push_26_t6778 (t6778 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([60])
# Var inline_handle_tty_queue_push_26_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_handle_tty_queue_push_26_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t7d0e (t7d0e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }) Reg(U32) Some([56, 57, 58, 59])
# Var t8854 (t8854 Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })) Reg(U8) Some([60])
# Var t938b (t938b AddressOf(PtrFieldDeref("g", "stdin"))) Reg(U32) Some([56, 57, 58, 59])
# Var tb816 (tb816 TtyIn) Reg(U8) Some([84])
# inline_handle_tty_globals_2_t0 <- 0n987492/0x000f1164u32 
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))"] }
# 0059f Instruction { source: "inline_handle_tty_globals_2_t0 <- 0n987492/0x000f1164u32 \n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\", \"AddressOf(Ident(\\\"g\\\"))\", \"AddressOf(Ident(\\\"g\\\"))\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x000f1164=987492)], resolved: None }
20 38 64 11 0f 00 
# inline_handle_tty_globals_2_t4206 <- inline_handle_tty_globals_2_t0 U32
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))"] }
# optimized away noop copy Instruction { source: "inline_handle_tty_globals_2_t4206 <- inline_handle_tty_globals_2_t0 U32\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\", \"AddressOf(Ident(\\\"g\\\"))\", \"AddressOf(Ident(\\\"g\\\"))\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# g <- inline_handle_tty_globals_2_t4206 U32
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }"] }
# optimized away noop copy Instruction { source: "g <- inline_handle_tty_globals_2_t4206 U32\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# goto inline_handle_tty_globals_2_function_end_globals
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_handle_tty_globals_2_function_end_globals\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_handle_tty_globals_2_function_end_globals)], resolved: None }
# :inline_handle_tty_globals_2_function_end_globals
# 	SourceContext { contexts: [] }
# inline_handle_tty_globals_2_function_end_globals
# t7d0e <- g U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# optimized away noop copy Instruction { source: "t7d0e <- g U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), TtyIn] })\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Queue\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Queue\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# t938b <- t7d0e U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))"] }
# optimized away noop copy Instruction { source: "t938b <- t7d0e U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), TtyIn] })\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# tb816 <- ttyin
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })", "TtyIn", "TtyIn"] }
# 005a5 Instruction { source: "tb816 <- ttyin\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), TtyIn] })\", \"TtyIn\", \"TtyIn\"] }", opcode: In0, args: [Register(0x54)], resolved: None }
60 54 
# inline_handle_tty_queue_push_26_s <- t938b U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })"] }
# 005a7 Instruction { source: "inline_handle_tty_queue_push_26_s <- t938b U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), TtyIn] })\"] }", opcode: Copy32, args: [Register(0x38), Register(0x40)], resolved: None }
21 38 40 
# inline_handle_tty_queue_push_26_n <- tb816 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })"] }
# 005aa Instruction { source: "inline_handle_tty_queue_push_26_n <- tb816 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), TtyIn] })\"] }", opcode: Copy8, args: [Register(0x54), Register(0x3c)], resolved: None }
0b 54 3c 
# inline_handle_tty_queue_push_26_t565a <- inline_handle_tty_queue_push_26_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_handle_tty_queue_push_26_t565a <- inline_handle_tty_queue_push_26_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_handle_tty_queue_push_26_values <- inline_handle_tty_queue_push_26_t565a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 005ad Instruction { source: "inline_handle_tty_queue_push_26_values <- inline_handle_tty_queue_push_26_t565a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_handle_tty_queue_push_26_t1d36 <- inline_handle_tty_queue_push_26_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_handle_tty_queue_push_26_t1d36 <- inline_handle_tty_queue_push_26_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 005b0 Instruction { source: "inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x50)], resolved: None }
21 40 50 
# 005b3 Instruction { source: "inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x50), Constant32(0x00000104=260)], resolved: None }
32 50 04 01 00 00 
# inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 005b9 Instruction { source: "inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x50), Register(0x48)], resolved: None }
05 50 48 
# inline_handle_tty_queue_push_26_t5bb7 U32 <- inline_handle_tty_queue_push_26_t3ee U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }"] }
# 005bc Instruction { source: "Zero-pad for inline_handle_tty_queue_push_26_t5bb7 U32 <- inline_handle_tty_queue_push_26_t3ee U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x00000000=0)], resolved: None }
20 4c 00 00 00 00 
# 005c2 Instruction { source: "inline_handle_tty_queue_push_26_t5bb7 U32 <- inline_handle_tty_queue_push_26_t3ee U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: Copy8, args: [Register(0x48), Register(0x4c)], resolved: None }
0b 48 4c 
# inline_handle_tty_queue_push_26_t2187 <- inline_handle_tty_queue_push_26_t1d36 Add Var(inline_handle_tty_queue_push_26_t5bb7)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })"] }
# 005c5 Instruction { source: "inline_handle_tty_queue_push_26_t2187 <- inline_handle_tty_queue_push_26_t1d36 Add Var(inline_handle_tty_queue_push_26_t5bb7)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 005c6 Instruction { source: "inline_handle_tty_queue_push_26_t2187 <- inline_handle_tty_queue_push_26_t1d36 Add Var(inline_handle_tty_queue_push_26_t5bb7)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x4c), Register(0x44)], resolved: None }
30 44 4c 44 
# 005ca Instruction { source: "inline_handle_tty_queue_push_26_t2187 <- inline_handle_tty_queue_push_26_t1d36 Add Var(inline_handle_tty_queue_push_26_t5bb7)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_handle_tty_queue_push_26_t531d <- inline_handle_tty_queue_push_26_n U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_handle_tty_queue_push_26_t531d <- inline_handle_tty_queue_push_26_n U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_handle_tty_queue_push_26_t2187] <- inline_handle_tty_queue_push_26_t531d U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }"] }
# 005cb Instruction { source: "mem[inline_handle_tty_queue_push_26_t2187] <- inline_handle_tty_queue_push_26_t531d U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store8, args: [Register(0x3c), Register(0x44)], resolved: None }
06 3c 44 
# inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 005ce Instruction { source: "inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x50)], resolved: None }
21 40 50 
# 005d1 Instruction { source: "inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x50), Constant32(0x00000104=260)], resolved: None }
32 50 04 01 00 00 
# inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 005d7 Instruction { source: "inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x50)], resolved: None }
21 40 50 
# 005da Instruction { source: "inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x50), Constant32(0x00000104=260)], resolved: None }
32 50 04 01 00 00 
# inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 005e0 Instruction { source: "inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x50), Register(0x48)], resolved: None }
05 50 48 
# inline_handle_tty_queue_push_26_t6778 <- inline_handle_tty_queue_push_26_t3ee Add Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))"] }
# 005e3 Instruction { source: "inline_handle_tty_queue_push_26_t6778 <- inline_handle_tty_queue_push_26_t3ee Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 005e6 Instruction { source: "inline_handle_tty_queue_push_26_t6778 <- inline_handle_tty_queue_push_26_t3ee Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x48), Register(0x00), Register(0x3c)], resolved: None }
14 48 00 3c 
# mem[inline_handle_tty_queue_push_26_tc1ff] <- inline_handle_tty_queue_push_26_t6778 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }"] }
# 005ea Instruction { source: "mem[inline_handle_tty_queue_push_26_tc1ff] <- inline_handle_tty_queue_push_26_t6778 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x3c), Register(0x50)], resolved: None }
06 3c 50 
# goto inline_handle_tty_queue_push_26_function_end_queue_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_handle_tty_queue_push_26_function_end_queue_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_handle_tty_queue_push_26_function_end_queue_push)], resolved: None }
# :inline_handle_tty_queue_push_26_function_end_queue_push
# 	SourceContext { contexts: [] }
# inline_handle_tty_queue_push_26_function_end_queue_push
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 005ed Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_handle_tty
# 	SourceContext { contexts: [] }
# function_end_handle_tty
# Unreachable
# 	SourceContext { contexts: [] }
# 005ef Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :isr
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var rtr (Local rtr Number(U8) Reg(U8)) Reg(U8) Some([85])
# Var t111c (t111c Arithmetic(And, Ident("rtr"), Number(U8, 4))) Reg(U8) Some([85])
# Var t42ec (t42ec Call(Call { function: "handle_ps2", parameters: [] })) Reg(U8) Some([85])
# Var t59ef (t59ef Ident("rtr")) Reg(U8) Some([85])
# Var ta0e9 (ta0e9 Arithmetic(And, Ident("rtr"), Number(U8, 1))) Reg(U8) Some([86])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([87])
# Var td125 (td125 Call(Call { function: "handle_tty", parameters: [] })) Reg(U8) Some([85])
# Registers used by this function: {85, 86, 87}
# 005f4 Instruction { source: "Saving reg0x57 before before entering ISR body", opcode: Push8, args: [Register(0x57)], resolved: None }
09 57 
# 005f6 Instruction { source: "Saving reg0x56 before before entering ISR body", opcode: Push8, args: [Register(0x56)], resolved: None }
09 56 
# 005f8 Instruction { source: "Saving reg0x55 before before entering ISR body", opcode: Push8, args: [Register(0x55)], resolved: None }
09 55 
# Some(rtr) <= call io_ready_to_read()
# 	SourceContext { contexts: ["Assign { target: Ident(\"rtr\"), var_type: None, value: Call(Call { function: \"io_ready_to_read\", parameters: [] }) }", "Call(Call { function: \"io_ready_to_read\", parameters: [] })"] }
# 005fa Instruction { source: "ReadyToRead", opcode: IoReadyToRead, args: [Register(0x55)], resolved: None }
79 55 
# t59ef <- rtr U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 1))", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 1))", "Ident(\"rtr\")", "Ident(\"rtr\")"] }
# optimized away noop copy Instruction { source: "t59ef <- rtr U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_tty\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1))\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1))\", \"Ident(\\\"rtr\\\")\", \"Ident(\\\"rtr\\\")\"] }", opcode: Copy8, args: [Register(0x55), Register(0x55)], resolved: None }
# ta0e9 <- t59ef BitwiseAnd Number(0n1/0x01u8)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 1))", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 1))"] }
# 005fc Instruction { source: "ta0e9 <- t59ef BitwiseAnd Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_tty\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1))\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 005ff Instruction { source: "ta0e9 <- t59ef BitwiseAnd Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_tty\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1))\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1))\"] }", opcode: And8, args: [Register(0x55), Register(0x00), Register(0x56)], resolved: None }
1b 55 00 56 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00603 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_tty\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x57), Constant8(0x00=0)], resolved: None }
04 57 00 
# if ta0e9 != tb36e then 'isr_if_true_0_1' else 'isr_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }"] }
# 00606 Instruction { source: "if ta0e9 != tb36e then 'isr_if_true_0_1' else 'isr_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_tty\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x56), Register(0x57)], resolved: None }
15 56 57 
# 00609 Instruction { source: "if ta0e9 != tb36e then 'isr_if_true_0_1' else 'isr_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_tty\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(isr_if_else_0_2)], resolved: None }
72 27 06 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta0e9 != tb36e then 'isr_if_true_0_1' else 'isr_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_tty\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(isr_if_true_0_1)], resolved: None }
# :isr_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }])], else_block: [] }"] }
# isr_if_true_0_1
# None <= call handle_tty()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }", "Call(Call { function: \"handle_tty\", parameters: [] })", "Call(Call { function: \"handle_tty\", parameters: [] })"] }
# Registers used by this function: {85, 86, 87}
# Registers used by callee tree: {56, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84}
# Registers to save: []
# 0060d Instruction { source: "PseudoCall(Label24(:handle_tty))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00613 Instruction { source: "PseudoCall(Label24(:handle_tty))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 1d 06 00 00 
# 00619 Instruction { source: "PseudoCall(Label24(:handle_tty))", opcode: JmpImm, args: [Label24(:handle_tty)], resolved: None }
70 9f 05 00 
# 0061d Instruction { source: "PseudoCall(Label24(:handle_tty))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto isr_if_end_0
# 	SourceContext { contexts: [] }
# 00623 Instruction { source: "goto isr_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(isr_if_end_0)], resolved: None }
70 27 06 00 
# :isr_if_else_0_2
# 	SourceContext { contexts: [] }
# isr_if_else_0_2
# :isr_if_end_0
# 	SourceContext { contexts: [] }
# isr_if_end_0
# t59ef <- rtr U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 4))", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 4))", "Ident(\"rtr\")", "Ident(\"rtr\")"] }
# optimized away noop copy Instruction { source: "t59ef <- rtr U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_ps2\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4))\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4))\", \"Ident(\\\"rtr\\\")\", \"Ident(\\\"rtr\\\")\"] }", opcode: Copy8, args: [Register(0x55), Register(0x55)], resolved: None }
# t111c <- t59ef BitwiseAnd Number(0n4/0x04u8)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 4))", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 4))"] }
# 00627 Instruction { source: "t111c <- t59ef BitwiseAnd Number(0n4/0x04u8)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_ps2\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4))\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x04=4)], resolved: None }
04 00 04 
# 0062a Instruction { source: "t111c <- t59ef BitwiseAnd Number(0n4/0x04u8)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_ps2\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4))\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4))\"] }", opcode: And8, args: [Register(0x55), Register(0x00), Register(0x55)], resolved: None }
1b 55 00 55 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0062e Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_ps2\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x57), Constant8(0x00=0)], resolved: None }
04 57 00 
# if t111c != tb36e then 'isr_if_true_0_4' else 'isr_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }"] }
# 00631 Instruction { source: "if t111c != tb36e then 'isr_if_true_0_4' else 'isr_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_ps2\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x55), Register(0x57)], resolved: None }
15 55 57 
# 00634 Instruction { source: "if t111c != tb36e then 'isr_if_true_0_4' else 'isr_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_ps2\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(isr_if_else_0_5)], resolved: None }
72 52 06 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t111c != tb36e then 'isr_if_true_0_4' else 'isr_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_ps2\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(isr_if_true_0_4)], resolved: None }
# :isr_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }])], else_block: [] }"] }
# isr_if_true_0_4
# None <= call handle_ps2()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }", "Call(Call { function: \"handle_ps2\", parameters: [] })", "Call(Call { function: \"handle_ps2\", parameters: [] })"] }
# Registers used by this function: {85, 86, 87}
# Registers used by callee tree: {16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53}
# Registers to save: []
# 00638 Instruction { source: "PseudoCall(Label24(:handle_ps2))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0063e Instruction { source: "PseudoCall(Label24(:handle_ps2))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 48 06 00 00 
# 00644 Instruction { source: "PseudoCall(Label24(:handle_ps2))", opcode: JmpImm, args: [Label24(:handle_ps2)], resolved: None }
70 33 04 00 
# 00648 Instruction { source: "PseudoCall(Label24(:handle_ps2))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto isr_if_end_3
# 	SourceContext { contexts: [] }
# 0064e Instruction { source: "goto isr_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(isr_if_end_3)], resolved: None }
70 52 06 00 
# :isr_if_else_0_5
# 	SourceContext { contexts: [] }
# isr_if_else_0_5
# :isr_if_end_3
# 	SourceContext { contexts: [] }
# isr_if_end_3
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# Registers used by this function: {85, 86, 87}
# 00652 Instruction { source: "Restoring reg0x55 after ISR body", opcode: Pop8, args: [Register(0x55)], resolved: None }
0a 55 
# 00654 Instruction { source: "Restoring reg0x56 after ISR body", opcode: Pop8, args: [Register(0x56)], resolved: None }
0a 56 
# 00656 Instruction { source: "Restoring reg0x57 after ISR body", opcode: Pop8, args: [Register(0x57)], resolved: None }
0a 57 
# 00658 Instruction { source: "return from ISR", opcode: ReturnFromInterrupt, args: [], resolved: None }
78 
# :function_end_isr
# 	SourceContext { contexts: [] }
# function_end_isr
# Unreachable
# 	SourceContext { contexts: [] }
# 00659 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :main
# Ret Some(U8)
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([88])
# Var g (Local g Ptr(Struct("Globals")) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_19_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_getc_19_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([88])
# Var inline_main_getc_19_g (Local g Ptr(Struct("Globals")) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_19_inline_getc_globals_0_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_getc_19_inline_getc_globals_0_g (Local g Struct("Globals") Static(987492)) Static(987492) None
# Var inline_main_getc_19_inline_getc_globals_0_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_getc_19_inline_getc_globals_0_t0 (static "g") Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_19_inline_getc_globals_0_t4206 (t4206 AddressOf(Ident("g"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_19_inline_getc_queue_pop_18_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_getc_19_inline_getc_queue_pop_18_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_getc_19_inline_getc_queue_pop_18_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_19_inline_getc_queue_pop_18_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_main_getc_19_inline_getc_queue_pop_18_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([100])
# Var inline_main_getc_19_inline_getc_queue_pop_18_t44ed (t44ed Ident("value")) Reg(U8) Some([88])
# Var inline_main_getc_19_inline_getc_queue_pop_18_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_19_inline_getc_queue_pop_18_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_19_inline_getc_queue_pop_18_t6fdb (t6fdb Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))) Reg(U8) Some([88])
# Var inline_main_getc_19_inline_getc_queue_pop_18_tae11 (tae11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_main_getc_19_inline_getc_queue_pop_18_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([88])
# Var inline_main_getc_19_inline_getc_queue_pop_18_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_main_getc_19_inline_getc_queue_pop_18_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([108])
# Var inline_main_getc_19_inline_getc_queue_pop_18_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([112, 113, 114, 115])
# Var inline_main_getc_19_inline_getc_queue_pop_18_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_main_getc_19_inline_getc_queue_pop_18_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([100])
# Var inline_main_getc_19_inline_getc_queue_pop_18_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_main_getc_19_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_getc_19_t152a (t152a Call(Call { function: "disable_interrupts", parameters: [] })) Reg(U8) Some([88])
# Var inline_main_getc_19_t448e (t448e Call(Call { function: "enable_interrupts", parameters: [] })) Reg(U8) Some([88])
# Var inline_main_getc_19_t7d0e (t7d0e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_19_t938b (t938b AddressOf(PtrFieldDeref("g", "stdin"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_19_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([88])
# Var inline_main_getc_20_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_getc_20_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([88])
# Var inline_main_getc_20_g (Local g Ptr(Struct("Globals")) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_20_inline_getc_globals_0_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_getc_20_inline_getc_globals_0_g (Local g Struct("Globals") Static(987492)) Static(987492) None
# Var inline_main_getc_20_inline_getc_globals_0_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_getc_20_inline_getc_globals_0_t0 (static "g") Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_20_inline_getc_globals_0_t4206 (t4206 AddressOf(Ident("g"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_20_inline_getc_queue_pop_18_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_getc_20_inline_getc_queue_pop_18_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_getc_20_inline_getc_queue_pop_18_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_20_inline_getc_queue_pop_18_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_main_getc_20_inline_getc_queue_pop_18_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([100])
# Var inline_main_getc_20_inline_getc_queue_pop_18_t44ed (t44ed Ident("value")) Reg(U8) Some([88])
# Var inline_main_getc_20_inline_getc_queue_pop_18_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_20_inline_getc_queue_pop_18_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_20_inline_getc_queue_pop_18_t6fdb (t6fdb Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))) Reg(U8) Some([88])
# Var inline_main_getc_20_inline_getc_queue_pop_18_tae11 (tae11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_main_getc_20_inline_getc_queue_pop_18_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([88])
# Var inline_main_getc_20_inline_getc_queue_pop_18_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_main_getc_20_inline_getc_queue_pop_18_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([108])
# Var inline_main_getc_20_inline_getc_queue_pop_18_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([112, 113, 114, 115])
# Var inline_main_getc_20_inline_getc_queue_pop_18_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_main_getc_20_inline_getc_queue_pop_18_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([100])
# Var inline_main_getc_20_inline_getc_queue_pop_18_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_main_getc_20_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_getc_20_t152a (t152a Call(Call { function: "disable_interrupts", parameters: [] })) Reg(U8) Some([88])
# Var inline_main_getc_20_t448e (t448e Call(Call { function: "enable_interrupts", parameters: [] })) Reg(U8) Some([88])
# Var inline_main_getc_20_t7d0e (t7d0e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_20_t938b (t938b AddressOf(PtrFieldDeref("g", "stdin"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_20_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([88])
# Var inline_main_globals_3_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_globals_3_g (Local g Struct("Globals") Static(987492)) Static(987492) None
# Var inline_main_globals_3_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_globals_3_t0 (static "g") Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_globals_3_t4206 (t4206 AddressOf(Ident("g"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_queue_init_16_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_queue_init_16_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_queue_init_16_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_queue_init_16_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_queue_init_16_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([100])
# Var inline_main_queue_init_16_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_main_queue_init_16_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([92, 93, 94, 95])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t1501 (t1501 Number(U8, 113)) Reg(U8) Some([100])
# Var t4421 (t4421 Number(U8, 97)) Reg(U8) Some([116])
# Var t448e (t448e Call(Call { function: "enable_interrupts", parameters: [] })) Reg(U8) Some([88])
# Var t4d24 (t4d24 Call(Call { function: "getc", parameters: [] })) Reg(U8) Some([88])
# Var t7388 (t7388 Call(Call { function: "queue_init", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })) Reg(U8) Some([88])
# Var t7d0e (t7d0e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }) Reg(U32) Some([92, 93, 94, 95])
# Var t938b (t938b AddressOf(PtrFieldDeref("g", "stdin"))) Reg(U32) Some([92, 93, 94, 95])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([100])
# Var tb70e (tb70e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }) Reg(U32) Some([104, 105, 106, 107])
# Var tbb6d (tbb6d Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }) Reg(U32) Some([92, 93, 94, 95])
# Var td3f9 (td3f9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }) Reg(U32) Some([104, 105, 106, 107])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([88])
# inline_main_globals_3_t0 <- 0n987492/0x000f1164u32 
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))"] }
# 0065e Instruction { source: "inline_main_globals_3_t0 <- 0n987492/0x000f1164u32 \n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\", \"AddressOf(Ident(\\\"g\\\"))\", \"AddressOf(Ident(\\\"g\\\"))\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x000f1164=987492)], resolved: None }
20 5c 64 11 0f 00 
# inline_main_globals_3_t4206 <- inline_main_globals_3_t0 U32
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))"] }
# optimized away noop copy Instruction { source: "inline_main_globals_3_t4206 <- inline_main_globals_3_t0 U32\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\", \"AddressOf(Ident(\\\"g\\\"))\", \"AddressOf(Ident(\\\"g\\\"))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# g <- inline_main_globals_3_t4206 U32
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }"] }
# optimized away noop copy Instruction { source: "g <- inline_main_globals_3_t4206 U32\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# goto inline_main_globals_3_function_end_globals
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_globals_3_function_end_globals\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_globals_3_function_end_globals)], resolved: None }
# :inline_main_globals_3_function_end_globals
# 	SourceContext { contexts: [] }
# inline_main_globals_3_function_end_globals
# tbb6d <- g U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# optimized away noop copy Instruction { source: "tbb6d <- g U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# tb70e <- tbb6d Add Number(0n264/0x00000108u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))"] }
# 00664 Instruction { source: "tb70e <- tbb6d Add Number(0n264/0x00000108u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x68)], resolved: None }
21 5c 68 
# 00667 Instruction { source: "tb70e <- tbb6d Add Number(0n264/0x00000108u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x00000108=264)], resolved: None }
32 68 08 01 00 00 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0066d Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x00=0)], resolved: None }
04 64 00 
# mem[tb70e] <- tb36e U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }"] }
# 00670 Instruction { source: "mem[tb70e] <- tb36e U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x64), Register(0x68)], resolved: None }
06 64 68 
# tbb6d <- g U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# optimized away noop copy Instruction { source: "tbb6d <- g U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))"] }
# 00673 Instruction { source: "td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x68)], resolved: None }
21 5c 68 
# 00676 Instruction { source: "td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x0000010c=268)], resolved: None }
32 68 0c 01 00 00 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0067c Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x00=0)], resolved: None }
04 64 00 
# mem[td3f9] <- tb36e U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }"] }
# 0067f Instruction { source: "mem[td3f9] <- tb36e U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x64), Register(0x68)], resolved: None }
06 64 68 
# t7d0e <- g U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# optimized away noop copy Instruction { source: "t7d0e <- g U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Queue\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Queue\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# t938b <- t7d0e U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))"] }
# optimized away noop copy Instruction { source: "t938b <- t7d0e U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_queue_init_16_s <- t938b U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_queue_init_16_s <- t938b U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_queue_init_16_t4d4f <- inline_main_queue_init_16_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_queue_init_16_t4d4f <- inline_main_queue_init_16_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_queue_init_16_tb702 <- inline_main_queue_init_16_t4d4f Add Number(0n256/0x00000100u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 00682 Instruction { source: "inline_main_queue_init_16_tb702 <- inline_main_queue_init_16_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x68)], resolved: None }
21 5c 68 
# 00685 Instruction { source: "inline_main_queue_init_16_tb702 <- inline_main_queue_init_16_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x00000100=256)], resolved: None }
32 68 00 01 00 00 
# inline_main_queue_init_16_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0068b Instruction { source: "inline_main_queue_init_16_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x00=0)], resolved: None }
04 64 00 
# mem[inline_main_queue_init_16_tb702] <- inline_main_queue_init_16_tb36e U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }"] }
# 0068e Instruction { source: "mem[inline_main_queue_init_16_tb702] <- inline_main_queue_init_16_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x64), Register(0x68)], resolved: None }
06 64 68 
# inline_main_queue_init_16_t4d4f <- inline_main_queue_init_16_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_queue_init_16_t4d4f <- inline_main_queue_init_16_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_queue_init_16_tc1ff <- inline_main_queue_init_16_t4d4f Add Number(0n260/0x00000104u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 00691 Instruction { source: "inline_main_queue_init_16_tc1ff <- inline_main_queue_init_16_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x5c), Constant32(0x00000104=260)], resolved: None }
32 5c 04 01 00 00 
# inline_main_queue_init_16_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00697 Instruction { source: "inline_main_queue_init_16_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x00=0)], resolved: None }
04 64 00 
# mem[inline_main_queue_init_16_tc1ff] <- inline_main_queue_init_16_tb36e U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }"] }
# 0069a Instruction { source: "mem[inline_main_queue_init_16_tc1ff] <- inline_main_queue_init_16_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x64), Register(0x5c)], resolved: None }
06 64 5c 
# goto inline_main_queue_init_16_function_end_queue_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_queue_init_16_function_end_queue_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_queue_init_16_function_end_queue_init)], resolved: None }
# :inline_main_queue_init_16_function_end_queue_init
# 	SourceContext { contexts: [] }
# inline_main_queue_init_16_function_end_queue_init
# None <= call enable_interrupts()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"enable_interrupts\", parameters: [] }) }", "Call(Call { function: \"enable_interrupts\", parameters: [] })", "Call(Call { function: \"enable_interrupts\", parameters: [] })"] }
# 0069d Instruction { source: "EnableInterrupts", opcode: EnableInterrupts, args: [], resolved: None }
76 
# :main_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \"getc\", parameters: [] }) }, while_true: [] }"] }
# main_while_predicate_0
# t4421 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \"getc\", parameters: [] }) }, while_true: [] }", "Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \"getc\", parameters: [] }) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 0069e Instruction { source: "t4421 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \\\"getc\\\", parameters: [] }) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \\\"getc\\\", parameters: [] }) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x74), Constant8(0x61=97)], resolved: None }
04 74 61 
# inline_main_getc_19_inline_getc_globals_0_t0 <- 0n987492/0x000f1164u32 
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))"] }
# 006a1 Instruction { source: "inline_main_getc_19_inline_getc_globals_0_t0 <- 0n987492/0x000f1164u32 \n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\", \"AddressOf(Ident(\\\"g\\\"))\", \"AddressOf(Ident(\\\"g\\\"))\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x000f1164=987492)], resolved: None }
20 5c 64 11 0f 00 
# inline_main_getc_19_inline_getc_globals_0_t4206 <- inline_main_getc_19_inline_getc_globals_0_t0 U32
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))"] }
# optimized away noop copy Instruction { source: "inline_main_getc_19_inline_getc_globals_0_t4206 <- inline_main_getc_19_inline_getc_globals_0_t0 U32\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\", \"AddressOf(Ident(\\\"g\\\"))\", \"AddressOf(Ident(\\\"g\\\"))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_g <- inline_main_getc_19_inline_getc_globals_0_t4206 U32
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }"] }
# optimized away noop copy Instruction { source: "inline_main_getc_19_g <- inline_main_getc_19_inline_getc_globals_0_t4206 U32\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# goto inline_main_getc_19_inline_getc_globals_0_function_end_globals
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_getc_19_inline_getc_globals_0_function_end_globals\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_getc_19_inline_getc_globals_0_function_end_globals)], resolved: None }
# :inline_main_getc_19_inline_getc_globals_0_function_end_globals
# 	SourceContext { contexts: [] }
# inline_main_getc_19_inline_getc_globals_0_function_end_globals
# None <= call disable_interrupts()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"disable_interrupts\", parameters: [] }) }", "Call(Call { function: \"disable_interrupts\", parameters: [] })", "Call(Call { function: \"disable_interrupts\", parameters: [] })"] }
# 006a7 Instruction { source: "DisableInterrupts", opcode: DisableInterrupts, args: [], resolved: None }
77 
# inline_main_getc_19_t7d0e <- inline_main_getc_19_g U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# optimized away noop copy Instruction { source: "inline_main_getc_19_t7d0e <- inline_main_getc_19_g U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Queue\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Queue\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_t938b <- inline_main_getc_19_t7d0e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))"] }
# optimized away noop copy Instruction { source: "inline_main_getc_19_t938b <- inline_main_getc_19_t7d0e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_s <- inline_main_getc_19_t938b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_s <- inline_main_getc_19_t938b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 006a8 Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x70)], resolved: None }
21 5c 70 
# 006ab Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x70), Constant32(0x00000100=256)], resolved: None }
32 70 00 01 00 00 
# inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")"] }
# 006b1 Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\"] }", opcode: Load8, args: [Register(0x70), Register(0x6c)], resolved: None }
05 70 6c 
# inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 006b4 Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x60)], resolved: None }
21 5c 60 
# 006b7 Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x60), Constant32(0x00000104=260)], resolved: None }
32 60 04 01 00 00 
# inline_main_getc_19_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 006bd Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x60), Register(0x64)], resolved: None }
05 60 64 
# if inline_main_getc_19_inline_getc_queue_pop_18_tb6dd == inline_main_getc_19_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }"] }
# 006c0 Instruction { source: "if inline_main_getc_19_inline_getc_queue_pop_18_tb6dd == inline_main_getc_19_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: Cmp8, args: [Register(0x6c), Register(0x64)], resolved: None }
15 6c 64 
# 006c3 Instruction { source: "if inline_main_getc_19_inline_getc_queue_pop_18_tb6dd == inline_main_getc_19_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: JzImm, args: [Label24(inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1)], resolved: None }
72 cb 06 00 
# 006c7 Instruction { source: "if inline_main_getc_19_inline_getc_queue_pop_18_tb6dd == inline_main_getc_19_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2)], resolved: None }
70 d6 06 00 
# :inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }"] }
# inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1
# inline_main_getc_19_inline_getc_queue_pop_18_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 006cb Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x58), Constant8(0x00=0)], resolved: None }
04 58 00 
# inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_tb36e U8
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# optimized away noop copy Instruction { source: "inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_tb36e U8\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# goto inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 006ce Instruction { source: "goto inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: JmpImm, args: [Label24(inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop)], resolved: None }
70 1d 07 00 
# goto inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0
# 	SourceContext { contexts: [] }
# 006d2 Instruction { source: "goto inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0)], resolved: None }
70 d6 06 00 
# :inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2
# :inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0
# inline_main_getc_19_inline_getc_queue_pop_18_t565a <- inline_main_getc_19_inline_getc_queue_pop_18_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_t565a <- inline_main_getc_19_inline_getc_queue_pop_18_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_values <- inline_main_getc_19_inline_getc_queue_pop_18_t565a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 006d6 Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_values <- inline_main_getc_19_inline_getc_queue_pop_18_t565a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x60)], resolved: None }
21 5c 60 
# inline_main_getc_19_inline_getc_queue_pop_18_t1d36 <- inline_main_getc_19_inline_getc_queue_pop_18_values U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_t1d36 <- inline_main_getc_19_inline_getc_queue_pop_18_values U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 006d9 Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x70)], resolved: None }
21 5c 70 
# 006dc Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x70), Constant32(0x00000100=256)], resolved: None }
32 70 00 01 00 00 
# inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")"] }
# 006e2 Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\"] }", opcode: Load8, args: [Register(0x70), Register(0x6c)], resolved: None }
05 70 6c 
# inline_main_getc_19_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }"] }
# 006e5 Instruction { source: "Zero-pad for inline_main_getc_19_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\"] }", opcode: LoadImm32, args: [Register(0x68), Constant32(0x00000000=0)], resolved: None }
20 68 00 00 00 00 
# 006eb Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x68)], resolved: None }
0b 6c 68 
# inline_main_getc_19_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_t1d36 Add Var(inline_main_getc_19_inline_getc_queue_pop_18_tb469)
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })"] }
# 006ee Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_t1d36 Add Var(inline_main_getc_19_inline_getc_queue_pop_18_tb469)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 006ef Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_t1d36 Add Var(inline_main_getc_19_inline_getc_queue_pop_18_tb469)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x60), Register(0x68), Register(0x60)], resolved: None }
30 60 68 60 
# 006f3 Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_t1d36 Add Var(inline_main_getc_19_inline_getc_queue_pop_18_tb469)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_getc_19_inline_getc_queue_pop_18_value <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tae11] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))"] }
# 006f4 Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_value <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tae11] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\"] }", opcode: Load8, args: [Register(0x60), Register(0x64)], resolved: None }
05 60 64 
# inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 006f7 Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x70)], resolved: None }
21 5c 70 
# 006fa Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x70), Constant32(0x00000100=256)], resolved: None }
32 70 00 01 00 00 
# inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 00700 Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x70)], resolved: None }
21 5c 70 
# 00703 Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x70), Constant32(0x00000100=256)], resolved: None }
32 70 00 01 00 00 
# inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")"] }
# 00709 Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\"] }", opcode: Load8, args: [Register(0x70), Register(0x6c)], resolved: None }
05 70 6c 
# inline_main_getc_19_inline_getc_queue_pop_18_t6fdb <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))"] }
# 0070c Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_t6fdb <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 0070f Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_t6fdb <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x6c), Register(0x00), Register(0x58)], resolved: None }
14 6c 00 58 
# mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_t6fdb U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }"] }
# 00713 Instruction { source: "mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_t6fdb U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x58), Register(0x70)], resolved: None }
06 58 70 
# inline_main_getc_19_inline_getc_queue_pop_18_t44ed <- inline_main_getc_19_inline_getc_queue_pop_18_value U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"value\")) }", "Ident(\"value\")", "Ident(\"value\")"] }
# 00716 Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_t44ed <- inline_main_getc_19_inline_getc_queue_pop_18_value U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"value\\\")) }\", \"Ident(\\\"value\\\")\", \"Ident(\\\"value\\\")\"] }", opcode: Copy8, args: [Register(0x64), Register(0x58)], resolved: None }
0b 64 58 
# inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_t44ed U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"value\")) }"] }
# optimized away noop copy Instruction { source: "inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_t44ed U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"value\\\")) }\"] }", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# goto inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"value\")) }"] }
# 00719 Instruction { source: "goto inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"value\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop)], resolved: None }
70 1d 07 00 
# :inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop
# 	SourceContext { contexts: [] }
# inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop
# None <= call enable_interrupts()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"enable_interrupts\", parameters: [] }) }", "Call(Call { function: \"enable_interrupts\", parameters: [] })", "Call(Call { function: \"enable_interrupts\", parameters: [] })"] }
# 0071d Instruction { source: "EnableInterrupts", opcode: EnableInterrupts, args: [], resolved: None }
76 
# inline_main_getc_19_tdcd9 <- inline_main_getc_19_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"ch\")) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_getc_19_tdcd9 <- inline_main_getc_19_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"ch\\\")) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# t4d24 <- inline_main_getc_19_tdcd9 U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"ch\")) }"] }
# optimized away noop copy Instruction { source: "t4d24 <- inline_main_getc_19_tdcd9 U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"ch\\\")) }\"] }", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# goto inline_main_getc_19_function_end_getc
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"ch\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_getc_19_function_end_getc\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"ch\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_main_getc_19_function_end_getc)], resolved: None }
# :inline_main_getc_19_function_end_getc
# 	SourceContext { contexts: [] }
# inline_main_getc_19_function_end_getc
# if t4421 != t4d24 then 'main_while_body_1' else 'main_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \"getc\", parameters: [] }) }, while_true: [] }", "Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \"getc\", parameters: [] }) }"] }
# 0071e Instruction { source: "if t4421 != t4d24 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \\\"getc\\\", parameters: [] }) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \\\"getc\\\", parameters: [] }) }\"] }", opcode: Cmp8, args: [Register(0x74), Register(0x58)], resolved: None }
15 74 58 
# 00721 Instruction { source: "if t4421 != t4d24 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \\\"getc\\\", parameters: [] }) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \\\"getc\\\", parameters: [] }) }\"] }", opcode: JzImm, args: [Label24(main_while_end_2)], resolved: None }
72 29 07 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4421 != t4d24 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \\\"getc\\\", parameters: [] }) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \\\"getc\\\", parameters: [] }) }\"] }", opcode: JmpImm, args: [Label24(main_while_body_1)], resolved: None }
# :main_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \"getc\", parameters: [] }) }, while_true: [] }"] }
# main_while_body_1
# goto main_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \"getc\", parameters: [] }) }, while_true: [] }"] }
# 00725 Instruction { source: "goto main_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \\\"getc\\\", parameters: [] }) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(main_while_predicate_0)], resolved: None }
70 9e 06 00 
# :main_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \"getc\", parameters: [] }) }, while_true: [] }"] }
# main_while_end_2
# t4421 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 00729 Instruction { source: "t4421 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x74), Constant8(0x61=97)], resolved: None }
04 74 61 
# ttyout <- t4421
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 97) }"] }
# 0072c Instruction { source: "ttyout <- t4421\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 97) }\"] }", opcode: Out0, args: [Register(0x74)], resolved: None }
68 74 
# :main_while_predicate_3
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"getc\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }] }"] }
# main_while_predicate_3
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"getc\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0072e Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"getc\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x00=0)], resolved: None }
04 64 00 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"getc\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00731 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"getc\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x00=0)], resolved: None }
04 64 00 
# if tb36e == tb36e then 'main_while_body_4' else 'main_while_end_5'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"getc\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }"] }
# 00734 Instruction { source: "if tb36e == tb36e then 'main_while_body_4' else 'main_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"getc\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x64), Register(0x64)], resolved: None }
15 64 64 
# 00737 Instruction { source: "if tb36e == tb36e then 'main_while_body_4' else 'main_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"getc\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_while_body_4)], resolved: None }
72 3f 07 00 
# 0073b Instruction { source: "if tb36e == tb36e then 'main_while_body_4' else 'main_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"getc\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_while_end_5)], resolved: None }
70 ea 07 00 
# :main_while_body_4
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"getc\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }] }"] }
# main_while_body_4
# inline_main_getc_20_inline_getc_globals_0_t0 <- 0n987492/0x000f1164u32 
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))"] }
# 0073f Instruction { source: "inline_main_getc_20_inline_getc_globals_0_t0 <- 0n987492/0x000f1164u32 \n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\", \"AddressOf(Ident(\\\"g\\\"))\", \"AddressOf(Ident(\\\"g\\\"))\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x000f1164=987492)], resolved: None }
20 5c 64 11 0f 00 
# inline_main_getc_20_inline_getc_globals_0_t4206 <- inline_main_getc_20_inline_getc_globals_0_t0 U32
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))"] }
# optimized away noop copy Instruction { source: "inline_main_getc_20_inline_getc_globals_0_t4206 <- inline_main_getc_20_inline_getc_globals_0_t0 U32\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\", \"AddressOf(Ident(\\\"g\\\"))\", \"AddressOf(Ident(\\\"g\\\"))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_g <- inline_main_getc_20_inline_getc_globals_0_t4206 U32
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }"] }
# optimized away noop copy Instruction { source: "inline_main_getc_20_g <- inline_main_getc_20_inline_getc_globals_0_t4206 U32\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# goto inline_main_getc_20_inline_getc_globals_0_function_end_globals
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_getc_20_inline_getc_globals_0_function_end_globals\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_getc_20_inline_getc_globals_0_function_end_globals)], resolved: None }
# :inline_main_getc_20_inline_getc_globals_0_function_end_globals
# 	SourceContext { contexts: [] }
# inline_main_getc_20_inline_getc_globals_0_function_end_globals
# None <= call disable_interrupts()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"disable_interrupts\", parameters: [] }) }", "Call(Call { function: \"disable_interrupts\", parameters: [] })", "Call(Call { function: \"disable_interrupts\", parameters: [] })"] }
# 00745 Instruction { source: "DisableInterrupts", opcode: DisableInterrupts, args: [], resolved: None }
77 
# inline_main_getc_20_t7d0e <- inline_main_getc_20_g U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# optimized away noop copy Instruction { source: "inline_main_getc_20_t7d0e <- inline_main_getc_20_g U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Queue\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Queue\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_t938b <- inline_main_getc_20_t7d0e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))"] }
# optimized away noop copy Instruction { source: "inline_main_getc_20_t938b <- inline_main_getc_20_t7d0e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_inline_getc_queue_pop_18_s <- inline_main_getc_20_t938b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_s <- inline_main_getc_20_t938b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 00746 Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x70)], resolved: None }
21 5c 70 
# 00749 Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x70), Constant32(0x00000100=256)], resolved: None }
32 70 00 01 00 00 
# inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")"] }
# 0074f Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\"] }", opcode: Load8, args: [Register(0x70), Register(0x6c)], resolved: None }
05 70 6c 
# inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 00752 Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x60)], resolved: None }
21 5c 60 
# 00755 Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x60), Constant32(0x00000104=260)], resolved: None }
32 60 04 01 00 00 
# inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tc1ff] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 0075b Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tc1ff] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x60), Register(0x64)], resolved: None }
05 60 64 
# if inline_main_getc_20_inline_getc_queue_pop_18_tb6dd == inline_main_getc_20_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }"] }
# 0075e Instruction { source: "if inline_main_getc_20_inline_getc_queue_pop_18_tb6dd == inline_main_getc_20_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: Cmp8, args: [Register(0x6c), Register(0x64)], resolved: None }
15 6c 64 
# 00761 Instruction { source: "if inline_main_getc_20_inline_getc_queue_pop_18_tb6dd == inline_main_getc_20_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: JzImm, args: [Label24(inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1)], resolved: None }
72 69 07 00 
# 00765 Instruction { source: "if inline_main_getc_20_inline_getc_queue_pop_18_tb6dd == inline_main_getc_20_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2)], resolved: None }
70 74 07 00 
# :inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }"] }
# inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1
# inline_main_getc_20_inline_getc_queue_pop_18_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00769 Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x58), Constant8(0x00=0)], resolved: None }
04 58 00 
# inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_tb36e U8
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# optimized away noop copy Instruction { source: "inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_tb36e U8\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# goto inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 0076c Instruction { source: "goto inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: JmpImm, args: [Label24(inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop)], resolved: None }
70 bb 07 00 
# goto inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0
# 	SourceContext { contexts: [] }
# 00770 Instruction { source: "goto inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0)], resolved: None }
70 74 07 00 
# :inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2
# :inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0
# inline_main_getc_20_inline_getc_queue_pop_18_t565a <- inline_main_getc_20_inline_getc_queue_pop_18_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_t565a <- inline_main_getc_20_inline_getc_queue_pop_18_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_inline_getc_queue_pop_18_values <- inline_main_getc_20_inline_getc_queue_pop_18_t565a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 00774 Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_values <- inline_main_getc_20_inline_getc_queue_pop_18_t565a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x60)], resolved: None }
21 5c 60 
# inline_main_getc_20_inline_getc_queue_pop_18_t1d36 <- inline_main_getc_20_inline_getc_queue_pop_18_values U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_t1d36 <- inline_main_getc_20_inline_getc_queue_pop_18_values U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 00777 Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x70)], resolved: None }
21 5c 70 
# 0077a Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x70), Constant32(0x00000100=256)], resolved: None }
32 70 00 01 00 00 
# inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")"] }
# 00780 Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\"] }", opcode: Load8, args: [Register(0x70), Register(0x6c)], resolved: None }
05 70 6c 
# inline_main_getc_20_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }"] }
# 00783 Instruction { source: "Zero-pad for inline_main_getc_20_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\"] }", opcode: LoadImm32, args: [Register(0x68), Constant32(0x00000000=0)], resolved: None }
20 68 00 00 00 00 
# 00789 Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x68)], resolved: None }
0b 6c 68 
# inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_20_inline_getc_queue_pop_18_t1d36 Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469)
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })"] }
# 0078c Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_20_inline_getc_queue_pop_18_t1d36 Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0078d Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_20_inline_getc_queue_pop_18_t1d36 Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x60), Register(0x68), Register(0x60)], resolved: None }
30 60 68 60 
# 00791 Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_20_inline_getc_queue_pop_18_t1d36 Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_getc_20_inline_getc_queue_pop_18_value <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tae11] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))"] }
# 00792 Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_value <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tae11] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\"] }", opcode: Load8, args: [Register(0x60), Register(0x64)], resolved: None }
05 60 64 
# inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 00795 Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x70)], resolved: None }
21 5c 70 
# 00798 Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x70), Constant32(0x00000100=256)], resolved: None }
32 70 00 01 00 00 
# inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 0079e Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x70)], resolved: None }
21 5c 70 
# 007a1 Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x70), Constant32(0x00000100=256)], resolved: None }
32 70 00 01 00 00 
# inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")"] }
# 007a7 Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\"] }", opcode: Load8, args: [Register(0x70), Register(0x6c)], resolved: None }
05 70 6c 
# inline_main_getc_20_inline_getc_queue_pop_18_t6fdb <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))"] }
# 007aa Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_t6fdb <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 007ad Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_t6fdb <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x6c), Register(0x00), Register(0x58)], resolved: None }
14 6c 00 58 
# mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_t6fdb U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }"] }
# 007b1 Instruction { source: "mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_t6fdb U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x58), Register(0x70)], resolved: None }
06 58 70 
# inline_main_getc_20_inline_getc_queue_pop_18_t44ed <- inline_main_getc_20_inline_getc_queue_pop_18_value U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"value\")) }", "Ident(\"value\")", "Ident(\"value\")"] }
# 007b4 Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_t44ed <- inline_main_getc_20_inline_getc_queue_pop_18_value U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"value\\\")) }\", \"Ident(\\\"value\\\")\", \"Ident(\\\"value\\\")\"] }", opcode: Copy8, args: [Register(0x64), Register(0x58)], resolved: None }
0b 64 58 
# inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_t44ed U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"value\")) }"] }
# optimized away noop copy Instruction { source: "inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_t44ed U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"value\\\")) }\"] }", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# goto inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"value\")) }"] }
# 007b7 Instruction { source: "goto inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"value\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop)], resolved: None }
70 bb 07 00 
# :inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop
# 	SourceContext { contexts: [] }
# inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop
# None <= call enable_interrupts()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"enable_interrupts\", parameters: [] }) }", "Call(Call { function: \"enable_interrupts\", parameters: [] })", "Call(Call { function: \"enable_interrupts\", parameters: [] })"] }
# 007bb Instruction { source: "EnableInterrupts", opcode: EnableInterrupts, args: [], resolved: None }
76 
# inline_main_getc_20_tdcd9 <- inline_main_getc_20_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"ch\")) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_getc_20_tdcd9 <- inline_main_getc_20_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"ch\\\")) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# ch <- inline_main_getc_20_tdcd9 U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"ch\")) }"] }
# optimized away noop copy Instruction { source: "ch <- inline_main_getc_20_tdcd9 U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"ch\\\")) }\"] }", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# goto inline_main_getc_20_function_end_getc
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"ch\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_getc_20_function_end_getc\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"ch\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_main_getc_20_function_end_getc)], resolved: None }
# :inline_main_getc_20_function_end_getc
# 	SourceContext { contexts: [] }
# inline_main_getc_20_function_end_getc
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }", "Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }", "Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 007bc Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x00=0)], resolved: None }
04 64 00 
# if tdcd9 != tb36e then 'main_if_true_0_7' else 'main_if_else_0_8'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }", "Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }"] }
# 007bf Instruction { source: "if tdcd9 != tb36e then 'main_if_true_0_7' else 'main_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x58), Register(0x64)], resolved: None }
15 58 64 
# 007c2 Instruction { source: "if tdcd9 != tb36e then 'main_if_true_0_7' else 'main_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_if_else_0_8)], resolved: None }
72 e6 07 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if tdcd9 != tb36e then 'main_if_true_0_7' else 'main_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_if_true_0_7)], resolved: None }
# :main_if_true_0_7
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }"] }
# main_if_true_0_7
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# t1501 <- 0n113/0x71u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Number(U8, 113)", "Number(U8, 113)"] }
# 007c6 Instruction { source: "t1501 <- 0n113/0x71u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Number(U8, 113)\", \"Number(U8, 113)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x71=113)], resolved: None }
04 64 71 
# if tdcd9 == t1501 then 'main_if_true_0_10' else 'main_if_else_0_11'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }"] }
# 007c9 Instruction { source: "if tdcd9 == t1501 then 'main_if_true_0_10' else 'main_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: Cmp8, args: [Register(0x58), Register(0x64)], resolved: None }
15 58 64 
# 007cc Instruction { source: "if tdcd9 == t1501 then 'main_if_true_0_10' else 'main_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JzImm, args: [Label24(main_if_true_0_10)], resolved: None }
72 d4 07 00 
# 007d0 Instruction { source: "if tdcd9 == t1501 then 'main_if_true_0_10' else 'main_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_0_11)], resolved: None }
70 e0 07 00 
# :main_if_true_0_10
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }"] }
# main_if_true_0_10
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 007d4 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x00=0)], resolved: None }
04 64 00 
# return Some(tb36e)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 007d7 Instruction { source: "return Some(tb36e)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x00)], resolved: None }
0b 64 00 
# 007da Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto main_if_end_9
# 	SourceContext { contexts: [] }
# 007dc Instruction { source: "goto main_if_end_9\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_9)], resolved: None }
70 e0 07 00 
# :main_if_else_0_11
# 	SourceContext { contexts: [] }
# main_if_else_0_11
# :main_if_end_9
# 	SourceContext { contexts: [] }
# main_if_end_9
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# ttyout <- tdcd9
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"ch\") }"] }
# 007e0 Instruction { source: "ttyout <- tdcd9\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"ch\\\") }\"] }", opcode: Out0, args: [Register(0x58)], resolved: None }
68 58 
# goto main_if_end_6
# 	SourceContext { contexts: [] }
# 007e2 Instruction { source: "goto main_if_end_6\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_6)], resolved: None }
70 e6 07 00 
# :main_if_else_0_8
# 	SourceContext { contexts: [] }
# main_if_else_0_8
# :main_if_end_6
# 	SourceContext { contexts: [] }
# main_if_end_6
# goto main_while_predicate_3
# 	SourceContext { contexts: [] }
# 007e6 Instruction { source: "goto main_while_predicate_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_while_predicate_3)], resolved: None }
70 2e 07 00 
# :main_while_end_5
# 	SourceContext { contexts: [] }
# main_while_end_5
# :function_end_main
# 	SourceContext { contexts: [] }
# function_end_main
# Unreachable
# 	SourceContext { contexts: [] }
# 007ea Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
