v2.0 raw
# ImageBaseAddress=0x00000000
# entry
# 00000 Init []
#       Initialzing flags and internal regs.
00 

# 00001 LoadImm32 [Register(0x0c), Constant32(0x000f0f00=986880)]
#       Initialzing stack register to 0x000f0f00.
20 0c 00 0f 0f 00 

# 00007 LoadImm32 [Register(0x10), Constant32(0x000f0f0c=986892)]
#       load address of ISR slot 0x000f0f0c into R10.
20 10 0c 0f 0f 00 

# 0000d StoreImm32 [Register(0x10), Label32(:isr)]
#       store address of ISR isr to ISR slot 0x000f0f0c into R10.
25 10 f4 05 00 00 

# 00013 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:main))
32 0c fc ff ff ff 

# 00019 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:main))
25 0c 23 00 00 00 

# 0001f JmpImm [Label24(:main)]
#       PseudoCall(Label24(:main))
70 59 06 00 

# 00023 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:main))
32 0c 04 00 00 00 

# 00029 Halt [Constant32(0x00000000=0)]
#       Halting after return from entry function.
7e 00 00 00 00 

# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
20 
20 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
0a 
0a 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :handle_ps2
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([16])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([16])
# Var g (Local g Ptr(Struct("Globals")) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var index (Local index Number(USIZE) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_handle_ps2_globals_1_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_handle_ps2_globals_1_g (Local g Struct("Globals") Static(987500)) Static(987500) None
# Var inline_handle_ps2_globals_1_keyboard (local view of global static keyboard) Static(987136) None
# Var inline_handle_ps2_globals_1_keyboard_enable (local view of global static keyboard_enable) Static(987144) None
# Var inline_handle_ps2_globals_1_lcd_current (local view of global static lcd_current) Static(987148) None
# Var inline_handle_ps2_globals_1_lcd_display (local view of global static lcd_display) Static(987152) None
# Var inline_handle_ps2_globals_1_lcd_enable (local view of global static lcd_enable) Static(987232) None
# Var inline_handle_ps2_globals_1_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_handle_ps2_globals_1_stdin (local view of global static stdin) Static(987236) None
# Var inline_handle_ps2_globals_1_t0 (static "g" addr) Reg(U32) Some([28, 29, 30, 31])
# Var inline_handle_ps2_globals_1_t4206 (t4206 AddressOf(Ident("g"))) Reg(U32) Some([28, 29, 30, 31])
# Var inline_handle_ps2_queue_push_25_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_handle_ps2_queue_push_25_keyboard (local view of global static keyboard) Static(987136) None
# Var inline_handle_ps2_queue_push_25_keyboard_enable (local view of global static keyboard_enable) Static(987144) None
# Var inline_handle_ps2_queue_push_25_lcd_current (local view of global static lcd_current) Static(987148) None
# Var inline_handle_ps2_queue_push_25_lcd_display (local view of global static lcd_display) Static(987152) None
# Var inline_handle_ps2_queue_push_25_lcd_enable (local view of global static lcd_enable) Static(987232) None
# Var inline_handle_ps2_queue_push_25_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_handle_ps2_queue_push_25_n (Arg1 n Number(U8)) Reg(U8) Some([16])
# Var inline_handle_ps2_queue_push_25_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([32, 33, 34, 35])
# Var inline_handle_ps2_queue_push_25_stdin (local view of global static stdin) Static(987236) None
# Var inline_handle_ps2_queue_push_25_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_handle_ps2_queue_push_25_t2187 (t2187 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_handle_ps2_queue_push_25_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([40])
# Var inline_handle_ps2_queue_push_25_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_handle_ps2_queue_push_25_t531d (t531d Ident("n")) Reg(U8) Some([16])
# Var inline_handle_ps2_queue_push_25_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_handle_ps2_queue_push_25_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_handle_ps2_queue_push_25_t6778 (t6778 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([16])
# Var inline_handle_ps2_queue_push_25_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([48, 49, 50, 51])
# Var inline_handle_ps2_queue_push_25_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([36, 37, 38, 39])
# Var keyboard (local view of global static keyboard) Static(987136) None
# Var keyboard_enable (local view of global static keyboard_enable) Static(987144) None
# Var lcd_current (local view of global static lcd_current) Static(987148) None
# Var lcd_display (local view of global static lcd_display) Static(987152) None
# Var lcd_enable (local view of global static lcd_enable) Static(987232) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var stdin (local view of global static stdin) Static(987236) None
# Var t23a (t23a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }) Reg(U32) Some([28, 29, 30, 31])
# Var t2ca9 (t2ca9 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))) Reg(U8) Some([16])
# Var t4c8b (t4c8b Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([28, 29, 30, 31])
# Var t528d (t528d Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }) Reg(U32) Some([28, 29, 30, 31])
# Var t5e63 (t5e63 Arithmetic(Add, Ident("index"), Number(USIZE, 3))) Reg(U32) Some([24, 25, 26, 27])
# Var t6113 (t6113 Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] })) Reg(U8) Some([16])
# Var t674 (t674 Arithmetic(Add, Ident("index"), Number(USIZE, 1))) Reg(U32) Some([32, 33, 34, 35])
# Var t6cd9 (t6cd9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }) Reg(U32) Some([28, 29, 30, 31])
# Var t75f (t75f PtrFieldDeref("g", "release_in_progress")) Reg(U8) Some([52])
# Var t7905 (t7905 PtrFieldDeref("g", "shift_held")) Reg(U8) Some([16])
# Var t7b09 (t7b09 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))) Reg(U8) Some([16])
# Var t7d0e (t7d0e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }) Reg(U32) Some([20, 21, 22, 23])
# Var t938b (t938b AddressOf(PtrFieldDeref("g", "stdin"))) Reg(U32) Some([32, 33, 34, 35])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([53]) [0]
# Var tb62e (tb62e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([28, 29, 30, 31])
# Var tb70e (tb70e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }) Reg(U32) Some([28, 29, 30, 31])
# Var tbb6d (tbb6d Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }) Reg(U32) Some([20, 21, 22, 23])
# Var td18e (td18e Ident("index")) Reg(U32) Some([24, 25, 26, 27])
# Var td3f9 (td3f9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }) Reg(U32) Some([32, 33, 34, 35])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([16])
# Var te5cf (te5cf Arithmetic(Add, Ident("index"), Number(USIZE, 2))) Reg(U32) Some([32, 33, 34, 35])
# Var ted94 (ted94 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }) Reg(U32) Some([28, 29, 30, 31])
# Var tf68c (tf68c Ident("code")) Reg(U8) Some([16])
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([53]) [1]
# inline_handle_ps2_globals_1_t0 <- 0n987500/0x000f116cu32  Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# AddressOf(Ident("g"))
# 00433 LoadImm32 [Register(0x1c), Constant32(0x000f116c=987500)]
#       inline_handle_ps2_globals_1_t0 <- 0n987500/0x000f116cu32  Some('programs/test/keyboard_isr.j':(14,5))
#       Return { value: Some(AddressOf(Ident("g"))) }
#       AddressOf(Ident("g"))
20 1c 6c 11 0f 00 

# inline_handle_ps2_globals_1_t4206 <- inline_handle_ps2_globals_1_t0 U32 Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# AddressOf(Ident("g"))
# optimized away noop copy Instruction { source: "inline_handle_ps2_globals_1_t4206 <- inline_handle_ps2_globals_1_t0 U32 Some('programs/test/keyboard_isr.j':(14,5))\nReturn { value: Some(AddressOf(Ident(\"g\"))) }\nAddressOf(Ident(\"g\"))\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# g <- inline_handle_ps2_globals_1_t4206 U32 Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# 00439 Copy32 [Register(0x1c), Register(0x14)]
#       g <- inline_handle_ps2_globals_1_t4206 U32 Some('programs/test/keyboard_isr.j':(14,5))
#       Return { value: Some(AddressOf(Ident("g"))) }
21 1c 14 

# goto inline_handle_ps2_globals_1_function_end_globals Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_handle_ps2_globals_1_function_end_globals Some('programs/test/keyboard_isr.j':(14,5))\nReturn { value: Some(AddressOf(Ident(\"g\"))) }\n", opcode: JmpImm, args: [Label24(inline_handle_ps2_globals_1_function_end_globals)], resolved: None }
# :inline_handle_ps2_globals_1_function_end_globals None
# inline_handle_ps2_globals_1_function_end_globals
# Some(code) <= call io_read2() Some('programs/test/keyboard_isr.j':(24,5))
# Assign { target: Ident("code"), var_type: None, value: Call(Call { function: "io_read2", parameters: [] }) }
# Call(Call { function: "io_read2", parameters: [] })
# 0043c In2 [Register(0x10)]
#       IoRead2
62 10 

# tf68c <- code U8 Some('programs/test/keyboard_isr.j':(28,5))
# Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
# Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
# Ident("code")
# optimized away noop copy Instruction { source: "tf68c <- code U8 Some('programs/test/keyboard_isr.j':(28,5))\nAssign { target: Ident(\"index\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }\nArithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }\nIdent(\"code\")\n", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# t528d U32 <- tf68c U8 Some('programs/test/keyboard_isr.j':(28,5))
# Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
# Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
# 0043e LoadImm32 [Register(0x1c), Constant32(0x00000000=0)]
#       Zero-pad for t528d U32 <- tf68c U8 Some('programs/test/keyboard_isr.j':(28,5))
#       Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
20 1c 00 00 00 00 

# 00444 Copy8 [Register(0x10), Register(0x1c)]
#       t528d U32 <- tf68c U8 Some('programs/test/keyboard_isr.j':(28,5))
#       Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
0b 10 1c 

# index <- t528d Multiply Number(0n4/0x00000004u32) Some('programs/test/keyboard_isr.j':(28,5))
# Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
# Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
# 00447 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('programs/test/keyboard_isr.j':(28,5))
#       Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
20 00 04 00 00 00 

# 0044d Mul8_16 [Register(0x1c), Register(0x00), Register(0x18)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('programs/test/keyboard_isr.j':(28,5))
#       Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
11 1c 00 18 

# 00451 LoadImm8 [Register(0x1a), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('programs/test/keyboard_isr.j':(28,5))
#       Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
04 1a 00 

# 00454 LoadImm8 [Register(0x1b), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('programs/test/keyboard_isr.j':(28,5))
#       Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
04 1b 00 

# tbb6d <- g U32 Some('programs/test/keyboard_isr.j':(29,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }
# PtrFieldDeref("g", "shift_held")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264))
# Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }
# Ident("g")
# optimized away noop copy Instruction { source: "tbb6d <- g U32 Some('programs/test/keyboard_isr.j':(29,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }\nPtrFieldDeref(\"g\", \"shift_held\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))\nCast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }\nIdent(\"g\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# tb70e <- tbb6d Add Number(0n264/0x00000108u32) Some('programs/test/keyboard_isr.j':(29,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }
# PtrFieldDeref("g", "shift_held")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264))
# 00457 Copy32 [Register(0x14), Register(0x1c)]
#       tb70e <- tbb6d Add Number(0n264/0x00000108u32) Some('programs/test/keyboard_isr.j':(29,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }
#       PtrFieldDeref("g", "shift_held")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264))
21 14 1c 

# 0045a AddImm32IgnoreCarry [Register(0x1c), Constant32(0x00000108=264)]
#       tb70e <- tbb6d Add Number(0n264/0x00000108u32) Some('programs/test/keyboard_isr.j':(29,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }
#       PtrFieldDeref("g", "shift_held")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264))
32 1c 08 01 00 00 

# t7905 <- mem[tb70e] U8 Some('programs/test/keyboard_isr.j':(29,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }
# PtrFieldDeref("g", "shift_held")
# 00460 Load8 [Register(0x1c), Register(0x10)]
#       t7905 <- mem[tb70e] U8 Some('programs/test/keyboard_isr.j':(29,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }
#       PtrFieldDeref("g", "shift_held")
05 1c 10 

# tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(29,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }
# Number(U8, 0)
# 00463 LoadImm8 [Register(0x35), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(29,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }
#       Number(U8, 0)
04 35 00 

# if t7905 != tb36e then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2' Some('programs/test/keyboard_isr.j':(29,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }
# 00466 Cmp8 [Register(0x10), Register(0x35)]
#       if t7905 != tb36e then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2' Some('programs/test/keyboard_isr.j':(29,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }
15 10 35 

# 00469 JzImm [Label24(handle_ps2_if_else_0_2)]
#       if t7905 != tb36e then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2' Some('programs/test/keyboard_isr.j':(29,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }
72 89 04 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t7905 != tb36e then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2' Some('programs/test/keyboard_isr.j':(29,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_1)], resolved: None }
# :handle_ps2_if_true_0_1 Some('programs/test/keyboard_isr.j':(29,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# handle_ps2_if_true_0_1
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 0046d LoadImm32 [Register(0x1c), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 1c 2e 00 00 00 

# td18e <- index U32 Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 1))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('programs/test/keyboard_isr.j':(29,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))\nArithmetic(Add, Ident(\"index\"), Number(USIZE, 1))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# t674 <- td18e Add Number(0n1/0x00000001u32) Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 1))
# 00473 Copy32 [Register(0x18), Register(0x20)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 1))
21 18 20 

# 00476 AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000001=1)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 1))
32 20 01 00 00 00 

# t23a <- t4c8b Add Var(t674) Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# 0047c ClearCarry []
#       t23a <- t4c8b Add Var(t674) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
03 

# 0047d AddCarry32_1 [Register(0x1c), Register(0x20), Register(0x1c)]
#       t23a <- t4c8b Add Var(t674) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
30 1c 20 1c 

# 00481 AddCarry32_2 []
#       t23a <- t4c8b Add Var(t674) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
31 

# ch <- mem[t23a] U8 Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# 00482 Load8 [Register(0x1c), Register(0x10)]
#       ch <- mem[t23a] U8 Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
05 1c 10 

# goto handle_ps2_if_end_0 Some('programs/test/keyboard_isr.j':(29,5))
# 00485 JmpImm [Label24(handle_ps2_if_end_0)]
#       goto handle_ps2_if_end_0 Some('programs/test/keyboard_isr.j':(29,5))
70 98 04 00 

# :handle_ps2_if_else_0_2 Some('programs/test/keyboard_isr.j':(29,5))
# handle_ps2_if_else_0_2
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 00489 LoadImm32 [Register(0x1c), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 1c 2e 00 00 00 

# td18e <- index U32 Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('programs/test/keyboard_isr.j':(29,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# tb62e <- t4c8b Add Var(td18e) Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# 0048f ClearCarry []
#       tb62e <- t4c8b Add Var(td18e) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
03 

# 00490 AddCarry32_1 [Register(0x1c), Register(0x18), Register(0x1c)]
#       tb62e <- t4c8b Add Var(td18e) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
30 1c 18 1c 

# 00494 AddCarry32_2 []
#       tb62e <- t4c8b Add Var(td18e) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
31 

# ch <- mem[tb62e] U8 Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# 00495 Load8 [Register(0x1c), Register(0x10)]
#       ch <- mem[tb62e] U8 Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
05 1c 10 

# :handle_ps2_if_end_0 Some('programs/test/keyboard_isr.j':(29,5))
# handle_ps2_if_end_0
# tbb6d <- g U32 Some('programs/test/keyboard_isr.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
# PtrFieldDeref("g", "release_in_progress")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
# Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }
# Ident("g")
# optimized away noop copy Instruction { source: "tbb6d <- g U32 Some('programs/test/keyboard_isr.j':(35,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }\nPtrFieldDeref(\"g\", \"release_in_progress\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))\nCast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }\nIdent(\"g\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# td3f9 <- tbb6d Add Number(0n268/0x0000010cu32) Some('programs/test/keyboard_isr.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
# PtrFieldDeref("g", "release_in_progress")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
# 00498 Copy32 [Register(0x14), Register(0x20)]
#       td3f9 <- tbb6d Add Number(0n268/0x0000010cu32) Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
#       PtrFieldDeref("g", "release_in_progress")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
21 14 20 

# 0049b AddImm32IgnoreCarry [Register(0x20), Constant32(0x0000010c=268)]
#       td3f9 <- tbb6d Add Number(0n268/0x0000010cu32) Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
#       PtrFieldDeref("g", "release_in_progress")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
32 20 0c 01 00 00 

# t75f <- mem[td3f9] U8 Some('programs/test/keyboard_isr.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
# PtrFieldDeref("g", "release_in_progress")
# 004a1 Load8 [Register(0x20), Register(0x34)]
#       t75f <- mem[td3f9] U8 Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
#       PtrFieldDeref("g", "release_in_progress")
05 20 34 

# tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
# Number(U8, 0)
# 004a4 LoadImm8 [Register(0x35), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
#       Number(U8, 0)
04 35 00 

# if t75f == tb36e then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_else_0_5' Some('programs/test/keyboard_isr.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
# 004a7 Cmp8 [Register(0x34), Register(0x35)]
#       if t75f == tb36e then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_else_0_5' Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
15 34 35 

# 004aa JzImm [Label24(handle_ps2_if_true_0_4)]
#       if t75f == tb36e then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_else_0_5' Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
72 b2 04 00 

# 004ae JmpImm [Label24(handle_ps2_if_else_0_5)]
#       if t75f == tb36e then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_else_0_5' Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
70 f9 04 00 

# :handle_ps2_if_true_0_4 Some('programs/test/keyboard_isr.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
# handle_ps2_if_true_0_4
# t7d0e <- g U32 Some('programs/test/keyboard_isr.j':(35,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] })
# AddressOf(PtrFieldDeref("g", "stdin"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }
# Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }
# Ident("g")
# optimized away noop copy Instruction { source: "t7d0e <- g U32 Some('programs/test/keyboard_isr.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })\nAddressOf(PtrFieldDeref(\"g\", \"stdin\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }\nCast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }\nIdent(\"g\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t938b <- t7d0e U32 Some('programs/test/keyboard_isr.j':(35,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] })
# AddressOf(PtrFieldDeref("g", "stdin"))
# 004b2 Copy32 [Register(0x14), Register(0x20)]
#       t938b <- t7d0e U32 Some('programs/test/keyboard_isr.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] })
#       AddressOf(PtrFieldDeref("g", "stdin"))
21 14 20 

# tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(35,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_handle_ps2_queue_push_25_s <- t938b U32 Some('programs/test/keyboard_isr.j':(35,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] })
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_25_s <- t938b U32 Some('programs/test/keyboard_isr.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })\n", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_handle_ps2_queue_push_25_n <- tdcd9 U8 Some('programs/test/keyboard_isr.j':(35,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] })
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_25_n <- tdcd9 U8 Some('programs/test/keyboard_isr.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })\n", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_handle_ps2_queue_push_25_t565a <- inline_handle_ps2_queue_push_25_s U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_25_t565a <- inline_handle_ps2_queue_push_25_s U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_handle_ps2_queue_push_25_values <- inline_handle_ps2_queue_push_25_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 004b5 Copy32 [Register(0x20), Register(0x24)]
#       inline_handle_ps2_queue_push_25_values <- inline_handle_ps2_queue_push_25_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 20 24 

# inline_handle_ps2_queue_push_25_t1d36 <- inline_handle_ps2_queue_push_25_values U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_25_t1d36 <- inline_handle_ps2_queue_push_25_values U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 004b8 Copy32 [Register(0x20), Register(0x30)]
#       inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 20 30 

# 004bb AddImm32IgnoreCarry [Register(0x30), Constant32(0x00000104=260)]
#       inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 30 04 01 00 00 

# inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 004c1 Load8 [Register(0x30), Register(0x28)]
#       inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 30 28 

# inline_handle_ps2_queue_push_25_t5bb7 U32 <- inline_handle_ps2_queue_push_25_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# 004c4 LoadImm32 [Register(0x2c), Constant32(0x00000000=0)]
#       Zero-pad for inline_handle_ps2_queue_push_25_t5bb7 U32 <- inline_handle_ps2_queue_push_25_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
20 2c 00 00 00 00 

# 004ca Copy8 [Register(0x28), Register(0x2c)]
#       inline_handle_ps2_queue_push_25_t5bb7 U32 <- inline_handle_ps2_queue_push_25_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
0b 28 2c 

# inline_handle_ps2_queue_push_25_t2187 <- inline_handle_ps2_queue_push_25_t1d36 Add Var(inline_handle_ps2_queue_push_25_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# 004cd ClearCarry []
#       inline_handle_ps2_queue_push_25_t2187 <- inline_handle_ps2_queue_push_25_t1d36 Add Var(inline_handle_ps2_queue_push_25_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
03 

# 004ce AddCarry32_1 [Register(0x24), Register(0x2c), Register(0x24)]
#       inline_handle_ps2_queue_push_25_t2187 <- inline_handle_ps2_queue_push_25_t1d36 Add Var(inline_handle_ps2_queue_push_25_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
30 24 2c 24 

# 004d2 AddCarry32_2 []
#       inline_handle_ps2_queue_push_25_t2187 <- inline_handle_ps2_queue_push_25_t1d36 Add Var(inline_handle_ps2_queue_push_25_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
31 

# inline_handle_ps2_queue_push_25_t531d <- inline_handle_ps2_queue_push_25_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_25_t531d <- inline_handle_ps2_queue_push_25_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# mem[inline_handle_ps2_queue_push_25_t2187] <- inline_handle_ps2_queue_push_25_t531d U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 004d3 Store8 [Register(0x10), Register(0x24)]
#       mem[inline_handle_ps2_queue_push_25_t2187] <- inline_handle_ps2_queue_push_25_t531d U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 10 24 

# inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 004d6 Copy32 [Register(0x20), Register(0x30)]
#       inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 20 30 

# 004d9 AddImm32IgnoreCarry [Register(0x30), Constant32(0x00000104=260)]
#       inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 30 04 01 00 00 

# inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 004df Copy32 [Register(0x20), Register(0x30)]
#       inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 20 30 

# 004e2 AddImm32IgnoreCarry [Register(0x30), Constant32(0x00000104=260)]
#       inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 30 04 01 00 00 

# inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# 004e8 Load8 [Register(0x30), Register(0x28)]
#       inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
05 30 28 

# inline_handle_ps2_queue_push_25_t6778 <- inline_handle_ps2_queue_push_25_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# 004eb LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_handle_ps2_queue_push_25_t6778 <- inline_handle_ps2_queue_push_25_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
04 00 01 

# 004ee Add8NoCarryIn [Register(0x28), Register(0x00), Register(0x10)]
#       inline_handle_ps2_queue_push_25_t6778 <- inline_handle_ps2_queue_push_25_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
14 28 00 10 

# mem[inline_handle_ps2_queue_push_25_tc1ff] <- inline_handle_ps2_queue_push_25_t6778 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# 004f2 Store8 [Register(0x10), Register(0x30)]
#       mem[inline_handle_ps2_queue_push_25_tc1ff] <- inline_handle_ps2_queue_push_25_t6778 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
06 10 30 

# goto inline_handle_ps2_queue_push_25_function_end_queue_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_handle_ps2_queue_push_25_function_end_queue_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_handle_ps2_queue_push_25_function_end_queue_push)], resolved: None }
# :inline_handle_ps2_queue_push_25_function_end_queue_push None
# inline_handle_ps2_queue_push_25_function_end_queue_push
# goto handle_ps2_if_end_3 Some('programs/test/keyboard_isr.j':(35,5))
# 004f5 JmpImm [Label24(handle_ps2_if_end_3)]
#       goto handle_ps2_if_end_3 Some('programs/test/keyboard_isr.j':(35,5))
70 f9 04 00 

# :handle_ps2_if_else_0_5 Some('programs/test/keyboard_isr.j':(35,5))
# handle_ps2_if_else_0_5
# :handle_ps2_if_end_3 Some('programs/test/keyboard_isr.j':(35,5))
# handle_ps2_if_end_3
# tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Number(U8, 0)
# 004f9 LoadImm8 [Register(0x35), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Number(U8, 0)
04 35 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 004fc LoadImm32 [Register(0x1c), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 1c 2e 00 00 00 

# td18e <- index U32 Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 2))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('programs/test/keyboard_isr.j':(43,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))\nArithmetic(Add, Ident(\"index\"), Number(USIZE, 2))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# te5cf <- td18e Add Number(0n2/0x00000002u32) Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 2))
# 00502 Copy32 [Register(0x18), Register(0x20)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 2))
21 18 20 

# 00505 AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000002=2)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 2))
32 20 02 00 00 00 

# ted94 <- t4c8b Add Var(te5cf) Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# 0050b ClearCarry []
#       ted94 <- t4c8b Add Var(te5cf) Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
03 

# 0050c AddCarry32_1 [Register(0x1c), Register(0x20), Register(0x1c)]
#       ted94 <- t4c8b Add Var(te5cf) Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
30 1c 20 1c 

# 00510 AddCarry32_2 []
#       ted94 <- t4c8b Add Var(te5cf) Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
31 

# t2ca9 <- mem[ted94] U8 Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# 00511 Load8 [Register(0x1c), Register(0x10)]
#       t2ca9 <- mem[ted94] U8 Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
05 1c 10 

# if tb36e != t2ca9 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_else_0_8' Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# 00514 Cmp8 [Register(0x35), Register(0x10)]
#       if tb36e != t2ca9 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_else_0_8' Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
15 35 10 

# 00517 JzImm [Label24(handle_ps2_if_else_0_8)]
#       if tb36e != t2ca9 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_else_0_8' Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
72 57 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb36e != t2ca9 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_else_0_8' Some('programs/test/keyboard_isr.j':(43,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }\n", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_7)], resolved: None }
# :handle_ps2_if_true_0_7 Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# handle_ps2_if_true_0_7
# tbb6d <- g U32 Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
# PtrFieldDeref("g", "release_in_progress")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
# Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }
# Ident("g")
# optimized away noop copy Instruction { source: "tbb6d <- g U32 Some('programs/test/keyboard_isr.j':(43,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }\nPtrFieldDeref(\"g\", \"release_in_progress\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))\nCast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }\nIdent(\"g\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# td3f9 <- tbb6d Add Number(0n268/0x0000010cu32) Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
# PtrFieldDeref("g", "release_in_progress")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
# 0051b Copy32 [Register(0x14), Register(0x20)]
#       td3f9 <- tbb6d Add Number(0n268/0x0000010cu32) Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
#       PtrFieldDeref("g", "release_in_progress")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
21 14 20 

# 0051e AddImm32IgnoreCarry [Register(0x20), Constant32(0x0000010c=268)]
#       td3f9 <- tbb6d Add Number(0n268/0x0000010cu32) Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
#       PtrFieldDeref("g", "release_in_progress")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
32 20 0c 01 00 00 

# t75f <- mem[td3f9] U8 Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
# PtrFieldDeref("g", "release_in_progress")
# 00524 Load8 [Register(0x20), Register(0x34)]
#       t75f <- mem[td3f9] U8 Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
#       PtrFieldDeref("g", "release_in_progress")
05 20 34 

# tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
# Number(U8, 0)
# 00527 LoadImm8 [Register(0x35), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
#       Number(U8, 0)
04 35 00 

# if t75f != tb36e then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11' Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
# 0052a Cmp8 [Register(0x34), Register(0x35)]
#       if t75f != tb36e then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11' Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
15 34 35 

# 0052d JzImm [Label24(handle_ps2_if_else_0_11)]
#       if t75f != tb36e then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11' Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }
72 44 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t75f != tb36e then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11' Some('programs/test/keyboard_isr.j':(43,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_10)], resolved: None }
# :handle_ps2_if_true_0_10 Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# handle_ps2_if_true_0_10
# tbb6d <- g U32 Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264))
# Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }
# Ident("g")
# optimized away noop copy Instruction { source: "tbb6d <- g U32 Some('programs/test/keyboard_isr.j':(43,5))\nAssign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))\nCast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }\nIdent(\"g\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# tb70e <- tbb6d Add Number(0n264/0x00000108u32) Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264))
# 00531 Copy32 [Register(0x14), Register(0x1c)]
#       tb70e <- tbb6d Add Number(0n264/0x00000108u32) Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264))
21 14 1c 

# 00534 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x00000108=264)]
#       tb70e <- tbb6d Add Number(0n264/0x00000108u32) Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264))
32 1c 08 01 00 00 

# tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 0053a LoadImm8 [Register(0x35), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 35 00 

# mem[tb70e] <- tb36e U8 Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }
# 0053d Store8 [Register(0x35), Register(0x1c)]
#       mem[tb70e] <- tb36e U8 Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }
06 35 1c 

# goto handle_ps2_if_end_9 Some('programs/test/keyboard_isr.j':(43,5))
# 00540 JmpImm [Label24(handle_ps2_if_end_9)]
#       goto handle_ps2_if_end_9 Some('programs/test/keyboard_isr.j':(43,5))
70 53 05 00 

# :handle_ps2_if_else_0_11 Some('programs/test/keyboard_isr.j':(43,5))
# handle_ps2_if_else_0_11
# tbb6d <- g U32 Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264))
# Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }
# Ident("g")
# optimized away noop copy Instruction { source: "tbb6d <- g U32 Some('programs/test/keyboard_isr.j':(43,5))\nAssign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))\nCast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }\nIdent(\"g\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# tb70e <- tbb6d Add Number(0n264/0x00000108u32) Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264))
# 00544 Copy32 [Register(0x14), Register(0x1c)]
#       tb70e <- tbb6d Add Number(0n264/0x00000108u32) Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264))
21 14 1c 

# 00547 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x00000108=264)]
#       tb70e <- tbb6d Add Number(0n264/0x00000108u32) Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264))
32 1c 08 01 00 00 

# tfcd <- 0n1/0x01u8  Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 0054d LoadImm8 [Register(0x35), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 35 01 

# mem[tb70e] <- tfcd U8 Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }
# 00550 Store8 [Register(0x35), Register(0x1c)]
#       mem[tb70e] <- tfcd U8 Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 1) }
06 35 1c 

# :handle_ps2_if_end_9 Some('programs/test/keyboard_isr.j':(43,5))
# handle_ps2_if_end_9
# goto handle_ps2_if_end_6 Some('programs/test/keyboard_isr.j':(43,5))
# 00553 JmpImm [Label24(handle_ps2_if_end_6)]
#       goto handle_ps2_if_end_6 Some('programs/test/keyboard_isr.j':(43,5))
70 57 05 00 

# :handle_ps2_if_else_0_8 Some('programs/test/keyboard_isr.j':(43,5))
# handle_ps2_if_else_0_8
# :handle_ps2_if_end_6 Some('programs/test/keyboard_isr.j':(43,5))
# handle_ps2_if_end_6
# tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Number(U8, 0)
# 00557 LoadImm8 [Register(0x35), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Number(U8, 0)
04 35 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 0055a LoadImm32 [Register(0x1c), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 1c 2e 00 00 00 

# td18e <- index U32 Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 3))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('programs/test/keyboard_isr.j':(55,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))\nArithmetic(Add, Ident(\"index\"), Number(USIZE, 3))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 3))
# 00560 AddImm32IgnoreCarry [Register(0x18), Constant32(0x00000003=3)]
#       t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 3))
32 18 03 00 00 00 

# t6cd9 <- t4c8b Add Var(t5e63) Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# 00566 ClearCarry []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
03 

# 00567 AddCarry32_1 [Register(0x1c), Register(0x18), Register(0x1c)]
#       t6cd9 <- t4c8b Add Var(t5e63) Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
30 1c 18 1c 

# 0056b AddCarry32_2 []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
31 

# t7b09 <- mem[t6cd9] U8 Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# 0056c Load8 [Register(0x1c), Register(0x10)]
#       t7b09 <- mem[t6cd9] U8 Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
05 1c 10 

# if tb36e != t7b09 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14' Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# 0056f Cmp8 [Register(0x35), Register(0x10)]
#       if tb36e != t7b09 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14' Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
15 35 10 

# 00572 JzImm [Label24(handle_ps2_if_else_0_14)]
#       if tb36e != t7b09 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14' Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
72 89 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb36e != t7b09 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14' Some('programs/test/keyboard_isr.j':(55,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }\n", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_13)], resolved: None }
# :handle_ps2_if_true_0_13 Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# handle_ps2_if_true_0_13
# tbb6d <- g U32 Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
# Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }
# Ident("g")
# optimized away noop copy Instruction { source: "tbb6d <- g U32 Some('programs/test/keyboard_isr.j':(55,5))\nAssign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))\nCast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }\nIdent(\"g\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# td3f9 <- tbb6d Add Number(0n268/0x0000010cu32) Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
# 00576 Copy32 [Register(0x14), Register(0x20)]
#       td3f9 <- tbb6d Add Number(0n268/0x0000010cu32) Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
21 14 20 

# 00579 AddImm32IgnoreCarry [Register(0x20), Constant32(0x0000010c=268)]
#       td3f9 <- tbb6d Add Number(0n268/0x0000010cu32) Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
32 20 0c 01 00 00 

# tfcd <- 0n1/0x01u8  Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 0057f LoadImm8 [Register(0x35), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 35 01 

# mem[td3f9] <- tfcd U8 Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# 00582 Store8 [Register(0x35), Register(0x20)]
#       mem[td3f9] <- tfcd U8 Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 1) }
06 35 20 

# goto handle_ps2_if_end_12 Some('programs/test/keyboard_isr.j':(55,5))
# 00585 JmpImm [Label24(handle_ps2_if_end_12)]
#       goto handle_ps2_if_end_12 Some('programs/test/keyboard_isr.j':(55,5))
70 98 05 00 

# :handle_ps2_if_else_0_14 Some('programs/test/keyboard_isr.j':(55,5))
# handle_ps2_if_else_0_14
# tbb6d <- g U32 Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
# Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }
# Ident("g")
# optimized away noop copy Instruction { source: "tbb6d <- g U32 Some('programs/test/keyboard_isr.j':(55,5))\nAssign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))\nCast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }\nIdent(\"g\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# td3f9 <- tbb6d Add Number(0n268/0x0000010cu32) Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
# 00589 Copy32 [Register(0x14), Register(0x20)]
#       td3f9 <- tbb6d Add Number(0n268/0x0000010cu32) Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
21 14 20 

# 0058c AddImm32IgnoreCarry [Register(0x20), Constant32(0x0000010c=268)]
#       td3f9 <- tbb6d Add Number(0n268/0x0000010cu32) Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
32 20 0c 01 00 00 

# tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00592 LoadImm8 [Register(0x35), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 35 00 

# mem[td3f9] <- tb36e U8 Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# 00595 Store8 [Register(0x35), Register(0x20)]
#       mem[td3f9] <- tb36e U8 Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }
06 35 20 

# :handle_ps2_if_end_12 Some('programs/test/keyboard_isr.j':(55,5))
# handle_ps2_if_end_12
# return None None
# Return { value: None }
# 00598 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_handle_ps2 None
# function_end_handle_ps2
# Unreachable None
# 0059a Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :handle_tty
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var g (Local g Ptr(Struct("Globals")) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_handle_tty_globals_2_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_handle_tty_globals_2_g (Local g Struct("Globals") Static(987500)) Static(987500) None
# Var inline_handle_tty_globals_2_keyboard (local view of global static keyboard) Static(987136) None
# Var inline_handle_tty_globals_2_keyboard_enable (local view of global static keyboard_enable) Static(987144) None
# Var inline_handle_tty_globals_2_lcd_current (local view of global static lcd_current) Static(987148) None
# Var inline_handle_tty_globals_2_lcd_display (local view of global static lcd_display) Static(987152) None
# Var inline_handle_tty_globals_2_lcd_enable (local view of global static lcd_enable) Static(987232) None
# Var inline_handle_tty_globals_2_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_handle_tty_globals_2_stdin (local view of global static stdin) Static(987236) None
# Var inline_handle_tty_globals_2_t0 (static "g" addr) Reg(U32) Some([56, 57, 58, 59])
# Var inline_handle_tty_globals_2_t4206 (t4206 AddressOf(Ident("g"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_handle_tty_queue_push_26_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_handle_tty_queue_push_26_keyboard (local view of global static keyboard) Static(987136) None
# Var inline_handle_tty_queue_push_26_keyboard_enable (local view of global static keyboard_enable) Static(987144) None
# Var inline_handle_tty_queue_push_26_lcd_current (local view of global static lcd_current) Static(987148) None
# Var inline_handle_tty_queue_push_26_lcd_display (local view of global static lcd_display) Static(987152) None
# Var inline_handle_tty_queue_push_26_lcd_enable (local view of global static lcd_enable) Static(987232) None
# Var inline_handle_tty_queue_push_26_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_handle_tty_queue_push_26_n (Arg1 n Number(U8)) Reg(U8) Some([60])
# Var inline_handle_tty_queue_push_26_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_handle_tty_queue_push_26_stdin (local view of global static stdin) Static(987236) None
# Var inline_handle_tty_queue_push_26_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_handle_tty_queue_push_26_t2187 (t2187 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_handle_tty_queue_push_26_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([72])
# Var inline_handle_tty_queue_push_26_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_handle_tty_queue_push_26_t531d (t531d Ident("n")) Reg(U8) Some([60])
# Var inline_handle_tty_queue_push_26_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_handle_tty_queue_push_26_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_handle_tty_queue_push_26_t6778 (t6778 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([60])
# Var inline_handle_tty_queue_push_26_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_handle_tty_queue_push_26_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var keyboard (local view of global static keyboard) Static(987136) None
# Var keyboard_enable (local view of global static keyboard_enable) Static(987144) None
# Var lcd_current (local view of global static lcd_current) Static(987148) None
# Var lcd_display (local view of global static lcd_display) Static(987152) None
# Var lcd_enable (local view of global static lcd_enable) Static(987232) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var stdin (local view of global static stdin) Static(987236) None
# Var t7d0e (t7d0e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }) Reg(U32) Some([56, 57, 58, 59])
# Var t8854 (t8854 Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })) Reg(U8) Some([60])
# Var t938b (t938b AddressOf(PtrFieldDeref("g", "stdin"))) Reg(U32) Some([56, 57, 58, 59])
# Var tb816 (tb816 TtyIn) Reg(U8) Some([84])
# inline_handle_tty_globals_2_t0 <- 0n987500/0x000f116cu32  Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# AddressOf(Ident("g"))
# 0059f LoadImm32 [Register(0x38), Constant32(0x000f116c=987500)]
#       inline_handle_tty_globals_2_t0 <- 0n987500/0x000f116cu32  Some('programs/test/keyboard_isr.j':(14,5))
#       Return { value: Some(AddressOf(Ident("g"))) }
#       AddressOf(Ident("g"))
20 38 6c 11 0f 00 

# inline_handle_tty_globals_2_t4206 <- inline_handle_tty_globals_2_t0 U32 Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# AddressOf(Ident("g"))
# optimized away noop copy Instruction { source: "inline_handle_tty_globals_2_t4206 <- inline_handle_tty_globals_2_t0 U32 Some('programs/test/keyboard_isr.j':(14,5))\nReturn { value: Some(AddressOf(Ident(\"g\"))) }\nAddressOf(Ident(\"g\"))\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# g <- inline_handle_tty_globals_2_t4206 U32 Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# optimized away noop copy Instruction { source: "g <- inline_handle_tty_globals_2_t4206 U32 Some('programs/test/keyboard_isr.j':(14,5))\nReturn { value: Some(AddressOf(Ident(\"g\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# goto inline_handle_tty_globals_2_function_end_globals Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_handle_tty_globals_2_function_end_globals Some('programs/test/keyboard_isr.j':(14,5))\nReturn { value: Some(AddressOf(Ident(\"g\"))) }\n", opcode: JmpImm, args: [Label24(inline_handle_tty_globals_2_function_end_globals)], resolved: None }
# :inline_handle_tty_globals_2_function_end_globals None
# inline_handle_tty_globals_2_function_end_globals
# t7d0e <- g U32 Some('programs/test/keyboard_isr.j':(71,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })
# AddressOf(PtrFieldDeref("g", "stdin"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }
# Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }
# Ident("g")
# optimized away noop copy Instruction { source: "t7d0e <- g U32 Some('programs/test/keyboard_isr.j':(71,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })\nAddressOf(PtrFieldDeref(\"g\", \"stdin\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }\nCast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }\nIdent(\"g\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# t938b <- t7d0e U32 Some('programs/test/keyboard_isr.j':(71,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })
# AddressOf(PtrFieldDeref("g", "stdin"))
# optimized away noop copy Instruction { source: "t938b <- t7d0e U32 Some('programs/test/keyboard_isr.j':(71,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })\nAddressOf(PtrFieldDeref(\"g\", \"stdin\"))\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# tb816 <- ttyin Some('programs/test/keyboard_isr.j':(71,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })
# TtyIn
# 005a5 In0 [Register(0x54)]
#       tb816 <- ttyin Some('programs/test/keyboard_isr.j':(71,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })
#       TtyIn
60 54 

# inline_handle_tty_queue_push_26_s <- t938b U32 Some('programs/test/keyboard_isr.j':(71,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })
# 005a7 Copy32 [Register(0x38), Register(0x40)]
#       inline_handle_tty_queue_push_26_s <- t938b U32 Some('programs/test/keyboard_isr.j':(71,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })
21 38 40 

# inline_handle_tty_queue_push_26_n <- tb816 U8 Some('programs/test/keyboard_isr.j':(71,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })
# 005aa Copy8 [Register(0x54), Register(0x3c)]
#       inline_handle_tty_queue_push_26_n <- tb816 U8 Some('programs/test/keyboard_isr.j':(71,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })
0b 54 3c 

# inline_handle_tty_queue_push_26_t565a <- inline_handle_tty_queue_push_26_s U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_handle_tty_queue_push_26_t565a <- inline_handle_tty_queue_push_26_s U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_handle_tty_queue_push_26_values <- inline_handle_tty_queue_push_26_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 005ad Copy32 [Register(0x40), Register(0x44)]
#       inline_handle_tty_queue_push_26_values <- inline_handle_tty_queue_push_26_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 40 44 

# inline_handle_tty_queue_push_26_t1d36 <- inline_handle_tty_queue_push_26_values U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_handle_tty_queue_push_26_t1d36 <- inline_handle_tty_queue_push_26_values U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 005b0 Copy32 [Register(0x40), Register(0x50)]
#       inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 40 50 

# 005b3 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000104=260)]
#       inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 50 04 01 00 00 

# inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 005b9 Load8 [Register(0x50), Register(0x48)]
#       inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 50 48 

# inline_handle_tty_queue_push_26_t5bb7 U32 <- inline_handle_tty_queue_push_26_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# 005bc LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_handle_tty_queue_push_26_t5bb7 U32 <- inline_handle_tty_queue_push_26_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
20 4c 00 00 00 00 

# 005c2 Copy8 [Register(0x48), Register(0x4c)]
#       inline_handle_tty_queue_push_26_t5bb7 U32 <- inline_handle_tty_queue_push_26_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
0b 48 4c 

# inline_handle_tty_queue_push_26_t2187 <- inline_handle_tty_queue_push_26_t1d36 Add Var(inline_handle_tty_queue_push_26_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# 005c5 ClearCarry []
#       inline_handle_tty_queue_push_26_t2187 <- inline_handle_tty_queue_push_26_t1d36 Add Var(inline_handle_tty_queue_push_26_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
03 

# 005c6 AddCarry32_1 [Register(0x44), Register(0x4c), Register(0x44)]
#       inline_handle_tty_queue_push_26_t2187 <- inline_handle_tty_queue_push_26_t1d36 Add Var(inline_handle_tty_queue_push_26_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
30 44 4c 44 

# 005ca AddCarry32_2 []
#       inline_handle_tty_queue_push_26_t2187 <- inline_handle_tty_queue_push_26_t1d36 Add Var(inline_handle_tty_queue_push_26_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
31 

# inline_handle_tty_queue_push_26_t531d <- inline_handle_tty_queue_push_26_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_handle_tty_queue_push_26_t531d <- inline_handle_tty_queue_push_26_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy8, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_handle_tty_queue_push_26_t2187] <- inline_handle_tty_queue_push_26_t531d U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 005cb Store8 [Register(0x3c), Register(0x44)]
#       mem[inline_handle_tty_queue_push_26_t2187] <- inline_handle_tty_queue_push_26_t531d U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 3c 44 

# inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 005ce Copy32 [Register(0x40), Register(0x50)]
#       inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 40 50 

# 005d1 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000104=260)]
#       inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 50 04 01 00 00 

# inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 005d7 Copy32 [Register(0x40), Register(0x50)]
#       inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 40 50 

# 005da AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000104=260)]
#       inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 50 04 01 00 00 

# inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# 005e0 Load8 [Register(0x50), Register(0x48)]
#       inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
05 50 48 

# inline_handle_tty_queue_push_26_t6778 <- inline_handle_tty_queue_push_26_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# 005e3 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_handle_tty_queue_push_26_t6778 <- inline_handle_tty_queue_push_26_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
04 00 01 

# 005e6 Add8NoCarryIn [Register(0x48), Register(0x00), Register(0x3c)]
#       inline_handle_tty_queue_push_26_t6778 <- inline_handle_tty_queue_push_26_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
14 48 00 3c 

# mem[inline_handle_tty_queue_push_26_tc1ff] <- inline_handle_tty_queue_push_26_t6778 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# 005ea Store8 [Register(0x3c), Register(0x50)]
#       mem[inline_handle_tty_queue_push_26_tc1ff] <- inline_handle_tty_queue_push_26_t6778 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
06 3c 50 

# goto inline_handle_tty_queue_push_26_function_end_queue_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_handle_tty_queue_push_26_function_end_queue_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_handle_tty_queue_push_26_function_end_queue_push)], resolved: None }
# :inline_handle_tty_queue_push_26_function_end_queue_push None
# inline_handle_tty_queue_push_26_function_end_queue_push
# return None None
# Return { value: None }
# 005ed JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_handle_tty None
# function_end_handle_tty
# Unreachable None
# 005ef Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :isr
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var keyboard (local view of global static keyboard) Static(987136) None
# Var keyboard_enable (local view of global static keyboard_enable) Static(987144) None
# Var lcd_current (local view of global static lcd_current) Static(987148) None
# Var lcd_display (local view of global static lcd_display) Static(987152) None
# Var lcd_enable (local view of global static lcd_enable) Static(987232) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var rtr (Local rtr Number(U8) Reg(U8)) Reg(U8) Some([85])
# Var stdin (local view of global static stdin) Static(987236) None
# Var t111c (t111c Arithmetic(And, Ident("rtr"), Number(U8, 4))) Reg(U8) Some([85])
# Var t42ec (t42ec Call(Call { function: "handle_ps2", parameters: [] })) Reg(U8) Some([85])
# Var t59ef (t59ef Ident("rtr")) Reg(U8) Some([85])
# Var ta0e9 (ta0e9 Arithmetic(And, Ident("rtr"), Number(U8, 1))) Reg(U8) Some([86])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([87]) [0]
# Var td125 (td125 Call(Call { function: "handle_tty", parameters: [] })) Reg(U8) Some([85])
# Registers used by this function: {85, 86, 87}
# 005f4 Push8 [Register(0x57)]
#       Saving reg0x57 before before entering ISR body
09 57 

# 005f6 Push8 [Register(0x56)]
#       Saving reg0x56 before before entering ISR body
09 56 

# 005f8 Push8 [Register(0x55)]
#       Saving reg0x55 before before entering ISR body
09 55 

# Some(rtr) <= call io_ready_to_read() Some('programs/test/keyboard_isr.j':(75,5))
# Assign { target: Ident("rtr"), var_type: None, value: Call(Call { function: "io_ready_to_read", parameters: [] }) }
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 005fa IoReadyToRead [Register(0x55)]
#       ReadyToRead
79 55 

# t59ef <- rtr U8 Some('programs/test/keyboard_isr.j':(77,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }
# Arithmetic(And, Ident("rtr"), Number(U8, 1))
# Ident("rtr")
# optimized away noop copy Instruction { source: "t59ef <- rtr U8 Some('programs/test/keyboard_isr.j':(77,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }\nArithmetic(And, Ident(\"rtr\"), Number(U8, 1))\nIdent(\"rtr\")\n", opcode: Copy8, args: [Register(0x55), Register(0x55)], resolved: None }
# ta0e9 <- t59ef BitwiseAnd Number(0n1/0x01u8) Some('programs/test/keyboard_isr.j':(77,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }
# Arithmetic(And, Ident("rtr"), Number(U8, 1))
# 005fc Copy8 [Register(0x55), Register(0x56)]
#       ta0e9 <- t59ef BitwiseAnd Number(0n1/0x01u8) Some('programs/test/keyboard_isr.j':(77,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }
#       Arithmetic(And, Ident("rtr"), Number(U8, 1))
0b 55 56 

# 005ff AndImm8 [Register(0x56), Constant8(0x01=1)]
#       ta0e9 <- t59ef BitwiseAnd Number(0n1/0x01u8) Some('programs/test/keyboard_isr.j':(77,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }
#       Arithmetic(And, Ident("rtr"), Number(U8, 1))
18 56 01 

# tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(77,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }
# Number(U8, 0)
# 00602 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(77,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }
#       Number(U8, 0)
04 57 00 

# if ta0e9 != tb36e then 'isr_if_true_0_1' else 'isr_if_else_0_2' Some('programs/test/keyboard_isr.j':(77,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }
# 00605 Cmp8 [Register(0x56), Register(0x57)]
#       if ta0e9 != tb36e then 'isr_if_true_0_1' else 'isr_if_else_0_2' Some('programs/test/keyboard_isr.j':(77,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }
15 56 57 

# 00608 JzImm [Label24(isr_if_else_0_2)]
#       if ta0e9 != tb36e then 'isr_if_true_0_1' else 'isr_if_else_0_2' Some('programs/test/keyboard_isr.j':(77,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }
72 26 06 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta0e9 != tb36e then 'isr_if_true_0_1' else 'isr_if_else_0_2' Some('programs/test/keyboard_isr.j':(77,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(isr_if_true_0_1)], resolved: None }
# :isr_if_true_0_1 Some('programs/test/keyboard_isr.j':(77,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
# isr_if_true_0_1
# None <= call handle_tty() Some('programs/test/keyboard_isr.j':(77,5))
# VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }
# Call(Call { function: "handle_tty", parameters: [] })
# Registers used by this function: {85, 86, 87}
# Registers used by callee tree: {56, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84}
# Registers to save: []
# 0060c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:handle_tty))
32 0c fc ff ff ff 

# 00612 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:handle_tty))
25 0c 1c 06 00 00 

# 00618 JmpImm [Label24(:handle_tty)]
#       PseudoCall(Label24(:handle_tty))
70 9f 05 00 

# 0061c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:handle_tty))
32 0c 04 00 00 00 

# goto isr_if_end_0 Some('programs/test/keyboard_isr.j':(77,5))
# 00622 JmpImm [Label24(isr_if_end_0)]
#       goto isr_if_end_0 Some('programs/test/keyboard_isr.j':(77,5))
70 26 06 00 

# :isr_if_else_0_2 Some('programs/test/keyboard_isr.j':(77,5))
# isr_if_else_0_2
# :isr_if_end_0 Some('programs/test/keyboard_isr.j':(77,5))
# isr_if_end_0
# t59ef <- rtr U8 Some('programs/test/keyboard_isr.j':(81,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 4)), right: Number(U8, 0) }
# Arithmetic(And, Ident("rtr"), Number(U8, 4))
# Ident("rtr")
# optimized away noop copy Instruction { source: "t59ef <- rtr U8 Some('programs/test/keyboard_isr.j':(81,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }\nArithmetic(And, Ident(\"rtr\"), Number(U8, 4))\nIdent(\"rtr\")\n", opcode: Copy8, args: [Register(0x55), Register(0x55)], resolved: None }
# t111c <- t59ef BitwiseAnd Number(0n4/0x04u8) Some('programs/test/keyboard_isr.j':(81,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 4)), right: Number(U8, 0) }
# Arithmetic(And, Ident("rtr"), Number(U8, 4))
# 00626 AndImm8 [Register(0x55), Constant8(0x04=4)]
#       t111c <- t59ef BitwiseAnd Number(0n4/0x04u8) Some('programs/test/keyboard_isr.j':(81,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 4)), right: Number(U8, 0) }
#       Arithmetic(And, Ident("rtr"), Number(U8, 4))
18 55 04 

# tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(81,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 4)), right: Number(U8, 0) }
# Number(U8, 0)
# 00629 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(81,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 4)), right: Number(U8, 0) }
#       Number(U8, 0)
04 57 00 

# if t111c != tb36e then 'isr_if_true_0_4' else 'isr_if_else_0_5' Some('programs/test/keyboard_isr.j':(81,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 4)), right: Number(U8, 0) }
# 0062c Cmp8 [Register(0x55), Register(0x57)]
#       if t111c != tb36e then 'isr_if_true_0_4' else 'isr_if_else_0_5' Some('programs/test/keyboard_isr.j':(81,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 4)), right: Number(U8, 0) }
15 55 57 

# 0062f JzImm [Label24(isr_if_else_0_5)]
#       if t111c != tb36e then 'isr_if_true_0_4' else 'isr_if_else_0_5' Some('programs/test/keyboard_isr.j':(81,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 4)), right: Number(U8, 0) }
72 4d 06 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t111c != tb36e then 'isr_if_true_0_4' else 'isr_if_else_0_5' Some('programs/test/keyboard_isr.j':(81,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(isr_if_true_0_4)], resolved: None }
# :isr_if_true_0_4 Some('programs/test/keyboard_isr.j':(81,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident("rtr"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
# isr_if_true_0_4
# None <= call handle_ps2() Some('programs/test/keyboard_isr.j':(81,5))
# VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }
# Call(Call { function: "handle_ps2", parameters: [] })
# Registers used by this function: {85, 86, 87}
# Registers used by callee tree: {16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53}
# Registers to save: []
# 00633 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:handle_ps2))
32 0c fc ff ff ff 

# 00639 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:handle_ps2))
25 0c 43 06 00 00 

# 0063f JmpImm [Label24(:handle_ps2)]
#       PseudoCall(Label24(:handle_ps2))
70 33 04 00 

# 00643 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:handle_ps2))
32 0c 04 00 00 00 

# goto isr_if_end_3 Some('programs/test/keyboard_isr.j':(81,5))
# 00649 JmpImm [Label24(isr_if_end_3)]
#       goto isr_if_end_3 Some('programs/test/keyboard_isr.j':(81,5))
70 4d 06 00 

# :isr_if_else_0_5 Some('programs/test/keyboard_isr.j':(81,5))
# isr_if_else_0_5
# :isr_if_end_3 Some('programs/test/keyboard_isr.j':(81,5))
# isr_if_end_3
# return None None
# Return { value: None }
# Registers used by this function: {85, 86, 87}
# 0064d Pop8 [Register(0x55)]
#       Restoring reg0x55 after ISR body
0a 55 

# 0064f Pop8 [Register(0x56)]
#       Restoring reg0x56 after ISR body
0a 56 

# 00651 Pop8 [Register(0x57)]
#       Restoring reg0x57 after ISR body
0a 57 

# 00653 ReturnFromInterrupt []
#       return from ISR
78 

# :function_end_isr None
# function_end_isr
# Unreachable None
# 00654 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :main
# Ret Some(U8)
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([88])
# Var g (Local g Ptr(Struct("Globals")) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_19_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_main_getc_19_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([88])
# Var inline_main_getc_19_g (Local g Ptr(Struct("Globals")) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_19_inline_getc_globals_0_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_main_getc_19_inline_getc_globals_0_g (Local g Struct("Globals") Static(987500)) Static(987500) None
# Var inline_main_getc_19_inline_getc_globals_0_keyboard (local view of global static keyboard) Static(987136) None
# Var inline_main_getc_19_inline_getc_globals_0_keyboard_enable (local view of global static keyboard_enable) Static(987144) None
# Var inline_main_getc_19_inline_getc_globals_0_lcd_current (local view of global static lcd_current) Static(987148) None
# Var inline_main_getc_19_inline_getc_globals_0_lcd_display (local view of global static lcd_display) Static(987152) None
# Var inline_main_getc_19_inline_getc_globals_0_lcd_enable (local view of global static lcd_enable) Static(987232) None
# Var inline_main_getc_19_inline_getc_globals_0_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_main_getc_19_inline_getc_globals_0_stdin (local view of global static stdin) Static(987236) None
# Var inline_main_getc_19_inline_getc_globals_0_t0 (static "g" addr) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_19_inline_getc_globals_0_t4206 (t4206 AddressOf(Ident("g"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_19_inline_getc_queue_pop_18_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_main_getc_19_inline_getc_queue_pop_18_keyboard (local view of global static keyboard) Static(987136) None
# Var inline_main_getc_19_inline_getc_queue_pop_18_keyboard_enable (local view of global static keyboard_enable) Static(987144) None
# Var inline_main_getc_19_inline_getc_queue_pop_18_lcd_current (local view of global static lcd_current) Static(987148) None
# Var inline_main_getc_19_inline_getc_queue_pop_18_lcd_display (local view of global static lcd_display) Static(987152) None
# Var inline_main_getc_19_inline_getc_queue_pop_18_lcd_enable (local view of global static lcd_enable) Static(987232) None
# Var inline_main_getc_19_inline_getc_queue_pop_18_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_main_getc_19_inline_getc_queue_pop_18_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_19_inline_getc_queue_pop_18_stdin (local view of global static stdin) Static(987236) None
# Var inline_main_getc_19_inline_getc_queue_pop_18_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_main_getc_19_inline_getc_queue_pop_18_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([100])
# Var inline_main_getc_19_inline_getc_queue_pop_18_t44ed (t44ed Ident("value")) Reg(U8) Some([88])
# Var inline_main_getc_19_inline_getc_queue_pop_18_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_19_inline_getc_queue_pop_18_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_19_inline_getc_queue_pop_18_t6fdb (t6fdb Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))) Reg(U8) Some([88])
# Var inline_main_getc_19_inline_getc_queue_pop_18_tae11 (tae11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_main_getc_19_inline_getc_queue_pop_18_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([88]) [0]
# Var inline_main_getc_19_inline_getc_queue_pop_18_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_main_getc_19_inline_getc_queue_pop_18_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([108])
# Var inline_main_getc_19_inline_getc_queue_pop_18_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([112, 113, 114, 115])
# Var inline_main_getc_19_inline_getc_queue_pop_18_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_main_getc_19_inline_getc_queue_pop_18_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([100])
# Var inline_main_getc_19_inline_getc_queue_pop_18_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_main_getc_19_keyboard (local view of global static keyboard) Static(987136) None
# Var inline_main_getc_19_keyboard_enable (local view of global static keyboard_enable) Static(987144) None
# Var inline_main_getc_19_lcd_current (local view of global static lcd_current) Static(987148) None
# Var inline_main_getc_19_lcd_display (local view of global static lcd_display) Static(987152) None
# Var inline_main_getc_19_lcd_enable (local view of global static lcd_enable) Static(987232) None
# Var inline_main_getc_19_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_main_getc_19_stdin (local view of global static stdin) Static(987236) None
# Var inline_main_getc_19_t152a (t152a Call(Call { function: "disable_interrupts", parameters: [] })) Reg(U8) Some([88])
# Var inline_main_getc_19_t448e (t448e Call(Call { function: "enable_interrupts", parameters: [] })) Reg(U8) Some([88])
# Var inline_main_getc_19_t7d0e (t7d0e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_19_t938b (t938b AddressOf(PtrFieldDeref("g", "stdin"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_19_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([88])
# Var inline_main_getc_20_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_main_getc_20_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([88])
# Var inline_main_getc_20_g (Local g Ptr(Struct("Globals")) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_20_inline_getc_globals_0_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_main_getc_20_inline_getc_globals_0_g (Local g Struct("Globals") Static(987500)) Static(987500) None
# Var inline_main_getc_20_inline_getc_globals_0_keyboard (local view of global static keyboard) Static(987136) None
# Var inline_main_getc_20_inline_getc_globals_0_keyboard_enable (local view of global static keyboard_enable) Static(987144) None
# Var inline_main_getc_20_inline_getc_globals_0_lcd_current (local view of global static lcd_current) Static(987148) None
# Var inline_main_getc_20_inline_getc_globals_0_lcd_display (local view of global static lcd_display) Static(987152) None
# Var inline_main_getc_20_inline_getc_globals_0_lcd_enable (local view of global static lcd_enable) Static(987232) None
# Var inline_main_getc_20_inline_getc_globals_0_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_main_getc_20_inline_getc_globals_0_stdin (local view of global static stdin) Static(987236) None
# Var inline_main_getc_20_inline_getc_globals_0_t0 (static "g" addr) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_20_inline_getc_globals_0_t4206 (t4206 AddressOf(Ident("g"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_20_inline_getc_queue_pop_18_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_main_getc_20_inline_getc_queue_pop_18_keyboard (local view of global static keyboard) Static(987136) None
# Var inline_main_getc_20_inline_getc_queue_pop_18_keyboard_enable (local view of global static keyboard_enable) Static(987144) None
# Var inline_main_getc_20_inline_getc_queue_pop_18_lcd_current (local view of global static lcd_current) Static(987148) None
# Var inline_main_getc_20_inline_getc_queue_pop_18_lcd_display (local view of global static lcd_display) Static(987152) None
# Var inline_main_getc_20_inline_getc_queue_pop_18_lcd_enable (local view of global static lcd_enable) Static(987232) None
# Var inline_main_getc_20_inline_getc_queue_pop_18_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_main_getc_20_inline_getc_queue_pop_18_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_20_inline_getc_queue_pop_18_stdin (local view of global static stdin) Static(987236) None
# Var inline_main_getc_20_inline_getc_queue_pop_18_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_main_getc_20_inline_getc_queue_pop_18_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([100])
# Var inline_main_getc_20_inline_getc_queue_pop_18_t44ed (t44ed Ident("value")) Reg(U8) Some([88])
# Var inline_main_getc_20_inline_getc_queue_pop_18_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_20_inline_getc_queue_pop_18_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_20_inline_getc_queue_pop_18_t6fdb (t6fdb Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))) Reg(U8) Some([88])
# Var inline_main_getc_20_inline_getc_queue_pop_18_tae11 (tae11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_main_getc_20_inline_getc_queue_pop_18_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([88]) [0]
# Var inline_main_getc_20_inline_getc_queue_pop_18_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_main_getc_20_inline_getc_queue_pop_18_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([108])
# Var inline_main_getc_20_inline_getc_queue_pop_18_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([112, 113, 114, 115])
# Var inline_main_getc_20_inline_getc_queue_pop_18_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_main_getc_20_inline_getc_queue_pop_18_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([100])
# Var inline_main_getc_20_inline_getc_queue_pop_18_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_main_getc_20_keyboard (local view of global static keyboard) Static(987136) None
# Var inline_main_getc_20_keyboard_enable (local view of global static keyboard_enable) Static(987144) None
# Var inline_main_getc_20_lcd_current (local view of global static lcd_current) Static(987148) None
# Var inline_main_getc_20_lcd_display (local view of global static lcd_display) Static(987152) None
# Var inline_main_getc_20_lcd_enable (local view of global static lcd_enable) Static(987232) None
# Var inline_main_getc_20_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_main_getc_20_stdin (local view of global static stdin) Static(987236) None
# Var inline_main_getc_20_t152a (t152a Call(Call { function: "disable_interrupts", parameters: [] })) Reg(U8) Some([88])
# Var inline_main_getc_20_t448e (t448e Call(Call { function: "enable_interrupts", parameters: [] })) Reg(U8) Some([88])
# Var inline_main_getc_20_t7d0e (t7d0e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_20_t938b (t938b AddressOf(PtrFieldDeref("g", "stdin"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_getc_20_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([88])
# Var inline_main_globals_3_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_main_globals_3_g (Local g Struct("Globals") Static(987500)) Static(987500) None
# Var inline_main_globals_3_keyboard (local view of global static keyboard) Static(987136) None
# Var inline_main_globals_3_keyboard_enable (local view of global static keyboard_enable) Static(987144) None
# Var inline_main_globals_3_lcd_current (local view of global static lcd_current) Static(987148) None
# Var inline_main_globals_3_lcd_display (local view of global static lcd_display) Static(987152) None
# Var inline_main_globals_3_lcd_enable (local view of global static lcd_enable) Static(987232) None
# Var inline_main_globals_3_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_main_globals_3_stdin (local view of global static stdin) Static(987236) None
# Var inline_main_globals_3_t0 (static "g" addr) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_globals_3_t4206 (t4206 AddressOf(Ident("g"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_queue_init_16_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_main_queue_init_16_keyboard (local view of global static keyboard) Static(987136) None
# Var inline_main_queue_init_16_keyboard_enable (local view of global static keyboard_enable) Static(987144) None
# Var inline_main_queue_init_16_lcd_current (local view of global static lcd_current) Static(987148) None
# Var inline_main_queue_init_16_lcd_display (local view of global static lcd_display) Static(987152) None
# Var inline_main_queue_init_16_lcd_enable (local view of global static lcd_enable) Static(987232) None
# Var inline_main_queue_init_16_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_main_queue_init_16_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_queue_init_16_stdin (local view of global static stdin) Static(987236) None
# Var inline_main_queue_init_16_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_queue_init_16_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([100]) [0]
# Var inline_main_queue_init_16_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_main_queue_init_16_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([92, 93, 94, 95])
# Var keyboard (local view of global static keyboard) Static(987136) None
# Var keyboard_enable (local view of global static keyboard_enable) Static(987144) None
# Var lcd_current (local view of global static lcd_current) Static(987148) None
# Var lcd_display (local view of global static lcd_display) Static(987152) None
# Var lcd_enable (local view of global static lcd_enable) Static(987232) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var stdin (local view of global static stdin) Static(987236) None
# Var t1501 (t1501 Number(U8, 113)) Reg(U8) Some([100]) [113]
# Var t4421 (t4421 Number(U8, 97)) Reg(U8) Some([116]) [97]
# Var t448e (t448e Call(Call { function: "enable_interrupts", parameters: [] })) Reg(U8) Some([88])
# Var t4d24 (t4d24 Call(Call { function: "getc", parameters: [] })) Reg(U8) Some([88])
# Var t7388 (t7388 Call(Call { function: "queue_init", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })) Reg(U8) Some([88])
# Var t7d0e (t7d0e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }) Reg(U32) Some([92, 93, 94, 95])
# Var t938b (t938b AddressOf(PtrFieldDeref("g", "stdin"))) Reg(U32) Some([92, 93, 94, 95])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([100]) [0]
# Var tb70e (tb70e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }) Reg(U32) Some([104, 105, 106, 107])
# Var tbb6d (tbb6d Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }) Reg(U32) Some([92, 93, 94, 95])
# Var td3f9 (td3f9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }) Reg(U32) Some([104, 105, 106, 107])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([88])
# Consts t1501: 0n113/0x71u8
# inline_main_globals_3_t0 <- 0n987500/0x000f116cu32  Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# AddressOf(Ident("g"))
# 00659 LoadImm32 [Register(0x5c), Constant32(0x000f116c=987500)]
#       inline_main_globals_3_t0 <- 0n987500/0x000f116cu32  Some('programs/test/keyboard_isr.j':(14,5))
#       Return { value: Some(AddressOf(Ident("g"))) }
#       AddressOf(Ident("g"))
20 5c 6c 11 0f 00 

# inline_main_globals_3_t4206 <- inline_main_globals_3_t0 U32 Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# AddressOf(Ident("g"))
# optimized away noop copy Instruction { source: "inline_main_globals_3_t4206 <- inline_main_globals_3_t0 U32 Some('programs/test/keyboard_isr.j':(14,5))\nReturn { value: Some(AddressOf(Ident(\"g\"))) }\nAddressOf(Ident(\"g\"))\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# g <- inline_main_globals_3_t4206 U32 Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# optimized away noop copy Instruction { source: "g <- inline_main_globals_3_t4206 U32 Some('programs/test/keyboard_isr.j':(14,5))\nReturn { value: Some(AddressOf(Ident(\"g\"))) }\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# goto inline_main_globals_3_function_end_globals Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_globals_3_function_end_globals Some('programs/test/keyboard_isr.j':(14,5))\nReturn { value: Some(AddressOf(Ident(\"g\"))) }\n", opcode: JmpImm, args: [Label24(inline_main_globals_3_function_end_globals)], resolved: None }
# :inline_main_globals_3_function_end_globals None
# inline_main_globals_3_function_end_globals
# tbb6d <- g U32 Some('programs/test/keyboard_isr.j':(96,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264))
# Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }
# Ident("g")
# optimized away noop copy Instruction { source: "tbb6d <- g U32 Some('programs/test/keyboard_isr.j':(96,5))\nAssign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))\nCast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }\nIdent(\"g\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# tb70e <- tbb6d Add Number(0n264/0x00000108u32) Some('programs/test/keyboard_isr.j':(96,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264))
# 0065f Copy32 [Register(0x5c), Register(0x68)]
#       tb70e <- tbb6d Add Number(0n264/0x00000108u32) Some('programs/test/keyboard_isr.j':(96,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264))
21 5c 68 

# 00662 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000108=264)]
#       tb70e <- tbb6d Add Number(0n264/0x00000108u32) Some('programs/test/keyboard_isr.j':(96,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264))
32 68 08 01 00 00 

# tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(96,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00668 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(96,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 

# mem[tb70e] <- tb36e U8 Some('programs/test/keyboard_isr.j':(96,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }
# 0066b Store8 [Register(0x64), Register(0x68)]
#       mem[tb70e] <- tb36e U8 Some('programs/test/keyboard_isr.j':(96,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(U8, 0) }
06 64 68 

# tbb6d <- g U32 Some('programs/test/keyboard_isr.j':(97,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
# Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }
# Ident("g")
# optimized away noop copy Instruction { source: "tbb6d <- g U32 Some('programs/test/keyboard_isr.j':(97,5))\nAssign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))\nCast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }\nIdent(\"g\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# td3f9 <- tbb6d Add Number(0n268/0x0000010cu32) Some('programs/test/keyboard_isr.j':(97,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
# 0066e Copy32 [Register(0x5c), Register(0x68)]
#       td3f9 <- tbb6d Add Number(0n268/0x0000010cu32) Some('programs/test/keyboard_isr.j':(97,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
21 5c 68 

# 00671 AddImm32IgnoreCarry [Register(0x68), Constant32(0x0000010c=268)]
#       td3f9 <- tbb6d Add Number(0n268/0x0000010cu32) Some('programs/test/keyboard_isr.j':(97,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268))
32 68 0c 01 00 00 

# tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(97,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00677 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(97,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 

# mem[td3f9] <- tb36e U8 Some('programs/test/keyboard_isr.j':(97,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# 0067a Store8 [Register(0x64), Register(0x68)]
#       mem[td3f9] <- tb36e U8 Some('programs/test/keyboard_isr.j':(97,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(U8, 0) }
06 64 68 

# t7d0e <- g U32 Some('programs/test/keyboard_isr.j':(98,5))
# VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] }) }
# Call(Call { function: "queue_init", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })
# AddressOf(PtrFieldDeref("g", "stdin"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }
# Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }
# Ident("g")
# optimized away noop copy Instruction { source: "t7d0e <- g U32 Some('programs/test/keyboard_isr.j':(98,5))\nVoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }\nCall(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })\nAddressOf(PtrFieldDeref(\"g\", \"stdin\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }\nCast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }\nIdent(\"g\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# t938b <- t7d0e U32 Some('programs/test/keyboard_isr.j':(98,5))
# VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] }) }
# Call(Call { function: "queue_init", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })
# AddressOf(PtrFieldDeref("g", "stdin"))
# optimized away noop copy Instruction { source: "t938b <- t7d0e U32 Some('programs/test/keyboard_isr.j':(98,5))\nVoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }\nCall(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })\nAddressOf(PtrFieldDeref(\"g\", \"stdin\"))\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_queue_init_16_s <- t938b U32 Some('programs/test/keyboard_isr.j':(98,5))
# VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] }) }
# Call(Call { function: "queue_init", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })
# optimized away noop copy Instruction { source: "inline_main_queue_init_16_s <- t938b U32 Some('programs/test/keyboard_isr.j':(98,5))\nVoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }\nCall(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_queue_init_16_t4d4f <- inline_main_queue_init_16_s U32 Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_init_16_t4d4f <- inline_main_queue_init_16_s U32 Some('/lutcomp/programs/lib/Queue.j':(8,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_queue_init_16_tb702 <- inline_main_queue_init_16_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 0067d Copy32 [Register(0x5c), Register(0x68)]
#       inline_main_queue_init_16_tb702 <- inline_main_queue_init_16_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 5c 68 

# 00680 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000100=256)]
#       inline_main_queue_init_16_tb702 <- inline_main_queue_init_16_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 68 00 01 00 00 

# inline_main_queue_init_16_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00686 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_main_queue_init_16_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 

# mem[inline_main_queue_init_16_tb702] <- inline_main_queue_init_16_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# 00689 Store8 [Register(0x64), Register(0x68)]
#       mem[inline_main_queue_init_16_tb702] <- inline_main_queue_init_16_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
06 64 68 

# inline_main_queue_init_16_t4d4f <- inline_main_queue_init_16_s U32 Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_init_16_t4d4f <- inline_main_queue_init_16_s U32 Some('/lutcomp/programs/lib/Queue.j':(9,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_queue_init_16_tc1ff <- inline_main_queue_init_16_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 0068c AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000104=260)]
#       inline_main_queue_init_16_tc1ff <- inline_main_queue_init_16_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 5c 04 01 00 00 

# inline_main_queue_init_16_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00692 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_main_queue_init_16_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 

# mem[inline_main_queue_init_16_tc1ff] <- inline_main_queue_init_16_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# 00695 Store8 [Register(0x64), Register(0x5c)]
#       mem[inline_main_queue_init_16_tc1ff] <- inline_main_queue_init_16_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
06 64 5c 

# goto inline_main_queue_init_16_function_end_queue_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_queue_init_16_function_end_queue_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_queue_init_16_function_end_queue_init)], resolved: None }
# :inline_main_queue_init_16_function_end_queue_init None
# inline_main_queue_init_16_function_end_queue_init
# None <= call enable_interrupts() Some('programs/test/keyboard_isr.j':(100,5))
# VoidExpression { expression: Call(Call { function: "enable_interrupts", parameters: [] }) }
# Call(Call { function: "enable_interrupts", parameters: [] })
# 00698 EnableInterrupts []
#       EnableInterrupts
76 

# :main_while_predicate_0 Some('programs/test/keyboard_isr.j':(102,5))
# While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
# main_while_predicate_0
# t4421 <- 0n97/0x61u8  Some('programs/test/keyboard_isr.j':(102,5))
# While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
# Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: "getc", parameters: [] }) }
# Number(U8, 97)
# 00699 LoadImm8 [Register(0x74), Constant8(0x61=97)]
#       t4421 <- 0n97/0x61u8  Some('programs/test/keyboard_isr.j':(102,5))
#       While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
#       Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: "getc", parameters: [] }) }
#       Number(U8, 97)
04 74 61 

# inline_main_getc_19_inline_getc_globals_0_t0 <- 0n987500/0x000f116cu32  Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# AddressOf(Ident("g"))
# 0069c LoadImm32 [Register(0x5c), Constant32(0x000f116c=987500)]
#       inline_main_getc_19_inline_getc_globals_0_t0 <- 0n987500/0x000f116cu32  Some('programs/test/keyboard_isr.j':(14,5))
#       Return { value: Some(AddressOf(Ident("g"))) }
#       AddressOf(Ident("g"))
20 5c 6c 11 0f 00 

# inline_main_getc_19_inline_getc_globals_0_t4206 <- inline_main_getc_19_inline_getc_globals_0_t0 U32 Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# AddressOf(Ident("g"))
# optimized away noop copy Instruction { source: "inline_main_getc_19_inline_getc_globals_0_t4206 <- inline_main_getc_19_inline_getc_globals_0_t0 U32 Some('programs/test/keyboard_isr.j':(14,5))\nReturn { value: Some(AddressOf(Ident(\"g\"))) }\nAddressOf(Ident(\"g\"))\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_g <- inline_main_getc_19_inline_getc_globals_0_t4206 U32 Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# optimized away noop copy Instruction { source: "inline_main_getc_19_g <- inline_main_getc_19_inline_getc_globals_0_t4206 U32 Some('programs/test/keyboard_isr.j':(14,5))\nReturn { value: Some(AddressOf(Ident(\"g\"))) }\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# goto inline_main_getc_19_inline_getc_globals_0_function_end_globals Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_getc_19_inline_getc_globals_0_function_end_globals Some('programs/test/keyboard_isr.j':(14,5))\nReturn { value: Some(AddressOf(Ident(\"g\"))) }\n", opcode: JmpImm, args: [Label24(inline_main_getc_19_inline_getc_globals_0_function_end_globals)], resolved: None }
# :inline_main_getc_19_inline_getc_globals_0_function_end_globals None
# inline_main_getc_19_inline_getc_globals_0_function_end_globals
# None <= call disable_interrupts() Some('programs/test/keyboard_isr.j':(88,5))
# VoidExpression { expression: Call(Call { function: "disable_interrupts", parameters: [] }) }
# Call(Call { function: "disable_interrupts", parameters: [] })
# 006a2 DisableInterrupts []
#       DisableInterrupts
77 

# inline_main_getc_19_t7d0e <- inline_main_getc_19_g U32 Some('programs/test/keyboard_isr.j':(89,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })
# AddressOf(PtrFieldDeref("g", "stdin"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }
# Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }
# Ident("g")
# optimized away noop copy Instruction { source: "inline_main_getc_19_t7d0e <- inline_main_getc_19_g U32 Some('programs/test/keyboard_isr.j':(89,5))\nAssign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }\nCall(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })\nAddressOf(PtrFieldDeref(\"g\", \"stdin\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }\nCast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }\nIdent(\"g\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_t938b <- inline_main_getc_19_t7d0e U32 Some('programs/test/keyboard_isr.j':(89,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })
# AddressOf(PtrFieldDeref("g", "stdin"))
# optimized away noop copy Instruction { source: "inline_main_getc_19_t938b <- inline_main_getc_19_t7d0e U32 Some('programs/test/keyboard_isr.j':(89,5))\nAssign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }\nCall(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })\nAddressOf(PtrFieldDeref(\"g\", \"stdin\"))\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_s <- inline_main_getc_19_t938b U32 Some('programs/test/keyboard_isr.j':(89,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })
# optimized away noop copy Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_s <- inline_main_getc_19_t938b U32 Some('programs/test/keyboard_isr.j':(89,5))\nAssign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }\nCall(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 006a3 Copy32 [Register(0x5c), Register(0x70)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 5c 70 

# 006a6 AddImm32IgnoreCarry [Register(0x70), Constant32(0x00000100=256)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 70 00 01 00 00 

# inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# 006ac Load8 [Register(0x70), Register(0x6c)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
05 70 6c 

# inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 006af Copy32 [Register(0x5c), Register(0x60)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 5c 60 

# 006b2 AddImm32IgnoreCarry [Register(0x60), Constant32(0x00000104=260)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 60 04 01 00 00 

# inline_main_getc_19_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 006b8 Load8 [Register(0x60), Register(0x64)]
#       inline_main_getc_19_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 60 64 

# if inline_main_getc_19_inline_getc_queue_pop_18_tb6dd == inline_main_getc_19_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 006bb Cmp8 [Register(0x6c), Register(0x64)]
#       if inline_main_getc_19_inline_getc_queue_pop_18_tb6dd == inline_main_getc_19_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 6c 64 

# 006be JzImm [Label24(inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1)]
#       if inline_main_getc_19_inline_getc_queue_pop_18_tb6dd == inline_main_getc_19_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 c6 06 00 

# 006c2 JmpImm [Label24(inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2)]
#       if inline_main_getc_19_inline_getc_queue_pop_18_tb6dd == inline_main_getc_19_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 d1 06 00 

# :inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1
# inline_main_getc_19_inline_getc_queue_pop_18_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 006c6 LoadImm8 [Register(0x58), Constant8(0x00=0)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 58 00 

# inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# optimized away noop copy Instruction { source: "inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nReturn { value: Some(Number(U8, 0)) }\n", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# goto inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# 006c9 JmpImm [Label24(inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop)]
#       goto inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
70 18 07 00 

# goto inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 006cd JmpImm [Label24(inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0)]
#       goto inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
70 d1 06 00 

# :inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2
# :inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0
# inline_main_getc_19_inline_getc_queue_pop_18_t565a <- inline_main_getc_19_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_t565a <- inline_main_getc_19_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_values <- inline_main_getc_19_inline_getc_queue_pop_18_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 006d1 Copy32 [Register(0x5c), Register(0x60)]
#       inline_main_getc_19_inline_getc_queue_pop_18_values <- inline_main_getc_19_inline_getc_queue_pop_18_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 5c 60 

# inline_main_getc_19_inline_getc_queue_pop_18_t1d36 <- inline_main_getc_19_inline_getc_queue_pop_18_values U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_t1d36 <- inline_main_getc_19_inline_getc_queue_pop_18_values U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))\nAssign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))\nAssign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 006d4 Copy32 [Register(0x5c), Register(0x70)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 5c 70 

# 006d7 AddImm32IgnoreCarry [Register(0x70), Constant32(0x00000100=256)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 70 00 01 00 00 

# inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# 006dd Load8 [Register(0x70), Register(0x6c)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
05 70 6c 

# inline_main_getc_19_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# 006e0 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_main_getc_19_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
20 68 00 00 00 00 

# 006e6 Copy8 [Register(0x6c), Register(0x68)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
0b 6c 68 

# inline_main_getc_19_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_t1d36 Add Var(inline_main_getc_19_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# 006e9 ClearCarry []
#       inline_main_getc_19_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_t1d36 Add Var(inline_main_getc_19_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
03 

# 006ea AddCarry32_1 [Register(0x60), Register(0x68), Register(0x60)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_t1d36 Add Var(inline_main_getc_19_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
30 60 68 60 

# 006ee AddCarry32_2 []
#       inline_main_getc_19_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_t1d36 Add Var(inline_main_getc_19_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
31 

# inline_main_getc_19_inline_getc_queue_pop_18_value <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 006ef Load8 [Register(0x60), Register(0x64)]
#       inline_main_getc_19_inline_getc_queue_pop_18_value <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 60 64 

# inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 006f2 Copy32 [Register(0x5c), Register(0x70)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 5c 70 

# 006f5 AddImm32IgnoreCarry [Register(0x70), Constant32(0x00000100=256)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 70 00 01 00 00 

# inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 006fb Copy32 [Register(0x5c), Register(0x70)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 5c 70 

# 006fe AddImm32IgnoreCarry [Register(0x70), Constant32(0x00000100=256)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 70 00 01 00 00 

# inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# 00704 Load8 [Register(0x70), Register(0x6c)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
05 70 6c 

# inline_main_getc_19_inline_getc_queue_pop_18_t6fdb <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# 00707 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_main_getc_19_inline_getc_queue_pop_18_t6fdb <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
04 00 01 

# 0070a Add8NoCarryIn [Register(0x6c), Register(0x00), Register(0x58)]
#       inline_main_getc_19_inline_getc_queue_pop_18_t6fdb <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
14 6c 00 58 

# mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_t6fdb U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# 0070e Store8 [Register(0x58), Register(0x70)]
#       mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_t6fdb U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
06 58 70 

# inline_main_getc_19_inline_getc_queue_pop_18_t44ed <- inline_main_getc_19_inline_getc_queue_pop_18_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 00711 Copy8 [Register(0x64), Register(0x58)]
#       inline_main_getc_19_inline_getc_queue_pop_18_t44ed <- inline_main_getc_19_inline_getc_queue_pop_18_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 64 58 

# inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# goto inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# 00714 JmpImm [Label24(inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop)]
#       goto inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
70 18 07 00 

# :inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop None
# inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop
# None <= call enable_interrupts() Some('programs/test/keyboard_isr.j':(90,5))
# VoidExpression { expression: Call(Call { function: "enable_interrupts", parameters: [] }) }
# Call(Call { function: "enable_interrupts", parameters: [] })
# 00718 EnableInterrupts []
#       EnableInterrupts
76 

# inline_main_getc_19_tdcd9 <- inline_main_getc_19_ch U8 Some('programs/test/keyboard_isr.j':(91,5))
# Return { value: Some(Ident("ch")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_getc_19_tdcd9 <- inline_main_getc_19_ch U8 Some('programs/test/keyboard_isr.j':(91,5))\nReturn { value: Some(Ident(\"ch\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# t4d24 <- inline_main_getc_19_tdcd9 U8 Some('programs/test/keyboard_isr.j':(91,5))
# Return { value: Some(Ident("ch")) }
# optimized away noop copy Instruction { source: "t4d24 <- inline_main_getc_19_tdcd9 U8 Some('programs/test/keyboard_isr.j':(91,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# goto inline_main_getc_19_function_end_getc Some('programs/test/keyboard_isr.j':(91,5))
# Return { value: Some(Ident("ch")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_getc_19_function_end_getc Some('programs/test/keyboard_isr.j':(91,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: JmpImm, args: [Label24(inline_main_getc_19_function_end_getc)], resolved: None }
# :inline_main_getc_19_function_end_getc None
# inline_main_getc_19_function_end_getc
# if t4421 != t4d24 then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/keyboard_isr.j':(102,5))
# While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
# Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: "getc", parameters: [] }) }
# 00719 Cmp8 [Register(0x74), Register(0x58)]
#       if t4421 != t4d24 then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/keyboard_isr.j':(102,5))
#       While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
#       Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: "getc", parameters: [] }) }
15 74 58 

# 0071c JzImm [Label24(main_while_end_2)]
#       if t4421 != t4d24 then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/keyboard_isr.j':(102,5))
#       While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
#       Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: "getc", parameters: [] }) }
72 24 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4421 != t4d24 then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/keyboard_isr.j':(102,5))\nWhile { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \"getc\", parameters: [] }) }, while_true: [] }\nComparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: \"getc\", parameters: [] }) }\n", opcode: JmpImm, args: [Label24(main_while_body_1)], resolved: None }
# :main_while_body_1 Some('programs/test/keyboard_isr.j':(102,5))
# While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
# main_while_body_1
# goto main_while_predicate_0 Some('programs/test/keyboard_isr.j':(102,5))
# While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
# 00720 JmpImm [Label24(main_while_predicate_0)]
#       goto main_while_predicate_0 Some('programs/test/keyboard_isr.j':(102,5))
#       While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
70 99 06 00 

# :main_while_end_2 Some('programs/test/keyboard_isr.j':(102,5))
# While { predicate: Comparison { op: NotEquals, left: Number(U8, 97), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
# main_while_end_2
# t4421 <- 0n97/0x61u8  Some('programs/test/keyboard_isr.j':(105,5))
# TtyOut { value: Number(U8, 97) }
# Number(U8, 97)
# 00724 LoadImm8 [Register(0x74), Constant8(0x61=97)]
#       t4421 <- 0n97/0x61u8  Some('programs/test/keyboard_isr.j':(105,5))
#       TtyOut { value: Number(U8, 97) }
#       Number(U8, 97)
04 74 61 

# ttyout <- t4421 Some('programs/test/keyboard_isr.j':(105,5))
# TtyOut { value: Number(U8, 97) }
# 00727 Out0 [Register(0x74)]
#       ttyout <- t4421 Some('programs/test/keyboard_isr.j':(105,5))
#       TtyOut { value: Number(U8, 97) }
68 74 

# :main_while_predicate_3 Some('programs/test/keyboard_isr.j':(107,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
# main_while_predicate_3
# tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(107,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# Number(U8, 0)
# 00729 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(107,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 

# tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(107,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# Number(U8, 0)
# 0072c LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(107,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 

# if tb36e == tb36e then 'main_while_body_4' else 'main_while_end_5' Some('programs/test/keyboard_isr.j':(107,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# 0072f Cmp8 [Register(0x64), Register(0x64)]
#       if tb36e == tb36e then 'main_while_body_4' else 'main_while_end_5' Some('programs/test/keyboard_isr.j':(107,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
15 64 64 

# 00732 JzImm [Label24(main_while_body_4)]
#       if tb36e == tb36e then 'main_while_body_4' else 'main_while_end_5' Some('programs/test/keyboard_isr.j':(107,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
72 3a 07 00 

# 00736 JmpImm [Label24(main_while_end_5)]
#       if tb36e == tb36e then 'main_while_body_4' else 'main_while_end_5' Some('programs/test/keyboard_isr.j':(107,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
70 e5 07 00 

# :main_while_body_4 Some('programs/test/keyboard_isr.j':(107,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
# main_while_body_4
# inline_main_getc_20_inline_getc_globals_0_t0 <- 0n987500/0x000f116cu32  Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# AddressOf(Ident("g"))
# 0073a LoadImm32 [Register(0x5c), Constant32(0x000f116c=987500)]
#       inline_main_getc_20_inline_getc_globals_0_t0 <- 0n987500/0x000f116cu32  Some('programs/test/keyboard_isr.j':(14,5))
#       Return { value: Some(AddressOf(Ident("g"))) }
#       AddressOf(Ident("g"))
20 5c 6c 11 0f 00 

# inline_main_getc_20_inline_getc_globals_0_t4206 <- inline_main_getc_20_inline_getc_globals_0_t0 U32 Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# AddressOf(Ident("g"))
# optimized away noop copy Instruction { source: "inline_main_getc_20_inline_getc_globals_0_t4206 <- inline_main_getc_20_inline_getc_globals_0_t0 U32 Some('programs/test/keyboard_isr.j':(14,5))\nReturn { value: Some(AddressOf(Ident(\"g\"))) }\nAddressOf(Ident(\"g\"))\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_g <- inline_main_getc_20_inline_getc_globals_0_t4206 U32 Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# optimized away noop copy Instruction { source: "inline_main_getc_20_g <- inline_main_getc_20_inline_getc_globals_0_t4206 U32 Some('programs/test/keyboard_isr.j':(14,5))\nReturn { value: Some(AddressOf(Ident(\"g\"))) }\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# goto inline_main_getc_20_inline_getc_globals_0_function_end_globals Some('programs/test/keyboard_isr.j':(14,5))
# Return { value: Some(AddressOf(Ident("g"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_getc_20_inline_getc_globals_0_function_end_globals Some('programs/test/keyboard_isr.j':(14,5))\nReturn { value: Some(AddressOf(Ident(\"g\"))) }\n", opcode: JmpImm, args: [Label24(inline_main_getc_20_inline_getc_globals_0_function_end_globals)], resolved: None }
# :inline_main_getc_20_inline_getc_globals_0_function_end_globals None
# inline_main_getc_20_inline_getc_globals_0_function_end_globals
# None <= call disable_interrupts() Some('programs/test/keyboard_isr.j':(88,5))
# VoidExpression { expression: Call(Call { function: "disable_interrupts", parameters: [] }) }
# Call(Call { function: "disable_interrupts", parameters: [] })
# 00740 DisableInterrupts []
#       DisableInterrupts
77 

# inline_main_getc_20_t7d0e <- inline_main_getc_20_g U32 Some('programs/test/keyboard_isr.j':(89,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })
# AddressOf(PtrFieldDeref("g", "stdin"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }
# Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }
# Ident("g")
# optimized away noop copy Instruction { source: "inline_main_getc_20_t7d0e <- inline_main_getc_20_g U32 Some('programs/test/keyboard_isr.j':(89,5))\nAssign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }\nCall(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })\nAddressOf(PtrFieldDeref(\"g\", \"stdin\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }\nCast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }\nIdent(\"g\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_t938b <- inline_main_getc_20_t7d0e U32 Some('programs/test/keyboard_isr.j':(89,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })
# AddressOf(PtrFieldDeref("g", "stdin"))
# optimized away noop copy Instruction { source: "inline_main_getc_20_t938b <- inline_main_getc_20_t7d0e U32 Some('programs/test/keyboard_isr.j':(89,5))\nAssign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }\nCall(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })\nAddressOf(PtrFieldDeref(\"g\", \"stdin\"))\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_inline_getc_queue_pop_18_s <- inline_main_getc_20_t938b U32 Some('programs/test/keyboard_isr.j':(89,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })
# optimized away noop copy Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_s <- inline_main_getc_20_t938b U32 Some('programs/test/keyboard_isr.j':(89,5))\nAssign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }\nCall(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 00741 Copy32 [Register(0x5c), Register(0x70)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 5c 70 

# 00744 AddImm32IgnoreCarry [Register(0x70), Constant32(0x00000100=256)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 70 00 01 00 00 

# inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# 0074a Load8 [Register(0x70), Register(0x6c)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
05 70 6c 

# inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 0074d Copy32 [Register(0x5c), Register(0x60)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 5c 60 

# 00750 AddImm32IgnoreCarry [Register(0x60), Constant32(0x00000104=260)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 60 04 01 00 00 

# inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 00756 Load8 [Register(0x60), Register(0x64)]
#       inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 60 64 

# if inline_main_getc_20_inline_getc_queue_pop_18_tb6dd == inline_main_getc_20_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 00759 Cmp8 [Register(0x6c), Register(0x64)]
#       if inline_main_getc_20_inline_getc_queue_pop_18_tb6dd == inline_main_getc_20_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 6c 64 

# 0075c JzImm [Label24(inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1)]
#       if inline_main_getc_20_inline_getc_queue_pop_18_tb6dd == inline_main_getc_20_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 64 07 00 

# 00760 JmpImm [Label24(inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2)]
#       if inline_main_getc_20_inline_getc_queue_pop_18_tb6dd == inline_main_getc_20_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 6f 07 00 

# :inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1
# inline_main_getc_20_inline_getc_queue_pop_18_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 00764 LoadImm8 [Register(0x58), Constant8(0x00=0)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 58 00 

# inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# optimized away noop copy Instruction { source: "inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nReturn { value: Some(Number(U8, 0)) }\n", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# goto inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# 00767 JmpImm [Label24(inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop)]
#       goto inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
70 b6 07 00 

# goto inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 0076b JmpImm [Label24(inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0)]
#       goto inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
70 6f 07 00 

# :inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2
# :inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0
# inline_main_getc_20_inline_getc_queue_pop_18_t565a <- inline_main_getc_20_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_t565a <- inline_main_getc_20_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_inline_getc_queue_pop_18_values <- inline_main_getc_20_inline_getc_queue_pop_18_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 0076f Copy32 [Register(0x5c), Register(0x60)]
#       inline_main_getc_20_inline_getc_queue_pop_18_values <- inline_main_getc_20_inline_getc_queue_pop_18_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 5c 60 

# inline_main_getc_20_inline_getc_queue_pop_18_t1d36 <- inline_main_getc_20_inline_getc_queue_pop_18_values U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_t1d36 <- inline_main_getc_20_inline_getc_queue_pop_18_values U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))\nAssign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))\nAssign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 00772 Copy32 [Register(0x5c), Register(0x70)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 5c 70 

# 00775 AddImm32IgnoreCarry [Register(0x70), Constant32(0x00000100=256)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 70 00 01 00 00 

# inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# 0077b Load8 [Register(0x70), Register(0x6c)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
05 70 6c 

# inline_main_getc_20_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# 0077e LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_main_getc_20_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
20 68 00 00 00 00 

# 00784 Copy8 [Register(0x6c), Register(0x68)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
0b 6c 68 

# inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_20_inline_getc_queue_pop_18_t1d36 Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# 00787 ClearCarry []
#       inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_20_inline_getc_queue_pop_18_t1d36 Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
03 

# 00788 AddCarry32_1 [Register(0x60), Register(0x68), Register(0x60)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_20_inline_getc_queue_pop_18_t1d36 Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
30 60 68 60 

# 0078c AddCarry32_2 []
#       inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_20_inline_getc_queue_pop_18_t1d36 Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
31 

# inline_main_getc_20_inline_getc_queue_pop_18_value <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 0078d Load8 [Register(0x60), Register(0x64)]
#       inline_main_getc_20_inline_getc_queue_pop_18_value <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 60 64 

# inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 00790 Copy32 [Register(0x5c), Register(0x70)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 5c 70 

# 00793 AddImm32IgnoreCarry [Register(0x70), Constant32(0x00000100=256)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 70 00 01 00 00 

# inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 00799 Copy32 [Register(0x5c), Register(0x70)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 5c 70 

# 0079c AddImm32IgnoreCarry [Register(0x70), Constant32(0x00000100=256)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 70 00 01 00 00 

# inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# 007a2 Load8 [Register(0x70), Register(0x6c)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
05 70 6c 

# inline_main_getc_20_inline_getc_queue_pop_18_t6fdb <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# 007a5 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_main_getc_20_inline_getc_queue_pop_18_t6fdb <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
04 00 01 

# 007a8 Add8NoCarryIn [Register(0x6c), Register(0x00), Register(0x58)]
#       inline_main_getc_20_inline_getc_queue_pop_18_t6fdb <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
14 6c 00 58 

# mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_t6fdb U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# 007ac Store8 [Register(0x58), Register(0x70)]
#       mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_t6fdb U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
06 58 70 

# inline_main_getc_20_inline_getc_queue_pop_18_t44ed <- inline_main_getc_20_inline_getc_queue_pop_18_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 007af Copy8 [Register(0x64), Register(0x58)]
#       inline_main_getc_20_inline_getc_queue_pop_18_t44ed <- inline_main_getc_20_inline_getc_queue_pop_18_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 64 58 

# inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# goto inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# 007b2 JmpImm [Label24(inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop)]
#       goto inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
70 b6 07 00 

# :inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop None
# inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop
# None <= call enable_interrupts() Some('programs/test/keyboard_isr.j':(90,5))
# VoidExpression { expression: Call(Call { function: "enable_interrupts", parameters: [] }) }
# Call(Call { function: "enable_interrupts", parameters: [] })
# 007b6 EnableInterrupts []
#       EnableInterrupts
76 

# inline_main_getc_20_tdcd9 <- inline_main_getc_20_ch U8 Some('programs/test/keyboard_isr.j':(91,5))
# Return { value: Some(Ident("ch")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_getc_20_tdcd9 <- inline_main_getc_20_ch U8 Some('programs/test/keyboard_isr.j':(91,5))\nReturn { value: Some(Ident(\"ch\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# ch <- inline_main_getc_20_tdcd9 U8 Some('programs/test/keyboard_isr.j':(91,5))
# Return { value: Some(Ident("ch")) }
# optimized away noop copy Instruction { source: "ch <- inline_main_getc_20_tdcd9 U8 Some('programs/test/keyboard_isr.j':(91,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# goto inline_main_getc_20_function_end_getc Some('programs/test/keyboard_isr.j':(91,5))
# Return { value: Some(Ident("ch")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_getc_20_function_end_getc Some('programs/test/keyboard_isr.j':(91,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: JmpImm, args: [Label24(inline_main_getc_20_function_end_getc)], resolved: None }
# :inline_main_getc_20_function_end_getc None
# inline_main_getc_20_function_end_getc
# tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(107,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }
# Number(U8, 0)
# 007b7 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 

# if tdcd9 != tb36e then 'main_if_true_0_7' else 'main_if_else_0_8' Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }
# 007ba Cmp8 [Register(0x58), Register(0x64)]
#       if tdcd9 != tb36e then 'main_if_true_0_7' else 'main_if_else_0_8' Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }
15 58 64 

# 007bd JzImm [Label24(main_if_else_0_8)]
#       if tdcd9 != tb36e then 'main_if_true_0_7' else 'main_if_else_0_8' Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }
72 e1 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tdcd9 != tb36e then 'main_if_true_0_7' else 'main_if_else_0_8' Some('programs/test/keyboard_isr.j':(107,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(main_if_true_0_7)], resolved: None }
# :main_if_true_0_7 Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
# main_if_true_0_7
# tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(107,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# t1501 <- 0n113/0x71u8  Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# Number(U8, 113)
# 007c1 LoadImm8 [Register(0x64), Constant8(0x71=113)]
#       t1501 <- 0n113/0x71u8  Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
#       Number(U8, 113)
04 64 71 

# if tdcd9 == t1501 then 'main_if_true_0_10' else 'main_if_else_0_11' Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# 007c4 Cmp8 [Register(0x58), Register(0x64)]
#       if tdcd9 == t1501 then 'main_if_true_0_10' else 'main_if_else_0_11' Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
15 58 64 

# 007c7 JzImm [Label24(main_if_true_0_10)]
#       if tdcd9 == t1501 then 'main_if_true_0_10' else 'main_if_else_0_11' Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
72 cf 07 00 

# 007cb JmpImm [Label24(main_if_else_0_11)]
#       if tdcd9 == t1501 then 'main_if_true_0_10' else 'main_if_else_0_11' Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
70 db 07 00 

# :main_if_true_0_10 Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# main_if_true_0_10
# tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(107,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 007cf LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(107,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 64 00 

# return Some(tb36e) Some('programs/test/keyboard_isr.j':(107,5))
# Return { value: Some(Number(U8, 0)) }
# 007d2 Copy8 [Register(0x64), Register(0x00)]
#       return Some(tb36e) Some('programs/test/keyboard_isr.j':(107,5))
#       Return { value: Some(Number(U8, 0)) }
0b 64 00 

# 007d5 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto main_if_end_9 Some('programs/test/keyboard_isr.j':(107,5))
# 007d7 JmpImm [Label24(main_if_end_9)]
#       goto main_if_end_9 Some('programs/test/keyboard_isr.j':(107,5))
70 db 07 00 

# :main_if_else_0_11 Some('programs/test/keyboard_isr.j':(107,5))
# main_if_else_0_11
# :main_if_end_9 Some('programs/test/keyboard_isr.j':(107,5))
# main_if_end_9
# tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(107,5))
# TtyOut { value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(107,5))\nTtyOut { value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x58), Register(0x58)], resolved: None }
# ttyout <- tdcd9 Some('programs/test/keyboard_isr.j':(107,5))
# TtyOut { value: Ident("ch") }
# 007db Out0 [Register(0x58)]
#       ttyout <- tdcd9 Some('programs/test/keyboard_isr.j':(107,5))
#       TtyOut { value: Ident("ch") }
68 58 

# goto main_if_end_6 Some('programs/test/keyboard_isr.j':(107,5))
# 007dd JmpImm [Label24(main_if_end_6)]
#       goto main_if_end_6 Some('programs/test/keyboard_isr.j':(107,5))
70 e1 07 00 

# :main_if_else_0_8 Some('programs/test/keyboard_isr.j':(107,5))
# main_if_else_0_8
# :main_if_end_6 Some('programs/test/keyboard_isr.j':(107,5))
# main_if_end_6
# goto main_while_predicate_3 Some('programs/test/keyboard_isr.j':(107,5))
# 007e1 JmpImm [Label24(main_while_predicate_3)]
#       goto main_while_predicate_3 Some('programs/test/keyboard_isr.j':(107,5))
70 29 07 00 

# :main_while_end_5 Some('programs/test/keyboard_isr.j':(107,5))
# main_while_end_5
# :function_end_main None
# function_end_main
# Unreachable None
# 007e5 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

