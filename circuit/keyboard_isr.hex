v2.0 raw
# In IlFunctionId("KeyBoard_init"), optimizing round #0
# In IlFunctionId("KeyBoard_init"), in block from 0..7, removing repetitive write at 4 because it is the same as at 1: ta97f <- 0n0/0x00u8 
# In IlFunctionId("KeyBoard_init"), optimizing round #1
# In IlFunctionId("Keyboard_poll"), optimizing round #0
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("Keyboard_poll"), optimizing round #1
# In IlFunctionId("Keyboard_poll"), merging duplicate labels at #64 && #65: 'IlLabelId("Keyboard_poll_if_else_0_11")' and 'IlLabelId("Keyboard_poll_if_end_9")' to 'IlLabelId("Keyboard_poll_if_end_9")'
# In IlFunctionId("Keyboard_poll"), merging duplicate labels at #39 && #40: 'IlLabelId("Keyboard_poll_if_else_0_8")' and 'IlLabelId("Keyboard_poll_if_end_6")' to 'IlLabelId("Keyboard_poll_if_end_6")'
# In IlFunctionId("Keyboard_poll"), merging duplicate labels at #7 && #8: 'IlLabelId("Keyboard_poll_if_else_0_2")' and 'IlLabelId("Keyboard_poll_if_end_0")' to 'IlLabelId("Keyboard_poll_if_end_0")'
# In IlFunctionId("Keyboard_poll"), optimizing round #2
# In IlFunctionId("Keyboard_poll"), removing no-op goto instruction #61: goto Keyboard_poll_if_end_9
# In IlFunctionId("Keyboard_poll"), removing no-op goto instruction #37: goto Keyboard_poll_if_end_6
# In IlFunctionId("Keyboard_poll"), removing no-op goto instruction #6: goto Keyboard_poll_if_end_0
# In IlFunctionId("Keyboard_poll"), optimizing round #3
# In IlFunctionId("Keyboard_poll"), merging duplicate labels at #58 && #59: 'IlLabelId("Keyboard_poll_if_end_12")' and 'IlLabelId("Keyboard_poll_if_end_9")' to 'IlLabelId("Keyboard_poll_if_end_9")'
# In IlFunctionId("Keyboard_poll"), optimizing round #4
# In IlFunctionId("delay"), optimizing round #0
# In IlFunctionId("getc"), optimizing round #0
# In IlFunctionId("getchar"), optimizing round #0
# In IlFunctionId("getchar"), resolved the constant val `Number(0n987144/0x000f1008u32)` for var `t0`.
# In IlFunctionId("getchar"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("getchar"), optimizing round #1
# In IlFunctionId("getchar"), merging duplicate labels at #23 && #24: 'IlLabelId("getchar_if_else_1_7")' and 'IlLabelId("getchar_if_end_3")' to 'IlLabelId("getchar_if_end_3")'
# In IlFunctionId("getchar"), optimizing round #2
# In IlFunctionId("getchar"), removing no-op goto instruction #22: goto getchar_if_end_3
# In IlFunctionId("getchar"), optimizing round #3
# In IlFunctionId("globals"), optimizing round #0
# In IlFunctionId("globals"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t4206`.
# In IlFunctionId("globals"), optimizing round #1
# In IlFunctionId("handle_ps2"), optimizing round #0
# In IlFunctionId("handle_ps2"), merging duplicate labels at #62 && #63: 'IlLabelId("handle_ps2_if_else_0_8")' and 'IlLabelId("handle_ps2_if_end_6")' to 'IlLabelId("handle_ps2_if_end_6")'
# In IlFunctionId("handle_ps2"), merging duplicate labels at #34 && #35: 'IlLabelId("handle_ps2_if_else_0_5")' and 'IlLabelId("handle_ps2_if_end_3")' to 'IlLabelId("handle_ps2_if_end_3")'
# In IlFunctionId("handle_ps2"), optimizing round #1
# In IlFunctionId("handle_ps2"), removing no-op goto instruction #60: goto handle_ps2_if_end_6
# In IlFunctionId("handle_ps2"), removing no-op goto instruction #33: goto handle_ps2_if_end_3
# In IlFunctionId("handle_ps2"), optimizing round #2
# In IlFunctionId("handle_ps2"), merging duplicate labels at #58 && #59: 'IlLabelId("handle_ps2_if_end_9")' and 'IlLabelId("handle_ps2_if_end_6")' to 'IlLabelId("handle_ps2_if_end_9_MERGED_handle_ps2_if_end_6")'
# In IlFunctionId("handle_ps2"), optimizing round #3
# In IlFunctionId("handle_tty"), optimizing round #0
# In IlFunctionId("isr"), optimizing round #0
# In IlFunctionId("isr"), merging duplicate labels at #17 && #18: 'IlLabelId("isr_if_else_0_5")' and 'IlLabelId("isr_if_end_3")' to 'IlLabelId("isr_if_end_3")'
# In IlFunctionId("isr"), merging duplicate labels at #8 && #9: 'IlLabelId("isr_if_else_0_2")' and 'IlLabelId("isr_if_end_0")' to 'IlLabelId("isr_if_end_0")'
# In IlFunctionId("isr"), optimizing round #1
# In IlFunctionId("isr"), removing no-op goto instruction #15: goto isr_if_end_3
# In IlFunctionId("isr"), removing no-op goto instruction #7: goto isr_if_end_0
# In IlFunctionId("isr"), optimizing round #2
# In IlFunctionId("lcd_draw_char"), optimizing round #0
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `td0f3` - which is also never modified. Replacing refs to latter with the former and deleting the copy: td0f3 <- i U8
# In IlFunctionId("lcd_draw_char"), optimizing round #1
# In IlFunctionId("lcd_draw_char"), optimizing round #2
# In IlFunctionId("lcd_draw_char"), in block from 0..21, removing repetitive write at 18 because it is the same as at 8: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_draw_char"), optimizing round #3
# In IlFunctionId("lcd_init"), optimizing round #0
# In IlFunctionId("lcd_init"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_init"), optimizing round #1
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 24 because it is the same as at 20: t385d <- 0n1/0x00000001u32 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 28 because it is the same as at 24: t385d <- 0n1/0x00000001u32 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 22 because it is the same as at 18: t3d69 <- 0n3/0x03u8 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 26 because it is the same as at 22: t3d69 <- 0n3/0x03u8 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 38 because it is the same as at 32: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 44 because it is the same as at 38: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 50 because it is the same as at 44: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 34 because it is the same as at 30: t9f48 <- 0n2/0x02u8 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 46 because it is the same as at 40: ta97f <- 0n0/0x00u8 
# In IlFunctionId("lcd_init"), optimizing round #2
# In IlFunctionId("lcd_logical_to_physical"), optimizing round #0
# In IlFunctionId("lcd_putc"), optimizing round #0
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t1`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t2`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t3`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t4`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t5`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t6`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t7`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t8`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t9`.
# In IlFunctionId("lcd_putc"), optimizing round #1
# In IlFunctionId("lcd_putc"), merging duplicate labels at #53 && #54: 'IlLabelId("lcd_putc_if_else_0_8")' and 'IlLabelId("lcd_putc_if_end_6")' to 'IlLabelId("lcd_putc_if_end_6")'
# In IlFunctionId("lcd_putc"), optimizing round #2
# In IlFunctionId("lcd_putc"), removing no-op goto instruction #52: goto lcd_putc_if_end_6
# In IlFunctionId("lcd_putc"), optimizing round #3
# In IlFunctionId("lcd_putc"), at #11, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #10, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t1 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #16, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t2] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #15, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t2 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #25, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t3] <- tefac U8 -> mem[t0] <- tefac U8
# In IlFunctionId("lcd_putc"), at #21, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t3 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #23, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t4] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #22, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t4 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #31, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t5] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #30, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #37, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t6] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #36, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t6 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #44, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t7] <- tefac U8 -> mem[t0] <- tefac U8
# In IlFunctionId("lcd_putc"), at #40, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t7 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #42, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t8] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #41, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t8 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #47, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t9] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #46, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t9 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), optimizing round #4
# In IlFunctionId("lcd_putc"), optimizing round #5
# In IlFunctionId("lcd_putc"), in block from 14..27, removing repetitive write at 21 because it is the same as at 15: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 14..27, removing repetitive write at 22 because it is the same as at 21: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 29..45, removing repetitive write at 36 because it is the same as at 30: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 29..45, removing repetitive write at 40 because it is the same as at 36: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 29..45, removing repetitive write at 41 because it is the same as at 40: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), optimizing round #6
# In IlFunctionId("lcd_scroll_up"), optimizing round #0
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t1`.
# In IlFunctionId("lcd_scroll_up"), optimizing round #1
# In IlFunctionId("lcd_scroll_up"), merging duplicate labels at #59 && #60: 'IlLabelId("lcd_scroll_up_if_else_0_11")' and 'IlLabelId("lcd_scroll_up_if_end_9")' to 'IlLabelId("lcd_scroll_up_if_end_9")'
# In IlFunctionId("lcd_scroll_up"), merging duplicate labels at #37 && #38: 'IlLabelId("lcd_scroll_up_while_end_2")' and 'IlLabelId("lcd_scroll_up_while_predicate_6")' to 'IlLabelId("lcd_scroll_up_while_end_2")'
# In IlFunctionId("lcd_scroll_up"), merging duplicate labels at #32 && #33: 'IlLabelId("lcd_scroll_up_if_else_0_5")' and 'IlLabelId("lcd_scroll_up_if_end_3")' to 'IlLabelId("lcd_scroll_up_if_end_3")'
# In IlFunctionId("lcd_scroll_up"), optimizing round #2
# In IlFunctionId("lcd_scroll_up"), removing no-op goto instruction #56: goto lcd_scroll_up_if_end_9
# In IlFunctionId("lcd_scroll_up"), removing no-op goto instruction #31: goto lcd_scroll_up_if_end_3
# In IlFunctionId("lcd_scroll_up"), optimizing round #3
# In IlFunctionId("lcd_scroll_up"), in block from 46..55, removing repetitive write at 53 because it is the same as at 50: tdf3b <- 0n32/0x20u8 
# In IlFunctionId("lcd_scroll_up"), optimizing round #4
# In IlFunctionId("lcd_scroll_up"), at #2, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_scroll_up"), at #1, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t1 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_scroll_up"), optimizing round #5
# In IlFunctionId("lcd_scroll_up"), optimizing round #6
# In IlFunctionId("lcd_scroll_up"), in block from 0..6, removing repetitive write at 1 because it is the same as at 0: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_scroll_up"), optimizing round #7
# In IlFunctionId("main"), optimizing round #0
# In IlFunctionId("main"), merging duplicate labels at #47 && #48: 'IlLabelId("main_while_end_5")' and 'IlLabelId("function_end_main")' to 'IlLabelId("function_end_main")'
# In IlFunctionId("main"), merging duplicate labels at #44 && #45: 'IlLabelId("main_if_else_0_8")' and 'IlLabelId("main_if_end_6")' to 'IlLabelId("main_if_end_6")'
# In IlFunctionId("main"), merging duplicate labels at #39 && #40: 'IlLabelId("main_if_else_0_11")' and 'IlLabelId("main_if_end_9")' to 'IlLabelId("main_if_end_9")'
# In IlFunctionId("main"), optimizing round #1
# In IlFunctionId("main"), removing no-op goto instruction #42: goto main_if_end_6
# In IlFunctionId("main"), removing no-op goto instruction #38: goto main_if_end_9
# In IlFunctionId("main"), optimizing round #2
# In IlFunctionId("main"), in block from 0..13, removing repetitive write at 7 because it is the same as at 3: ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), in block from 22..26, removing repetitive write at 24 because it is the same as at 23: ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), optimizing round #3
# In IlFunctionId("parseHex"), optimizing round #0
# In IlFunctionId("parseHexNibble"), optimizing round #0
# In IlFunctionId("parseHexNibble"), merging duplicate labels at #19 && #20: 'IlLabelId("parseHexNibble_if_else_0_5")' and 'IlLabelId("parseHexNibble_if_end_3")' to 'IlLabelId("parseHexNibble_if_end_3")'
# In IlFunctionId("parseHexNibble"), merging duplicate labels at #9 && #10: 'IlLabelId("parseHexNibble_if_else_0_2")' and 'IlLabelId("parseHexNibble_if_end_0")' to 'IlLabelId("parseHexNibble_if_end_0")'
# In IlFunctionId("parseHexNibble"), optimizing round #1
# In IlFunctionId("parseHexNibble"), removing no-op goto instruction #17: goto parseHexNibble_if_end_3
# In IlFunctionId("parseHexNibble"), removing no-op goto instruction #8: goto parseHexNibble_if_end_0
# In IlFunctionId("parseHexNibble"), optimizing round #2
# In IlFunctionId("printHex"), optimizing round #0
# In IlFunctionId("printHexDigit"), optimizing round #0
# In IlFunctionId("printHexTest"), optimizing round #0
# In IlFunctionId("printHexTest"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U8
# In IlFunctionId("printHexTest"), optimizing round #1
# In IlFunctionId("printHexTest"), optimizing round #2
# In IlFunctionId("println"), optimizing round #0
# In IlFunctionId("putc"), optimizing round #0
# In IlFunctionId("putc"), resolved the constant val `Number(0n987228/0x000f105cu32)` for var `t0`.
# In IlFunctionId("putc"), optimizing round #1
# In IlFunctionId("putc"), merging duplicate labels at #10 && #11: 'IlLabelId("putc_if_else_0_2")' and 'IlLabelId("putc_if_end_0")' to 'IlLabelId("putc_if_end_0")'
# In IlFunctionId("putc"), optimizing round #2
# In IlFunctionId("putc"), removing no-op goto instruction #9: goto putc_if_end_0
# In IlFunctionId("putc"), optimizing round #3
# In IlFunctionId("queue_init"), optimizing round #0
# In IlFunctionId("queue_init"), in block from 0..9, removing repetitive write at 6 because it is the same as at 2: ta97f <- 0n0/0x00u8 
# In IlFunctionId("queue_init"), optimizing round #1
# In IlFunctionId("queue_pop"), optimizing round #0
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_pop"), optimizing round #1
# In IlFunctionId("queue_pop"), optimizing round #2
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_pop"), optimizing round #3
# In IlFunctionId("queue_pop"), optimizing round #4
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_pop"), optimizing round #5
# In IlFunctionId("queue_pop"), optimizing round #6
# In IlFunctionId("queue_pop"), merging duplicate labels at #11 && #12: 'IlLabelId("queue_pop_if_else_0_2")' and 'IlLabelId("queue_pop_if_end_0")' to 'IlLabelId("queue_pop_if_end_0")'
# In IlFunctionId("queue_pop"), optimizing round #7
# In IlFunctionId("queue_pop"), removing no-op goto instruction #10: goto queue_pop_if_end_0
# In IlFunctionId("queue_pop"), optimizing round #8
# In IlFunctionId("queue_push"), optimizing round #0
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_push"), optimizing round #1
# In IlFunctionId("queue_push"), optimizing round #2
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_push"), optimizing round #3
# In IlFunctionId("queue_push"), optimizing round #4
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_push"), optimizing round #5
# In IlFunctionId("queue_push"), optimizing round #6
# In IlFunctionId("queue_push"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U8
# In IlFunctionId("queue_push"), optimizing round #7
# In IlFunctionId("queue_push"), optimizing round #8
# In IlFunctionId("readline"), optimizing round #0
# In IlFunctionId("readline"), in block from 0..4, removing repetitive write at 2 because it is the same as at 1: ta97f <- 0n0/0x00u8 
# In IlFunctionId("readline"), optimizing round #1
# In IlFunctionId("stdio_init"), optimizing round #0
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987228/0x000f105cu32)` for var `t0`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987144/0x000f1008u32)` for var `t1`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("stdio_init"), optimizing round #1
# In IlFunctionId("stdio_init"), in block from 0..11, removing repetitive write at 4 because it is the same as at 1: ta11a <- 0n1/0x01u8 
# In IlFunctionId("stdio_init"), optimizing round #2
# In IlFunctionId("test_delay"), optimizing round #0
# In IlFunctionId("test_delay"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U32
# In IlFunctionId("test_delay"), optimizing round #1
# In IlFunctionId("test_delay"), optimizing round #2
# In IlFunctionId("test_echoline"), optimizing round #0
# In IlFunctionId("handle_ps2"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `g`.
# In IlFunctionId("handle_ps2"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t7d0e`.
# In IlFunctionId("handle_ps2"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t938b`.
# In IlFunctionId("handle_ps2"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `tbb6d`.
# In IlFunctionId("handle_ps2"), resolved the constant val `Number(0n987924/0x000f1314u32)` for var `td3f9`.
# In IlFunctionId("handle_ps2"), optimizing round #0
# In IlFunctionId("handle_ps2"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_handle_ps2_queue_push_25_s`.
# In IlFunctionId("handle_ps2"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_handle_ps2_queue_push_25_t4d4f`.
# In IlFunctionId("handle_ps2"), resolved the constant val `Number(0n987916/0x000f130cu32)` for var `inline_handle_ps2_queue_push_25_tc1ff`.
# In IlFunctionId("handle_ps2"), resolved the constant val `Number(0n987920/0x000f1310u32)` for var `tb70e`.
# In IlFunctionId("handle_ps2"), optimizing round #1
# In IlFunctionId("handle_ps2"), replacing `g <- inline_handle_ps2_globals_1_t4206 U32` with constant `g <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
# In IlFunctionId("handle_ps2"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# In IlFunctionId("handle_ps2"), replacing `t7d0e <- g U32` with constant `t7d0e <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `t938b <- t7d0e U32` with constant `t938b <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_s <- t938b U32` with constant `inline_handle_ps2_queue_push_25_s <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32` with constant `inline_handle_ps2_queue_push_25_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32 `.
# In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32` with constant `inline_handle_ps2_queue_push_25_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32 `.
# In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32` with constant `inline_handle_ps2_queue_push_25_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32 `.
# In IlFunctionId("handle_ps2"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# In IlFunctionId("handle_ps2"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
# In IlFunctionId("handle_ps2"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
# In IlFunctionId("handle_ps2"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# In IlFunctionId("handle_ps2"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# In IlFunctionId("handle_ps2"), optimizing round #2
# In IlFunctionId("handle_ps2"), var `g` is written to, but never read. Removing the instruction that writes to it: (g <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "# In IlFunctionId(\"handle_ps2\"), replacing `g <- inline_handle_ps2_globals_1_t4206 U32` with constant `g <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #3
# In IlFunctionId("handle_ps2"), optimizing round #4
# In IlFunctionId("handle_ps2"), var `inline_handle_ps2_globals_1_t4206` is written to, but never read. Removing the instruction that writes to it: (inline_handle_ps2_globals_1_t4206 <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))", "Number(0n987656/0x000f1208u32)"] })
# In IlFunctionId("handle_ps2"), optimizing round #5
# In IlFunctionId("handle_ps2"), optimizing round #6
# In IlFunctionId("handle_ps2"), var `inline_handle_ps2_queue_push_25_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_handle_ps2_queue_push_25_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"handle_ps2\"), replacing `inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32` with constant `inline_handle_ps2_queue_push_25_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #7
# In IlFunctionId("handle_ps2"), var `inline_handle_ps2_queue_push_25_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_handle_ps2_queue_push_25_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"handle_ps2\"), replacing `inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32` with constant `inline_handle_ps2_queue_push_25_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #8
# In IlFunctionId("handle_ps2"), var `inline_handle_ps2_queue_push_25_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_handle_ps2_queue_push_25_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"handle_ps2\"), replacing `inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32` with constant `inline_handle_ps2_queue_push_25_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #9
# In IlFunctionId("handle_ps2"), optimizing round #10
# In IlFunctionId("handle_ps2"), var `t7d0e` is written to, but never read. Removing the instruction that writes to it: (t7d0e <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(35,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"handle_ps2\"), replacing `t7d0e <- g U32` with constant `t7d0e <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #11
# In IlFunctionId("handle_ps2"), optimizing round #12
# In IlFunctionId("handle_ps2"), var `t938b` is written to, but never read. Removing the instruction that writes to it: (t938b <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(35,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "# In IlFunctionId(\"handle_ps2\"), replacing `t938b <- t7d0e U32` with constant `t938b <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #13
# In IlFunctionId("handle_ps2"), optimizing round #14
# In IlFunctionId("handle_ps2"), var `tbb6d` is written to, but never read. Removing the instruction that writes to it: (tbb6d <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(55,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"handle_ps2\"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #15
# In IlFunctionId("handle_ps2"), var `tbb6d` is written to, but never read. Removing the instruction that writes to it: (tbb6d <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(55,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(0n1/0x01u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"handle_ps2\"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #16
# In IlFunctionId("handle_ps2"), var `tbb6d` is written to, but never read. Removing the instruction that writes to it: (tbb6d <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(43,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"handle_ps2\"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #17
# In IlFunctionId("handle_ps2"), var `tbb6d` is written to, but never read. Removing the instruction that writes to it: (tbb6d <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(43,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"handle_ps2\"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #18
# In IlFunctionId("handle_ps2"), var `tbb6d` is written to, but never read. Removing the instruction that writes to it: (tbb6d <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(43,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(0n0/0x00u8) }", "PtrFieldDeref(\"g\", \"release_in_progress\")", "PtrFieldDeref(\"g\", \"release_in_progress\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"handle_ps2\"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #19
# In IlFunctionId("handle_ps2"), var `tbb6d` is written to, but never read. Removing the instruction that writes to it: (tbb6d <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(35,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(0n0/0x00u8) }", "PtrFieldDeref(\"g\", \"release_in_progress\")", "PtrFieldDeref(\"g\", \"release_in_progress\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"handle_ps2\"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #20
# In IlFunctionId("handle_ps2"), var `tbb6d` is written to, but never read. Removing the instruction that writes to it: (tbb6d <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(29,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(0n0/0x00u8) }", "PtrFieldDeref(\"g\", \"shift_held\")", "PtrFieldDeref(\"g\", \"shift_held\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"handle_ps2\"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #21
# In IlFunctionId("handle_ps2"), optimizing round #22
# In IlFunctionId("handle_ps2"), removing no-op goto instruction #41: goto inline_handle_ps2_queue_push_25_function_end_queue_push
# In IlFunctionId("handle_ps2"), removing no-op goto instruction #0: goto inline_handle_ps2_globals_1_function_end_globals
# In IlFunctionId("handle_ps2"), optimizing round #23
# In IlFunctionId("handle_ps2"), removing unreferenced label: :inline_handle_ps2_globals_1_function_end_globals
# In IlFunctionId("handle_ps2"), removing unreferenced label: :inline_handle_ps2_queue_push_25_function_end_queue_push
# In IlFunctionId("handle_ps2"), optimizing round #24
# In IlFunctionId("handle_ps2"), in block from 25..39, removing repetitive write at 34 because it is the same as at 29: inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32 
# In IlFunctionId("handle_ps2"), in block from 25..39, removing repetitive write at 35 because it is the same as at 34: inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32 
# In IlFunctionId("handle_ps2"), optimizing round #25
# In IlFunctionId("handle_tty"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `g`.
# In IlFunctionId("handle_tty"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t7d0e`.
# In IlFunctionId("handle_tty"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t938b`.
# In IlFunctionId("handle_tty"), optimizing round #0
# In IlFunctionId("handle_tty"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_handle_tty_queue_push_26_s`.
# In IlFunctionId("handle_tty"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_handle_tty_queue_push_26_t4d4f`.
# In IlFunctionId("handle_tty"), resolved the constant val `Number(0n987916/0x000f130cu32)` for var `inline_handle_tty_queue_push_26_tc1ff`.
# In IlFunctionId("handle_tty"), optimizing round #1
# In IlFunctionId("handle_tty"), replacing `g <- inline_handle_tty_globals_2_t4206 U32` with constant `g <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_tty"), replacing `t7d0e <- g U32` with constant `t7d0e <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_tty"), replacing `t938b <- t7d0e U32` with constant `t938b <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_s <- t938b U32` with constant `inline_handle_tty_queue_push_26_s <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32` with constant `inline_handle_tty_queue_push_26_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32 `.
# In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32` with constant `inline_handle_tty_queue_push_26_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32 `.
# In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32` with constant `inline_handle_tty_queue_push_26_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32 `.
# In IlFunctionId("handle_tty"), optimizing round #2
# In IlFunctionId("handle_tty"), var `g` is written to, but never read. Removing the instruction that writes to it: (g <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "# In IlFunctionId(\"handle_tty\"), replacing `g <- inline_handle_tty_globals_2_t4206 U32` with constant `g <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_tty"), optimizing round #3
# In IlFunctionId("handle_tty"), optimizing round #4
# In IlFunctionId("handle_tty"), var `inline_handle_tty_globals_2_t4206` is written to, but never read. Removing the instruction that writes to it: (inline_handle_tty_globals_2_t4206 <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))", "Number(0n987656/0x000f1208u32)"] })
# In IlFunctionId("handle_tty"), optimizing round #5
# In IlFunctionId("handle_tty"), optimizing round #6
# In IlFunctionId("handle_tty"), var `inline_handle_tty_queue_push_26_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_handle_tty_queue_push_26_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"handle_tty\"), replacing `inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32` with constant `inline_handle_tty_queue_push_26_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_tty"), optimizing round #7
# In IlFunctionId("handle_tty"), var `inline_handle_tty_queue_push_26_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_handle_tty_queue_push_26_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"handle_tty\"), replacing `inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32` with constant `inline_handle_tty_queue_push_26_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_tty"), optimizing round #8
# In IlFunctionId("handle_tty"), var `inline_handle_tty_queue_push_26_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_handle_tty_queue_push_26_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"handle_tty\"), replacing `inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32` with constant `inline_handle_tty_queue_push_26_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_tty"), optimizing round #9
# In IlFunctionId("handle_tty"), optimizing round #10
# In IlFunctionId("handle_tty"), var `t7d0e` is written to, but never read. Removing the instruction that writes to it: (t7d0e <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(71,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"handle_tty\"), replacing `t7d0e <- g U32` with constant `t7d0e <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_tty"), optimizing round #11
# In IlFunctionId("handle_tty"), optimizing round #12
# In IlFunctionId("handle_tty"), var `t938b` is written to, but never read. Removing the instruction that writes to it: (t938b <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(71,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "# In IlFunctionId(\"handle_tty\"), replacing `t938b <- t7d0e U32` with constant `t938b <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_tty"), optimizing round #13
# In IlFunctionId("handle_tty"), optimizing round #14
# In IlFunctionId("handle_tty"), removing no-op goto instruction #15: goto inline_handle_tty_queue_push_26_function_end_queue_push
# In IlFunctionId("handle_tty"), removing no-op goto instruction #0: goto inline_handle_tty_globals_2_function_end_globals
# In IlFunctionId("handle_tty"), optimizing round #15
# In IlFunctionId("handle_tty"), removing unreferenced label: :inline_handle_tty_globals_2_function_end_globals
# In IlFunctionId("handle_tty"), removing unreferenced label: :inline_handle_tty_queue_push_26_function_end_queue_push
# In IlFunctionId("handle_tty"), optimizing round #16
# In IlFunctionId("handle_tty"), in block from 0..14, removing repetitive write at 8 because it is the same as at 3: inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32 
# In IlFunctionId("handle_tty"), in block from 0..14, removing repetitive write at 9 because it is the same as at 8: inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32 
# In IlFunctionId("handle_tty"), optimizing round #17
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `g`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_19_g`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_19_t7d0e`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_19_t938b`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_20_g`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_20_t7d0e`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_20_t938b`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t7d0e`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t938b`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `tbb6d`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987924/0x000f1314u32)` for var `td3f9`.
# In IlFunctionId("main"), optimizing round #0
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_19_inline_getc_queue_pop_18_s`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987912/0x000f1308u32)` for var `inline_main_getc_19_inline_getc_queue_pop_18_tb702`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987916/0x000f130cu32)` for var `inline_main_getc_19_inline_getc_queue_pop_18_tc1ff`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_20_inline_getc_queue_pop_18_s`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987912/0x000f1308u32)` for var `inline_main_getc_20_inline_getc_queue_pop_18_tb702`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987916/0x000f130cu32)` for var `inline_main_getc_20_inline_getc_queue_pop_18_tc1ff`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_queue_init_16_s`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_queue_init_16_t4d4f`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987912/0x000f1308u32)` for var `inline_main_queue_init_16_tb702`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987916/0x000f130cu32)` for var `inline_main_queue_init_16_tc1ff`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987920/0x000f1310u32)` for var `tb70e`.
# In IlFunctionId("main"), optimizing round #1
# In IlFunctionId("main"), replacing `g <- inline_main_globals_3_t4206 U32` with constant `g <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
# In IlFunctionId("main"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# In IlFunctionId("main"), replacing `t7d0e <- g U32` with constant `t7d0e <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `t938b <- t7d0e U32` with constant `t938b <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_queue_init_16_s <- t938b U32` with constant `inline_main_queue_init_16_s <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_queue_init_16_t4d4f <- inline_main_queue_init_16_s U32` with constant `inline_main_queue_init_16_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_queue_init_16_tb702 <- inline_main_queue_init_16_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_queue_init_16_tb702 <- 0n987912/0x000f1308u32 `.
# In IlFunctionId("main"), replacing `inline_main_queue_init_16_t4d4f <- inline_main_queue_init_16_s U32` with constant `inline_main_queue_init_16_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_queue_init_16_tc1ff <- inline_main_queue_init_16_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_queue_init_16_tc1ff <- 0n987916/0x000f130cu32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_g <- inline_main_getc_19_inline_getc_globals_0_t4206 U32` with constant `inline_main_getc_19_g <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_t7d0e <- inline_main_getc_19_g U32` with constant `inline_main_getc_19_t7d0e <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_t938b <- inline_main_getc_19_t7d0e U32` with constant `inline_main_getc_19_t938b <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_s <- inline_main_getc_19_t938b U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_g <- inline_main_getc_20_inline_getc_globals_0_t4206 U32` with constant `inline_main_getc_20_g <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_t7d0e <- inline_main_getc_20_g U32` with constant `inline_main_getc_20_t7d0e <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_t938b <- inline_main_getc_20_t7d0e U32` with constant `inline_main_getc_20_t938b <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_s <- inline_main_getc_20_t938b U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# In IlFunctionId("main"), optimizing round #2
# In IlFunctionId("main"), var `g` is written to, but never read. Removing the instruction that writes to it: (g <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "# In IlFunctionId(\"main\"), replacing `g <- inline_main_globals_3_t4206 U32` with constant `g <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #3
# In IlFunctionId("main"), optimizing round #4
# In IlFunctionId("main"), var `inline_main_getc_19_g` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_19_g <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_19_g <- inline_main_getc_19_inline_getc_globals_0_t4206 U32` with constant `inline_main_getc_19_g <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #5
# In IlFunctionId("main"), optimizing round #6
# In IlFunctionId("main"), var `inline_main_getc_19_inline_getc_globals_0_t4206` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_19_inline_getc_globals_0_t4206 <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))", "Number(0n987656/0x000f1208u32)"] })
# In IlFunctionId("main"), optimizing round #7
# In IlFunctionId("main"), optimizing round #8
# In IlFunctionId("main"), var `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #9
# In IlFunctionId("main"), var `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #10
# In IlFunctionId("main"), var `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(18,5)), SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #11
# In IlFunctionId("main"), var `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #12
# In IlFunctionId("main"), var `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #13
# In IlFunctionId("main"), optimizing round #14
# In IlFunctionId("main"), var `inline_main_getc_19_t7d0e` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_19_t7d0e <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(89,5)), SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_19_t7d0e <- inline_main_getc_19_g U32` with constant `inline_main_getc_19_t7d0e <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #15
# In IlFunctionId("main"), optimizing round #16
# In IlFunctionId("main"), var `inline_main_getc_19_t938b` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_19_t938b <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(89,5)), SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_19_t938b <- inline_main_getc_19_t7d0e U32` with constant `inline_main_getc_19_t938b <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #17
# In IlFunctionId("main"), optimizing round #18
# In IlFunctionId("main"), var `inline_main_getc_20_g` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_20_g <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_20_g <- inline_main_getc_20_inline_getc_globals_0_t4206 U32` with constant `inline_main_getc_20_g <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #19
# In IlFunctionId("main"), optimizing round #20
# In IlFunctionId("main"), var `inline_main_getc_20_inline_getc_globals_0_t4206` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_20_inline_getc_globals_0_t4206 <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))", "Number(0n987656/0x000f1208u32)"] })
# In IlFunctionId("main"), optimizing round #21
# In IlFunctionId("main"), optimizing round #22
# In IlFunctionId("main"), var `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #23
# In IlFunctionId("main"), var `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #24
# In IlFunctionId("main"), var `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(18,5)), SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #25
# In IlFunctionId("main"), var `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #26
# In IlFunctionId("main"), var `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #27
# In IlFunctionId("main"), optimizing round #28
# In IlFunctionId("main"), var `inline_main_getc_20_t7d0e` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_20_t7d0e <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(89,5)), SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_20_t7d0e <- inline_main_getc_20_g U32` with constant `inline_main_getc_20_t7d0e <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #29
# In IlFunctionId("main"), optimizing round #30
# In IlFunctionId("main"), var `inline_main_getc_20_t938b` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_20_t938b <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(89,5)), SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_20_t938b <- inline_main_getc_20_t7d0e U32` with constant `inline_main_getc_20_t938b <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #31
# In IlFunctionId("main"), optimizing round #32
# In IlFunctionId("main"), var `inline_main_globals_3_t4206` is written to, but never read. Removing the instruction that writes to it: (inline_main_globals_3_t4206 <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))", "Number(0n987656/0x000f1208u32)"] })
# In IlFunctionId("main"), optimizing round #33
# In IlFunctionId("main"), optimizing round #34
# In IlFunctionId("main"), var `inline_main_queue_init_16_s` is written to, but never read. Removing the instruction that writes to it: (inline_main_queue_init_16_s <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(98,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "# In IlFunctionId(\"main\"), replacing `inline_main_queue_init_16_s <- t938b U32` with constant `inline_main_queue_init_16_s <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #35
# In IlFunctionId("main"), optimizing round #36
# In IlFunctionId("main"), var `inline_main_queue_init_16_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_queue_init_16_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(9,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_queue_init_16_t4d4f <- inline_main_queue_init_16_s U32` with constant `inline_main_queue_init_16_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #37
# In IlFunctionId("main"), var `inline_main_queue_init_16_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_queue_init_16_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(8,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_queue_init_16_t4d4f <- inline_main_queue_init_16_s U32` with constant `inline_main_queue_init_16_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #38
# In IlFunctionId("main"), optimizing round #39
# In IlFunctionId("main"), var `t7d0e` is written to, but never read. Removing the instruction that writes to it: (t7d0e <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(98,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"main\"), replacing `t7d0e <- g U32` with constant `t7d0e <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #40
# In IlFunctionId("main"), optimizing round #41
# In IlFunctionId("main"), var `t938b` is written to, but never read. Removing the instruction that writes to it: (t938b <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(98,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "# In IlFunctionId(\"main\"), replacing `t938b <- t7d0e U32` with constant `t938b <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #42
# In IlFunctionId("main"), optimizing round #43
# In IlFunctionId("main"), var `tbb6d` is written to, but never read. Removing the instruction that writes to it: (tbb6d <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(97,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"main\"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #44
# In IlFunctionId("main"), var `tbb6d` is written to, but never read. Removing the instruction that writes to it: (tbb6d <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(96,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"main\"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #45
# In IlFunctionId("main"), optimizing round #46
# In IlFunctionId("main"), removing no-op goto instruction #91: goto inline_main_getc_20_function_end_getc
# In IlFunctionId("main"), removing no-op goto instruction #86: goto inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop
# In IlFunctionId("main"), removing no-op goto instruction #60: goto inline_main_getc_20_inline_getc_globals_0_function_end_globals
# In IlFunctionId("main"), removing no-op goto instruction #48: goto inline_main_getc_19_function_end_getc
# In IlFunctionId("main"), removing no-op goto instruction #43: goto inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop
# In IlFunctionId("main"), removing no-op goto instruction #17: goto inline_main_getc_19_inline_getc_globals_0_function_end_globals
# In IlFunctionId("main"), removing no-op goto instruction #12: goto inline_main_queue_init_16_function_end_queue_init
# In IlFunctionId("main"), removing no-op goto instruction #0: goto inline_main_globals_3_function_end_globals
# In IlFunctionId("main"), optimizing round #47
# In IlFunctionId("main"), removing unreferenced label: :inline_main_globals_3_function_end_globals
# In IlFunctionId("main"), removing unreferenced label: :inline_main_queue_init_16_function_end_queue_init
# In IlFunctionId("main"), removing unreferenced label: :inline_main_getc_19_inline_getc_globals_0_function_end_globals
# In IlFunctionId("main"), removing unreferenced label: :inline_main_getc_19_function_end_getc
# In IlFunctionId("main"), removing unreferenced label: :inline_main_getc_20_inline_getc_globals_0_function_end_globals
# In IlFunctionId("main"), removing unreferenced label: :inline_main_getc_20_function_end_getc
# In IlFunctionId("main"), optimizing round #48
# In IlFunctionId("main"), in block from 24..37, removing repetitive write at 30 because it is the same as at 25: inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# In IlFunctionId("main"), in block from 24..37, removing repetitive write at 31 because it is the same as at 30: inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# In IlFunctionId("main"), in block from 62..75, removing repetitive write at 68 because it is the same as at 63: inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# In IlFunctionId("main"), in block from 62..75, removing repetitive write at 69 because it is the same as at 68: inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# In IlFunctionId("main"), optimizing round #49
# In IlFunctionId("main"), at #64, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_s with inline_main_getc_19_inline_getc_queue_pop_18_s as they share the same const value: Number(0n987656/0x000f1208u32). inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_20_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) -> inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469)
# In IlFunctionId("main"), at #50, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_s with inline_main_getc_19_inline_getc_queue_pop_18_s as they share the same const value: Number(0n987656/0x000f1208u32). inline_main_getc_20_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32  -> inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32 
# In IlFunctionId("main"), at #58, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_ta97f U8 -> inline_main_getc_20_ch <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# In IlFunctionId("main"), at #57, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getc_20_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #52, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
# In IlFunctionId("main"), at #62, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
# In IlFunctionId("main"), at #66, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
# In IlFunctionId("main"), at #68, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_te468 U8 -> mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_te468 U8
# In IlFunctionId("main"), at #51, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  -> inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# In IlFunctionId("main"), at #61, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  -> inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# In IlFunctionId("main"), at #54, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tc1ff] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8
# In IlFunctionId("main"), at #53, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  -> inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 
# In IlFunctionId("main"), at #7, replacing reference to inline_main_queue_init_16_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_main_queue_init_16_tb702] <- inline_main_queue_init_16_ta97f U8 -> mem[inline_main_queue_init_16_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# In IlFunctionId("main"), at #9, replacing reference to inline_main_queue_init_16_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_main_queue_init_16_tc1ff] <- inline_main_queue_init_16_ta97f U8 -> mem[inline_main_queue_init_16_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# In IlFunctionId("main"), at #6, replacing reference to inline_main_queue_init_16_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_queue_init_16_ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #7, replacing reference to inline_main_queue_init_16_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). mem[inline_main_queue_init_16_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 -> mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# In IlFunctionId("main"), at #5, replacing reference to inline_main_queue_init_16_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_queue_init_16_tb702 <- 0n987912/0x000f1308u32  -> inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# In IlFunctionId("main"), at #9, replacing reference to inline_main_queue_init_16_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). mem[inline_main_queue_init_16_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 -> mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# In IlFunctionId("main"), at #8, replacing reference to inline_main_queue_init_16_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). inline_main_queue_init_16_tc1ff <- 0n987916/0x000f130cu32  -> inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 
# In IlFunctionId("main"), at #2, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[tb70e] <- ta97f U8 -> mem[tb70e] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# In IlFunctionId("main"), at #4, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[td3f9] <- ta97f U8 -> mem[td3f9] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# In IlFunctionId("main"), at #47, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'main_while_body_4' else 'function_end_main' -> if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'function_end_main'
# In IlFunctionId("main"), at #77, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if tdcd9 != ta97f then 'main_if_true_0_7' else 'main_if_end_6' -> if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_end_6'
# In IlFunctionId("main"), at #84, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_main_getc_19_inline_getc_queue_pop_18_ta97f)
# In IlFunctionId("main"), at #1, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #46, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #76, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #83, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), optimizing round #50
# In IlFunctionId("main"), optimizing round #51
# In IlFunctionId("main"), in block from 0..11, removing repetitive write at 6 because it is the same as at 1: inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), optimizing round #52
# IlFunctionId("disable_interrupts")()
# 00: Unreachable # None
# 01: return None # None
# 02: :function_end_disable_interrupts # None
# 03: Unreachable # None

# IlFunctionId("enable_interrupts")()
# 00: Unreachable # None
# 01: return None # None
# 02: :function_end_enable_interrupts # None
# 03: Unreachable # None

# IlFunctionId("handle_ps2")()
# 00: Some(code) <= call io_read2() # Some('programs/test/keyboard_isr.j':(24,5))
# 01: tf68c <- code U8 # Some('programs/test/keyboard_isr.j':(28,5))
# 02: t528d U32 <- tf68c U8 # Some('programs/test/keyboard_isr.j':(28,5))
# 03: index <- t528d Multiply Number(0n4/0x00000004u32) # Some('programs/test/keyboard_isr.j':(28,5))
# 04: tb70e <- 0n987920/0x000f1310u32  # Some('programs/test/keyboard_isr.j':(29,5))
# 05: t7905 <- mem[tb70e] U8 # Some('programs/test/keyboard_isr.j':(29,5))
# 06: ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(29,5))
# 07: if t7905 != ta97f then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2' # Some('programs/test/keyboard_isr.j':(29,5))
# 08: :handle_ps2_if_true_0_1 # Some('programs/test/keyboard_isr.j':(29,5))
# 09: t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('programs/test/keyboard_isr.j':(29,5))
# 10: td18e <- index U32 # Some('programs/test/keyboard_isr.j':(29,5))
# 11: t674 <- td18e Add Number(0n1/0x00000001u32) # Some('programs/test/keyboard_isr.j':(29,5))
# 12: t23a <- t4c8b Add Var(t674) # Some('programs/test/keyboard_isr.j':(29,5))
# 13: ch <- mem[t23a] U8 # Some('programs/test/keyboard_isr.j':(29,5))
# 14: goto handle_ps2_if_end_0 # Some('programs/test/keyboard_isr.j':(29,5))
# 15: :handle_ps2_if_else_0_2 # Some('programs/test/keyboard_isr.j':(29,5))
# 16: t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('programs/test/keyboard_isr.j':(29,5))
# 17: td18e <- index U32 # Some('programs/test/keyboard_isr.j':(29,5))
# 18: tb62e <- t4c8b Add Var(td18e) # Some('programs/test/keyboard_isr.j':(29,5))
# 19: ch <- mem[tb62e] U8 # Some('programs/test/keyboard_isr.j':(29,5))
# 20: :handle_ps2_if_end_0 # Some('programs/test/keyboard_isr.j':(29,5))
# 21: td3f9 <- 0n987924/0x000f1314u32  # Some('programs/test/keyboard_isr.j':(35,5))
# 22: t75f <- mem[td3f9] U8 # Some('programs/test/keyboard_isr.j':(35,5))
# 23: ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(35,5))
# 24: if t75f == ta97f then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_end_3' # Some('programs/test/keyboard_isr.j':(35,5))
# 25: :handle_ps2_if_true_0_4 # Some('programs/test/keyboard_isr.j':(35,5))
# 26: tdcd9 <- ch U8 # Some('programs/test/keyboard_isr.j':(35,5))
# 27: inline_handle_ps2_queue_push_25_s <- 0n987656/0x000f1208u32  # Some('programs/test/keyboard_isr.j':(35,5))
# 28: inline_handle_ps2_queue_push_25_n <- tdcd9 U8 # Some('programs/test/keyboard_isr.j':(35,5))
# 29: inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 30: inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 31: inline_handle_ps2_queue_push_25_t5bb7 U32 <- inline_handle_ps2_queue_push_25_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 32: inline_handle_ps2_queue_push_25_t2187 <- inline_handle_ps2_queue_push_25_s Add Var(inline_handle_ps2_queue_push_25_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 33: mem[inline_handle_ps2_queue_push_25_t2187] <- inline_handle_ps2_queue_push_25_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 34: inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 35: inline_handle_ps2_queue_push_25_tf3c4 <- inline_handle_ps2_queue_push_25_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 36: mem[inline_handle_ps2_queue_push_25_tc1ff] <- inline_handle_ps2_queue_push_25_tf3c4 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 37: :handle_ps2_if_end_3 # Some('programs/test/keyboard_isr.j':(35,5))
# 38: ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(43,5))
# 39: t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('programs/test/keyboard_isr.j':(43,5))
# 40: td18e <- index U32 # Some('programs/test/keyboard_isr.j':(43,5))
# 41: te5cf <- td18e Add Number(0n2/0x00000002u32) # Some('programs/test/keyboard_isr.j':(43,5))
# 42: ted94 <- t4c8b Add Var(te5cf) # Some('programs/test/keyboard_isr.j':(43,5))
# 43: t2ca9 <- mem[ted94] U8 # Some('programs/test/keyboard_isr.j':(43,5))
# 44: if ta97f != t2ca9 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_end_9_MERGED_handle_ps2_if_end_6' # Some('programs/test/keyboard_isr.j':(43,5))
# 45: :handle_ps2_if_true_0_7 # Some('programs/test/keyboard_isr.j':(43,5))
# 46: td3f9 <- 0n987924/0x000f1314u32  # Some('programs/test/keyboard_isr.j':(43,5))
# 47: t75f <- mem[td3f9] U8 # Some('programs/test/keyboard_isr.j':(43,5))
# 48: ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(43,5))
# 49: if t75f != ta97f then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11' # Some('programs/test/keyboard_isr.j':(43,5))
# 50: :handle_ps2_if_true_0_10 # Some('programs/test/keyboard_isr.j':(43,5))
# 51: tb70e <- 0n987920/0x000f1310u32  # Some('programs/test/keyboard_isr.j':(43,5))
# 52: ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(43,5))
# 53: mem[tb70e] <- ta97f U8 # Some('programs/test/keyboard_isr.j':(43,5))
# 54: goto handle_ps2_if_end_9_MERGED_handle_ps2_if_end_6 # Some('programs/test/keyboard_isr.j':(43,5))
# 55: :handle_ps2_if_else_0_11 # Some('programs/test/keyboard_isr.j':(43,5))
# 56: tb70e <- 0n987920/0x000f1310u32  # Some('programs/test/keyboard_isr.j':(43,5))
# 57: ta11a <- 0n1/0x01u8  # Some('programs/test/keyboard_isr.j':(43,5))
# 58: mem[tb70e] <- ta11a U8 # Some('programs/test/keyboard_isr.j':(43,5))
# 59: :handle_ps2_if_end_9_MERGED_handle_ps2_if_end_6 # Some('programs/test/keyboard_isr.j':(43,5))
# 60: ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(55,5))
# 61: t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('programs/test/keyboard_isr.j':(55,5))
# 62: td18e <- index U32 # Some('programs/test/keyboard_isr.j':(55,5))
# 63: t5e63 <- td18e Add Number(0n3/0x00000003u32) # Some('programs/test/keyboard_isr.j':(55,5))
# 64: t6cd9 <- t4c8b Add Var(t5e63) # Some('programs/test/keyboard_isr.j':(55,5))
# 65: t7b09 <- mem[t6cd9] U8 # Some('programs/test/keyboard_isr.j':(55,5))
# 66: if ta97f != t7b09 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14' # Some('programs/test/keyboard_isr.j':(55,5))
# 67: :handle_ps2_if_true_0_13 # Some('programs/test/keyboard_isr.j':(55,5))
# 68: td3f9 <- 0n987924/0x000f1314u32  # Some('programs/test/keyboard_isr.j':(55,5))
# 69: ta11a <- 0n1/0x01u8  # Some('programs/test/keyboard_isr.j':(55,5))
# 70: mem[td3f9] <- ta11a U8 # Some('programs/test/keyboard_isr.j':(55,5))
# 71: goto handle_ps2_if_end_12 # Some('programs/test/keyboard_isr.j':(55,5))
# 72: :handle_ps2_if_else_0_14 # Some('programs/test/keyboard_isr.j':(55,5))
# 73: td3f9 <- 0n987924/0x000f1314u32  # Some('programs/test/keyboard_isr.j':(55,5))
# 74: ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(55,5))
# 75: mem[td3f9] <- ta97f U8 # Some('programs/test/keyboard_isr.j':(55,5))
# 76: :handle_ps2_if_end_12 # Some('programs/test/keyboard_isr.j':(55,5))
# 77: return None # None
# 78: :function_end_handle_ps2 # None
# 79: Unreachable # None

# IlFunctionId("handle_tty")()
# 00: tb816 <- ttyin # Some('programs/test/keyboard_isr.j':(71,5))
# 01: inline_handle_tty_queue_push_26_s <- 0n987656/0x000f1208u32  # Some('programs/test/keyboard_isr.j':(71,5))
# 02: inline_handle_tty_queue_push_26_n <- tb816 U8 # Some('programs/test/keyboard_isr.j':(71,5))
# 03: inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 04: inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 05: inline_handle_tty_queue_push_26_t5bb7 U32 <- inline_handle_tty_queue_push_26_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 06: inline_handle_tty_queue_push_26_t2187 <- inline_handle_tty_queue_push_26_s Add Var(inline_handle_tty_queue_push_26_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 07: mem[inline_handle_tty_queue_push_26_t2187] <- inline_handle_tty_queue_push_26_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 08: inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 09: inline_handle_tty_queue_push_26_tf3c4 <- inline_handle_tty_queue_push_26_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 10: mem[inline_handle_tty_queue_push_26_tc1ff] <- inline_handle_tty_queue_push_26_tf3c4 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 11: return None # None
# 12: :function_end_handle_tty # None
# 13: Unreachable # None

# IlFunctionId("io_read2")()
# 00: Unreachable # None
# 01: :function_end_io_read2 # None
# 02: Unreachable # None

# IlFunctionId("io_ready_to_read")()
# 00: Unreachable # None
# 01: :function_end_io_ready_to_read # None
# 02: Unreachable # None

# IlFunctionId("isr")()
# 00: Some(rtr) <= call io_ready_to_read() # Some('programs/test/keyboard_isr.j':(75,5))
# 01: t59ef <- rtr U8 # Some('programs/test/keyboard_isr.j':(77,5))
# 02: t864 <- t59ef BitwiseAnd Number(0n1/0x01u8) # Some('programs/test/keyboard_isr.j':(77,5))
# 03: ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(77,5))
# 04: if t864 != ta97f then 'isr_if_true_0_1' else 'isr_if_end_0' # Some('programs/test/keyboard_isr.j':(77,5))
# 05: :isr_if_true_0_1 # Some('programs/test/keyboard_isr.j':(77,5))
# 06: None <= call handle_tty() # Some('programs/test/keyboard_isr.j':(77,5))
# 07: :isr_if_end_0 # Some('programs/test/keyboard_isr.j':(77,5))
# 08: t59ef <- rtr U8 # Some('programs/test/keyboard_isr.j':(81,5))
# 09: tc44e <- t59ef BitwiseAnd Number(0n4/0x04u8) # Some('programs/test/keyboard_isr.j':(81,5))
# 10: ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(81,5))
# 11: if tc44e != ta97f then 'isr_if_true_0_4' else 'isr_if_end_3' # Some('programs/test/keyboard_isr.j':(81,5))
# 12: :isr_if_true_0_4 # Some('programs/test/keyboard_isr.j':(81,5))
# 13: None <= call handle_ps2() # Some('programs/test/keyboard_isr.j':(81,5))
# 14: :isr_if_end_3 # Some('programs/test/keyboard_isr.j':(81,5))
# 15: return None # None
# 16: :function_end_isr # None
# 17: Unreachable # None

# IlFunctionId("main")()
# 00: tb70e <- 0n987920/0x000f1310u32  # Some('programs/test/keyboard_isr.j':(96,5))
# 01: inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(96,5))
# 02: mem[tb70e] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 # Some('programs/test/keyboard_isr.j':(96,5))
# 03: td3f9 <- 0n987924/0x000f1314u32  # Some('programs/test/keyboard_isr.j':(97,5))
# 04: mem[td3f9] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 # Some('programs/test/keyboard_isr.j':(97,5))
# 05: inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  # Some('/lutcomp/programs/lib/Queue.j':(8,5))
# 06: mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(8,5))
# 07: inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  # Some('/lutcomp/programs/lib/Queue.j':(9,5))
# 08: mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(9,5))
# 09: None <= call enable_interrupts() # Some('programs/test/keyboard_isr.j':(100,5))
# 10: :main_while_predicate_0 # Some('programs/test/keyboard_isr.j':(102,5))
# 11: t5eeb <- 0n97/0x61u8  # Some('programs/test/keyboard_isr.j':(102,5))
# 12: None <= call disable_interrupts() # Some('programs/test/keyboard_isr.j':(88,5))
# 13: inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32  # Some('programs/test/keyboard_isr.j':(89,5))
# 14: inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 15: inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 16: inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 17: inline_main_getc_19_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 18: if inline_main_getc_19_inline_getc_queue_pop_18_tb6dd == inline_main_getc_19_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0' # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 19: :inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 20: inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 21: inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 22: goto inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 23: :inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 24: inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 25: inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 26: inline_main_getc_19_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 27: inline_main_getc_19_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_19_inline_getc_queue_pop_18_tb469) # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 28: inline_main_getc_19_inline_getc_queue_pop_18_value <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tae11] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 29: inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
# 30: inline_main_getc_19_inline_getc_queue_pop_18_te468 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(19,5))
# 31: mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_te468 U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
# 32: inline_main_getc_19_inline_getc_queue_pop_18_t44ed <- inline_main_getc_19_inline_getc_queue_pop_18_value U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
# 33: inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_t44ed U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
# 34: :inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop # None
# 35: None <= call enable_interrupts() # Some('programs/test/keyboard_isr.j':(90,5))
# 36: inline_main_getc_19_tdcd9 <- inline_main_getc_19_ch U8 # Some('programs/test/keyboard_isr.j':(91,5))
# 37: t4d24 <- inline_main_getc_19_tdcd9 U8 # Some('programs/test/keyboard_isr.j':(91,5))
# 38: if t5eeb != t4d24 then 'main_while_body_1' else 'main_while_end_2' # Some('programs/test/keyboard_isr.j':(102,5))
# 39: :main_while_body_1 # Some('programs/test/keyboard_isr.j':(102,5))
# 40: goto main_while_predicate_0 # Some('programs/test/keyboard_isr.j':(102,5))
# 41: :main_while_end_2 # Some('programs/test/keyboard_isr.j':(102,5))
# 42: t5eeb <- 0n97/0x61u8  # Some('programs/test/keyboard_isr.j':(105,5))
# 43: ttyout <- t5eeb # Some('programs/test/keyboard_isr.j':(105,5))
# 44: :main_while_predicate_3 # Some('programs/test/keyboard_isr.j':(107,5))
# 45: inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(107,5))
# 46: if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'function_end_main' # Some('programs/test/keyboard_isr.j':(107,5))
# 47: :main_while_body_4 # Some('programs/test/keyboard_isr.j':(107,5))
# 48: None <= call disable_interrupts() # Some('programs/test/keyboard_isr.j':(88,5))
# 49: inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32  # Some('programs/test/keyboard_isr.j':(89,5))
# 50: inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 51: inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 52: inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 53: inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 54: if inline_main_getc_20_inline_getc_queue_pop_18_tb6dd == inline_main_getc_20_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0' # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 55: :inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 56: inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 57: inline_main_getc_20_ch <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 58: goto inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 59: :inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 60: inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 61: inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 62: inline_main_getc_20_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 63: inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 64: inline_main_getc_20_inline_getc_queue_pop_18_value <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tae11] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 65: inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
# 66: inline_main_getc_20_inline_getc_queue_pop_18_te468 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(19,5))
# 67: mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_te468 U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
# 68: inline_main_getc_20_inline_getc_queue_pop_18_t44ed <- inline_main_getc_20_inline_getc_queue_pop_18_value U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
# 69: inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_t44ed U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
# 70: :inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop # None
# 71: None <= call enable_interrupts() # Some('programs/test/keyboard_isr.j':(90,5))
# 72: inline_main_getc_20_tdcd9 <- inline_main_getc_20_ch U8 # Some('programs/test/keyboard_isr.j':(91,5))
# 73: ch <- inline_main_getc_20_tdcd9 U8 # Some('programs/test/keyboard_isr.j':(91,5))
# 74: tdcd9 <- ch U8 # Some('programs/test/keyboard_isr.j':(107,5))
# 75: inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(107,5))
# 76: if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_end_6' # Some('programs/test/keyboard_isr.j':(107,5))
# 77: :main_if_true_0_7 # Some('programs/test/keyboard_isr.j':(107,5))
# 78: tdcd9 <- ch U8 # Some('programs/test/keyboard_isr.j':(107,5))
# 79: tdf6e <- 0n113/0x71u8  # Some('programs/test/keyboard_isr.j':(107,5))
# 80: if tdcd9 == tdf6e then 'main_if_true_0_10' else 'main_if_end_9' # Some('programs/test/keyboard_isr.j':(107,5))
# 81: :main_if_true_0_10 # Some('programs/test/keyboard_isr.j':(107,5))
# 82: inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(107,5))
# 83: return Some(inline_main_getc_19_inline_getc_queue_pop_18_ta97f) # Some('programs/test/keyboard_isr.j':(107,5))
# 84: :main_if_end_9 # Some('programs/test/keyboard_isr.j':(107,5))
# 85: tdcd9 <- ch U8 # Some('programs/test/keyboard_isr.j':(107,5))
# 86: ttyout <- tdcd9 # Some('programs/test/keyboard_isr.j':(107,5))
# 87: :main_if_end_6 # Some('programs/test/keyboard_isr.j':(107,5))
# 88: goto main_while_predicate_3 # Some('programs/test/keyboard_isr.j':(107,5))
# 89: :function_end_main # Some('programs/test/keyboard_isr.j':(107,5))
# 90: Unreachable # None


# ImageBaseAddress=0x00000000
# entry
# 00000 Init []
#       Initialzing flags and internal regs.
00 

# 00001 LoadImm32 [Register(0x0c), Constant32(0x000f0f00=986880)]
#       Initialzing stack register to 0x000f0f00.
20 0c 00 0f 0f 00 

# 00007 LoadImm32 [Register(0x10), Constant32(0x000f0f0c=986892)]
#       load address of ISR slot 0x000f0f0c into R10.
20 10 0c 0f 0f 00 

# 0000d StoreImm32 [Register(0x10), Label32(:isr)]
#       store address of ISR isr to ISR slot 0x000f0f0c into R10.
25 10 9b 05 00 00 

# 00013 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:main))
32 0c fc ff ff ff 

# 00019 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:main))
25 0c 23 00 00 00 

# 0001f JmpImm [Label24(:main)]
#       PseudoCall(Label24(:main))
70 f8 05 00 

# 00023 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:main))
32 0c 04 00 00 00 

# 00029 Halt [Constant32(0x00000000=0)]
#       Halting after return from entry function.
7e 00 00 00 00 

# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
20 
20 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
0a 
0a 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :handle_ps2
# Ret None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([16])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([16])
# Var index (Local index Number(U32) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_handle_ps2_queue_push_25_n (Arg1 n Number(U8)) Reg(U8) Some([16])
# Var inline_handle_ps2_queue_push_25_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([24, 25, 26, 27]) Number(0n987656/0x000f1208u32)
# Var inline_handle_ps2_queue_push_25_t2187 (t2187 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_handle_ps2_queue_push_25_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([28])
# Var inline_handle_ps2_queue_push_25_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_handle_ps2_queue_push_25_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([36, 37, 38, 39]) Number(0n987916/0x000f130cu32)
# Var inline_handle_ps2_queue_push_25_tf3c4 (tf3c4 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))) Reg(U8) Some([16])
# Var t23a (t23a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }) Reg(U32) Some([40, 41, 42, 43])
# Var t2ca9 (t2ca9 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))) Reg(U8) Some([16])
# Var t4c8b (t4c8b Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([40, 41, 42, 43])
# Var t528d (t528d Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }) Reg(U32) Some([40, 41, 42, 43])
# Var t5e63 (t5e63 Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) Reg(U32) Some([20, 21, 22, 23])
# Var t674 (t674 Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) Reg(U32) Some([24, 25, 26, 27])
# Var t6cd9 (t6cd9 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }) Reg(U32) Some([40, 41, 42, 43])
# Var t75f (t75f PtrFieldDeref("g", "release_in_progress")) Reg(U8) Some([44])
# Var t7905 (t7905 PtrFieldDeref("g", "shift_held")) Reg(U8) Some([16])
# Var t7b09 (t7b09 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))) Reg(U8) Some([16])
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([16]) Number(0n1/0x01u8)
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([28]) Number(0n0/0x00u8)
# Var tb62e (tb62e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([40, 41, 42, 43])
# Var tb70e (tb70e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }) Reg(U32) Some([24, 25, 26, 27]) Number(0n987920/0x000f1310u32)
# Var td18e (td18e Ident("index")) Reg(U32) Some([20, 21, 22, 23])
# Var td3f9 (td3f9 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }) Reg(U32) Some([24, 25, 26, 27]) Number(0n987924/0x000f1314u32)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([16])
# Var te5cf (te5cf Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) Reg(U32) Some([24, 25, 26, 27])
# Var ted94 (ted94 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }) Reg(U32) Some([40, 41, 42, 43])
# Var tf68c (tf68c Ident("code")) Reg(U8) Some([16])
# Some(code) <= call io_read2() Some('programs/test/keyboard_isr.j':(24,5))
# Assign { target: Ident("code"), var_type: None, value: Call(Call { function: "io_read2", parameters: [] }) }
# Call(Call { function: "io_read2", parameters: [] })
# 00433 In2 [Register(0x10)]
#       IoRead2
62 10 

# tf68c <- code U8 Some('programs/test/keyboard_isr.j':(28,5))
# Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
# Ident("code")
# optimized away noop copy Instruction { source: "tf68c <- code U8 Some('programs/test/keyboard_isr.j':(28,5))\nAssign { target: Ident(\"index\"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident(\"code\")) }\nArithmetic(Multiply, Number(0n4/0x00000004u32), Ident(\"code\"))\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"code\") }\nIdent(\"code\")\n", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# t528d U32 <- tf68c U8 Some('programs/test/keyboard_isr.j':(28,5))
# Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
# 00435 LoadImm32 [Register(0x28), Constant32(0x00000000=0)]
#       Zero-pad for t528d U32 <- tf68c U8 Some('programs/test/keyboard_isr.j':(28,5))
#       Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
20 28 00 00 00 00 

# 0043b Copy8 [Register(0x10), Register(0x28)]
#       t528d U32 <- tf68c U8 Some('programs/test/keyboard_isr.j':(28,5))
#       Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
0b 10 28 

# index <- t528d Multiply Number(0n4/0x00000004u32) Some('programs/test/keyboard_isr.j':(28,5))
# Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# 0043e LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('programs/test/keyboard_isr.j':(28,5))
#       Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
20 00 04 00 00 00 

# 00444 Mul8_16 [Register(0x28), Register(0x00), Register(0x14)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('programs/test/keyboard_isr.j':(28,5))
#       Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
11 28 00 14 

# 00448 LoadImm8 [Register(0x16), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('programs/test/keyboard_isr.j':(28,5))
#       Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
04 16 00 

# 0044b LoadImm8 [Register(0x17), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('programs/test/keyboard_isr.j':(28,5))
#       Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
04 17 00 

# tb70e <- 0n987920/0x000f1310u32  Some('programs/test/keyboard_isr.j':(29,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("g", "shift_held")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32))
# # In IlFunctionId("handle_ps2"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
# 0044e LoadImm32 [Register(0x18), Constant32(0x000f1310=987920)]
#       tb70e <- 0n987920/0x000f1310u32  Some('programs/test/keyboard_isr.j':(29,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("g", "shift_held")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32))
#       # In IlFunctionId("handle_ps2"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
20 18 10 13 0f 00 

# t7905 <- mem[tb70e] U8 Some('programs/test/keyboard_isr.j':(29,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("g", "shift_held")
# 00454 Load8 [Register(0x18), Register(0x10)]
#       t7905 <- mem[tb70e] U8 Some('programs/test/keyboard_isr.j':(29,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("g", "shift_held")
05 18 10 

# ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(29,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00457 LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(29,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 1c 00 

# if t7905 != ta97f then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2' Some('programs/test/keyboard_isr.j':(29,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }
# 0045a Cmp8 [Register(0x10), Register(0x1c)]
#       if t7905 != ta97f then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2' Some('programs/test/keyboard_isr.j':(29,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }
15 10 1c 

# 0045d JzImm [Label24(handle_ps2_if_else_0_2)]
#       if t7905 != ta97f then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2' Some('programs/test/keyboard_isr.j':(29,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }
72 7d 04 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t7905 != ta97f then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2' Some('programs/test/keyboard_isr.j':(29,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_1)], resolved: None }
# :handle_ps2_if_true_0_1 Some('programs/test/keyboard_isr.j':(29,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# handle_ps2_if_true_0_1
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 00461 LoadImm32 [Register(0x28), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 28 2e 00 00 00 

# td18e <- index U32 Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('programs/test/keyboard_isr.j':(29,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t674 <- td18e Add Number(0n1/0x00000001u32) Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
# 00467 Copy32 [Register(0x14), Register(0x18)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
21 14 18 

# 0046a AddImm32IgnoreCarry [Register(0x18), Constant32(0x00000001=1)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
32 18 01 00 00 00 

# t23a <- t4c8b Add Var(t674) Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# 00470 ClearCarry []
#       t23a <- t4c8b Add Var(t674) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
03 

# 00471 AddCarry32_1 [Register(0x28), Register(0x18), Register(0x28)]
#       t23a <- t4c8b Add Var(t674) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
30 28 18 28 

# 00475 AddCarry32_2 []
#       t23a <- t4c8b Add Var(t674) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
31 

# ch <- mem[t23a] U8 Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# 00476 Load8 [Register(0x28), Register(0x10)]
#       ch <- mem[t23a] U8 Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
05 28 10 

# goto handle_ps2_if_end_0 Some('programs/test/keyboard_isr.j':(29,5))
# 00479 JmpImm [Label24(handle_ps2_if_end_0)]
#       goto handle_ps2_if_end_0 Some('programs/test/keyboard_isr.j':(29,5))
70 8c 04 00 

# :handle_ps2_if_else_0_2 Some('programs/test/keyboard_isr.j':(29,5))
# handle_ps2_if_else_0_2
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 0047d LoadImm32 [Register(0x28), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 28 2e 00 00 00 

# td18e <- index U32 Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('programs/test/keyboard_isr.j':(29,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# tb62e <- t4c8b Add Var(td18e) Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# 00483 ClearCarry []
#       tb62e <- t4c8b Add Var(td18e) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
03 

# 00484 AddCarry32_1 [Register(0x28), Register(0x14), Register(0x28)]
#       tb62e <- t4c8b Add Var(td18e) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
30 28 14 28 

# 00488 AddCarry32_2 []
#       tb62e <- t4c8b Add Var(td18e) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
31 

# ch <- mem[tb62e] U8 Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# 00489 Load8 [Register(0x28), Register(0x10)]
#       ch <- mem[tb62e] U8 Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
05 28 10 

# :handle_ps2_if_end_0 Some('programs/test/keyboard_isr.j':(29,5))
# handle_ps2_if_end_0
# td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("g", "release_in_progress")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
# # In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# 0048c LoadImm32 [Register(0x18), Constant32(0x000f1314=987924)]
#       td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("g", "release_in_progress")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
#       # In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
20 18 14 13 0f 00 

# t75f <- mem[td3f9] U8 Some('programs/test/keyboard_isr.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("g", "release_in_progress")
# 00492 Load8 [Register(0x18), Register(0x2c)]
#       t75f <- mem[td3f9] U8 Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("g", "release_in_progress")
05 18 2c 

# ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00495 LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 1c 00 

# if t75f == ta97f then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_end_3' Some('programs/test/keyboard_isr.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
# 00498 Cmp8 [Register(0x2c), Register(0x1c)]
#       if t75f == ta97f then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_end_3' Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
15 2c 1c 

# 0049b JzImm [Label24(handle_ps2_if_true_0_4)]
#       if t75f == ta97f then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_end_3' Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
72 a3 04 00 

# 0049f JmpImm [Label24(handle_ps2_if_end_3)]
#       if t75f == ta97f then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_end_3' Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
70 d1 04 00 

# :handle_ps2_if_true_0_4 Some('programs/test/keyboard_isr.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
# handle_ps2_if_true_0_4
# tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(35,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_handle_ps2_queue_push_25_s <- 0n987656/0x000f1208u32  Some('programs/test/keyboard_isr.j':(35,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] })
# # In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_s <- t938b U32` with constant `inline_handle_ps2_queue_push_25_s <- 0n987656/0x000f1208u32 `.
# 004a3 LoadImm32 [Register(0x18), Constant32(0x000f1208=987656)]
#       inline_handle_ps2_queue_push_25_s <- 0n987656/0x000f1208u32  Some('programs/test/keyboard_isr.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] })
#       # In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_s <- t938b U32` with constant `inline_handle_ps2_queue_push_25_s <- 0n987656/0x000f1208u32 `.
20 18 08 12 0f 00 

# inline_handle_ps2_queue_push_25_n <- tdcd9 U8 Some('programs/test/keyboard_isr.j':(35,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] })
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_25_n <- tdcd9 U8 Some('programs/test/keyboard_isr.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })\n", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32 `.
# 004a9 LoadImm32 [Register(0x24), Constant32(0x000f130c=987916)]
#       inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32 `.
20 24 0c 13 0f 00 

# inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 004af Load8 [Register(0x24), Register(0x1c)]
#       inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 24 1c 

# inline_handle_ps2_queue_push_25_t5bb7 U32 <- inline_handle_ps2_queue_push_25_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# 004b2 LoadImm32 [Register(0x20), Constant32(0x00000000=0)]
#       Zero-pad for inline_handle_ps2_queue_push_25_t5bb7 U32 <- inline_handle_ps2_queue_push_25_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
20 20 00 00 00 00 

# 004b8 Copy8 [Register(0x1c), Register(0x20)]
#       inline_handle_ps2_queue_push_25_t5bb7 U32 <- inline_handle_ps2_queue_push_25_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
0b 1c 20 

# inline_handle_ps2_queue_push_25_t2187 <- inline_handle_ps2_queue_push_25_s Add Var(inline_handle_ps2_queue_push_25_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# 004bb ClearCarry []
#       inline_handle_ps2_queue_push_25_t2187 <- inline_handle_ps2_queue_push_25_s Add Var(inline_handle_ps2_queue_push_25_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
03 

# 004bc AddCarry32_1 [Register(0x18), Register(0x20), Register(0x18)]
#       inline_handle_ps2_queue_push_25_t2187 <- inline_handle_ps2_queue_push_25_s Add Var(inline_handle_ps2_queue_push_25_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
30 18 20 18 

# 004c0 AddCarry32_2 []
#       inline_handle_ps2_queue_push_25_t2187 <- inline_handle_ps2_queue_push_25_s Add Var(inline_handle_ps2_queue_push_25_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
31 

# mem[inline_handle_ps2_queue_push_25_t2187] <- inline_handle_ps2_queue_push_25_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 004c1 Store8 [Register(0x10), Register(0x18)]
#       mem[inline_handle_ps2_queue_push_25_t2187] <- inline_handle_ps2_queue_push_25_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 10 18 

# inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# 004c4 Load8 [Register(0x24), Register(0x1c)]
#       inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
05 24 1c 

# inline_handle_ps2_queue_push_25_tf3c4 <- inline_handle_ps2_queue_push_25_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# 004c7 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_handle_ps2_queue_push_25_tf3c4 <- inline_handle_ps2_queue_push_25_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
04 00 01 

# 004ca Add8NoCarryIn [Register(0x1c), Register(0x00), Register(0x10)]
#       inline_handle_ps2_queue_push_25_tf3c4 <- inline_handle_ps2_queue_push_25_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
14 1c 00 10 

# mem[inline_handle_ps2_queue_push_25_tc1ff] <- inline_handle_ps2_queue_push_25_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# 004ce Store8 [Register(0x10), Register(0x24)]
#       mem[inline_handle_ps2_queue_push_25_tc1ff] <- inline_handle_ps2_queue_push_25_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
06 10 24 

# :handle_ps2_if_end_3 Some('programs/test/keyboard_isr.j':(35,5))
# handle_ps2_if_end_3
# ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Number(0n0/0x00u8)
# 004d1 LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Number(0n0/0x00u8)
04 1c 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 004d4 LoadImm32 [Register(0x28), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 28 2e 00 00 00 

# td18e <- index U32 Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('programs/test/keyboard_isr.j':(43,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# te5cf <- td18e Add Number(0n2/0x00000002u32) Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
# 004da Copy32 [Register(0x14), Register(0x18)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
21 14 18 

# 004dd AddImm32IgnoreCarry [Register(0x18), Constant32(0x00000002=2)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
32 18 02 00 00 00 

# ted94 <- t4c8b Add Var(te5cf) Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# 004e3 ClearCarry []
#       ted94 <- t4c8b Add Var(te5cf) Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
03 

# 004e4 AddCarry32_1 [Register(0x28), Register(0x18), Register(0x28)]
#       ted94 <- t4c8b Add Var(te5cf) Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
30 28 18 28 

# 004e8 AddCarry32_2 []
#       ted94 <- t4c8b Add Var(te5cf) Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
31 

# t2ca9 <- mem[ted94] U8 Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# 004e9 Load8 [Register(0x28), Register(0x10)]
#       t2ca9 <- mem[ted94] U8 Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
05 28 10 

# if ta97f != t2ca9 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_end_9_MERGED_handle_ps2_if_end_6' Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# 004ec Cmp8 [Register(0x1c), Register(0x10)]
#       if ta97f != t2ca9 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_end_9_MERGED_handle_ps2_if_end_6' Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
15 1c 10 

# 004ef JzImm [Label24(handle_ps2_if_end_9_MERGED_handle_ps2_if_end_6)]
#       if ta97f != t2ca9 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_end_9_MERGED_handle_ps2_if_end_6' Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
72 22 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta97f != t2ca9 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_end_9_MERGED_handle_ps2_if_end_6' Some('programs/test/keyboard_isr.j':(43,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\n", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_7)], resolved: None }
# :handle_ps2_if_true_0_7 Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# handle_ps2_if_true_0_7
# td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("g", "release_in_progress")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
# # In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# 004f3 LoadImm32 [Register(0x18), Constant32(0x000f1314=987924)]
#       td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("g", "release_in_progress")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
#       # In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
20 18 14 13 0f 00 

# t75f <- mem[td3f9] U8 Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("g", "release_in_progress")
# 004f9 Load8 [Register(0x18), Register(0x2c)]
#       t75f <- mem[td3f9] U8 Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("g", "release_in_progress")
05 18 2c 

# ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 004fc LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 1c 00 

# if t75f != ta97f then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11' Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
# 004ff Cmp8 [Register(0x2c), Register(0x1c)]
#       if t75f != ta97f then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11' Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
15 2c 1c 

# 00502 JzImm [Label24(handle_ps2_if_else_0_11)]
#       if t75f != ta97f then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11' Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
72 16 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t75f != ta97f then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11' Some('programs/test/keyboard_isr.j':(43,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_10)], resolved: None }
# :handle_ps2_if_true_0_10 Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# handle_ps2_if_true_0_10
# tb70e <- 0n987920/0x000f1310u32  Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32))
# # In IlFunctionId("handle_ps2"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
# 00506 LoadImm32 [Register(0x18), Constant32(0x000f1310=987920)]
#       tb70e <- 0n987920/0x000f1310u32  Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32))
#       # In IlFunctionId("handle_ps2"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
20 18 10 13 0f 00 

# ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0050c LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 1c 00 

# mem[tb70e] <- ta97f U8 Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# 0050f Store8 [Register(0x1c), Register(0x18)]
#       mem[tb70e] <- ta97f U8 Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
06 1c 18 

# goto handle_ps2_if_end_9_MERGED_handle_ps2_if_end_6 Some('programs/test/keyboard_isr.j':(43,5))
# 00512 JmpImm [Label24(handle_ps2_if_end_9_MERGED_handle_ps2_if_end_6)]
#       goto handle_ps2_if_end_9_MERGED_handle_ps2_if_end_6 Some('programs/test/keyboard_isr.j':(43,5))
70 22 05 00 

# :handle_ps2_if_else_0_11 Some('programs/test/keyboard_isr.j':(43,5))
# handle_ps2_if_else_0_11
# tb70e <- 0n987920/0x000f1310u32  Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32))
# # In IlFunctionId("handle_ps2"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
# 00516 LoadImm32 [Register(0x18), Constant32(0x000f1310=987920)]
#       tb70e <- 0n987920/0x000f1310u32  Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32))
#       # In IlFunctionId("handle_ps2"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
20 18 10 13 0f 00 

# ta11a <- 0n1/0x01u8  Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 0051c LoadImm8 [Register(0x10), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 10 01 

# mem[tb70e] <- ta11a U8 Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# 0051f Store8 [Register(0x10), Register(0x18)]
#       mem[tb70e] <- ta11a U8 Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
06 10 18 

# :handle_ps2_if_end_9_MERGED_handle_ps2_if_end_6 Some('programs/test/keyboard_isr.j':(43,5))
# handle_ps2_if_end_9_MERGED_handle_ps2_if_end_6
# ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Number(0n0/0x00u8)
# 00522 LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Number(0n0/0x00u8)
04 1c 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 00525 LoadImm32 [Register(0x28), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 28 2e 00 00 00 

# td18e <- index U32 Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('programs/test/keyboard_isr.j':(55,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
# 0052b AddImm32IgnoreCarry [Register(0x14), Constant32(0x00000003=3)]
#       t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
32 14 03 00 00 00 

# t6cd9 <- t4c8b Add Var(t5e63) Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# 00531 ClearCarry []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
03 

# 00532 AddCarry32_1 [Register(0x28), Register(0x14), Register(0x28)]
#       t6cd9 <- t4c8b Add Var(t5e63) Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
30 28 14 28 

# 00536 AddCarry32_2 []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
31 

# t7b09 <- mem[t6cd9] U8 Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# 00537 Load8 [Register(0x28), Register(0x10)]
#       t7b09 <- mem[t6cd9] U8 Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
05 28 10 

# if ta97f != t7b09 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14' Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# 0053a Cmp8 [Register(0x1c), Register(0x10)]
#       if ta97f != t7b09 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14' Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
15 1c 10 

# 0053d JzImm [Label24(handle_ps2_if_else_0_14)]
#       if ta97f != t7b09 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14' Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
72 51 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta97f != t7b09 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14' Some('programs/test/keyboard_isr.j':(55,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\n", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_13)], resolved: None }
# :handle_ps2_if_true_0_13 Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# handle_ps2_if_true_0_13
# td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
# # In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# 00541 LoadImm32 [Register(0x18), Constant32(0x000f1314=987924)]
#       td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
#       # In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
20 18 14 13 0f 00 

# ta11a <- 0n1/0x01u8  Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 00547 LoadImm8 [Register(0x10), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 10 01 

# mem[td3f9] <- ta11a U8 Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# 0054a Store8 [Register(0x10), Register(0x18)]
#       mem[td3f9] <- ta11a U8 Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
06 10 18 

# goto handle_ps2_if_end_12 Some('programs/test/keyboard_isr.j':(55,5))
# 0054d JmpImm [Label24(handle_ps2_if_end_12)]
#       goto handle_ps2_if_end_12 Some('programs/test/keyboard_isr.j':(55,5))
70 5d 05 00 

# :handle_ps2_if_else_0_14 Some('programs/test/keyboard_isr.j':(55,5))
# handle_ps2_if_else_0_14
# td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
# # In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# 00551 LoadImm32 [Register(0x18), Constant32(0x000f1314=987924)]
#       td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
#       # In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
20 18 14 13 0f 00 

# ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00557 LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 1c 00 

# mem[td3f9] <- ta97f U8 Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# 0055a Store8 [Register(0x1c), Register(0x18)]
#       mem[td3f9] <- ta97f U8 Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
06 1c 18 

# :handle_ps2_if_end_12 Some('programs/test/keyboard_isr.j':(55,5))
# handle_ps2_if_end_12
# return None None
# Return { value: None }
# 0055d JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_handle_ps2 None
# function_end_handle_ps2
# Unreachable None
# 0055f Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :handle_tty
# Ret None
# Var inline_handle_tty_queue_push_26_n (Arg1 n Number(U8)) Reg(U8) Some([45])
# Var inline_handle_tty_queue_push_26_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([48, 49, 50, 51]) Number(0n987656/0x000f1208u32)
# Var inline_handle_tty_queue_push_26_t2187 (t2187 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([48, 49, 50, 51])
# Var inline_handle_tty_queue_push_26_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([52])
# Var inline_handle_tty_queue_push_26_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_handle_tty_queue_push_26_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([60, 61, 62, 63]) Number(0n987916/0x000f130cu32)
# Var inline_handle_tty_queue_push_26_tf3c4 (tf3c4 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))) Reg(U8) Some([45])
# Var tb816 (tb816 TtyIn) Reg(U8) Some([45])
# tb816 <- ttyin Some('programs/test/keyboard_isr.j':(71,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })
# TtyIn
# 00564 In0 [Register(0x2d)]
#       tb816 <- ttyin Some('programs/test/keyboard_isr.j':(71,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })
#       TtyIn
60 2d 

# inline_handle_tty_queue_push_26_s <- 0n987656/0x000f1208u32  Some('programs/test/keyboard_isr.j':(71,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })
# # In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_s <- t938b U32` with constant `inline_handle_tty_queue_push_26_s <- 0n987656/0x000f1208u32 `.
# 00566 LoadImm32 [Register(0x30), Constant32(0x000f1208=987656)]
#       inline_handle_tty_queue_push_26_s <- 0n987656/0x000f1208u32  Some('programs/test/keyboard_isr.j':(71,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })
#       # In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_s <- t938b U32` with constant `inline_handle_tty_queue_push_26_s <- 0n987656/0x000f1208u32 `.
20 30 08 12 0f 00 

# inline_handle_tty_queue_push_26_n <- tb816 U8 Some('programs/test/keyboard_isr.j':(71,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })
# optimized away noop copy Instruction { source: "inline_handle_tty_queue_push_26_n <- tb816 U8 Some('programs/test/keyboard_isr.j':(71,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })\n", opcode: Copy8, args: [Register(0x2d), Register(0x2d)], resolved: None }
# inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32 `.
# 0056c LoadImm32 [Register(0x3c), Constant32(0x000f130c=987916)]
#       inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32 `.
20 3c 0c 13 0f 00 

# inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 00572 Load8 [Register(0x3c), Register(0x34)]
#       inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 3c 34 

# inline_handle_tty_queue_push_26_t5bb7 U32 <- inline_handle_tty_queue_push_26_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# 00575 LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       Zero-pad for inline_handle_tty_queue_push_26_t5bb7 U32 <- inline_handle_tty_queue_push_26_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
20 38 00 00 00 00 

# 0057b Copy8 [Register(0x34), Register(0x38)]
#       inline_handle_tty_queue_push_26_t5bb7 U32 <- inline_handle_tty_queue_push_26_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
0b 34 38 

# inline_handle_tty_queue_push_26_t2187 <- inline_handle_tty_queue_push_26_s Add Var(inline_handle_tty_queue_push_26_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# 0057e ClearCarry []
#       inline_handle_tty_queue_push_26_t2187 <- inline_handle_tty_queue_push_26_s Add Var(inline_handle_tty_queue_push_26_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
03 

# 0057f AddCarry32_1 [Register(0x30), Register(0x38), Register(0x30)]
#       inline_handle_tty_queue_push_26_t2187 <- inline_handle_tty_queue_push_26_s Add Var(inline_handle_tty_queue_push_26_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
30 30 38 30 

# 00583 AddCarry32_2 []
#       inline_handle_tty_queue_push_26_t2187 <- inline_handle_tty_queue_push_26_s Add Var(inline_handle_tty_queue_push_26_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
31 

# mem[inline_handle_tty_queue_push_26_t2187] <- inline_handle_tty_queue_push_26_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 00584 Store8 [Register(0x2d), Register(0x30)]
#       mem[inline_handle_tty_queue_push_26_t2187] <- inline_handle_tty_queue_push_26_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 2d 30 

# inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# 00587 Load8 [Register(0x3c), Register(0x34)]
#       inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
05 3c 34 

# inline_handle_tty_queue_push_26_tf3c4 <- inline_handle_tty_queue_push_26_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# 0058a LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_handle_tty_queue_push_26_tf3c4 <- inline_handle_tty_queue_push_26_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
04 00 01 

# 0058d Add8NoCarryIn [Register(0x34), Register(0x00), Register(0x2d)]
#       inline_handle_tty_queue_push_26_tf3c4 <- inline_handle_tty_queue_push_26_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
14 34 00 2d 

# mem[inline_handle_tty_queue_push_26_tc1ff] <- inline_handle_tty_queue_push_26_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# 00591 Store8 [Register(0x2d), Register(0x3c)]
#       mem[inline_handle_tty_queue_push_26_tc1ff] <- inline_handle_tty_queue_push_26_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
06 2d 3c 

# return None None
# Return { value: None }
# 00594 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_handle_tty None
# function_end_handle_tty
# Unreachable None
# 00596 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :isr
# Ret None
# Var rtr (Local rtr Number(U8) Reg(U8)) Reg(U8) Some([64])
# Var t59ef (t59ef Ident("rtr")) Reg(U8) Some([64])
# Var t864 (t864 Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8))) Reg(U8) Some([65])
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([66]) Number(0n0/0x00u8)
# Var tc44e (tc44e Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8))) Reg(U8) Some([64])
# Registers used by this function: {64, 65, 66}
# 0059b Push8 [Register(0x42)]
#       Saving reg0x42 before before entering ISR body
09 42 

# 0059d Push8 [Register(0x41)]
#       Saving reg0x41 before before entering ISR body
09 41 

# 0059f Push8 [Register(0x40)]
#       Saving reg0x40 before before entering ISR body
09 40 

# Some(rtr) <= call io_ready_to_read() Some('programs/test/keyboard_isr.j':(75,5))
# Assign { target: Ident("rtr"), var_type: None, value: Call(Call { function: "io_ready_to_read", parameters: [] }) }
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 005a1 IoReadyToRead [Register(0x40)]
#       ReadyToRead
79 40 

# t59ef <- rtr U8 Some('programs/test/keyboard_isr.j':(77,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8))
# Ident("rtr")
# optimized away noop copy Instruction { source: "t59ef <- rtr U8 Some('programs/test/keyboard_isr.j':(77,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }\nArithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n1/0x01u8))\nIdent(\"rtr\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# t864 <- t59ef BitwiseAnd Number(0n1/0x01u8) Some('programs/test/keyboard_isr.j':(77,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8))
# 005a3 Copy8 [Register(0x40), Register(0x41)]
#       t864 <- t59ef BitwiseAnd Number(0n1/0x01u8) Some('programs/test/keyboard_isr.j':(77,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8))
0b 40 41 

# 005a6 AndImm8 [Register(0x41), Constant8(0x01=1)]
#       t864 <- t59ef BitwiseAnd Number(0n1/0x01u8) Some('programs/test/keyboard_isr.j':(77,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8))
18 41 01 

# ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(77,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 005a9 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(77,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 42 00 

# if t864 != ta97f then 'isr_if_true_0_1' else 'isr_if_end_0' Some('programs/test/keyboard_isr.j':(77,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# 005ac Cmp8 [Register(0x41), Register(0x42)]
#       if t864 != ta97f then 'isr_if_true_0_1' else 'isr_if_end_0' Some('programs/test/keyboard_isr.j':(77,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
15 41 42 

# 005af JzImm [Label24(isr_if_end_0)]
#       if t864 != ta97f then 'isr_if_true_0_1' else 'isr_if_end_0' Some('programs/test/keyboard_isr.j':(77,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
72 c9 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t864 != ta97f then 'isr_if_true_0_1' else 'isr_if_end_0' Some('programs/test/keyboard_isr.j':(77,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(isr_if_true_0_1)], resolved: None }
# :isr_if_true_0_1 Some('programs/test/keyboard_isr.j':(77,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
# isr_if_true_0_1
# None <= call handle_tty() Some('programs/test/keyboard_isr.j':(77,5))
# VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }
# Call(Call { function: "handle_tty", parameters: [] })
# Registers used by this function: {64, 65, 66}
# Registers used by callee tree: {45, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 63}
# Registers to save: []
# 005b3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:handle_tty))
32 0c fc ff ff ff 

# 005b9 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:handle_tty))
25 0c c3 05 00 00 

# 005bf JmpImm [Label24(:handle_tty)]
#       PseudoCall(Label24(:handle_tty))
70 64 05 00 

# 005c3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:handle_tty))
32 0c 04 00 00 00 

# :isr_if_end_0 Some('programs/test/keyboard_isr.j':(77,5))
# isr_if_end_0
# t59ef <- rtr U8 Some('programs/test/keyboard_isr.j':(81,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8))
# Ident("rtr")
# optimized away noop copy Instruction { source: "t59ef <- rtr U8 Some('programs/test/keyboard_isr.j':(81,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }\nArithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n4/0x04u8))\nIdent(\"rtr\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# tc44e <- t59ef BitwiseAnd Number(0n4/0x04u8) Some('programs/test/keyboard_isr.j':(81,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8))
# 005c9 AndImm8 [Register(0x40), Constant8(0x04=4)]
#       tc44e <- t59ef BitwiseAnd Number(0n4/0x04u8) Some('programs/test/keyboard_isr.j':(81,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
#       Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8))
18 40 04 

# ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(81,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 005cc LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(81,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 42 00 

# if tc44e != ta97f then 'isr_if_true_0_4' else 'isr_if_end_3' Some('programs/test/keyboard_isr.j':(81,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# 005cf Cmp8 [Register(0x40), Register(0x42)]
#       if tc44e != ta97f then 'isr_if_true_0_4' else 'isr_if_end_3' Some('programs/test/keyboard_isr.j':(81,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
15 40 42 

# 005d2 JzImm [Label24(isr_if_end_3)]
#       if tc44e != ta97f then 'isr_if_true_0_4' else 'isr_if_end_3' Some('programs/test/keyboard_isr.j':(81,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
72 ec 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tc44e != ta97f then 'isr_if_true_0_4' else 'isr_if_end_3' Some('programs/test/keyboard_isr.j':(81,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(isr_if_true_0_4)], resolved: None }
# :isr_if_true_0_4 Some('programs/test/keyboard_isr.j':(81,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
# isr_if_true_0_4
# None <= call handle_ps2() Some('programs/test/keyboard_isr.j':(81,5))
# VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }
# Call(Call { function: "handle_ps2", parameters: [] })
# Registers used by this function: {64, 65, 66}
# Registers used by callee tree: {16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44}
# Registers to save: []
# 005d6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:handle_ps2))
32 0c fc ff ff ff 

# 005dc StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:handle_ps2))
25 0c e6 05 00 00 

# 005e2 JmpImm [Label24(:handle_ps2)]
#       PseudoCall(Label24(:handle_ps2))
70 33 04 00 

# 005e6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:handle_ps2))
32 0c 04 00 00 00 

# :isr_if_end_3 Some('programs/test/keyboard_isr.j':(81,5))
# isr_if_end_3
# return None None
# Return { value: None }
# Registers used by this function: {64, 65, 66}
# 005ec Pop8 [Register(0x40)]
#       Restoring reg0x40 after ISR body
0a 40 

# 005ee Pop8 [Register(0x41)]
#       Restoring reg0x41 after ISR body
0a 41 

# 005f0 Pop8 [Register(0x42)]
#       Restoring reg0x42 after ISR body
0a 42 

# 005f2 ReturnFromInterrupt []
#       return from ISR
78 

# :function_end_isr None
# function_end_isr
# Unreachable None
# 005f3 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :main
# Ret Some(U8)
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([67])
# Var inline_main_getc_19_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([67])
# Var inline_main_getc_19_inline_getc_queue_pop_18_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([68, 69, 70, 71]) Number(0n987656/0x000f1208u32)
# Var inline_main_getc_19_inline_getc_queue_pop_18_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([72])
# Var inline_main_getc_19_inline_getc_queue_pop_18_t44ed (t44ed Ident("value")) Reg(U8) Some([67])
# Var inline_main_getc_19_inline_getc_queue_pop_18_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([72]) Number(0n0/0x00u8)
# Var inline_main_getc_19_inline_getc_queue_pop_18_tae11 (tae11 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_getc_19_inline_getc_queue_pop_18_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_main_getc_19_inline_getc_queue_pop_18_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([80])
# Var inline_main_getc_19_inline_getc_queue_pop_18_tb702 (tb702 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }) Reg(U32) Some([84, 85, 86, 87]) Number(0n987912/0x000f1308u32)
# Var inline_main_getc_19_inline_getc_queue_pop_18_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([84, 85, 86, 87]) Number(0n987916/0x000f130cu32)
# Var inline_main_getc_19_inline_getc_queue_pop_18_te468 (te468 Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))) Reg(U8) Some([67])
# Var inline_main_getc_19_inline_getc_queue_pop_18_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([72])
# Var inline_main_getc_19_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([67])
# Var inline_main_getc_20_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([67])
# Var inline_main_getc_20_inline_getc_queue_pop_18_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([72])
# Var inline_main_getc_20_inline_getc_queue_pop_18_t44ed (t44ed Ident("value")) Reg(U8) Some([67])
# Var inline_main_getc_20_inline_getc_queue_pop_18_tae11 (tae11 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_getc_20_inline_getc_queue_pop_18_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_main_getc_20_inline_getc_queue_pop_18_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([80])
# Var inline_main_getc_20_inline_getc_queue_pop_18_te468 (te468 Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))) Reg(U8) Some([67])
# Var inline_main_getc_20_inline_getc_queue_pop_18_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([72])
# Var inline_main_getc_20_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([67])
# Var t4d24 (t4d24 Call(Call { function: "getc", parameters: [] })) Reg(U8) Some([67])
# Var t5eeb (t5eeb Number(0n97/0x61u8)) Reg(U8) Some([88]) Number(0n97/0x61u8)
# Var tb70e (tb70e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }) Reg(U32) Some([68, 69, 70, 71]) Number(0n987920/0x000f1310u32)
# Var td3f9 (td3f9 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }) Reg(U32) Some([68, 69, 70, 71]) Number(0n987924/0x000f1314u32)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([67])
# Var tdf6e (tdf6e Number(0n113/0x71u8)) Reg(U8) Some([72]) Number(0n113/0x71u8)
# tb70e <- 0n987920/0x000f1310u32  Some('programs/test/keyboard_isr.j':(96,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32))
# # In IlFunctionId("main"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
# 005f8 LoadImm32 [Register(0x44), Constant32(0x000f1310=987920)]
#       tb70e <- 0n987920/0x000f1310u32  Some('programs/test/keyboard_isr.j':(96,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32))
#       # In IlFunctionId("main"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
20 44 10 13 0f 00 

# inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(96,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #1, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# 005fe LoadImm8 [Register(0x48), Constant8(0x00=0)]
#       inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(96,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #1, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
04 48 00 

# mem[tb70e] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('programs/test/keyboard_isr.j':(96,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #2, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[tb70e] <- ta97f U8 -> mem[tb70e] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# 00601 Store8 [Register(0x48), Register(0x44)]
#       mem[tb70e] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('programs/test/keyboard_isr.j':(96,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #2, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[tb70e] <- ta97f U8 -> mem[tb70e] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
06 48 44 

# td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(97,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
# # In IlFunctionId("main"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# 00604 LoadImm32 [Register(0x44), Constant32(0x000f1314=987924)]
#       td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(97,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
#       # In IlFunctionId("main"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
20 44 14 13 0f 00 

# mem[td3f9] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('programs/test/keyboard_isr.j':(97,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #4, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[td3f9] <- ta97f U8 -> mem[td3f9] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# 0060a Store8 [Register(0x48), Register(0x44)]
#       mem[td3f9] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('programs/test/keyboard_isr.j':(97,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #4, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[td3f9] <- ta97f U8 -> mem[td3f9] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
06 48 44 

# inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("main"), replacing `inline_main_queue_init_16_tb702 <- inline_main_queue_init_16_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_queue_init_16_tb702 <- 0n987912/0x000f1308u32 `.
# # In IlFunctionId("main"), at #5, replacing reference to inline_main_queue_init_16_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_queue_init_16_tb702 <- 0n987912/0x000f1308u32  -> inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# 0060d LoadImm32 [Register(0x54), Constant32(0x000f1308=987912)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("main"), replacing `inline_main_queue_init_16_tb702 <- inline_main_queue_init_16_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_queue_init_16_tb702 <- 0n987912/0x000f1308u32 `.
#       # In IlFunctionId("main"), at #5, replacing reference to inline_main_queue_init_16_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_queue_init_16_tb702 <- 0n987912/0x000f1308u32  -> inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
20 54 08 13 0f 00 

# mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #7, replacing reference to inline_main_queue_init_16_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_main_queue_init_16_tb702] <- inline_main_queue_init_16_ta97f U8 -> mem[inline_main_queue_init_16_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# # In IlFunctionId("main"), at #7, replacing reference to inline_main_queue_init_16_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). mem[inline_main_queue_init_16_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 -> mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# 00613 Store8 [Register(0x48), Register(0x54)]
#       mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #7, replacing reference to inline_main_queue_init_16_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_main_queue_init_16_tb702] <- inline_main_queue_init_16_ta97f U8 -> mem[inline_main_queue_init_16_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
#       # In IlFunctionId("main"), at #7, replacing reference to inline_main_queue_init_16_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). mem[inline_main_queue_init_16_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 -> mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
06 48 54 

# inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("main"), replacing `inline_main_queue_init_16_tc1ff <- inline_main_queue_init_16_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_queue_init_16_tc1ff <- 0n987916/0x000f130cu32 `.
# # In IlFunctionId("main"), at #8, replacing reference to inline_main_queue_init_16_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). inline_main_queue_init_16_tc1ff <- 0n987916/0x000f130cu32  -> inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 
# 00616 LoadImm32 [Register(0x54), Constant32(0x000f130c=987916)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("main"), replacing `inline_main_queue_init_16_tc1ff <- inline_main_queue_init_16_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_queue_init_16_tc1ff <- 0n987916/0x000f130cu32 `.
#       # In IlFunctionId("main"), at #8, replacing reference to inline_main_queue_init_16_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). inline_main_queue_init_16_tc1ff <- 0n987916/0x000f130cu32  -> inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 
20 54 0c 13 0f 00 

# mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #9, replacing reference to inline_main_queue_init_16_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_main_queue_init_16_tc1ff] <- inline_main_queue_init_16_ta97f U8 -> mem[inline_main_queue_init_16_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# # In IlFunctionId("main"), at #9, replacing reference to inline_main_queue_init_16_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). mem[inline_main_queue_init_16_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 -> mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# 0061c Store8 [Register(0x48), Register(0x54)]
#       mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #9, replacing reference to inline_main_queue_init_16_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_main_queue_init_16_tc1ff] <- inline_main_queue_init_16_ta97f U8 -> mem[inline_main_queue_init_16_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
#       # In IlFunctionId("main"), at #9, replacing reference to inline_main_queue_init_16_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). mem[inline_main_queue_init_16_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 -> mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
06 48 54 

# None <= call enable_interrupts() Some('programs/test/keyboard_isr.j':(100,5))
# VoidExpression { expression: Call(Call { function: "enable_interrupts", parameters: [] }) }
# Call(Call { function: "enable_interrupts", parameters: [] })
# 0061f EnableInterrupts []
#       EnableInterrupts
76 

# :main_while_predicate_0 Some('programs/test/keyboard_isr.j':(102,5))
# While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
# main_while_predicate_0
# t5eeb <- 0n97/0x61u8  Some('programs/test/keyboard_isr.j':(102,5))
# While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
# Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }
# Number(0n97/0x61u8)
# 00620 LoadImm8 [Register(0x58), Constant8(0x61=97)]
#       t5eeb <- 0n97/0x61u8  Some('programs/test/keyboard_isr.j':(102,5))
#       While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
#       Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }
#       Number(0n97/0x61u8)
04 58 61 

# None <= call disable_interrupts() Some('programs/test/keyboard_isr.j':(88,5))
# VoidExpression { expression: Call(Call { function: "disable_interrupts", parameters: [] }) }
# Call(Call { function: "disable_interrupts", parameters: [] })
# 00623 DisableInterrupts []
#       DisableInterrupts
77 

# inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32  Some('programs/test/keyboard_isr.j':(89,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })
# # In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_s <- inline_main_getc_19_t938b U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32 `.
# 00624 LoadImm32 [Register(0x44), Constant32(0x000f1208=987656)]
#       inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32  Some('programs/test/keyboard_isr.j':(89,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })
#       # In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_s <- inline_main_getc_19_t938b U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32 `.
20 44 08 12 0f 00 

# inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# 0062a LoadImm32 [Register(0x54), Constant32(0x000f1308=987912)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
20 54 08 13 0f 00 

# inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# 00630 Load8 [Register(0x54), Register(0x50)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
05 54 50 

# inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 `.
# 00633 LoadImm32 [Register(0x54), Constant32(0x000f130c=987916)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 `.
20 54 0c 13 0f 00 

# inline_main_getc_19_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 00639 Load8 [Register(0x54), Register(0x48)]
#       inline_main_getc_19_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 54 48 

# if inline_main_getc_19_inline_getc_queue_pop_18_tb6dd == inline_main_getc_19_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 0063c Cmp8 [Register(0x50), Register(0x48)]
#       if inline_main_getc_19_inline_getc_queue_pop_18_tb6dd == inline_main_getc_19_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 50 48 

# 0063f JzImm [Label24(inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1)]
#       if inline_main_getc_19_inline_getc_queue_pop_18_tb6dd == inline_main_getc_19_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 47 06 00 

# 00643 JmpImm [Label24(inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0)]
#       if inline_main_getc_19_inline_getc_queue_pop_18_tb6dd == inline_main_getc_19_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 51 06 00 

# :inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1
# inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# 00647 LoadImm8 [Register(0x48), Constant8(0x00=0)]
#       inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
04 48 00 

# inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 0064a Copy8 [Register(0x48), Register(0x43)]
#       inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
0b 48 43 

# goto inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 0064d JmpImm [Label24(inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop)]
#       goto inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
70 7c 06 00 

# :inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0
# inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# 00651 LoadImm32 [Register(0x54), Constant32(0x000f1308=987912)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
20 54 08 13 0f 00 

# inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# 00657 Load8 [Register(0x54), Register(0x50)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
05 54 50 

# inline_main_getc_19_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# 0065a LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_main_getc_19_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
20 4c 00 00 00 00 

# 00660 Copy8 [Register(0x50), Register(0x4c)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
0b 50 4c 

# inline_main_getc_19_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_19_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# 00663 ClearCarry []
#       inline_main_getc_19_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_19_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
03 

# 00664 AddCarry32_1 [Register(0x44), Register(0x4c), Register(0x44)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_19_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
30 44 4c 44 

# 00668 AddCarry32_2 []
#       inline_main_getc_19_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_19_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
31 

# inline_main_getc_19_inline_getc_queue_pop_18_value <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 00669 Load8 [Register(0x44), Register(0x48)]
#       inline_main_getc_19_inline_getc_queue_pop_18_value <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 44 48 

# inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first")
# 0066c Load8 [Register(0x54), Register(0x50)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first")
05 54 50 

# inline_main_getc_19_inline_getc_queue_pop_18_te468 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# 0066f LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_main_getc_19_inline_getc_queue_pop_18_te468 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
04 00 01 

# 00672 Add8NoCarryIn [Register(0x50), Register(0x00), Register(0x43)]
#       inline_main_getc_19_inline_getc_queue_pop_18_te468 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
14 50 00 43 

# mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# 00676 Store8 [Register(0x43), Register(0x54)]
#       mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
06 43 54 

# inline_main_getc_19_inline_getc_queue_pop_18_t44ed <- inline_main_getc_19_inline_getc_queue_pop_18_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 00679 Copy8 [Register(0x48), Register(0x43)]
#       inline_main_getc_19_inline_getc_queue_pop_18_t44ed <- inline_main_getc_19_inline_getc_queue_pop_18_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 48 43 

# inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# :inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop None
# inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop
# None <= call enable_interrupts() Some('programs/test/keyboard_isr.j':(90,5))
# VoidExpression { expression: Call(Call { function: "enable_interrupts", parameters: [] }) }
# Call(Call { function: "enable_interrupts", parameters: [] })
# 0067c EnableInterrupts []
#       EnableInterrupts
76 

# inline_main_getc_19_tdcd9 <- inline_main_getc_19_ch U8 Some('programs/test/keyboard_isr.j':(91,5))
# Return { value: Some(Ident("ch")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_getc_19_tdcd9 <- inline_main_getc_19_ch U8 Some('programs/test/keyboard_isr.j':(91,5))\nReturn { value: Some(Ident(\"ch\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# t4d24 <- inline_main_getc_19_tdcd9 U8 Some('programs/test/keyboard_isr.j':(91,5))
# Return { value: Some(Ident("ch")) }
# optimized away noop copy Instruction { source: "t4d24 <- inline_main_getc_19_tdcd9 U8 Some('programs/test/keyboard_isr.j':(91,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# if t5eeb != t4d24 then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/keyboard_isr.j':(102,5))
# While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
# Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }
# 0067d Cmp8 [Register(0x58), Register(0x43)]
#       if t5eeb != t4d24 then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/keyboard_isr.j':(102,5))
#       While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
#       Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }
15 58 43 

# 00680 JzImm [Label24(main_while_end_2)]
#       if t5eeb != t4d24 then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/keyboard_isr.j':(102,5))
#       While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
#       Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }
72 88 06 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5eeb != t4d24 then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/keyboard_isr.j':(102,5))\nWhile { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: \"getc\", parameters: [] }) }, while_true: [] }\nComparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: \"getc\", parameters: [] }) }\n", opcode: JmpImm, args: [Label24(main_while_body_1)], resolved: None }
# :main_while_body_1 Some('programs/test/keyboard_isr.j':(102,5))
# While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
# main_while_body_1
# goto main_while_predicate_0 Some('programs/test/keyboard_isr.j':(102,5))
# While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
# 00684 JmpImm [Label24(main_while_predicate_0)]
#       goto main_while_predicate_0 Some('programs/test/keyboard_isr.j':(102,5))
#       While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
70 20 06 00 

# :main_while_end_2 Some('programs/test/keyboard_isr.j':(102,5))
# While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
# main_while_end_2
# t5eeb <- 0n97/0x61u8  Some('programs/test/keyboard_isr.j':(105,5))
# TtyOut { value: Number(0n97/0x61u8) }
# Number(0n97/0x61u8)
# 00688 LoadImm8 [Register(0x58), Constant8(0x61=97)]
#       t5eeb <- 0n97/0x61u8  Some('programs/test/keyboard_isr.j':(105,5))
#       TtyOut { value: Number(0n97/0x61u8) }
#       Number(0n97/0x61u8)
04 58 61 

# ttyout <- t5eeb Some('programs/test/keyboard_isr.j':(105,5))
# TtyOut { value: Number(0n97/0x61u8) }
# 0068b Out0 [Register(0x58)]
#       ttyout <- t5eeb Some('programs/test/keyboard_isr.j':(105,5))
#       TtyOut { value: Number(0n97/0x61u8) }
68 58 

# :main_while_predicate_3 Some('programs/test/keyboard_isr.j':(107,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
# main_while_predicate_3
# inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(107,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #46, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# 0068d LoadImm8 [Register(0x48), Constant8(0x00=0)]
#       inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(107,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #46, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
04 48 00 

# if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'function_end_main' Some('programs/test/keyboard_isr.j':(107,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #47, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'main_while_body_4' else 'function_end_main' -> if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'function_end_main'
# 00690 Cmp8 [Register(0x48), Register(0x48)]
#       if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'function_end_main' Some('programs/test/keyboard_isr.j':(107,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #47, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'main_while_body_4' else 'function_end_main' -> if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'function_end_main'
15 48 48 

# 00693 JzImm [Label24(main_while_body_4)]
#       if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'function_end_main' Some('programs/test/keyboard_isr.j':(107,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #47, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'main_while_body_4' else 'function_end_main' -> if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'function_end_main'
72 9b 06 00 

# 00697 JmpImm [Label24(function_end_main)]
#       if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'function_end_main' Some('programs/test/keyboard_isr.j':(107,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #47, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'main_while_body_4' else 'function_end_main' -> if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'function_end_main'
70 1b 07 00 

# :main_while_body_4 Some('programs/test/keyboard_isr.j':(107,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
# main_while_body_4
# None <= call disable_interrupts() Some('programs/test/keyboard_isr.j':(88,5))
# VoidExpression { expression: Call(Call { function: "disable_interrupts", parameters: [] }) }
# Call(Call { function: "disable_interrupts", parameters: [] })
# 0069b DisableInterrupts []
#       DisableInterrupts
77 

# inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32  Some('programs/test/keyboard_isr.j':(89,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })
# # In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_s <- inline_main_getc_20_t938b U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32 `.
# # In IlFunctionId("main"), at #50, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_s with inline_main_getc_19_inline_getc_queue_pop_18_s as they share the same const value: Number(0n987656/0x000f1208u32). inline_main_getc_20_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32  -> inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32 
# 0069c LoadImm32 [Register(0x44), Constant32(0x000f1208=987656)]
#       inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32  Some('programs/test/keyboard_isr.j':(89,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })
#       # In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_s <- inline_main_getc_20_t938b U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32 `.
#       # In IlFunctionId("main"), at #50, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_s with inline_main_getc_19_inline_getc_queue_pop_18_s as they share the same const value: Number(0n987656/0x000f1208u32). inline_main_getc_20_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32  -> inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32 
20 44 08 12 0f 00 

# inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# # In IlFunctionId("main"), at #51, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  -> inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# 006a2 LoadImm32 [Register(0x54), Constant32(0x000f1308=987912)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
#       # In IlFunctionId("main"), at #51, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  -> inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
20 54 08 13 0f 00 

# inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# # In IlFunctionId("main"), at #52, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
# 006a8 Load8 [Register(0x54), Register(0x50)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       # In IlFunctionId("main"), at #52, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
05 54 50 

# inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 `.
# # In IlFunctionId("main"), at #53, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  -> inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 
# 006ab LoadImm32 [Register(0x54), Constant32(0x000f130c=987916)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 `.
#       # In IlFunctionId("main"), at #53, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  -> inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 
20 54 0c 13 0f 00 

# inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# # In IlFunctionId("main"), at #54, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tc1ff] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8
# 006b1 Load8 [Register(0x54), Register(0x48)]
#       inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       # In IlFunctionId("main"), at #54, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tc1ff] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8
05 54 48 

# if inline_main_getc_20_inline_getc_queue_pop_18_tb6dd == inline_main_getc_20_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 006b4 Cmp8 [Register(0x50), Register(0x48)]
#       if inline_main_getc_20_inline_getc_queue_pop_18_tb6dd == inline_main_getc_20_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 50 48 

# 006b7 JzImm [Label24(inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1)]
#       if inline_main_getc_20_inline_getc_queue_pop_18_tb6dd == inline_main_getc_20_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 bf 06 00 

# 006bb JmpImm [Label24(inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0)]
#       if inline_main_getc_20_inline_getc_queue_pop_18_tb6dd == inline_main_getc_20_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 c9 06 00 

# :inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1
# inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #57, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getc_20_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# 006bf LoadImm8 [Register(0x48), Constant8(0x00=0)]
#       inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #57, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getc_20_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
04 48 00 

# inline_main_getc_20_ch <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# # In IlFunctionId("main"), at #58, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_ta97f U8 -> inline_main_getc_20_ch <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# 006c2 Copy8 [Register(0x48), Register(0x43)]
#       inline_main_getc_20_ch <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       # In IlFunctionId("main"), at #58, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_ta97f U8 -> inline_main_getc_20_ch <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
0b 48 43 

# goto inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 006c5 JmpImm [Label24(inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop)]
#       goto inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
70 f4 06 00 

# :inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0
# inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# # In IlFunctionId("main"), at #61, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  -> inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# 006c9 LoadImm32 [Register(0x54), Constant32(0x000f1308=987912)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
#       # In IlFunctionId("main"), at #61, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  -> inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
20 54 08 13 0f 00 

# inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# # In IlFunctionId("main"), at #62, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
# 006cf Load8 [Register(0x54), Register(0x50)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       # In IlFunctionId("main"), at #62, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
05 54 50 

# inline_main_getc_20_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# 006d2 LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_main_getc_20_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
20 4c 00 00 00 00 

# 006d8 Copy8 [Register(0x50), Register(0x4c)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
0b 50 4c 

# inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# # In IlFunctionId("main"), at #64, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_s with inline_main_getc_19_inline_getc_queue_pop_18_s as they share the same const value: Number(0n987656/0x000f1208u32). inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_20_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) -> inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469)
# 006db ClearCarry []
#       inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       # In IlFunctionId("main"), at #64, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_s with inline_main_getc_19_inline_getc_queue_pop_18_s as they share the same const value: Number(0n987656/0x000f1208u32). inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_20_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) -> inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469)
03 

# 006dc AddCarry32_1 [Register(0x44), Register(0x4c), Register(0x44)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       # In IlFunctionId("main"), at #64, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_s with inline_main_getc_19_inline_getc_queue_pop_18_s as they share the same const value: Number(0n987656/0x000f1208u32). inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_20_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) -> inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469)
30 44 4c 44 

# 006e0 AddCarry32_2 []
#       inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       # In IlFunctionId("main"), at #64, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_s with inline_main_getc_19_inline_getc_queue_pop_18_s as they share the same const value: Number(0n987656/0x000f1208u32). inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_20_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) -> inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469)
31 

# inline_main_getc_20_inline_getc_queue_pop_18_value <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 006e1 Load8 [Register(0x44), Register(0x48)]
#       inline_main_getc_20_inline_getc_queue_pop_18_value <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 44 48 

# inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first")
# # In IlFunctionId("main"), at #66, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
# 006e4 Load8 [Register(0x54), Register(0x50)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first")
#       # In IlFunctionId("main"), at #66, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
05 54 50 

# inline_main_getc_20_inline_getc_queue_pop_18_te468 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# 006e7 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_main_getc_20_inline_getc_queue_pop_18_te468 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
04 00 01 

# 006ea Add8NoCarryIn [Register(0x50), Register(0x00), Register(0x43)]
#       inline_main_getc_20_inline_getc_queue_pop_18_te468 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
14 50 00 43 

# mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# # In IlFunctionId("main"), at #68, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_te468 U8 -> mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_te468 U8
# 006ee Store8 [Register(0x43), Register(0x54)]
#       mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       # In IlFunctionId("main"), at #68, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_te468 U8 -> mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_te468 U8
06 43 54 

# inline_main_getc_20_inline_getc_queue_pop_18_t44ed <- inline_main_getc_20_inline_getc_queue_pop_18_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 006f1 Copy8 [Register(0x48), Register(0x43)]
#       inline_main_getc_20_inline_getc_queue_pop_18_t44ed <- inline_main_getc_20_inline_getc_queue_pop_18_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 48 43 

# inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# :inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop None
# inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop
# None <= call enable_interrupts() Some('programs/test/keyboard_isr.j':(90,5))
# VoidExpression { expression: Call(Call { function: "enable_interrupts", parameters: [] }) }
# Call(Call { function: "enable_interrupts", parameters: [] })
# 006f4 EnableInterrupts []
#       EnableInterrupts
76 

# inline_main_getc_20_tdcd9 <- inline_main_getc_20_ch U8 Some('programs/test/keyboard_isr.j':(91,5))
# Return { value: Some(Ident("ch")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_getc_20_tdcd9 <- inline_main_getc_20_ch U8 Some('programs/test/keyboard_isr.j':(91,5))\nReturn { value: Some(Ident(\"ch\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# ch <- inline_main_getc_20_tdcd9 U8 Some('programs/test/keyboard_isr.j':(91,5))
# Return { value: Some(Ident("ch")) }
# optimized away noop copy Instruction { source: "ch <- inline_main_getc_20_tdcd9 U8 Some('programs/test/keyboard_isr.j':(91,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(107,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #76, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# 006f5 LoadImm8 [Register(0x48), Constant8(0x00=0)]
#       inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #76, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
04 48 00 

# if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_end_6' Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #77, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if tdcd9 != ta97f then 'main_if_true_0_7' else 'main_if_end_6' -> if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_end_6'
# 006f8 Cmp8 [Register(0x43), Register(0x48)]
#       if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_end_6' Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #77, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if tdcd9 != ta97f then 'main_if_true_0_7' else 'main_if_end_6' -> if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_end_6'
15 43 48 

# 006fb JzImm [Label24(main_if_end_6)]
#       if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_end_6' Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #77, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if tdcd9 != ta97f then 'main_if_true_0_7' else 'main_if_end_6' -> if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_end_6'
72 17 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_end_6' Some('programs/test/keyboard_isr.j':(107,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"main\"), at #77, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if tdcd9 != ta97f then 'main_if_true_0_7' else 'main_if_end_6' -> if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_end_6'\n", opcode: JmpImm, args: [Label24(main_if_true_0_7)], resolved: None }
# :main_if_true_0_7 Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
# main_if_true_0_7
# tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(107,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n113/0x71u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# tdf6e <- 0n113/0x71u8  Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# Number(0n113/0x71u8)
# 006ff LoadImm8 [Register(0x48), Constant8(0x71=113)]
#       tdf6e <- 0n113/0x71u8  Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
#       Number(0n113/0x71u8)
04 48 71 

# if tdcd9 == tdf6e then 'main_if_true_0_10' else 'main_if_end_9' Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# 00702 Cmp8 [Register(0x43), Register(0x48)]
#       if tdcd9 == tdf6e then 'main_if_true_0_10' else 'main_if_end_9' Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
15 43 48 

# 00705 JzImm [Label24(main_if_true_0_10)]
#       if tdcd9 == tdf6e then 'main_if_true_0_10' else 'main_if_end_9' Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
72 0d 07 00 

# 00709 JmpImm [Label24(main_if_end_9)]
#       if tdcd9 == tdf6e then 'main_if_true_0_10' else 'main_if_end_9' Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
70 15 07 00 

# :main_if_true_0_10 Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# main_if_true_0_10
# inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(107,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #83, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# 0070d LoadImm8 [Register(0x48), Constant8(0x00=0)]
#       inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(107,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #83, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
04 48 00 

# return Some(inline_main_getc_19_inline_getc_queue_pop_18_ta97f) Some('programs/test/keyboard_isr.j':(107,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# # In IlFunctionId("main"), at #84, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_main_getc_19_inline_getc_queue_pop_18_ta97f)
# 00710 Copy8 [Register(0x48), Register(0x00)]
#       return Some(inline_main_getc_19_inline_getc_queue_pop_18_ta97f) Some('programs/test/keyboard_isr.j':(107,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       # In IlFunctionId("main"), at #84, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_main_getc_19_inline_getc_queue_pop_18_ta97f)
0b 48 00 

# 00713 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :main_if_end_9 Some('programs/test/keyboard_isr.j':(107,5))
# main_if_end_9
# tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(107,5))
# TtyOut { value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(107,5))\nTtyOut { value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# ttyout <- tdcd9 Some('programs/test/keyboard_isr.j':(107,5))
# TtyOut { value: Ident("ch") }
# 00715 Out0 [Register(0x43)]
#       ttyout <- tdcd9 Some('programs/test/keyboard_isr.j':(107,5))
#       TtyOut { value: Ident("ch") }
68 43 

# :main_if_end_6 Some('programs/test/keyboard_isr.j':(107,5))
# main_if_end_6
# goto main_while_predicate_3 Some('programs/test/keyboard_isr.j':(107,5))
# 00717 JmpImm [Label24(main_while_predicate_3)]
#       goto main_while_predicate_3 Some('programs/test/keyboard_isr.j':(107,5))
70 8d 06 00 

# :function_end_main Some('programs/test/keyboard_isr.j':(107,5))
# function_end_main
# Unreachable None
# 0071b Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

