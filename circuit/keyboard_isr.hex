v2.0 raw
# ImageBaseAddress=0x00000000
# entry
# 00000 Instruction { source: "Initialzing flags and internal regs.", opcode: Init, args: [], resolved: None }
00 
# 00001 Instruction { source: "Initialzing stack register to 0x000f0f00.", opcode: LoadImm32, args: [Register(0x0c), Constant32(0x000f0f00=986880)], resolved: None }
20 0c 00 0f 0f 00 
# 00007 Instruction { source: "load address of ISR slot 0x000f0f0c into R10.", opcode: LoadImm32, args: [Register(0x10), Constant32(0x000f0f0c=986892)], resolved: None }
20 10 0c 0f 0f 00 
# 0000d Instruction { source: "store address of ISR isr to ISR slot 0x000f0f0c into R10.", opcode: StoreImm32, args: [Register(0x10), Label32(:isr)], resolved: None }
25 10 59 06 00 00 
# 00013 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00019 Instruction { source: "PseudoCall(Label24(:main))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 23 00 00 00 
# 0001f Instruction { source: "PseudoCall(Label24(:main))", opcode: JmpImm, args: [Label24(:main)], resolved: None }
70 c3 06 00 
# 00023 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 00029 Instruction { source: "Halting after return from entry function.", opcode: Halt, args: [Constant32(0x00000000=0)], resolved: None }
7e 00 00 00 00 
# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :handle_ps2
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([16])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([16])
# Var g (Local g Ptr(Struct("Globals")) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var index (Local index Number(USIZE) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_handle_ps2_globals_1_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_handle_ps2_globals_1_g (Local g Struct("Globals") Static(524544)) Static(524544) None
# Var inline_handle_ps2_globals_1_t0 (t0 AddressOf(Ident("g"))) Reg(U32) Some([28, 29, 30, 31])
# Var inline_handle_ps2_globals_1_t1 (static "g") Reg(U32) Some([28, 29, 30, 31])
# Var inline_handle_ps2_queue_push_12_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_handle_ps2_queue_push_12_n (Arg1 n Number(U8)) Reg(U8) Some([16])
# Var inline_handle_ps2_queue_push_12_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([32, 33, 34, 35])
# Var inline_handle_ps2_queue_push_12_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_handle_ps2_queue_push_12_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_handle_ps2_queue_push_12_t10 (t10 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_handle_ps2_queue_push_12_t11 (t11 Number(USIZE, 260)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_handle_ps2_queue_push_12_t12 (t12 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([16])
# Var inline_handle_ps2_queue_push_12_t13 (t13 PtrFieldDeref("s", "last")) Reg(U8) Some([16])
# Var inline_handle_ps2_queue_push_12_t14 (t14 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_handle_ps2_queue_push_12_t15 (t15 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_handle_ps2_queue_push_12_t16 (t16 Number(USIZE, 260)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_handle_ps2_queue_push_12_t17 (t17 Number(U8, 1)) Reg(U8) Some([40])
# Var inline_handle_ps2_queue_push_12_t2 (t2 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_handle_ps2_queue_push_12_t3 (t3 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_handle_ps2_queue_push_12_t4 (t4 PtrFieldDeref("s", "last")) Reg(U8) Some([48])
# Var inline_handle_ps2_queue_push_12_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_handle_ps2_queue_push_12_t6 (t6 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_handle_ps2_queue_push_12_t7 (t7 Number(USIZE, 260)) Reg(U32) Some([44, 45, 46, 47])
# Var inline_handle_ps2_queue_push_12_t8 (t8 Ident("n")) Reg(U8) Some([16])
# Var inline_handle_ps2_queue_push_12_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_handle_ps2_queue_push_12_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([36, 37, 38, 39])
# Var t0 (t0 Number(USIZE, 4)) Reg(U32) Some([24, 25, 26, 27])
# Var t1 (t1 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }) Reg(U32) Some([28, 29, 30, 31])
# Var t10 (t10 Arithmetic(Add, Ident("index"), Number(USIZE, 1))) Reg(U32) Some([28, 29, 30, 31])
# Var t11 (t11 Ident("index")) Reg(U32) Some([28, 29, 30, 31])
# Var t12 (t12 Number(USIZE, 1)) Reg(U32) Some([32, 33, 34, 35])
# Var t13 (t13 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([28, 29, 30, 31])
# Var t14 (t14 Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([28, 29, 30, 31])
# Var t15 (t15 Ident("index")) Reg(U32) Some([24, 25, 26, 27])
# Var t16 (t16 PtrFieldDeref("g", "release_in_progress")) Reg(U8) Some([40])
# Var t17 (t17 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }) Reg(U32) Some([32, 33, 34, 35])
# Var t18 (t18 Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }) Reg(U32) Some([20, 21, 22, 23])
# Var t19 (t19 Number(USIZE, 268)) Reg(U32) Some([32, 33, 34, 35])
# Var t2 (t2 Ident("code")) Reg(U8) Some([16])
# Var t20 (t20 Number(U8, 0)) Reg(U8) Some([49])
# Var t21 (t21 Ident("ch")) Reg(U8) Some([16])
# Var t22 (t22 Number(U8, 0)) Reg(U8) Some([40])
# Var t23 (t23 Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] })) Reg(U8) Some([16])
# Var t24 (t24 AddressOf(PtrFieldDeref("g", "stdin"))) Reg(U32) Some([32, 33, 34, 35])
# Var t25 (t25 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }) Reg(U32) Some([20, 21, 22, 23])
# Var t26 (t26 Ident("ch")) Reg(U8) Some([16])
# Var t27 (t27 Number(U8, 0)) Reg(U8) Some([16])
# Var t28 (t28 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))) Reg(U8) Some([40])
# Var t29 (t29 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }) Reg(U32) Some([32, 33, 34, 35])
# Var t3 (t3 PtrFieldDeref("g", "shift_held")) Reg(U8) Some([16])
# Var t30 (t30 Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([32, 33, 34, 35])
# Var t31 (t31 Arithmetic(Add, Ident("index"), Number(USIZE, 2))) Reg(U32) Some([36, 37, 38, 39])
# Var t32 (t32 Ident("index")) Reg(U32) Some([24, 25, 26, 27])
# Var t33 (t33 Number(USIZE, 2)) Reg(U32) Some([36, 37, 38, 39])
# Var t34 (t34 PtrFieldDeref("g", "release_in_progress")) Reg(U8) Some([16])
# Var t35 (t35 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }) Reg(U32) Some([28, 29, 30, 31])
# Var t36 (t36 Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }) Reg(U32) Some([28, 29, 30, 31])
# Var t37 (t37 Number(USIZE, 268)) Reg(U32) Some([32, 33, 34, 35])
# Var t38 (t38 Number(U8, 0)) Reg(U8) Some([40])
# Var t39 (t39 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }) Reg(U32) Some([28, 29, 30, 31])
# Var t4 (t4 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }) Reg(U32) Some([28, 29, 30, 31])
# Var t40 (t40 Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }) Reg(U32) Some([28, 29, 30, 31])
# Var t41 (t41 Number(USIZE, 264)) Reg(U32) Some([32, 33, 34, 35])
# Var t42 (t42 Number(U8, 0)) Reg(U8) Some([40])
# Var t43 (t43 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }) Reg(U32) Some([28, 29, 30, 31])
# Var t44 (t44 Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }) Reg(U32) Some([28, 29, 30, 31])
# Var t45 (t45 Number(USIZE, 264)) Reg(U32) Some([32, 33, 34, 35])
# Var t46 (t46 Number(U8, 1)) Reg(U8) Some([40])
# Var t47 (t47 Number(U8, 0)) Reg(U8) Some([16])
# Var t48 (t48 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))) Reg(U8) Some([50])
# Var t49 (t49 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }) Reg(U32) Some([24, 25, 26, 27])
# Var t5 (t5 Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }) Reg(U32) Some([28, 29, 30, 31])
# Var t50 (t50 Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([32, 33, 34, 35])
# Var t51 (t51 Arithmetic(Add, Ident("index"), Number(USIZE, 3))) Reg(U32) Some([24, 25, 26, 27])
# Var t52 (t52 Ident("index")) Reg(U32) Some([24, 25, 26, 27])
# Var t53 (t53 Number(USIZE, 3)) Reg(U32) Some([36, 37, 38, 39])
# Var t54 (t54 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }) Reg(U32) Some([28, 29, 30, 31])
# Var t55 (t55 Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }) Reg(U32) Some([28, 29, 30, 31])
# Var t56 (t56 Number(USIZE, 268)) Reg(U32) Some([20, 21, 22, 23])
# Var t57 (t57 Number(U8, 1)) Reg(U8) Some([51])
# Var t58 (t58 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }) Reg(U32) Some([28, 29, 30, 31])
# Var t59 (t59 Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }) Reg(U32) Some([28, 29, 30, 31])
# Var t6 (t6 Number(USIZE, 264)) Reg(U32) Some([32, 33, 34, 35])
# Var t60 (t60 Number(USIZE, 268)) Reg(U32) Some([20, 21, 22, 23])
# Var t61 (t61 Number(U8, 0)) Reg(U8) Some([51])
# Var t7 (t7 Number(U8, 0)) Reg(U8) Some([40])
# Var t8 (t8 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }) Reg(U32) Some([28, 29, 30, 31])
# Var t9 (t9 Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([36, 37, 38, 39])
# inline_handle_ps2_globals_1_t1 <- 0n524544/0x00080100u32 
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))"] }
# 0042f Instruction { source: "inline_handle_ps2_globals_1_t1 <- 0n524544/0x00080100u32 \n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\", \"AddressOf(Ident(\\\"g\\\"))\", \"AddressOf(Ident(\\\"g\\\"))\"] }", opcode: LoadImm32, args: [Register(0x1c), Constant32(0x00080100=524544)], resolved: None }
20 1c 00 01 08 00 
# inline_handle_ps2_globals_1_t0 <- inline_handle_ps2_globals_1_t1 U32
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))"] }
# optimized away noop copy Instruction { source: "inline_handle_ps2_globals_1_t0 <- inline_handle_ps2_globals_1_t1 U32\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\", \"AddressOf(Ident(\\\"g\\\"))\", \"AddressOf(Ident(\\\"g\\\"))\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# g <- inline_handle_ps2_globals_1_t0 U32
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }"] }
# 00435 Instruction { source: "g <- inline_handle_ps2_globals_1_t0 U32\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x14)], resolved: None }
21 1c 14 
# goto inline_handle_ps2_globals_1_function_end_globals
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_handle_ps2_globals_1_function_end_globals\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_handle_ps2_globals_1_function_end_globals)], resolved: None }
# :inline_handle_ps2_globals_1_function_end_globals
# 	SourceContext { contexts: [] }
# inline_handle_ps2_globals_1_function_end_globals
# Some(code) <= call io_read2()
# 	SourceContext { contexts: ["Assign { target: Ident(\"code\"), var_type: None, value: Call(Call { function: \"io_read2\", parameters: [] }) }", "Call(Call { function: \"io_read2\", parameters: [] })"] }
# 00438 Instruction { source: "IoRead2", opcode: In2, args: [Register(0x10)], resolved: None }
62 10 
# t0 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 0043a Instruction { source: "t0 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000004=4)], resolved: None }
20 18 04 00 00 00 
# t2 <- code U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }", "Ident(\"code\")", "Ident(\"code\")"] }
# optimized away noop copy Instruction { source: "t2 <- code U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Ident(\\\"code\\\")\", \"Ident(\\\"code\\\")\"] }", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# t1 U32 <- t2 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }"] }
# 00440 Instruction { source: "Zero-pad for t1 U32 <- t2 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\"] }", opcode: LoadImm32, args: [Register(0x1c), Constant32(0x00000000=0)], resolved: None }
20 1c 00 00 00 00 
# 00446 Instruction { source: "t1 U32 <- t2 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\"] }", opcode: Copy8, args: [Register(0x10), Register(0x1c)], resolved: None }
0b 10 1c 
# index <- t0 Multiply t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))"] }
# 00449 Instruction { source: "index <- t0 Multiply t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: Mul8_16, args: [Register(0x18), Register(0x1c), Register(0x18)], resolved: None }
11 18 1c 18 
# 0044d Instruction { source: "index <- t0 Multiply t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: LoadImm8, args: [Register(0x1a), Constant8(0x00=0)], resolved: None }
04 1a 00 
# 00450 Instruction { source: "index <- t0 Multiply t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: None, value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: LoadImm8, args: [Register(0x1b), Constant8(0x00=0)], resolved: None }
04 1b 00 
# t5 <- g U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"shift_held\")", "PtrFieldDeref(\"g\", \"shift_held\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# 00453 Instruction { source: "t5 <- g U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x1c)], resolved: None }
21 14 1c 
# t6 <- 0n264/0x00000108u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"shift_held\")", "PtrFieldDeref(\"g\", \"shift_held\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))", "Number(USIZE, 264)", "Number(USIZE, 264)"] }
# 00456 Instruction { source: "t6 <- 0n264/0x00000108u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\", \"Number(USIZE, 264)\", \"Number(USIZE, 264)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000108=264)], resolved: None }
20 20 08 01 00 00 
# t4 <- t5 Add t6
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"shift_held\")", "PtrFieldDeref(\"g\", \"shift_held\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))"] }
# 0045c Instruction { source: "t4 <- t5 Add t6\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0045d Instruction { source: "t4 <- t5 Add t6\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x20), Register(0x1c)], resolved: None }
30 1c 20 1c 
# 00461 Instruction { source: "t4 <- t5 Add t6\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t3 <- mem[t4] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"shift_held\")", "PtrFieldDeref(\"g\", \"shift_held\")"] }
# 00462 Instruction { source: "t3 <- mem[t4] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\")\"] }", opcode: Load8, args: [Register(0x1c), Register(0x10)], resolved: None }
05 1c 10 
# t7 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00465 Instruction { source: "t7 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x28), Constant8(0x00=0)], resolved: None }
04 28 00 
# if t3 != t7 then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }"] }
# 00468 Instruction { source: "if t3 != t7 then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x10), Register(0x28)], resolved: None }
15 10 28 
# 0046b Instruction { source: "if t3 != t7 then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(handle_ps2_if_else_0_2)], resolved: None }
72 91 04 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t3 != t7 then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_1)], resolved: None }
# :handle_ps2_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }"] }
# handle_ps2_if_true_0_1
# t9 <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 0046f Instruction { source: "t9 <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x24), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 24 2e 00 00 00 
# t11 <- index U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Ident(\"index\")", "Ident(\"index\")"] }
# 00475 Instruction { source: "t11 <- index U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x1c)], resolved: None }
21 18 1c 
# t12 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00478 Instruction { source: "t12 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000001=1)], resolved: None }
20 20 01 00 00 00 
# t10 <- t11 Add t12
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))"] }
# 0047e Instruction { source: "t10 <- t11 Add t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0047f Instruction { source: "t10 <- t11 Add t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x20), Register(0x1c)], resolved: None }
30 1c 20 1c 
# 00483 Instruction { source: "t10 <- t11 Add t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t8 <- t9 Add t10
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))"] }
# 00484 Instruction { source: "t8 <- t9 Add t10\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00485 Instruction { source: "t8 <- t9 Add t10\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x1c), Register(0x1c)], resolved: None }
30 24 1c 1c 
# 00489 Instruction { source: "t8 <- t9 Add t10\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# ch <- mem[t8] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))"] }
# 0048a Instruction { source: "ch <- mem[t8] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: Load8, args: [Register(0x1c), Register(0x10)], resolved: None }
05 1c 10 
# goto handle_ps2_if_end_0
# 	SourceContext { contexts: [] }
# 0048d Instruction { source: "goto handle_ps2_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(handle_ps2_if_end_0)], resolved: None }
70 a0 04 00 
# :handle_ps2_if_else_0_2
# 	SourceContext { contexts: [] }
# handle_ps2_if_else_0_2
# t14 <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 00491 Instruction { source: "t14 <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x1c), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 1c 2e 00 00 00 
# t15 <- index U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "t15 <- index U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# t13 <- t14 Add t15
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))"] }
# 00497 Instruction { source: "t13 <- t14 Add t15\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00498 Instruction { source: "t13 <- t14 Add t15\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x18), Register(0x1c)], resolved: None }
30 1c 18 1c 
# 0049c Instruction { source: "t13 <- t14 Add t15\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# ch <- mem[t13] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))"] }
# 0049d Instruction { source: "ch <- mem[t13] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\"] }", opcode: Load8, args: [Register(0x1c), Register(0x10)], resolved: None }
05 1c 10 
# :handle_ps2_if_end_0
# 	SourceContext { contexts: [] }
# handle_ps2_if_end_0
# t18 <- g U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"release_in_progress\")", "PtrFieldDeref(\"g\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# optimized away noop copy Instruction { source: "t18 <- g U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t19 <- 0n268/0x0000010cu32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"release_in_progress\")", "PtrFieldDeref(\"g\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))", "Number(USIZE, 268)", "Number(USIZE, 268)"] }
# 004a0 Instruction { source: "t19 <- 0n268/0x0000010cu32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\", \"Number(USIZE, 268)\", \"Number(USIZE, 268)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x0000010c=268)], resolved: None }
20 20 0c 01 00 00 
# t17 <- t18 Add t19
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"release_in_progress\")", "PtrFieldDeref(\"g\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))"] }
# 004a6 Instruction { source: "t17 <- t18 Add t19\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 004a7 Instruction { source: "t17 <- t18 Add t19\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x20), Register(0x20)], resolved: None }
30 14 20 20 
# 004ab Instruction { source: "t17 <- t18 Add t19\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t16 <- mem[t17] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"release_in_progress\")", "PtrFieldDeref(\"g\", \"release_in_progress\")"] }
# 004ac Instruction { source: "t16 <- mem[t17] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\"] }", opcode: Load8, args: [Register(0x20), Register(0x28)], resolved: None }
05 20 28 
# t20 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 004af Instruction { source: "t20 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x31), Constant8(0x00=0)], resolved: None }
04 31 00 
# if t16 == t20 then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }"] }
# 004b2 Instruction { source: "if t16 == t20 then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x28), Register(0x31)], resolved: None }
15 28 31 
# 004b5 Instruction { source: "if t16 == t20 then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(handle_ps2_if_true_0_4)], resolved: None }
72 bd 04 00 
# 004b9 Instruction { source: "if t16 == t20 then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(handle_ps2_if_else_0_5)], resolved: None }
70 21 05 00 
# :handle_ps2_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }])], else_block: [] }"] }
# handle_ps2_if_true_0_4
# t21 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t21 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# t22 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 004bd Instruction { source: "t22 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x28), Constant8(0x00=0)], resolved: None }
04 28 00 
# if t21 != t22 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_else_0_8'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }"] }
# 004c0 Instruction { source: "if t21 != t22 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x10), Register(0x28)], resolved: None }
15 10 28 
# 004c3 Instruction { source: "if t21 != t22 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(handle_ps2_if_else_0_8)], resolved: None }
72 1d 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t21 != t22 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_7)], resolved: None }
# :handle_ps2_if_true_0_7
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }"] }
# handle_ps2_if_true_0_7
# t25 <- g U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# optimized away noop copy Instruction { source: "t25 <- g U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Queue\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Queue\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t24 <- t25 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))"] }
# 004c7 Instruction { source: "t24 <- t25 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x20)], resolved: None }
21 14 20 
# t26 <- ch U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t26 <- ch U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_handle_ps2_queue_push_12_s <- t24 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })"] }
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_12_s <- t24 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_handle_ps2_queue_push_12_n <- t26 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })"] }
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_12_n <- t26 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_handle_ps2_queue_push_12_t0 <- inline_handle_ps2_queue_push_12_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_12_t0 <- inline_handle_ps2_queue_push_12_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_handle_ps2_queue_push_12_values <- inline_handle_ps2_queue_push_12_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 004ca Instruction { source: "inline_handle_ps2_queue_push_12_values <- inline_handle_ps2_queue_push_12_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x20), Register(0x24)], resolved: None }
21 20 24 
# inline_handle_ps2_queue_push_12_t2 <- inline_handle_ps2_queue_push_12_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_12_t2 <- inline_handle_ps2_queue_push_12_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_handle_ps2_queue_push_12_t6 <- inline_handle_ps2_queue_push_12_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_12_t6 <- inline_handle_ps2_queue_push_12_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_handle_ps2_queue_push_12_t7 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 004cd Instruction { source: "inline_handle_ps2_queue_push_12_t7 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x00000104=260)], resolved: None }
20 2c 04 01 00 00 
# inline_handle_ps2_queue_push_12_t5 <- inline_handle_ps2_queue_push_12_t6 Add inline_handle_ps2_queue_push_12_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 004d3 Instruction { source: "inline_handle_ps2_queue_push_12_t5 <- inline_handle_ps2_queue_push_12_t6 Add inline_handle_ps2_queue_push_12_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 004d4 Instruction { source: "inline_handle_ps2_queue_push_12_t5 <- inline_handle_ps2_queue_push_12_t6 Add inline_handle_ps2_queue_push_12_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x2c), Register(0x2c)], resolved: None }
30 20 2c 2c 
# 004d8 Instruction { source: "inline_handle_ps2_queue_push_12_t5 <- inline_handle_ps2_queue_push_12_t6 Add inline_handle_ps2_queue_push_12_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_handle_ps2_queue_push_12_t4 <- mem[inline_handle_ps2_queue_push_12_t5] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 004d9 Instruction { source: "inline_handle_ps2_queue_push_12_t4 <- mem[inline_handle_ps2_queue_push_12_t5] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x2c), Register(0x30)], resolved: None }
05 2c 30 
# inline_handle_ps2_queue_push_12_t3 U32 <- inline_handle_ps2_queue_push_12_t4 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }"] }
# 004dc Instruction { source: "Zero-pad for inline_handle_ps2_queue_push_12_t3 U32 <- inline_handle_ps2_queue_push_12_t4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x00000000=0)], resolved: None }
20 2c 00 00 00 00 
# 004e2 Instruction { source: "inline_handle_ps2_queue_push_12_t3 U32 <- inline_handle_ps2_queue_push_12_t4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: Copy8, args: [Register(0x30), Register(0x2c)], resolved: None }
0b 30 2c 
# inline_handle_ps2_queue_push_12_t1 <- inline_handle_ps2_queue_push_12_t2 Add inline_handle_ps2_queue_push_12_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })"] }
# 004e5 Instruction { source: "inline_handle_ps2_queue_push_12_t1 <- inline_handle_ps2_queue_push_12_t2 Add inline_handle_ps2_queue_push_12_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 004e6 Instruction { source: "inline_handle_ps2_queue_push_12_t1 <- inline_handle_ps2_queue_push_12_t2 Add inline_handle_ps2_queue_push_12_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x2c), Register(0x24)], resolved: None }
30 24 2c 24 
# 004ea Instruction { source: "inline_handle_ps2_queue_push_12_t1 <- inline_handle_ps2_queue_push_12_t2 Add inline_handle_ps2_queue_push_12_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_handle_ps2_queue_push_12_t8 <- inline_handle_ps2_queue_push_12_n U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_12_t8 <- inline_handle_ps2_queue_push_12_n U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# mem[inline_handle_ps2_queue_push_12_t1] <- inline_handle_ps2_queue_push_12_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }"] }
# 004eb Instruction { source: "mem[inline_handle_ps2_queue_push_12_t1] <- inline_handle_ps2_queue_push_12_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store8, args: [Register(0x10), Register(0x24)], resolved: None }
06 10 24 
# inline_handle_ps2_queue_push_12_t10 <- inline_handle_ps2_queue_push_12_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 004ee Instruction { source: "inline_handle_ps2_queue_push_12_t10 <- inline_handle_ps2_queue_push_12_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x1c)], resolved: None }
21 20 1c 
# inline_handle_ps2_queue_push_12_t11 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 004f1 Instruction { source: "inline_handle_ps2_queue_push_12_t11 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000104=260)], resolved: None }
20 24 04 01 00 00 
# inline_handle_ps2_queue_push_12_t9 <- inline_handle_ps2_queue_push_12_t10 Add inline_handle_ps2_queue_push_12_t11
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 004f7 Instruction { source: "inline_handle_ps2_queue_push_12_t9 <- inline_handle_ps2_queue_push_12_t10 Add inline_handle_ps2_queue_push_12_t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 004f8 Instruction { source: "inline_handle_ps2_queue_push_12_t9 <- inline_handle_ps2_queue_push_12_t10 Add inline_handle_ps2_queue_push_12_t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x24), Register(0x24)], resolved: None }
30 1c 24 24 
# 004fc Instruction { source: "inline_handle_ps2_queue_push_12_t9 <- inline_handle_ps2_queue_push_12_t10 Add inline_handle_ps2_queue_push_12_t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_handle_ps2_queue_push_12_t15 <- inline_handle_ps2_queue_push_12_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 004fd Instruction { source: "inline_handle_ps2_queue_push_12_t15 <- inline_handle_ps2_queue_push_12_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x1c)], resolved: None }
21 20 1c 
# inline_handle_ps2_queue_push_12_t16 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 00500 Instruction { source: "inline_handle_ps2_queue_push_12_t16 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000104=260)], resolved: None }
20 20 04 01 00 00 
# inline_handle_ps2_queue_push_12_t14 <- inline_handle_ps2_queue_push_12_t15 Add inline_handle_ps2_queue_push_12_t16
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 00506 Instruction { source: "inline_handle_ps2_queue_push_12_t14 <- inline_handle_ps2_queue_push_12_t15 Add inline_handle_ps2_queue_push_12_t16\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00507 Instruction { source: "inline_handle_ps2_queue_push_12_t14 <- inline_handle_ps2_queue_push_12_t15 Add inline_handle_ps2_queue_push_12_t16\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x20), Register(0x1c)], resolved: None }
30 1c 20 1c 
# 0050b Instruction { source: "inline_handle_ps2_queue_push_12_t14 <- inline_handle_ps2_queue_push_12_t15 Add inline_handle_ps2_queue_push_12_t16\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_handle_ps2_queue_push_12_t13 <- mem[inline_handle_ps2_queue_push_12_t14] U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 0050c Instruction { source: "inline_handle_ps2_queue_push_12_t13 <- mem[inline_handle_ps2_queue_push_12_t14] U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x1c), Register(0x10)], resolved: None }
05 1c 10 
# inline_handle_ps2_queue_push_12_t17 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 0050f Instruction { source: "inline_handle_ps2_queue_push_12_t17 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x28), Constant8(0x01=1)], resolved: None }
04 28 01 
# inline_handle_ps2_queue_push_12_t12 <- inline_handle_ps2_queue_push_12_t13 Add inline_handle_ps2_queue_push_12_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))"] }
# 00512 Instruction { source: "inline_handle_ps2_queue_push_12_t12 <- inline_handle_ps2_queue_push_12_t13 Add inline_handle_ps2_queue_push_12_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x10), Register(0x28), Register(0x10)], resolved: None }
14 10 28 10 
# mem[inline_handle_ps2_queue_push_12_t9] <- inline_handle_ps2_queue_push_12_t12 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }"] }
# 00516 Instruction { source: "mem[inline_handle_ps2_queue_push_12_t9] <- inline_handle_ps2_queue_push_12_t12 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x10), Register(0x24)], resolved: None }
06 10 24 
# goto inline_handle_ps2_queue_push_12_function_end_queue_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_handle_ps2_queue_push_12_function_end_queue_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_handle_ps2_queue_push_12_function_end_queue_push)], resolved: None }
# :inline_handle_ps2_queue_push_12_function_end_queue_push
# 	SourceContext { contexts: [] }
# inline_handle_ps2_queue_push_12_function_end_queue_push
# goto handle_ps2_if_end_6
# 	SourceContext { contexts: [] }
# 00519 Instruction { source: "goto handle_ps2_if_end_6\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(handle_ps2_if_end_6)], resolved: None }
70 1d 05 00 
# :handle_ps2_if_else_0_8
# 	SourceContext { contexts: [] }
# handle_ps2_if_else_0_8
# :handle_ps2_if_end_6
# 	SourceContext { contexts: [] }
# handle_ps2_if_end_6
# goto handle_ps2_if_end_3
# 	SourceContext { contexts: [] }
# 0051d Instruction { source: "goto handle_ps2_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(handle_ps2_if_end_3)], resolved: None }
70 21 05 00 
# :handle_ps2_if_else_0_5
# 	SourceContext { contexts: [] }
# handle_ps2_if_else_0_5
# :handle_ps2_if_end_3
# 	SourceContext { contexts: [] }
# handle_ps2_if_end_3
# t27 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00521 Instruction { source: "t27 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x10), Constant8(0x00=0)], resolved: None }
04 10 00 
# t30 <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 00524 Instruction { source: "t30 <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x20), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 20 2e 00 00 00 
# t32 <- index U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "t32 <- index U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# t33 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 0052a Instruction { source: "t33 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000002=2)], resolved: None }
20 24 02 00 00 00 
# t31 <- t32 Add t33
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))"] }
# 00530 Instruction { source: "t31 <- t32 Add t33\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00531 Instruction { source: "t31 <- t32 Add t33\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x24), Register(0x24)], resolved: None }
30 18 24 24 
# 00535 Instruction { source: "t31 <- t32 Add t33\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t29 <- t30 Add t31
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))"] }
# 00536 Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00537 Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x24), Register(0x20)], resolved: None }
30 20 24 20 
# 0053b Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t28 <- mem[t29] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))"] }
# 0053c Instruction { source: "t28 <- mem[t29] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: Load8, args: [Register(0x20), Register(0x28)], resolved: None }
05 20 28 
# if t27 != t28 then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }"] }
# 0053f Instruction { source: "if t27 != t28 then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\"] }", opcode: Cmp8, args: [Register(0x10), Register(0x28)], resolved: None }
15 10 28 
# 00542 Instruction { source: "if t27 != t28 then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\"] }", opcode: JzImm, args: [Label24(handle_ps2_if_else_0_11)], resolved: None }
72 94 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t27 != t28 then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\"] }", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_10)], resolved: None }
# :handle_ps2_if_true_0_10
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }"] }
# handle_ps2_if_true_0_10
# t36 <- g U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"release_in_progress\")", "PtrFieldDeref(\"g\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# 00546 Instruction { source: "t36 <- g U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x1c)], resolved: None }
21 14 1c 
# t37 <- 0n268/0x0000010cu32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"release_in_progress\")", "PtrFieldDeref(\"g\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))", "Number(USIZE, 268)", "Number(USIZE, 268)"] }
# 00549 Instruction { source: "t37 <- 0n268/0x0000010cu32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\", \"Number(USIZE, 268)\", \"Number(USIZE, 268)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x0000010c=268)], resolved: None }
20 20 0c 01 00 00 
# t35 <- t36 Add t37
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"release_in_progress\")", "PtrFieldDeref(\"g\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))"] }
# 0054f Instruction { source: "t35 <- t36 Add t37\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00550 Instruction { source: "t35 <- t36 Add t37\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x20), Register(0x1c)], resolved: None }
30 1c 20 1c 
# 00554 Instruction { source: "t35 <- t36 Add t37\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t34 <- mem[t35] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }", "PtrFieldDeref(\"g\", \"release_in_progress\")", "PtrFieldDeref(\"g\", \"release_in_progress\")"] }
# 00555 Instruction { source: "t34 <- mem[t35] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\", \"PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\")\"] }", opcode: Load8, args: [Register(0x1c), Register(0x10)], resolved: None }
05 1c 10 
# t38 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00558 Instruction { source: "t38 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x28), Constant8(0x00=0)], resolved: None }
04 28 00 
# if t34 != t38 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }"] }
# 0055b Instruction { source: "if t34 != t38 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x10), Register(0x28)], resolved: None }
15 10 28 
# 0055e Instruction { source: "if t34 != t38 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(handle_ps2_if_else_0_14)], resolved: None }
72 7b 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t34 != t38 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_13)], resolved: None }
# :handle_ps2_if_true_0_13
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }"] }
# handle_ps2_if_true_0_13
# t40 <- g U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# 00562 Instruction { source: "t40 <- g U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x1c)], resolved: None }
21 14 1c 
# t41 <- 0n264/0x00000108u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))", "Number(USIZE, 264)", "Number(USIZE, 264)"] }
# 00565 Instruction { source: "t41 <- 0n264/0x00000108u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\", \"Number(USIZE, 264)\", \"Number(USIZE, 264)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000108=264)], resolved: None }
20 20 08 01 00 00 
# t39 <- t40 Add t41
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))"] }
# 0056b Instruction { source: "t39 <- t40 Add t41\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0056c Instruction { source: "t39 <- t40 Add t41\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x20), Register(0x1c)], resolved: None }
30 1c 20 1c 
# 00570 Instruction { source: "t39 <- t40 Add t41\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t42 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00571 Instruction { source: "t42 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x28), Constant8(0x00=0)], resolved: None }
04 28 00 
# mem[t39] <- t42 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }"] }
# 00574 Instruction { source: "mem[t39] <- t42 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x28), Register(0x1c)], resolved: None }
06 28 1c 
# goto handle_ps2_if_end_12
# 	SourceContext { contexts: [] }
# 00577 Instruction { source: "goto handle_ps2_if_end_12\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(handle_ps2_if_end_12)], resolved: None }
70 90 05 00 
# :handle_ps2_if_else_0_14
# 	SourceContext { contexts: [] }
# handle_ps2_if_else_0_14
# t44 <- g U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# 0057b Instruction { source: "t44 <- g U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x1c)], resolved: None }
21 14 1c 
# t45 <- 0n264/0x00000108u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))", "Number(USIZE, 264)", "Number(USIZE, 264)"] }
# 0057e Instruction { source: "t45 <- 0n264/0x00000108u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\", \"Number(USIZE, 264)\", \"Number(USIZE, 264)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000108=264)], resolved: None }
20 20 08 01 00 00 
# t43 <- t44 Add t45
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))"] }
# 00584 Instruction { source: "t43 <- t44 Add t45\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00585 Instruction { source: "t43 <- t44 Add t45\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x20), Register(0x1c)], resolved: None }
30 1c 20 1c 
# 00589 Instruction { source: "t43 <- t44 Add t45\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t46 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 0058a Instruction { source: "t46 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x28), Constant8(0x01=1)], resolved: None }
04 28 01 
# mem[t43] <- t46 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 1) }"] }
# 0058d Instruction { source: "mem[t43] <- t46 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\"] }", opcode: Store8, args: [Register(0x28), Register(0x1c)], resolved: None }
06 28 1c 
# :handle_ps2_if_end_12
# 	SourceContext { contexts: [] }
# handle_ps2_if_end_12
# goto handle_ps2_if_end_9
# 	SourceContext { contexts: [] }
# 00590 Instruction { source: "goto handle_ps2_if_end_9\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(handle_ps2_if_end_9)], resolved: None }
70 94 05 00 
# :handle_ps2_if_else_0_11
# 	SourceContext { contexts: [] }
# handle_ps2_if_else_0_11
# :handle_ps2_if_end_9
# 	SourceContext { contexts: [] }
# handle_ps2_if_end_9
# t47 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00594 Instruction { source: "t47 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x10), Constant8(0x00=0)], resolved: None }
04 10 00 
# t50 <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 00597 Instruction { source: "t50 <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x20), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 20 2e 00 00 00 
# t52 <- index U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "t52 <- index U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# t53 <- 0n3/0x00000003u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Number(USIZE, 3)", "Number(USIZE, 3)"] }
# 0059d Instruction { source: "t53 <- 0n3/0x00000003u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Number(USIZE, 3)\", \"Number(USIZE, 3)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000003=3)], resolved: None }
20 24 03 00 00 00 
# t51 <- t52 Add t53
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))"] }
# 005a3 Instruction { source: "t51 <- t52 Add t53\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 005a4 Instruction { source: "t51 <- t52 Add t53\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x24), Register(0x18)], resolved: None }
30 18 24 18 
# 005a8 Instruction { source: "t51 <- t52 Add t53\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t49 <- t50 Add t51
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))"] }
# 005a9 Instruction { source: "t49 <- t50 Add t51\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 005aa Instruction { source: "t49 <- t50 Add t51\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x18), Register(0x18)], resolved: None }
30 20 18 18 
# 005ae Instruction { source: "t49 <- t50 Add t51\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t48 <- mem[t49] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))"] }
# 005af Instruction { source: "t48 <- mem[t49] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: Load8, args: [Register(0x18), Register(0x32)], resolved: None }
05 18 32 
# if t47 != t48 then 'handle_ps2_if_true_0_16' else 'handle_ps2_if_else_0_17'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }"] }
# 005b2 Instruction { source: "if t47 != t48 then 'handle_ps2_if_true_0_16' else 'handle_ps2_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\"] }", opcode: Cmp8, args: [Register(0x10), Register(0x32)], resolved: None }
15 10 32 
# 005b5 Instruction { source: "if t47 != t48 then 'handle_ps2_if_true_0_16' else 'handle_ps2_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\"] }", opcode: JzImm, args: [Label24(handle_ps2_if_else_0_17)], resolved: None }
72 d2 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t47 != t48 then 'handle_ps2_if_true_0_16' else 'handle_ps2_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\"] }", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_16)], resolved: None }
# :handle_ps2_if_true_0_16
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }"] }
# handle_ps2_if_true_0_16
# t55 <- g U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# 005b9 Instruction { source: "t55 <- g U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x1c)], resolved: None }
21 14 1c 
# t56 <- 0n268/0x0000010cu32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))", "Number(USIZE, 268)", "Number(USIZE, 268)"] }
# 005bc Instruction { source: "t56 <- 0n268/0x0000010cu32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\", \"Number(USIZE, 268)\", \"Number(USIZE, 268)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x0000010c=268)], resolved: None }
20 14 0c 01 00 00 
# t54 <- t55 Add t56
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))"] }
# 005c2 Instruction { source: "t54 <- t55 Add t56\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 005c3 Instruction { source: "t54 <- t55 Add t56\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x14), Register(0x1c)], resolved: None }
30 1c 14 1c 
# 005c7 Instruction { source: "t54 <- t55 Add t56\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t57 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 005c8 Instruction { source: "t57 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x33), Constant8(0x01=1)], resolved: None }
04 33 01 
# mem[t54] <- t57 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }"] }
# 005cb Instruction { source: "mem[t54] <- t57 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\"] }", opcode: Store8, args: [Register(0x33), Register(0x1c)], resolved: None }
06 33 1c 
# goto handle_ps2_if_end_15
# 	SourceContext { contexts: [] }
# 005ce Instruction { source: "goto handle_ps2_if_end_15\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(handle_ps2_if_end_15)], resolved: None }
70 e7 05 00 
# :handle_ps2_if_else_0_17
# 	SourceContext { contexts: [] }
# handle_ps2_if_else_0_17
# t59 <- g U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# 005d2 Instruction { source: "t59 <- g U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x1c)], resolved: None }
21 14 1c 
# t60 <- 0n268/0x0000010cu32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))", "Number(USIZE, 268)", "Number(USIZE, 268)"] }
# 005d5 Instruction { source: "t60 <- 0n268/0x0000010cu32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\", \"Number(USIZE, 268)\", \"Number(USIZE, 268)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x0000010c=268)], resolved: None }
20 14 0c 01 00 00 
# t58 <- t59 Add t60
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))"] }
# 005db Instruction { source: "t58 <- t59 Add t60\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 005dc Instruction { source: "t58 <- t59 Add t60\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x14), Register(0x1c)], resolved: None }
30 1c 14 1c 
# 005e0 Instruction { source: "t58 <- t59 Add t60\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t61 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 005e1 Instruction { source: "t61 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x33), Constant8(0x00=0)], resolved: None }
04 33 00 
# mem[t58] <- t61 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }"] }
# 005e4 Instruction { source: "mem[t58] <- t61 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x33), Register(0x1c)], resolved: None }
06 33 1c 
# :handle_ps2_if_end_15
# 	SourceContext { contexts: [] }
# handle_ps2_if_end_15
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 005e7 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_handle_ps2
# 	SourceContext { contexts: [] }
# function_end_handle_ps2
# Unreachable
# 	SourceContext { contexts: [] }
# 005e9 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :handle_tty
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var g (Local g Ptr(Struct("Globals")) Reg(U32)) Reg(U32) Some([52, 53, 54, 55])
# Var inline_handle_tty_globals_2_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_handle_tty_globals_2_g (Local g Struct("Globals") Static(524544)) Static(524544) None
# Var inline_handle_tty_globals_2_t0 (t0 AddressOf(Ident("g"))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_handle_tty_globals_2_t1 (static "g") Reg(U32) Some([52, 53, 54, 55])
# Var inline_handle_tty_queue_push_13_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_handle_tty_queue_push_13_n (Arg1 n Number(U8)) Reg(U8) Some([56])
# Var inline_handle_tty_queue_push_13_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_handle_tty_queue_push_13_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_handle_tty_queue_push_13_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_handle_tty_queue_push_13_t10 (t10 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([52, 53, 54, 55])
# Var inline_handle_tty_queue_push_13_t11 (t11 Number(USIZE, 260)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_handle_tty_queue_push_13_t12 (t12 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([56])
# Var inline_handle_tty_queue_push_13_t13 (t13 PtrFieldDeref("s", "last")) Reg(U8) Some([56])
# Var inline_handle_tty_queue_push_13_t14 (t14 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([52, 53, 54, 55])
# Var inline_handle_tty_queue_push_13_t15 (t15 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([52, 53, 54, 55])
# Var inline_handle_tty_queue_push_13_t16 (t16 Number(USIZE, 260)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_handle_tty_queue_push_13_t17 (t17 Number(U8, 1)) Reg(U8) Some([68])
# Var inline_handle_tty_queue_push_13_t2 (t2 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_handle_tty_queue_push_13_t3 (t3 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_handle_tty_queue_push_13_t4 (t4 PtrFieldDeref("s", "last")) Reg(U8) Some([76])
# Var inline_handle_tty_queue_push_13_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_handle_tty_queue_push_13_t6 (t6 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_handle_tty_queue_push_13_t7 (t7 Number(USIZE, 260)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_handle_tty_queue_push_13_t8 (t8 Ident("n")) Reg(U8) Some([56])
# Var inline_handle_tty_queue_push_13_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_handle_tty_queue_push_13_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var t0 (t0 Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Arithmetic(And, TtyIn, Number(U8, 127))] })) Reg(U8) Some([56])
# Var t1 (t1 AddressOf(PtrFieldDeref("g", "stdin"))) Reg(U32) Some([52, 53, 54, 55])
# Var t2 (t2 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }) Reg(U32) Some([52, 53, 54, 55])
# Var t3 (t3 Arithmetic(And, TtyIn, Number(U8, 127))) Reg(U8) Some([77])
# Var t4 (t4 TtyIn) Reg(U8) Some([68])
# Var t5 (t5 Number(U8, 127)) Reg(U8) Some([77])
# inline_handle_tty_globals_2_t1 <- 0n524544/0x00080100u32 
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))"] }
# 005ee Instruction { source: "inline_handle_tty_globals_2_t1 <- 0n524544/0x00080100u32 \n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\", \"AddressOf(Ident(\\\"g\\\"))\", \"AddressOf(Ident(\\\"g\\\"))\"] }", opcode: LoadImm32, args: [Register(0x34), Constant32(0x00080100=524544)], resolved: None }
20 34 00 01 08 00 
# inline_handle_tty_globals_2_t0 <- inline_handle_tty_globals_2_t1 U32
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))"] }
# optimized away noop copy Instruction { source: "inline_handle_tty_globals_2_t0 <- inline_handle_tty_globals_2_t1 U32\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\", \"AddressOf(Ident(\\\"g\\\"))\", \"AddressOf(Ident(\\\"g\\\"))\"] }", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# g <- inline_handle_tty_globals_2_t0 U32
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }"] }
# optimized away noop copy Instruction { source: "g <- inline_handle_tty_globals_2_t0 U32\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\"] }", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# goto inline_handle_tty_globals_2_function_end_globals
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_handle_tty_globals_2_function_end_globals\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_handle_tty_globals_2_function_end_globals)], resolved: None }
# :inline_handle_tty_globals_2_function_end_globals
# 	SourceContext { contexts: [] }
# inline_handle_tty_globals_2_function_end_globals
# t2 <- g U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# optimized away noop copy Instruction { source: "t2 <- g U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] })\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Queue\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Queue\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# t1 <- t2 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))"] }
# optimized away noop copy Instruction { source: "t1 <- t2 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] })\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# t4 <- ttyin
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] })", "Arithmetic(And, TtyIn, Number(U8, 127))", "Arithmetic(And, TtyIn, Number(U8, 127))", "TtyIn", "TtyIn"] }
# 005f4 Instruction { source: "t4 <- ttyin\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] })\", \"Arithmetic(And, TtyIn, Number(U8, 127))\", \"Arithmetic(And, TtyIn, Number(U8, 127))\", \"TtyIn\", \"TtyIn\"] }", opcode: In0, args: [Register(0x44)], resolved: None }
60 44 
# t5 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] })", "Arithmetic(And, TtyIn, Number(U8, 127))", "Arithmetic(And, TtyIn, Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 005f6 Instruction { source: "t5 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] })\", \"Arithmetic(And, TtyIn, Number(U8, 127))\", \"Arithmetic(And, TtyIn, Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x4d), Constant8(0x7f=127)], resolved: None }
04 4d 7f 
# t3 <- t4 BitwiseAnd t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] })", "Arithmetic(And, TtyIn, Number(U8, 127))", "Arithmetic(And, TtyIn, Number(U8, 127))"] }
# 005f9 Instruction { source: "t3 <- t4 BitwiseAnd t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] })\", \"Arithmetic(And, TtyIn, Number(U8, 127))\", \"Arithmetic(And, TtyIn, Number(U8, 127))\"] }", opcode: And8, args: [Register(0x44), Register(0x4d), Register(0x4d)], resolved: None }
1b 44 4d 4d 
# inline_handle_tty_queue_push_13_s <- t1 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] })"] }
# 005fd Instruction { source: "inline_handle_tty_queue_push_13_s <- t1 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] })\"] }", opcode: Copy32, args: [Register(0x34), Register(0x3c)], resolved: None }
21 34 3c 
# inline_handle_tty_queue_push_13_n <- t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Arithmetic(And, TtyIn, Number(U8, 127))] })"] }
# 00600 Instruction { source: "inline_handle_tty_queue_push_13_n <- t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\")), Arithmetic(And, TtyIn, Number(U8, 127))] })\"] }", opcode: Copy8, args: [Register(0x4d), Register(0x38)], resolved: None }
0b 4d 38 
# inline_handle_tty_queue_push_13_t0 <- inline_handle_tty_queue_push_13_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_handle_tty_queue_push_13_t0 <- inline_handle_tty_queue_push_13_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_handle_tty_queue_push_13_values <- inline_handle_tty_queue_push_13_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 00603 Instruction { source: "inline_handle_tty_queue_push_13_values <- inline_handle_tty_queue_push_13_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# inline_handle_tty_queue_push_13_t2 <- inline_handle_tty_queue_push_13_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_handle_tty_queue_push_13_t2 <- inline_handle_tty_queue_push_13_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_handle_tty_queue_push_13_t6 <- inline_handle_tty_queue_push_13_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_handle_tty_queue_push_13_t6 <- inline_handle_tty_queue_push_13_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_handle_tty_queue_push_13_t7 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 00606 Instruction { source: "inline_handle_tty_queue_push_13_t7 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0x48), Constant32(0x00000104=260)], resolved: None }
20 48 04 01 00 00 
# inline_handle_tty_queue_push_13_t5 <- inline_handle_tty_queue_push_13_t6 Add inline_handle_tty_queue_push_13_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 0060c Instruction { source: "inline_handle_tty_queue_push_13_t5 <- inline_handle_tty_queue_push_13_t6 Add inline_handle_tty_queue_push_13_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0060d Instruction { source: "inline_handle_tty_queue_push_13_t5 <- inline_handle_tty_queue_push_13_t6 Add inline_handle_tty_queue_push_13_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x48), Register(0x48)], resolved: None }
30 3c 48 48 
# 00611 Instruction { source: "inline_handle_tty_queue_push_13_t5 <- inline_handle_tty_queue_push_13_t6 Add inline_handle_tty_queue_push_13_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_handle_tty_queue_push_13_t4 <- mem[inline_handle_tty_queue_push_13_t5] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 00612 Instruction { source: "inline_handle_tty_queue_push_13_t4 <- mem[inline_handle_tty_queue_push_13_t5] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x48), Register(0x4c)], resolved: None }
05 48 4c 
# inline_handle_tty_queue_push_13_t3 U32 <- inline_handle_tty_queue_push_13_t4 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }"] }
# 00615 Instruction { source: "Zero-pad for inline_handle_tty_queue_push_13_t3 U32 <- inline_handle_tty_queue_push_13_t4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: LoadImm32, args: [Register(0x48), Constant32(0x00000000=0)], resolved: None }
20 48 00 00 00 00 
# 0061b Instruction { source: "inline_handle_tty_queue_push_13_t3 U32 <- inline_handle_tty_queue_push_13_t4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: Copy8, args: [Register(0x4c), Register(0x48)], resolved: None }
0b 4c 48 
# inline_handle_tty_queue_push_13_t1 <- inline_handle_tty_queue_push_13_t2 Add inline_handle_tty_queue_push_13_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })"] }
# 0061e Instruction { source: "inline_handle_tty_queue_push_13_t1 <- inline_handle_tty_queue_push_13_t2 Add inline_handle_tty_queue_push_13_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0061f Instruction { source: "inline_handle_tty_queue_push_13_t1 <- inline_handle_tty_queue_push_13_t2 Add inline_handle_tty_queue_push_13_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x48), Register(0x40)], resolved: None }
30 40 48 40 
# 00623 Instruction { source: "inline_handle_tty_queue_push_13_t1 <- inline_handle_tty_queue_push_13_t2 Add inline_handle_tty_queue_push_13_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_handle_tty_queue_push_13_t8 <- inline_handle_tty_queue_push_13_n U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_handle_tty_queue_push_13_t8 <- inline_handle_tty_queue_push_13_n U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy8, args: [Register(0x38), Register(0x38)], resolved: None }
# mem[inline_handle_tty_queue_push_13_t1] <- inline_handle_tty_queue_push_13_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }"] }
# 00624 Instruction { source: "mem[inline_handle_tty_queue_push_13_t1] <- inline_handle_tty_queue_push_13_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store8, args: [Register(0x38), Register(0x40)], resolved: None }
06 38 40 
# inline_handle_tty_queue_push_13_t10 <- inline_handle_tty_queue_push_13_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 00627 Instruction { source: "inline_handle_tty_queue_push_13_t10 <- inline_handle_tty_queue_push_13_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x34)], resolved: None }
21 3c 34 
# inline_handle_tty_queue_push_13_t11 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 0062a Instruction { source: "inline_handle_tty_queue_push_13_t11 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000104=260)], resolved: None }
20 40 04 01 00 00 
# inline_handle_tty_queue_push_13_t9 <- inline_handle_tty_queue_push_13_t10 Add inline_handle_tty_queue_push_13_t11
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 00630 Instruction { source: "inline_handle_tty_queue_push_13_t9 <- inline_handle_tty_queue_push_13_t10 Add inline_handle_tty_queue_push_13_t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00631 Instruction { source: "inline_handle_tty_queue_push_13_t9 <- inline_handle_tty_queue_push_13_t10 Add inline_handle_tty_queue_push_13_t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0x34), Register(0x40), Register(0x40)], resolved: None }
30 34 40 40 
# 00635 Instruction { source: "inline_handle_tty_queue_push_13_t9 <- inline_handle_tty_queue_push_13_t10 Add inline_handle_tty_queue_push_13_t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_handle_tty_queue_push_13_t15 <- inline_handle_tty_queue_push_13_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 00636 Instruction { source: "inline_handle_tty_queue_push_13_t15 <- inline_handle_tty_queue_push_13_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x34)], resolved: None }
21 3c 34 
# inline_handle_tty_queue_push_13_t16 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 00639 Instruction { source: "inline_handle_tty_queue_push_13_t16 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0x3c), Constant32(0x00000104=260)], resolved: None }
20 3c 04 01 00 00 
# inline_handle_tty_queue_push_13_t14 <- inline_handle_tty_queue_push_13_t15 Add inline_handle_tty_queue_push_13_t16
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 0063f Instruction { source: "inline_handle_tty_queue_push_13_t14 <- inline_handle_tty_queue_push_13_t15 Add inline_handle_tty_queue_push_13_t16\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00640 Instruction { source: "inline_handle_tty_queue_push_13_t14 <- inline_handle_tty_queue_push_13_t15 Add inline_handle_tty_queue_push_13_t16\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0x34), Register(0x3c), Register(0x34)], resolved: None }
30 34 3c 34 
# 00644 Instruction { source: "inline_handle_tty_queue_push_13_t14 <- inline_handle_tty_queue_push_13_t15 Add inline_handle_tty_queue_push_13_t16\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_handle_tty_queue_push_13_t13 <- mem[inline_handle_tty_queue_push_13_t14] U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 00645 Instruction { source: "inline_handle_tty_queue_push_13_t13 <- mem[inline_handle_tty_queue_push_13_t14] U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x34), Register(0x38)], resolved: None }
05 34 38 
# inline_handle_tty_queue_push_13_t17 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00648 Instruction { source: "inline_handle_tty_queue_push_13_t17 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x44), Constant8(0x01=1)], resolved: None }
04 44 01 
# inline_handle_tty_queue_push_13_t12 <- inline_handle_tty_queue_push_13_t13 Add inline_handle_tty_queue_push_13_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))"] }
# 0064b Instruction { source: "inline_handle_tty_queue_push_13_t12 <- inline_handle_tty_queue_push_13_t13 Add inline_handle_tty_queue_push_13_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x38), Register(0x44), Register(0x38)], resolved: None }
14 38 44 38 
# mem[inline_handle_tty_queue_push_13_t9] <- inline_handle_tty_queue_push_13_t12 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }"] }
# 0064f Instruction { source: "mem[inline_handle_tty_queue_push_13_t9] <- inline_handle_tty_queue_push_13_t12 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x38), Register(0x40)], resolved: None }
06 38 40 
# goto inline_handle_tty_queue_push_13_function_end_queue_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_handle_tty_queue_push_13_function_end_queue_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_handle_tty_queue_push_13_function_end_queue_push)], resolved: None }
# :inline_handle_tty_queue_push_13_function_end_queue_push
# 	SourceContext { contexts: [] }
# inline_handle_tty_queue_push_13_function_end_queue_push
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 00652 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_handle_tty
# 	SourceContext { contexts: [] }
# function_end_handle_tty
# Unreachable
# 	SourceContext { contexts: [] }
# 00654 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :isr
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var rtr (Local rtr Number(U8) Reg(U8)) Reg(U8) Some([78])
# Var t0 (t0 Arithmetic(And, Ident("rtr"), Number(U8, 1))) Reg(U8) Some([79])
# Var t1 (t1 Ident("rtr")) Reg(U8) Some([78])
# Var t2 (t2 Number(U8, 1)) Reg(U8) Some([79])
# Var t3 (t3 Number(U8, 0)) Reg(U8) Some([80])
# Var t4 (t4 Call(Call { function: "handle_tty", parameters: [] })) Reg(U8) Some([78])
# Var t5 (t5 Arithmetic(And, Ident("rtr"), Number(U8, 4))) Reg(U8) Some([78])
# Var t6 (t6 Ident("rtr")) Reg(U8) Some([78])
# Var t7 (t7 Number(U8, 4)) Reg(U8) Some([79])
# Var t8 (t8 Number(U8, 0)) Reg(U8) Some([79])
# Var t9 (t9 Call(Call { function: "handle_ps2", parameters: [] })) Reg(U8) Some([78])
# Registers used by this function: {78, 79, 80}
# 00659 Instruction { source: "Saving reg0x50 before before entering ISR body", opcode: Push8, args: [Register(0x50)], resolved: None }
09 50 
# 0065b Instruction { source: "Saving reg0x4f before before entering ISR body", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 0065d Instruction { source: "Saving reg0x4e before before entering ISR body", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# Some(rtr) <= call io_ready_to_read()
# 	SourceContext { contexts: ["Assign { target: Ident(\"rtr\"), var_type: None, value: Call(Call { function: \"io_ready_to_read\", parameters: [] }) }", "Call(Call { function: \"io_ready_to_read\", parameters: [] })"] }
# 0065f Instruction { source: "ReadyToRead", opcode: IoReadyToRead, args: [Register(0x4e)], resolved: None }
79 4e 
# t1 <- rtr U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 1))", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 1))", "Ident(\"rtr\")", "Ident(\"rtr\")"] }
# optimized away noop copy Instruction { source: "t1 <- rtr U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_tty\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1))\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1))\", \"Ident(\\\"rtr\\\")\", \"Ident(\\\"rtr\\\")\"] }", opcode: Copy8, args: [Register(0x4e), Register(0x4e)], resolved: None }
# t2 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 1))", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00661 Instruction { source: "t2 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_tty\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1))\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x4f), Constant8(0x01=1)], resolved: None }
04 4f 01 
# t0 <- t1 BitwiseAnd t2
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 1))", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 1))"] }
# 00664 Instruction { source: "t0 <- t1 BitwiseAnd t2\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_tty\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1))\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1))\"] }", opcode: And8, args: [Register(0x4e), Register(0x4f), Register(0x4f)], resolved: None }
1b 4e 4f 4f 
# t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00668 Instruction { source: "t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_tty\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x50), Constant8(0x00=0)], resolved: None }
04 50 00 
# if t0 != t3 then 'isr_if_true_0_1' else 'isr_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }"] }
# 0066b Instruction { source: "if t0 != t3 then 'isr_if_true_0_1' else 'isr_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_tty\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x4f), Register(0x50)], resolved: None }
15 4f 50 
# 0066e Instruction { source: "if t0 != t3 then 'isr_if_true_0_1' else 'isr_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_tty\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(isr_if_else_0_2)], resolved: None }
72 8c 06 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t0 != t3 then 'isr_if_true_0_1' else 'isr_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_tty\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(isr_if_true_0_1)], resolved: None }
# :isr_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }])], else_block: [] }"] }
# isr_if_true_0_1
# None <= call handle_tty()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }", "Call(Call { function: \"handle_tty\", parameters: [] })", "Call(Call { function: \"handle_tty\", parameters: [] })"] }
# Registers used by this function: {78, 79, 80}
# Registers used by callee tree: {52, 53, 54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77}
# Registers to save: []
# 00672 Instruction { source: "PseudoCall(Label24(:handle_tty))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00678 Instruction { source: "PseudoCall(Label24(:handle_tty))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 82 06 00 00 
# 0067e Instruction { source: "PseudoCall(Label24(:handle_tty))", opcode: JmpImm, args: [Label24(:handle_tty)], resolved: None }
70 ee 05 00 
# 00682 Instruction { source: "PseudoCall(Label24(:handle_tty))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto isr_if_end_0
# 	SourceContext { contexts: [] }
# 00688 Instruction { source: "goto isr_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(isr_if_end_0)], resolved: None }
70 8c 06 00 
# :isr_if_else_0_2
# 	SourceContext { contexts: [] }
# isr_if_else_0_2
# :isr_if_end_0
# 	SourceContext { contexts: [] }
# isr_if_end_0
# t6 <- rtr U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 4))", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 4))", "Ident(\"rtr\")", "Ident(\"rtr\")"] }
# optimized away noop copy Instruction { source: "t6 <- rtr U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_ps2\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4))\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4))\", \"Ident(\\\"rtr\\\")\", \"Ident(\\\"rtr\\\")\"] }", opcode: Copy8, args: [Register(0x4e), Register(0x4e)], resolved: None }
# t7 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 4))", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 0068c Instruction { source: "t7 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_ps2\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4))\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x4f), Constant8(0x04=4)], resolved: None }
04 4f 04 
# t5 <- t6 BitwiseAnd t7
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 4))", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 4))"] }
# 0068f Instruction { source: "t5 <- t6 BitwiseAnd t7\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_ps2\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4))\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4))\"] }", opcode: And8, args: [Register(0x4e), Register(0x4f), Register(0x4e)], resolved: None }
1b 4e 4f 4e 
# t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00693 Instruction { source: "t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_ps2\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x4f), Constant8(0x00=0)], resolved: None }
04 4f 00 
# if t5 != t8 then 'isr_if_true_0_4' else 'isr_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }"] }
# 00696 Instruction { source: "if t5 != t8 then 'isr_if_true_0_4' else 'isr_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_ps2\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x4e), Register(0x4f)], resolved: None }
15 4e 4f 
# 00699 Instruction { source: "if t5 != t8 then 'isr_if_true_0_4' else 'isr_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_ps2\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(isr_if_else_0_5)], resolved: None }
72 b7 06 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5 != t8 then 'isr_if_true_0_4' else 'isr_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"handle_ps2\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(isr_if_true_0_4)], resolved: None }
# :isr_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }])], else_block: [] }"] }
# isr_if_true_0_4
# None <= call handle_ps2()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }", "Call(Call { function: \"handle_ps2\", parameters: [] })", "Call(Call { function: \"handle_ps2\", parameters: [] })"] }
# Registers used by this function: {78, 79, 80}
# Registers used by callee tree: {16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51}
# Registers to save: []
# 0069d Instruction { source: "PseudoCall(Label24(:handle_ps2))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 006a3 Instruction { source: "PseudoCall(Label24(:handle_ps2))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c ad 06 00 00 
# 006a9 Instruction { source: "PseudoCall(Label24(:handle_ps2))", opcode: JmpImm, args: [Label24(:handle_ps2)], resolved: None }
70 2f 04 00 
# 006ad Instruction { source: "PseudoCall(Label24(:handle_ps2))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto isr_if_end_3
# 	SourceContext { contexts: [] }
# 006b3 Instruction { source: "goto isr_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(isr_if_end_3)], resolved: None }
70 b7 06 00 
# :isr_if_else_0_5
# 	SourceContext { contexts: [] }
# isr_if_else_0_5
# :isr_if_end_3
# 	SourceContext { contexts: [] }
# isr_if_end_3
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# Registers used by this function: {78, 79, 80}
# 006b7 Instruction { source: "Restoring reg0x4e after ISR body", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 006b9 Instruction { source: "Restoring reg0x4f after ISR body", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# 006bb Instruction { source: "Restoring reg0x50 after ISR body", opcode: Pop8, args: [Register(0x50)], resolved: None }
0a 50 
# 006bd Instruction { source: "return from ISR", opcode: ReturnFromInterrupt, args: [], resolved: None }
78 
# :function_end_isr
# 	SourceContext { contexts: [] }
# function_end_isr
# Unreachable
# 	SourceContext { contexts: [] }
# 006be Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :main
# Ret Some(U8)
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([81])
# Var g (Local g Ptr(Struct("Globals")) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_main_globals_3_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_globals_3_g (Local g Struct("Globals") Static(524544)) Static(524544) None
# Var inline_main_globals_3_t0 (t0 AddressOf(Ident("g"))) Reg(U32) Some([88, 89, 90, 91])
# Var inline_main_globals_3_t1 (static "g") Reg(U32) Some([88, 89, 90, 91])
# Var inline_main_queue_init_10_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_queue_init_10_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([88, 89, 90, 91])
# Var inline_main_queue_init_10_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_queue_init_10_t1 (t1 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_main_queue_init_10_t2 (t2 Number(USIZE, 256)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_queue_init_10_t3 (t3 Number(U8, 0)) Reg(U8) Some([96])
# Var inline_main_queue_init_10_t4 (t4 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_main_queue_init_10_t5 (t5 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_main_queue_init_10_t6 (t6 Number(USIZE, 260)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_queue_init_10_t7 (t7 Number(U8, 0)) Reg(U8) Some([97])
# Var inline_main_queue_pop_11_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_queue_pop_11_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([88, 89, 90, 91])
# Var inline_main_queue_pop_11_t0 (t0 PtrFieldDeref("s", "first")) Reg(U8) Some([97])
# Var inline_main_queue_pop_11_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_queue_pop_11_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_queue_pop_11_t11 (t11 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_queue_pop_11_t12 (t12 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_main_queue_pop_11_t13 (t13 PtrFieldDeref("s", "first")) Reg(U8) Some([96])
# Var inline_main_queue_pop_11_t14 (t14 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_main_queue_pop_11_t15 (t15 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_main_queue_pop_11_t16 (t16 Number(USIZE, 256)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_main_queue_pop_11_t17 (t17 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_queue_pop_11_t18 (t18 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_main_queue_pop_11_t19 (t19 Number(USIZE, 256)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_queue_pop_11_t2 (t2 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_main_queue_pop_11_t20 (t20 Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))) Reg(U8) Some([81])
# Var inline_main_queue_pop_11_t21 (t21 PtrFieldDeref("s", "first")) Reg(U8) Some([81])
# Var inline_main_queue_pop_11_t22 (t22 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_main_queue_pop_11_t23 (t23 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_main_queue_pop_11_t24 (t24 Number(USIZE, 256)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_main_queue_pop_11_t25 (t25 Number(U8, 1)) Reg(U8) Some([96])
# Var inline_main_queue_pop_11_t26 (t26 Ident("value")) Reg(U8) Some([81])
# Var inline_main_queue_pop_11_t3 (t3 Number(USIZE, 256)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_main_queue_pop_11_t4 (t4 PtrFieldDeref("s", "last")) Reg(U8) Some([96])
# Var inline_main_queue_pop_11_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_main_queue_pop_11_t6 (t6 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_main_queue_pop_11_t7 (t7 Number(USIZE, 260)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_main_queue_pop_11_t8 (t8 Number(U8, 0)) Reg(U8) Some([81])
# Var inline_main_queue_pop_11_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_main_queue_pop_11_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([104])
# Var inline_main_queue_pop_11_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 264)) }) Reg(U32) Some([88, 89, 90, 91])
# Var t1 (t1 Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }) Reg(U32) Some([88, 89, 90, 91])
# Var t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }) Reg(U32) Some([88, 89, 90, 91])
# Var t11 (t11 Call(Call { function: "enable_interrupts", parameters: [] })) Reg(U8) Some([81])
# Var t12 (t12 Number(U8, 0)) Reg(U8) Some([81])
# Var t13 (t13 Number(U8, 0)) Reg(U8) Some([97])
# Var t14 (t14 Call(Call { function: "disable_interrupts", parameters: [] })) Reg(U8) Some([81])
# Var t15 (t15 AddressOf(PtrFieldDeref("g", "stdin"))) Reg(U32) Some([88, 89, 90, 91])
# Var t16 (t16 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Queue")), value: Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") } }) Reg(U32) Some([88, 89, 90, 91])
# Var t17 (t17 Call(Call { function: "enable_interrupts", parameters: [] })) Reg(U8) Some([81])
# Var t18 (t18 Ident("ch")) Reg(U8) Some([81])
# Var t19 (t19 Number(U8, 0)) Reg(U8) Some([97])
# Var t2 (t2 Number(USIZE, 264)) Reg(U32) Some([92, 93, 94, 95])
# Var t20 (t20 Ident("ch")) Reg(U8) Some([81])
# Var t21 (t21 Number(U8, 113)) Reg(U8) Some([97])
# Var t22 (t22 Number(U8, 0)) Reg(U8) Some([81])
# Var t23 (t23 Ident("ch")) Reg(U8) Some([81])
# Var t3 (t3 Number(U8, 0)) Reg(U8) Some([97])
# Var t4 (t4 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }, Number(USIZE, 268)) }) Reg(U32) Some([88, 89, 90, 91])
# Var t5 (t5 Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(USIZE), value: Ident("g") }) Reg(U32) Some([88, 89, 90, 91])
# Var t6 (t6 Number(USIZE, 268)) Reg(U32) Some([92, 93, 94, 95])
# Var t7 (t7 Number(U8, 0)) Reg(U8) Some([97])
# Var t8 (t8 Call(Call { function: "queue_init", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })) Reg(U8) Some([81])
# Var t9 (t9 AddressOf(PtrFieldDeref("g", "stdin"))) Reg(U32) Some([88, 89, 90, 91])
# inline_main_globals_3_t1 <- 0n524544/0x00080100u32 
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))"] }
# 006c3 Instruction { source: "inline_main_globals_3_t1 <- 0n524544/0x00080100u32 \n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\", \"AddressOf(Ident(\\\"g\\\"))\", \"AddressOf(Ident(\\\"g\\\"))\"] }", opcode: LoadImm32, args: [Register(0x58), Constant32(0x00080100=524544)], resolved: None }
20 58 00 01 08 00 
# inline_main_globals_3_t0 <- inline_main_globals_3_t1 U32
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))"] }
# optimized away noop copy Instruction { source: "inline_main_globals_3_t0 <- inline_main_globals_3_t1 U32\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\", \"AddressOf(Ident(\\\"g\\\"))\", \"AddressOf(Ident(\\\"g\\\"))\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# g <- inline_main_globals_3_t0 U32
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }"] }
# 006c9 Instruction { source: "g <- inline_main_globals_3_t0 U32\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\"] }", opcode: Copy32, args: [Register(0x58), Register(0x54)], resolved: None }
21 58 54 
# goto inline_main_globals_3_function_end_globals
# 	SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_globals_3_function_end_globals\n\tSourceContext { contexts: [\"Return { value: Some(AddressOf(Ident(\\\"g\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_globals_3_function_end_globals)], resolved: None }
# :inline_main_globals_3_function_end_globals
# 	SourceContext { contexts: [] }
# inline_main_globals_3_function_end_globals
# t1 <- g U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# 006cc Instruction { source: "t1 <- g U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x58)], resolved: None }
21 54 58 
# t2 <- 0n264/0x00000108u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))", "Number(USIZE, 264)", "Number(USIZE, 264)"] }
# 006cf Instruction { source: "t2 <- 0n264/0x00000108u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\", \"Number(USIZE, 264)\", \"Number(USIZE, 264)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000108=264)], resolved: None }
20 5c 08 01 00 00 
# t0 <- t1 Add t2
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 264))"] }
# 006d5 Instruction { source: "t0 <- t1 Add t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 006d6 Instruction { source: "t0 <- t1 Add t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: AddCarry32_1, args: [Register(0x58), Register(0x5c), Register(0x58)], resolved: None }
30 58 5c 58 
# 006da Instruction { source: "t0 <- t1 Add t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 264))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 006db Instruction { source: "t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x61), Constant8(0x00=0)], resolved: None }
04 61 00 
# mem[t0] <- t3 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(U8, 0) }"] }
# 006de Instruction { source: "mem[t0] <- t3 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x61), Register(0x58)], resolved: None }
06 61 58 
# t5 <- g U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# 006e1 Instruction { source: "t5 <- g U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x58)], resolved: None }
21 54 58 
# t6 <- 0n268/0x0000010cu32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))", "Number(USIZE, 268)", "Number(USIZE, 268)"] }
# 006e4 Instruction { source: "t6 <- 0n268/0x0000010cu32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\", \"Number(USIZE, 268)\", \"Number(USIZE, 268)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x0000010c=268)], resolved: None }
20 5c 0c 01 00 00 
# t4 <- t5 Add t6
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }, Number(USIZE, 268))"] }
# 006ea Instruction { source: "t4 <- t5 Add t6\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 006eb Instruction { source: "t4 <- t5 Add t6\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: AddCarry32_1, args: [Register(0x58), Register(0x5c), Register(0x58)], resolved: None }
30 58 5c 58 
# 006ef Instruction { source: "t4 <- t5 Add t6\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }, Number(USIZE, 268))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t7 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 006f0 Instruction { source: "t7 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x61), Constant8(0x00=0)], resolved: None }
04 61 00 
# mem[t4] <- t7 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }"] }
# 006f3 Instruction { source: "mem[t4] <- t7 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"g\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x61), Register(0x58)], resolved: None }
06 61 58 
# t10 <- g U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# 006f6 Instruction { source: "t10 <- g U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Queue\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Queue\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x58)], resolved: None }
21 54 58 
# t9 <- t10 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))"] }
# optimized away noop copy Instruction { source: "t9 <- t10 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_main_queue_init_10_s <- t9 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_queue_init_10_s <- t9 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_main_queue_init_10_t1 <- inline_main_queue_init_10_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_queue_init_10_t1 <- inline_main_queue_init_10_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_main_queue_init_10_t2 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 006f9 Instruction { source: "inline_main_queue_init_10_t2 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000100=256)], resolved: None }
20 5c 00 01 00 00 
# inline_main_queue_init_10_t0 <- inline_main_queue_init_10_t1 Add inline_main_queue_init_10_t2
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 006ff Instruction { source: "inline_main_queue_init_10_t0 <- inline_main_queue_init_10_t1 Add inline_main_queue_init_10_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00700 Instruction { source: "inline_main_queue_init_10_t0 <- inline_main_queue_init_10_t1 Add inline_main_queue_init_10_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_1, args: [Register(0x58), Register(0x5c), Register(0x5c)], resolved: None }
30 58 5c 5c 
# 00704 Instruction { source: "inline_main_queue_init_10_t0 <- inline_main_queue_init_10_t1 Add inline_main_queue_init_10_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_queue_init_10_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00705 Instruction { source: "inline_main_queue_init_10_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x00=0)], resolved: None }
04 60 00 
# mem[inline_main_queue_init_10_t0] <- inline_main_queue_init_10_t3 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }"] }
# 00708 Instruction { source: "mem[inline_main_queue_init_10_t0] <- inline_main_queue_init_10_t3 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x60), Register(0x5c)], resolved: None }
06 60 5c 
# inline_main_queue_init_10_t5 <- inline_main_queue_init_10_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_queue_init_10_t5 <- inline_main_queue_init_10_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_main_queue_init_10_t6 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 0070b Instruction { source: "inline_main_queue_init_10_t6 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000104=260)], resolved: None }
20 5c 04 01 00 00 
# inline_main_queue_init_10_t4 <- inline_main_queue_init_10_t5 Add inline_main_queue_init_10_t6
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 00711 Instruction { source: "inline_main_queue_init_10_t4 <- inline_main_queue_init_10_t5 Add inline_main_queue_init_10_t6\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00712 Instruction { source: "inline_main_queue_init_10_t4 <- inline_main_queue_init_10_t5 Add inline_main_queue_init_10_t6\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0x58), Register(0x5c), Register(0x58)], resolved: None }
30 58 5c 58 
# 00716 Instruction { source: "inline_main_queue_init_10_t4 <- inline_main_queue_init_10_t5 Add inline_main_queue_init_10_t6\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_queue_init_10_t7 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00717 Instruction { source: "inline_main_queue_init_10_t7 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x61), Constant8(0x00=0)], resolved: None }
04 61 00 
# mem[inline_main_queue_init_10_t4] <- inline_main_queue_init_10_t7 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }"] }
# 0071a Instruction { source: "mem[inline_main_queue_init_10_t4] <- inline_main_queue_init_10_t7 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x61), Register(0x58)], resolved: None }
06 61 58 
# goto inline_main_queue_init_10_function_end_queue_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_queue_init_10_function_end_queue_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_queue_init_10_function_end_queue_init)], resolved: None }
# :inline_main_queue_init_10_function_end_queue_init
# 	SourceContext { contexts: [] }
# inline_main_queue_init_10_function_end_queue_init
# None <= call enable_interrupts()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"enable_interrupts\", parameters: [] }) }", "Call(Call { function: \"enable_interrupts\", parameters: [] })", "Call(Call { function: \"enable_interrupts\", parameters: [] })"] }
# 0071d Instruction { source: "EnableInterrupts", opcode: EnableInterrupts, args: [], resolved: None }
76 
# :main_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"disable_interrupts\", parameters: [] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }, VoidExpression { expression: Call(Call { function: \"enable_interrupts\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }] }"] }
# main_while_predicate_0
# t12 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"disable_interrupts\", parameters: [] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }, VoidExpression { expression: Call(Call { function: \"enable_interrupts\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0071e Instruction { source: "t12 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"disable_interrupts\\\", parameters: [] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }, VoidExpression { expression: Call(Call { function: \\\"enable_interrupts\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x51), Constant8(0x00=0)], resolved: None }
04 51 00 
# t13 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"disable_interrupts\", parameters: [] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }, VoidExpression { expression: Call(Call { function: \"enable_interrupts\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00721 Instruction { source: "t13 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"disable_interrupts\\\", parameters: [] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }, VoidExpression { expression: Call(Call { function: \\\"enable_interrupts\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x61), Constant8(0x00=0)], resolved: None }
04 61 00 
# if t12 == t13 then 'main_while_body_1' else 'main_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"disable_interrupts\", parameters: [] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }, VoidExpression { expression: Call(Call { function: \"enable_interrupts\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }"] }
# 00724 Instruction { source: "if t12 == t13 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"disable_interrupts\\\", parameters: [] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }, VoidExpression { expression: Call(Call { function: \\\"enable_interrupts\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x51), Register(0x61)], resolved: None }
15 51 61 
# 00727 Instruction { source: "if t12 == t13 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"disable_interrupts\\\", parameters: [] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }, VoidExpression { expression: Call(Call { function: \\\"enable_interrupts\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_while_body_1)], resolved: None }
72 2f 07 00 
# 0072b Instruction { source: "if t12 == t13 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"disable_interrupts\\\", parameters: [] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }, VoidExpression { expression: Call(Call { function: \\\"enable_interrupts\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_while_end_2)], resolved: None }
70 e6 07 00 
# :main_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"disable_interrupts\", parameters: [] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }, VoidExpression { expression: Call(Call { function: \"enable_interrupts\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }] }"] }
# main_while_body_1
# None <= call disable_interrupts()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"disable_interrupts\", parameters: [] }) }", "Call(Call { function: \"disable_interrupts\", parameters: [] })", "Call(Call { function: \"disable_interrupts\", parameters: [] })"] }
# 0072f Instruction { source: "DisableInterrupts", opcode: DisableInterrupts, args: [], resolved: None }
77 
# t16 <- g U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(USIZE), value: Ident(\"g\") }", "Ident(\"g\")"] }
# 00730 Instruction { source: "t16 <- g U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Queue\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Queue\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Globals\\\"))), new_type: Number(USIZE), value: Ident(\\\"g\\\") }\", \"Ident(\\\"g\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x58)], resolved: None }
21 54 58 
# t15 <- t16 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))"] }
# optimized away noop copy Instruction { source: "t15 <- t16 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\", \"AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_main_queue_pop_11_s <- t15 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_queue_pop_11_s <- t15 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(PtrFieldDeref(\\\"g\\\", \\\"stdin\\\"))] })\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_main_queue_pop_11_t2 <- inline_main_queue_pop_11_s U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_queue_pop_11_t2 <- inline_main_queue_pop_11_s U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_main_queue_pop_11_t3 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 00733 Instruction { source: "inline_main_queue_pop_11_t3 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000100=256)], resolved: None }
20 5c 00 01 00 00 
# inline_main_queue_pop_11_t1 <- inline_main_queue_pop_11_t2 Add inline_main_queue_pop_11_t3
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 00739 Instruction { source: "inline_main_queue_pop_11_t1 <- inline_main_queue_pop_11_t2 Add inline_main_queue_pop_11_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0073a Instruction { source: "inline_main_queue_pop_11_t1 <- inline_main_queue_pop_11_t2 Add inline_main_queue_pop_11_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_1, args: [Register(0x58), Register(0x5c), Register(0x5c)], resolved: None }
30 58 5c 5c 
# 0073e Instruction { source: "inline_main_queue_pop_11_t1 <- inline_main_queue_pop_11_t2 Add inline_main_queue_pop_11_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_queue_pop_11_t0 <- mem[inline_main_queue_pop_11_t1] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")"] }
# 0073f Instruction { source: "inline_main_queue_pop_11_t0 <- mem[inline_main_queue_pop_11_t1] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\"] }", opcode: Load8, args: [Register(0x5c), Register(0x61)], resolved: None }
05 5c 61 
# inline_main_queue_pop_11_t6 <- inline_main_queue_pop_11_s U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_queue_pop_11_t6 <- inline_main_queue_pop_11_s U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_main_queue_pop_11_t7 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 00742 Instruction { source: "inline_main_queue_pop_11_t7 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000104=260)], resolved: None }
20 64 04 01 00 00 
# inline_main_queue_pop_11_t5 <- inline_main_queue_pop_11_t6 Add inline_main_queue_pop_11_t7
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 00748 Instruction { source: "inline_main_queue_pop_11_t5 <- inline_main_queue_pop_11_t6 Add inline_main_queue_pop_11_t7\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00749 Instruction { source: "inline_main_queue_pop_11_t5 <- inline_main_queue_pop_11_t6 Add inline_main_queue_pop_11_t7\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0x58), Register(0x64), Register(0x64)], resolved: None }
30 58 64 64 
# 0074d Instruction { source: "inline_main_queue_pop_11_t5 <- inline_main_queue_pop_11_t6 Add inline_main_queue_pop_11_t7\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_queue_pop_11_t4 <- mem[inline_main_queue_pop_11_t5] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 0074e Instruction { source: "inline_main_queue_pop_11_t4 <- mem[inline_main_queue_pop_11_t5] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x64), Register(0x60)], resolved: None }
05 64 60 
# if inline_main_queue_pop_11_t0 == inline_main_queue_pop_11_t4 then 'inline_main_queue_pop_11_queue_pop_if_true_0_1' else 'inline_main_queue_pop_11_queue_pop_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }"] }
# 00751 Instruction { source: "if inline_main_queue_pop_11_t0 == inline_main_queue_pop_11_t4 then 'inline_main_queue_pop_11_queue_pop_if_true_0_1' else 'inline_main_queue_pop_11_queue_pop_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: Cmp8, args: [Register(0x61), Register(0x60)], resolved: None }
15 61 60 
# 00754 Instruction { source: "if inline_main_queue_pop_11_t0 == inline_main_queue_pop_11_t4 then 'inline_main_queue_pop_11_queue_pop_if_true_0_1' else 'inline_main_queue_pop_11_queue_pop_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: JzImm, args: [Label24(inline_main_queue_pop_11_queue_pop_if_true_0_1)], resolved: None }
72 5c 07 00 
# 00758 Instruction { source: "if inline_main_queue_pop_11_t0 == inline_main_queue_pop_11_t4 then 'inline_main_queue_pop_11_queue_pop_if_true_0_1' else 'inline_main_queue_pop_11_queue_pop_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_main_queue_pop_11_queue_pop_if_else_0_2)], resolved: None }
70 67 07 00 
# :inline_main_queue_pop_11_queue_pop_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }"] }
# inline_main_queue_pop_11_queue_pop_if_true_0_1
# inline_main_queue_pop_11_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0075c Instruction { source: "inline_main_queue_pop_11_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x51), Constant8(0x00=0)], resolved: None }
04 51 00 
# ch <- inline_main_queue_pop_11_t8 U8
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# optimized away noop copy Instruction { source: "ch <- inline_main_queue_pop_11_t8 U8\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# goto inline_main_queue_pop_11_function_end_queue_pop
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 0075f Instruction { source: "goto inline_main_queue_pop_11_function_end_queue_pop\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: JmpImm, args: [Label24(inline_main_queue_pop_11_function_end_queue_pop)], resolved: None }
70 b7 07 00 
# goto inline_main_queue_pop_11_queue_pop_if_end_0
# 	SourceContext { contexts: [] }
# 00763 Instruction { source: "goto inline_main_queue_pop_11_queue_pop_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_queue_pop_11_queue_pop_if_end_0)], resolved: None }
70 67 07 00 
# :inline_main_queue_pop_11_queue_pop_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_queue_pop_11_queue_pop_if_else_0_2
# :inline_main_queue_pop_11_queue_pop_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_queue_pop_11_queue_pop_if_end_0
# inline_main_queue_pop_11_t9 <- inline_main_queue_pop_11_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_queue_pop_11_t9 <- inline_main_queue_pop_11_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_main_queue_pop_11_values <- inline_main_queue_pop_11_t9 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 00767 Instruction { source: "inline_main_queue_pop_11_values <- inline_main_queue_pop_11_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x58), Register(0x5c)], resolved: None }
21 58 5c 
# inline_main_queue_pop_11_t11 <- inline_main_queue_pop_11_values U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_main_queue_pop_11_t11 <- inline_main_queue_pop_11_values U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_queue_pop_11_t15 <- inline_main_queue_pop_11_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_queue_pop_11_t15 <- inline_main_queue_pop_11_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_main_queue_pop_11_t16 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 0076a Instruction { source: "inline_main_queue_pop_11_t16 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000100=256)], resolved: None }
20 64 00 01 00 00 
# inline_main_queue_pop_11_t14 <- inline_main_queue_pop_11_t15 Add inline_main_queue_pop_11_t16
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 00770 Instruction { source: "inline_main_queue_pop_11_t14 <- inline_main_queue_pop_11_t15 Add inline_main_queue_pop_11_t16\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00771 Instruction { source: "inline_main_queue_pop_11_t14 <- inline_main_queue_pop_11_t15 Add inline_main_queue_pop_11_t16\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_1, args: [Register(0x58), Register(0x64), Register(0x64)], resolved: None }
30 58 64 64 
# 00775 Instruction { source: "inline_main_queue_pop_11_t14 <- inline_main_queue_pop_11_t15 Add inline_main_queue_pop_11_t16\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_queue_pop_11_t13 <- mem[inline_main_queue_pop_11_t14] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")"] }
# 00776 Instruction { source: "inline_main_queue_pop_11_t13 <- mem[inline_main_queue_pop_11_t14] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\"] }", opcode: Load8, args: [Register(0x64), Register(0x60)], resolved: None }
05 64 60 
# inline_main_queue_pop_11_t12 U32 <- inline_main_queue_pop_11_t13 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }"] }
# 00779 Instruction { source: "Zero-pad for inline_main_queue_pop_11_t12 U32 <- inline_main_queue_pop_11_t13 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000000=0)], resolved: None }
20 64 00 00 00 00 
# 0077f Instruction { source: "inline_main_queue_pop_11_t12 U32 <- inline_main_queue_pop_11_t13 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\"] }", opcode: Copy8, args: [Register(0x60), Register(0x64)], resolved: None }
0b 60 64 
# inline_main_queue_pop_11_t10 <- inline_main_queue_pop_11_t11 Add inline_main_queue_pop_11_t12
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })"] }
# 00782 Instruction { source: "inline_main_queue_pop_11_t10 <- inline_main_queue_pop_11_t11 Add inline_main_queue_pop_11_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00783 Instruction { source: "inline_main_queue_pop_11_t10 <- inline_main_queue_pop_11_t11 Add inline_main_queue_pop_11_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x5c), Register(0x64), Register(0x5c)], resolved: None }
30 5c 64 5c 
# 00787 Instruction { source: "inline_main_queue_pop_11_t10 <- inline_main_queue_pop_11_t11 Add inline_main_queue_pop_11_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_queue_pop_11_value <- mem[inline_main_queue_pop_11_t10] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))"] }
# 00788 Instruction { source: "inline_main_queue_pop_11_value <- mem[inline_main_queue_pop_11_t10] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\"] }", opcode: Load8, args: [Register(0x5c), Register(0x68)], resolved: None }
05 5c 68 
# inline_main_queue_pop_11_t18 <- inline_main_queue_pop_11_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_queue_pop_11_t18 <- inline_main_queue_pop_11_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_main_queue_pop_11_t19 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 0078b Instruction { source: "inline_main_queue_pop_11_t19 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000100=256)], resolved: None }
20 5c 00 01 00 00 
# inline_main_queue_pop_11_t17 <- inline_main_queue_pop_11_t18 Add inline_main_queue_pop_11_t19
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 00791 Instruction { source: "inline_main_queue_pop_11_t17 <- inline_main_queue_pop_11_t18 Add inline_main_queue_pop_11_t19\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00792 Instruction { source: "inline_main_queue_pop_11_t17 <- inline_main_queue_pop_11_t18 Add inline_main_queue_pop_11_t19\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_1, args: [Register(0x58), Register(0x5c), Register(0x5c)], resolved: None }
30 58 5c 5c 
# 00796 Instruction { source: "inline_main_queue_pop_11_t17 <- inline_main_queue_pop_11_t18 Add inline_main_queue_pop_11_t19\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_queue_pop_11_t23 <- inline_main_queue_pop_11_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_queue_pop_11_t23 <- inline_main_queue_pop_11_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_main_queue_pop_11_t24 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 00797 Instruction { source: "inline_main_queue_pop_11_t24 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000100=256)], resolved: None }
20 64 00 01 00 00 
# inline_main_queue_pop_11_t22 <- inline_main_queue_pop_11_t23 Add inline_main_queue_pop_11_t24
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 0079d Instruction { source: "inline_main_queue_pop_11_t22 <- inline_main_queue_pop_11_t23 Add inline_main_queue_pop_11_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0079e Instruction { source: "inline_main_queue_pop_11_t22 <- inline_main_queue_pop_11_t23 Add inline_main_queue_pop_11_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_1, args: [Register(0x58), Register(0x64), Register(0x58)], resolved: None }
30 58 64 58 
# 007a2 Instruction { source: "inline_main_queue_pop_11_t22 <- inline_main_queue_pop_11_t23 Add inline_main_queue_pop_11_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_queue_pop_11_t21 <- mem[inline_main_queue_pop_11_t22] U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")"] }
# 007a3 Instruction { source: "inline_main_queue_pop_11_t21 <- mem[inline_main_queue_pop_11_t22] U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\"] }", opcode: Load8, args: [Register(0x58), Register(0x51)], resolved: None }
05 58 51 
# inline_main_queue_pop_11_t25 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 007a6 Instruction { source: "inline_main_queue_pop_11_t25 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x01=1)], resolved: None }
04 60 01 
# inline_main_queue_pop_11_t20 <- inline_main_queue_pop_11_t21 Add inline_main_queue_pop_11_t25
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))"] }
# 007a9 Instruction { source: "inline_main_queue_pop_11_t20 <- inline_main_queue_pop_11_t21 Add inline_main_queue_pop_11_t25\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x51), Register(0x60), Register(0x51)], resolved: None }
14 51 60 51 
# mem[inline_main_queue_pop_11_t17] <- inline_main_queue_pop_11_t20 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }"] }
# 007ad Instruction { source: "mem[inline_main_queue_pop_11_t17] <- inline_main_queue_pop_11_t20 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x51), Register(0x5c)], resolved: None }
06 51 5c 
# inline_main_queue_pop_11_t26 <- inline_main_queue_pop_11_value U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"value\")) }", "Ident(\"value\")", "Ident(\"value\")"] }
# 007b0 Instruction { source: "inline_main_queue_pop_11_t26 <- inline_main_queue_pop_11_value U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"value\\\")) }\", \"Ident(\\\"value\\\")\", \"Ident(\\\"value\\\")\"] }", opcode: Copy8, args: [Register(0x68), Register(0x51)], resolved: None }
0b 68 51 
# ch <- inline_main_queue_pop_11_t26 U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"value\")) }"] }
# optimized away noop copy Instruction { source: "ch <- inline_main_queue_pop_11_t26 U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"value\\\")) }\"] }", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# goto inline_main_queue_pop_11_function_end_queue_pop
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"value\")) }"] }
# 007b3 Instruction { source: "goto inline_main_queue_pop_11_function_end_queue_pop\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"value\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_main_queue_pop_11_function_end_queue_pop)], resolved: None }
70 b7 07 00 
# :inline_main_queue_pop_11_function_end_queue_pop
# 	SourceContext { contexts: [] }
# inline_main_queue_pop_11_function_end_queue_pop
# None <= call enable_interrupts()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"enable_interrupts\", parameters: [] }) }", "Call(Call { function: \"enable_interrupts\", parameters: [] })", "Call(Call { function: \"enable_interrupts\", parameters: [] })"] }
# 007b7 Instruction { source: "EnableInterrupts", opcode: EnableInterrupts, args: [], resolved: None }
76 
# t18 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }", "Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t18 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# t19 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }", "Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 007b8 Instruction { source: "t19 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x61), Constant8(0x00=0)], resolved: None }
04 61 00 
# if t18 != t19 then 'main_if_true_0_4' else 'main_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }", "Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }"] }
# 007bb Instruction { source: "if t18 != t19 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x51), Register(0x61)], resolved: None }
15 51 61 
# 007be Instruction { source: "if t18 != t19 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_if_else_0_5)], resolved: None }
72 e2 07 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t18 != t19 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\\\"ch\\\") }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_if_true_0_4)], resolved: None }
# :main_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }"] }
# main_if_true_0_4
# t20 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t20 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# t21 <- 0n113/0x71u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Number(U8, 113)", "Number(U8, 113)"] }
# 007c2 Instruction { source: "t21 <- 0n113/0x71u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Number(U8, 113)\", \"Number(U8, 113)\"] }", opcode: LoadImm8, args: [Register(0x61), Constant8(0x71=113)], resolved: None }
04 61 71 
# if t20 == t21 then 'main_if_true_0_7' else 'main_if_else_0_8'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }"] }
# 007c5 Instruction { source: "if t20 == t21 then 'main_if_true_0_7' else 'main_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: Cmp8, args: [Register(0x51), Register(0x61)], resolved: None }
15 51 61 
# 007c8 Instruction { source: "if t20 == t21 then 'main_if_true_0_7' else 'main_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JzImm, args: [Label24(main_if_true_0_7)], resolved: None }
72 d0 07 00 
# 007cc Instruction { source: "if t20 == t21 then 'main_if_true_0_7' else 'main_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_0_8)], resolved: None }
70 dc 07 00 
# :main_if_true_0_7
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }"] }
# main_if_true_0_7
# t22 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 007d0 Instruction { source: "t22 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x51), Constant8(0x00=0)], resolved: None }
04 51 00 
# return Some(t22)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 007d3 Instruction { source: "return Some(t22)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x51), Register(0x00)], resolved: None }
0b 51 00 
# 007d6 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto main_if_end_6
# 	SourceContext { contexts: [] }
# 007d8 Instruction { source: "goto main_if_end_6\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_6)], resolved: None }
70 dc 07 00 
# :main_if_else_0_8
# 	SourceContext { contexts: [] }
# main_if_else_0_8
# :main_if_end_6
# 	SourceContext { contexts: [] }
# main_if_end_6
# t23 <- ch U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t23 <- ch U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# ttyout <- t23
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"ch\") }"] }
# 007dc Instruction { source: "ttyout <- t23\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"ch\\\") }\"] }", opcode: Out0, args: [Register(0x51)], resolved: None }
68 51 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 007de Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 e2 07 00 
# :main_if_else_0_5
# 	SourceContext { contexts: [] }
# main_if_else_0_5
# :main_if_end_3
# 	SourceContext { contexts: [] }
# main_if_end_3
# goto main_while_predicate_0
# 	SourceContext { contexts: [] }
# 007e2 Instruction { source: "goto main_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_while_predicate_0)], resolved: None }
70 1e 07 00 
# :main_while_end_2
# 	SourceContext { contexts: [] }
# main_while_end_2
# :function_end_main
# 	SourceContext { contexts: [] }
# function_end_main
# Unreachable
# 	SourceContext { contexts: [] }
# 007e6 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
