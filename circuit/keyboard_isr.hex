v2.0 raw
# In IlFunctionId("KeyBoard_init"), optimizing round #0
# In IlFunctionId("Keyboard_poll"), optimizing round #0
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("Keyboard_poll"), optimizing round #1
# In IlFunctionId("Keyboard_poll"), in block from 38..=57, removing repetitive write at 51 because it is the same as at 41: ta97f <- 0n0/0x00u8 
# In IlFunctionId("Keyboard_poll"), in block from 38..=57, removing repetitive write at 55 because it is the same as at 51: ta97f <- 0n0/0x00u8 
# In IlFunctionId("Keyboard_poll"), optimizing round #2
# In IlFunctionId("delay"), optimizing round #0
# In IlFunctionId("getc"), optimizing round #0
# In IlFunctionId("getchar"), optimizing round #0
# In IlFunctionId("getchar"), resolved the constant val `Number(0n987144/0x000f1008u32)` for var `t0`.
# In IlFunctionId("getchar"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("getchar"), optimizing round #1
# In IlFunctionId("globals"), optimizing round #0
# In IlFunctionId("globals"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t4206`.
# In IlFunctionId("globals"), optimizing round #1
# In IlFunctionId("handle_ps2"), optimizing round #0
# In IlFunctionId("handle_ps2"), in block from 33..=54, removing repetitive write at 47 because it is the same as at 36: ta97f <- 0n0/0x00u8 
# In IlFunctionId("handle_ps2"), in block from 33..=54, removing repetitive write at 52 because it is the same as at 47: ta97f <- 0n0/0x00u8 
# In IlFunctionId("handle_ps2"), optimizing round #1
# In IlFunctionId("handle_tty"), optimizing round #0
# In IlFunctionId("isr"), optimizing round #0
# In IlFunctionId("lcd_draw_char"), optimizing round #0
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `td0f3` - which is also never modified. Replacing refs to latter with the former and deleting the copy: td0f3 <- i U8
# In IlFunctionId("lcd_draw_char"), optimizing round #1
# In IlFunctionId("lcd_draw_char"), optimizing round #2
# In IlFunctionId("lcd_init"), optimizing round #0
# In IlFunctionId("lcd_init"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_init"), optimizing round #1
# In IlFunctionId("lcd_logical_to_physical"), optimizing round #0
# In IlFunctionId("lcd_putc"), optimizing round #0
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t1`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t2`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t3`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t4`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t5`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t6`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t7`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t8`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t9`.
# In IlFunctionId("lcd_putc"), optimizing round #1
# In IlFunctionId("lcd_putc"), at #11, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #10, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t1 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #16, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t2] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #15, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t2 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #25, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t3] <- tefac U8 -> mem[t0] <- tefac U8
# In IlFunctionId("lcd_putc"), at #21, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t3 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #23, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t4] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #22, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t4 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #31, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t5] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #30, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #37, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t6] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #36, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t6 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #44, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t7] <- tefac U8 -> mem[t0] <- tefac U8
# In IlFunctionId("lcd_putc"), at #40, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t7 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #42, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t8] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #41, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t8 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #47, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t9] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #46, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t9 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), optimizing round #2
# In IlFunctionId("lcd_putc"), optimizing round #3
# In IlFunctionId("lcd_putc"), in block from 0..=26, removing repetitive write at 10 because it is the same as at 4: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 0..=26, removing repetitive write at 15 because it is the same as at 10: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 0..=26, removing repetitive write at 21 because it is the same as at 15: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 0..=26, removing repetitive write at 22 because it is the same as at 21: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 28..=39, removing repetitive write at 36 because it is the same as at 30: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 39..=51, removing repetitive write at 41 because it is the same as at 40: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 39..=51, removing repetitive write at 46 because it is the same as at 41: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), optimizing round #4
# In IlFunctionId("lcd_scroll_up"), optimizing round #0
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t1`.
# In IlFunctionId("lcd_scroll_up"), optimizing round #1
# In IlFunctionId("lcd_scroll_up"), in block from 36..=57, removing repetitive write at 53 because it is the same as at 47: tdf3b <- 0n32/0x20u8 
# In IlFunctionId("lcd_scroll_up"), in block from 36..=57, removing repetitive write at 56 because it is the same as at 53: tdf3b <- 0n32/0x20u8 
# In IlFunctionId("lcd_scroll_up"), optimizing round #2
# In IlFunctionId("lcd_scroll_up"), at #2, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_scroll_up"), at #1, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t1 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_scroll_up"), optimizing round #3
# In IlFunctionId("lcd_scroll_up"), optimizing round #4
# In IlFunctionId("lcd_scroll_up"), in block from 0..=30, removing repetitive write at 1 because it is the same as at 0: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_scroll_up"), optimizing round #5
# In IlFunctionId("main"), optimizing round #0
# In IlFunctionId("main"), in block from 0..=11, removing repetitive write at 7 because it is the same as at 3: ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), in block from 18..=27, removing repetitive write at 24 because it is the same as at 23: ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), in block from 27..=38, removing repetitive write at 36 because it is the same as at 29: ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), optimizing round #1
# In IlFunctionId("parseHex"), optimizing round #0
# In IlFunctionId("parseHexNibble"), optimizing round #0
# In IlFunctionId("printHex"), optimizing round #0
# In IlFunctionId("printHexDigit"), optimizing round #0
# In IlFunctionId("printHexTest"), optimizing round #0
# In IlFunctionId("printHexTest"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U8
# In IlFunctionId("printHexTest"), optimizing round #1
# In IlFunctionId("printHexTest"), optimizing round #2
# In IlFunctionId("println"), optimizing round #0
# In IlFunctionId("putc"), optimizing round #0
# In IlFunctionId("putc"), resolved the constant val `Number(0n987228/0x000f105cu32)` for var `t0`.
# In IlFunctionId("putc"), optimizing round #1
# In IlFunctionId("queue_init"), optimizing round #0
# In IlFunctionId("queue_pop"), optimizing round #0
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_pop"), optimizing round #1
# In IlFunctionId("queue_pop"), optimizing round #2
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_pop"), optimizing round #3
# In IlFunctionId("queue_pop"), optimizing round #4
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_pop"), optimizing round #5
# In IlFunctionId("queue_pop"), optimizing round #6
# In IlFunctionId("queue_push"), optimizing round #0
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_push"), optimizing round #1
# In IlFunctionId("queue_push"), optimizing round #2
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_push"), optimizing round #3
# In IlFunctionId("queue_push"), optimizing round #4
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_push"), optimizing round #5
# In IlFunctionId("queue_push"), optimizing round #6
# In IlFunctionId("queue_push"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U8
# In IlFunctionId("queue_push"), optimizing round #7
# In IlFunctionId("queue_push"), optimizing round #8
# In IlFunctionId("readline"), optimizing round #0
# In IlFunctionId("readline"), in block from 0..=5, removing repetitive write at 2 because it is the same as at 1: ta97f <- 0n0/0x00u8 
# In IlFunctionId("readline"), optimizing round #1
# In IlFunctionId("stdio_init"), optimizing round #0
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987228/0x000f105cu32)` for var `t0`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987144/0x000f1008u32)` for var `t1`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("stdio_init"), optimizing round #1
# In IlFunctionId("stdio_init"), in block from 0..=7, removing repetitive write at 4 because it is the same as at 1: ta11a <- 0n1/0x01u8 
# In IlFunctionId("stdio_init"), optimizing round #2
# In IlFunctionId("test_delay"), optimizing round #0
# In IlFunctionId("test_delay"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U32
# In IlFunctionId("test_delay"), optimizing round #1
# In IlFunctionId("test_delay"), optimizing round #2
# In IlFunctionId("test_echoline"), optimizing round #0
# In IlFunctionId("handle_ps2"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `g`.
# In IlFunctionId("handle_ps2"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t7d0e`.
# In IlFunctionId("handle_ps2"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t938b`.
# In IlFunctionId("handle_ps2"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `tbb6d`.
# In IlFunctionId("handle_ps2"), resolved the constant val `Number(0n987924/0x000f1314u32)` for var `td3f9`.
# In IlFunctionId("handle_ps2"), optimizing round #0
# In IlFunctionId("handle_ps2"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_handle_ps2_queue_push_25_s`.
# In IlFunctionId("handle_ps2"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_handle_ps2_queue_push_25_t4d4f`.
# In IlFunctionId("handle_ps2"), resolved the constant val `Number(0n987916/0x000f130cu32)` for var `inline_handle_ps2_queue_push_25_tc1ff`.
# In IlFunctionId("handle_ps2"), resolved the constant val `Number(0n987920/0x000f1310u32)` for var `tb70e`.
# In IlFunctionId("handle_ps2"), optimizing round #1
# In IlFunctionId("handle_ps2"), replacing `g <- inline_handle_ps2_globals_1_t4206 U32` with constant `g <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
# In IlFunctionId("handle_ps2"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# In IlFunctionId("handle_ps2"), replacing `t7d0e <- g U32` with constant `t7d0e <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `t938b <- t7d0e U32` with constant `t938b <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_s <- t938b U32` with constant `inline_handle_ps2_queue_push_25_s <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32` with constant `inline_handle_ps2_queue_push_25_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32 `.
# In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32` with constant `inline_handle_ps2_queue_push_25_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32 `.
# In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32` with constant `inline_handle_ps2_queue_push_25_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32 `.
# In IlFunctionId("handle_ps2"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# In IlFunctionId("handle_ps2"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
# In IlFunctionId("handle_ps2"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
# In IlFunctionId("handle_ps2"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# In IlFunctionId("handle_ps2"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# In IlFunctionId("handle_ps2"), optimizing round #2
# In IlFunctionId("handle_ps2"), var `g` is written to, but never read. Removing the instruction that writes to it: (g <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "# In IlFunctionId(\"handle_ps2\"), replacing `g <- inline_handle_ps2_globals_1_t4206 U32` with constant `g <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #3
# In IlFunctionId("handle_ps2"), optimizing round #4
# In IlFunctionId("handle_ps2"), var `inline_handle_ps2_globals_1_t4206` is written to, but never read. Removing the instruction that writes to it: (inline_handle_ps2_globals_1_t4206 <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))", "Number(0n987656/0x000f1208u32)"] })
# In IlFunctionId("handle_ps2"), optimizing round #5
# In IlFunctionId("handle_ps2"), optimizing round #6
# In IlFunctionId("handle_ps2"), var `inline_handle_ps2_queue_push_25_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_handle_ps2_queue_push_25_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"handle_ps2\"), replacing `inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32` with constant `inline_handle_ps2_queue_push_25_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #7
# In IlFunctionId("handle_ps2"), var `inline_handle_ps2_queue_push_25_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_handle_ps2_queue_push_25_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"handle_ps2\"), replacing `inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32` with constant `inline_handle_ps2_queue_push_25_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #8
# In IlFunctionId("handle_ps2"), var `inline_handle_ps2_queue_push_25_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_handle_ps2_queue_push_25_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"handle_ps2\"), replacing `inline_handle_ps2_queue_push_25_t4d4f <- inline_handle_ps2_queue_push_25_s U32` with constant `inline_handle_ps2_queue_push_25_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #9
# In IlFunctionId("handle_ps2"), optimizing round #10
# In IlFunctionId("handle_ps2"), var `t7d0e` is written to, but never read. Removing the instruction that writes to it: (t7d0e <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(35,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"handle_ps2\"), replacing `t7d0e <- g U32` with constant `t7d0e <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #11
# In IlFunctionId("handle_ps2"), optimizing round #12
# In IlFunctionId("handle_ps2"), var `t938b` is written to, but never read. Removing the instruction that writes to it: (t938b <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(35,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "# In IlFunctionId(\"handle_ps2\"), replacing `t938b <- t7d0e U32` with constant `t938b <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #13
# In IlFunctionId("handle_ps2"), optimizing round #14
# In IlFunctionId("handle_ps2"), var `tbb6d` is written to, but never read. Removing the instruction that writes to it: (tbb6d <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(55,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"handle_ps2\"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #15
# In IlFunctionId("handle_ps2"), var `tbb6d` is written to, but never read. Removing the instruction that writes to it: (tbb6d <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(55,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(0n1/0x01u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"handle_ps2\"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #16
# In IlFunctionId("handle_ps2"), var `tbb6d` is written to, but never read. Removing the instruction that writes to it: (tbb6d <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(43,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"handle_ps2\"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #17
# In IlFunctionId("handle_ps2"), var `tbb6d` is written to, but never read. Removing the instruction that writes to it: (tbb6d <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(43,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"handle_ps2\"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #18
# In IlFunctionId("handle_ps2"), var `tbb6d` is written to, but never read. Removing the instruction that writes to it: (tbb6d <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(43,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(0n0/0x00u8) }", "PtrFieldDeref(\"g\", \"release_in_progress\")", "PtrFieldDeref(\"g\", \"release_in_progress\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"handle_ps2\"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #19
# In IlFunctionId("handle_ps2"), var `tbb6d` is written to, but never read. Removing the instruction that writes to it: (tbb6d <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(35,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(0n0/0x00u8) }", "PtrFieldDeref(\"g\", \"release_in_progress\")", "PtrFieldDeref(\"g\", \"release_in_progress\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"handle_ps2\"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #20
# In IlFunctionId("handle_ps2"), var `tbb6d` is written to, but never read. Removing the instruction that writes to it: (tbb6d <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(29,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(0n0/0x00u8) }", "PtrFieldDeref(\"g\", \"shift_held\")", "PtrFieldDeref(\"g\", \"shift_held\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"handle_ps2\"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_ps2"), optimizing round #21
# In IlFunctionId("handle_ps2"), optimizing round #22
# In IlFunctionId("handle_ps2"), removing no-op goto instruction #41: goto inline_handle_ps2_queue_push_25_function_end_queue_push
# In IlFunctionId("handle_ps2"), removing no-op goto instruction #0: goto inline_handle_ps2_globals_1_function_end_globals
# In IlFunctionId("handle_ps2"), optimizing round #23
# In IlFunctionId("handle_ps2"), in block from 15..=41, removing repetitive write at 35 because it is the same as at 30: inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32 
# In IlFunctionId("handle_ps2"), in block from 15..=41, removing repetitive write at 36 because it is the same as at 35: inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32 
# In IlFunctionId("handle_ps2"), optimizing round #24
# In IlFunctionId("handle_tty"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `g`.
# In IlFunctionId("handle_tty"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t7d0e`.
# In IlFunctionId("handle_tty"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t938b`.
# In IlFunctionId("handle_tty"), optimizing round #0
# In IlFunctionId("handle_tty"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_handle_tty_queue_push_26_s`.
# In IlFunctionId("handle_tty"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_handle_tty_queue_push_26_t4d4f`.
# In IlFunctionId("handle_tty"), resolved the constant val `Number(0n987916/0x000f130cu32)` for var `inline_handle_tty_queue_push_26_tc1ff`.
# In IlFunctionId("handle_tty"), optimizing round #1
# In IlFunctionId("handle_tty"), replacing `g <- inline_handle_tty_globals_2_t4206 U32` with constant `g <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_tty"), replacing `t7d0e <- g U32` with constant `t7d0e <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_tty"), replacing `t938b <- t7d0e U32` with constant `t938b <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_s <- t938b U32` with constant `inline_handle_tty_queue_push_26_s <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32` with constant `inline_handle_tty_queue_push_26_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32 `.
# In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32` with constant `inline_handle_tty_queue_push_26_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32 `.
# In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32` with constant `inline_handle_tty_queue_push_26_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32 `.
# In IlFunctionId("handle_tty"), optimizing round #2
# In IlFunctionId("handle_tty"), var `g` is written to, but never read. Removing the instruction that writes to it: (g <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "# In IlFunctionId(\"handle_tty\"), replacing `g <- inline_handle_tty_globals_2_t4206 U32` with constant `g <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_tty"), optimizing round #3
# In IlFunctionId("handle_tty"), optimizing round #4
# In IlFunctionId("handle_tty"), var `inline_handle_tty_globals_2_t4206` is written to, but never read. Removing the instruction that writes to it: (inline_handle_tty_globals_2_t4206 <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))", "Number(0n987656/0x000f1208u32)"] })
# In IlFunctionId("handle_tty"), optimizing round #5
# In IlFunctionId("handle_tty"), optimizing round #6
# In IlFunctionId("handle_tty"), var `inline_handle_tty_queue_push_26_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_handle_tty_queue_push_26_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"handle_tty\"), replacing `inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32` with constant `inline_handle_tty_queue_push_26_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_tty"), optimizing round #7
# In IlFunctionId("handle_tty"), var `inline_handle_tty_queue_push_26_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_handle_tty_queue_push_26_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"handle_tty\"), replacing `inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32` with constant `inline_handle_tty_queue_push_26_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_tty"), optimizing round #8
# In IlFunctionId("handle_tty"), var `inline_handle_tty_queue_push_26_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_handle_tty_queue_push_26_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"handle_tty\"), replacing `inline_handle_tty_queue_push_26_t4d4f <- inline_handle_tty_queue_push_26_s U32` with constant `inline_handle_tty_queue_push_26_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_tty"), optimizing round #9
# In IlFunctionId("handle_tty"), optimizing round #10
# In IlFunctionId("handle_tty"), var `t7d0e` is written to, but never read. Removing the instruction that writes to it: (t7d0e <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(71,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"handle_tty\"), replacing `t7d0e <- g U32` with constant `t7d0e <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_tty"), optimizing round #11
# In IlFunctionId("handle_tty"), optimizing round #12
# In IlFunctionId("handle_tty"), var `t938b` is written to, but never read. Removing the instruction that writes to it: (t938b <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(71,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "# In IlFunctionId(\"handle_tty\"), replacing `t938b <- t7d0e U32` with constant `t938b <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("handle_tty"), optimizing round #13
# In IlFunctionId("handle_tty"), optimizing round #14
# In IlFunctionId("handle_tty"), removing no-op goto instruction #15: goto inline_handle_tty_queue_push_26_function_end_queue_push
# In IlFunctionId("handle_tty"), removing no-op goto instruction #0: goto inline_handle_tty_globals_2_function_end_globals
# In IlFunctionId("handle_tty"), optimizing round #15
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `g`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_19_g`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_19_t7d0e`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_19_t938b`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_20_g`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_20_t7d0e`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_20_t938b`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t7d0e`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t938b`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `tbb6d`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987924/0x000f1314u32)` for var `td3f9`.
# In IlFunctionId("main"), optimizing round #0
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_19_inline_getc_queue_pop_18_s`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987912/0x000f1308u32)` for var `inline_main_getc_19_inline_getc_queue_pop_18_tb702`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987916/0x000f130cu32)` for var `inline_main_getc_19_inline_getc_queue_pop_18_tc1ff`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_20_inline_getc_queue_pop_18_s`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987912/0x000f1308u32)` for var `inline_main_getc_20_inline_getc_queue_pop_18_tb702`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987916/0x000f130cu32)` for var `inline_main_getc_20_inline_getc_queue_pop_18_tc1ff`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_queue_init_16_s`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `inline_main_queue_init_16_t4d4f`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987912/0x000f1308u32)` for var `inline_main_queue_init_16_tb702`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987916/0x000f130cu32)` for var `inline_main_queue_init_16_tc1ff`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987920/0x000f1310u32)` for var `tb70e`.
# In IlFunctionId("main"), optimizing round #1
# In IlFunctionId("main"), replacing `g <- inline_main_globals_3_t4206 U32` with constant `g <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
# In IlFunctionId("main"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# In IlFunctionId("main"), replacing `t7d0e <- g U32` with constant `t7d0e <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `t938b <- t7d0e U32` with constant `t938b <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_queue_init_16_s <- t938b U32` with constant `inline_main_queue_init_16_s <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_queue_init_16_t4d4f <- inline_main_queue_init_16_s U32` with constant `inline_main_queue_init_16_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_queue_init_16_tb702 <- inline_main_queue_init_16_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_queue_init_16_tb702 <- 0n987912/0x000f1308u32 `.
# In IlFunctionId("main"), replacing `inline_main_queue_init_16_t4d4f <- inline_main_queue_init_16_s U32` with constant `inline_main_queue_init_16_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_queue_init_16_tc1ff <- inline_main_queue_init_16_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_queue_init_16_tc1ff <- 0n987916/0x000f130cu32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_g <- inline_main_getc_19_inline_getc_globals_0_t4206 U32` with constant `inline_main_getc_19_g <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_t7d0e <- inline_main_getc_19_g U32` with constant `inline_main_getc_19_t7d0e <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_t938b <- inline_main_getc_19_t7d0e U32` with constant `inline_main_getc_19_t938b <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_s <- inline_main_getc_19_t938b U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_g <- inline_main_getc_20_inline_getc_globals_0_t4206 U32` with constant `inline_main_getc_20_g <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_t7d0e <- inline_main_getc_20_g U32` with constant `inline_main_getc_20_t7d0e <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_t938b <- inline_main_getc_20_t7d0e U32` with constant `inline_main_getc_20_t938b <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_s <- inline_main_getc_20_t938b U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `.
# In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# In IlFunctionId("main"), optimizing round #2
# In IlFunctionId("main"), var `g` is written to, but never read. Removing the instruction that writes to it: (g <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "# In IlFunctionId(\"main\"), replacing `g <- inline_main_globals_3_t4206 U32` with constant `g <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #3
# In IlFunctionId("main"), optimizing round #4
# In IlFunctionId("main"), var `inline_main_getc_19_g` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_19_g <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_19_g <- inline_main_getc_19_inline_getc_globals_0_t4206 U32` with constant `inline_main_getc_19_g <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #5
# In IlFunctionId("main"), optimizing round #6
# In IlFunctionId("main"), var `inline_main_getc_19_inline_getc_globals_0_t4206` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_19_inline_getc_globals_0_t4206 <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))", "Number(0n987656/0x000f1208u32)"] })
# In IlFunctionId("main"), optimizing round #7
# In IlFunctionId("main"), optimizing round #8
# In IlFunctionId("main"), var `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #9
# In IlFunctionId("main"), var `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #10
# In IlFunctionId("main"), var `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(18,5)), SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #11
# In IlFunctionId("main"), var `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #12
# In IlFunctionId("main"), var `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_19_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #13
# In IlFunctionId("main"), optimizing round #14
# In IlFunctionId("main"), var `inline_main_getc_19_t7d0e` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_19_t7d0e <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(89,5)), SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_19_t7d0e <- inline_main_getc_19_g U32` with constant `inline_main_getc_19_t7d0e <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #15
# In IlFunctionId("main"), optimizing round #16
# In IlFunctionId("main"), var `inline_main_getc_19_t938b` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_19_t938b <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(89,5)), SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_19_t938b <- inline_main_getc_19_t7d0e U32` with constant `inline_main_getc_19_t938b <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #17
# In IlFunctionId("main"), optimizing round #18
# In IlFunctionId("main"), var `inline_main_getc_20_g` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_20_g <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_20_g <- inline_main_getc_20_inline_getc_globals_0_t4206 U32` with constant `inline_main_getc_20_g <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #19
# In IlFunctionId("main"), optimizing round #20
# In IlFunctionId("main"), var `inline_main_getc_20_inline_getc_globals_0_t4206` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_20_inline_getc_globals_0_t4206 <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))", "Number(0n987656/0x000f1208u32)"] })
# In IlFunctionId("main"), optimizing round #21
# In IlFunctionId("main"), optimizing round #22
# In IlFunctionId("main"), var `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #23
# In IlFunctionId("main"), var `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #24
# In IlFunctionId("main"), var `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(18,5)), SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #25
# In IlFunctionId("main"), var `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #26
# In IlFunctionId("main"), var `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- inline_main_getc_20_inline_getc_queue_pop_18_s U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #27
# In IlFunctionId("main"), optimizing round #28
# In IlFunctionId("main"), var `inline_main_getc_20_t7d0e` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_20_t7d0e <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(89,5)), SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_20_t7d0e <- inline_main_getc_20_g U32` with constant `inline_main_getc_20_t7d0e <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #29
# In IlFunctionId("main"), optimizing round #30
# In IlFunctionId("main"), var `inline_main_getc_20_t938b` is written to, but never read. Removing the instruction that writes to it: (inline_main_getc_20_t938b <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(89,5)), SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "# In IlFunctionId(\"main\"), replacing `inline_main_getc_20_t938b <- inline_main_getc_20_t7d0e U32` with constant `inline_main_getc_20_t938b <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #31
# In IlFunctionId("main"), optimizing round #32
# In IlFunctionId("main"), var `inline_main_globals_3_t4206` is written to, but never read. Removing the instruction that writes to it: (inline_main_globals_3_t4206 <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(14,5)), SourceContext { contexts: ["Return { value: Some(AddressOf(Ident(\"g\"))) }", "AddressOf(Ident(\"g\"))", "AddressOf(Ident(\"g\"))", "Number(0n987656/0x000f1208u32)"] })
# In IlFunctionId("main"), optimizing round #33
# In IlFunctionId("main"), optimizing round #34
# In IlFunctionId("main"), var `inline_main_queue_init_16_s` is written to, but never read. Removing the instruction that writes to it: (inline_main_queue_init_16_s <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(98,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "# In IlFunctionId(\"main\"), replacing `inline_main_queue_init_16_s <- t938b U32` with constant `inline_main_queue_init_16_s <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #35
# In IlFunctionId("main"), optimizing round #36
# In IlFunctionId("main"), var `inline_main_queue_init_16_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_queue_init_16_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(9,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_queue_init_16_t4d4f <- inline_main_queue_init_16_s U32` with constant `inline_main_queue_init_16_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #37
# In IlFunctionId("main"), var `inline_main_queue_init_16_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_queue_init_16_t4d4f <- 0n987656/0x000f1208u32 , Some('/lutcomp/programs/lib/Queue.j':(8,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_queue_init_16_t4d4f <- inline_main_queue_init_16_s U32` with constant `inline_main_queue_init_16_t4d4f <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #38
# In IlFunctionId("main"), optimizing round #39
# In IlFunctionId("main"), var `t7d0e` is written to, but never read. Removing the instruction that writes to it: (t7d0e <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(98,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Struct(\"Queue\")), value: Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") } }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"main\"), replacing `t7d0e <- g U32` with constant `t7d0e <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #40
# In IlFunctionId("main"), optimizing round #41
# In IlFunctionId("main"), var `t938b` is written to, but never read. Removing the instruction that writes to it: (t938b <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(98,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\"))] })", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "AddressOf(PtrFieldDeref(\"g\", \"stdin\"))", "# In IlFunctionId(\"main\"), replacing `t938b <- t7d0e U32` with constant `t938b <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #42
# In IlFunctionId("main"), optimizing round #43
# In IlFunctionId("main"), var `tbb6d` is written to, but never read. Removing the instruction that writes to it: (tbb6d <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(97,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n268/0x0000010cu32))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"main\"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #44
# In IlFunctionId("main"), var `tbb6d` is written to, but never read. Removing the instruction that writes to it: (tbb6d <- 0n987656/0x000f1208u32 , Some('programs/test/keyboard_isr.j':(96,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }, Number(0n264/0x00000108u32))", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Cast { old_type: Some(Ptr(Struct(\"Globals\"))), new_type: Number(U32), value: Ident(\"g\") }", "Ident(\"g\")", "# In IlFunctionId(\"main\"), replacing `tbb6d <- g U32` with constant `tbb6d <- 0n987656/0x000f1208u32 `."] })
# In IlFunctionId("main"), optimizing round #45
# In IlFunctionId("main"), optimizing round #46
# In IlFunctionId("main"), removing no-op goto instruction #96: goto inline_main_getc_20_function_end_getc
# In IlFunctionId("main"), removing no-op goto instruction #91: goto inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop
# In IlFunctionId("main"), removing no-op goto instruction #63: goto inline_main_getc_20_inline_getc_globals_0_function_end_globals
# In IlFunctionId("main"), removing no-op goto instruction #51: goto inline_main_getc_19_function_end_getc
# In IlFunctionId("main"), removing no-op goto instruction #46: goto inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop
# In IlFunctionId("main"), removing no-op goto instruction #18: goto inline_main_getc_19_inline_getc_globals_0_function_end_globals
# In IlFunctionId("main"), removing no-op goto instruction #13: goto inline_main_queue_init_16_function_end_queue_init
# In IlFunctionId("main"), removing no-op goto instruction #0: goto inline_main_globals_3_function_end_globals
# In IlFunctionId("main"), optimizing round #47
# In IlFunctionId("main"), in block from 0..=13, removing repetitive write at 10 because it is the same as at 7: inline_main_queue_init_16_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), in block from 28..=44, removing repetitive write at 36 because it is the same as at 31: inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# In IlFunctionId("main"), in block from 28..=44, removing repetitive write at 37 because it is the same as at 36: inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# In IlFunctionId("main"), in block from 70..=86, removing repetitive write at 78 because it is the same as at 73: inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# In IlFunctionId("main"), in block from 70..=86, removing repetitive write at 79 because it is the same as at 78: inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# In IlFunctionId("main"), optimizing round #48
# In IlFunctionId("main"), at #73, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_s with inline_main_getc_19_inline_getc_queue_pop_18_s as they share the same const value: Number(0n987656/0x000f1208u32). inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_20_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) -> inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469)
# In IlFunctionId("main"), at #57, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_s with inline_main_getc_19_inline_getc_queue_pop_18_s as they share the same const value: Number(0n987656/0x000f1208u32). inline_main_getc_20_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32  -> inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32 
# In IlFunctionId("main"), at #65, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_ta97f U8 -> inline_main_getc_20_ch <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# In IlFunctionId("main"), at #64, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getc_20_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #59, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
# In IlFunctionId("main"), at #71, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
# In IlFunctionId("main"), at #75, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
# In IlFunctionId("main"), at #77, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_te468 U8 -> mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_te468 U8
# In IlFunctionId("main"), at #58, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  -> inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# In IlFunctionId("main"), at #70, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  -> inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# In IlFunctionId("main"), at #61, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tc1ff] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8
# In IlFunctionId("main"), at #60, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  -> inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 
# In IlFunctionId("main"), at #8, replacing reference to inline_main_queue_init_16_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_main_queue_init_16_tb702] <- inline_main_queue_init_16_ta97f U8 -> mem[inline_main_queue_init_16_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# In IlFunctionId("main"), at #10, replacing reference to inline_main_queue_init_16_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_main_queue_init_16_tc1ff] <- inline_main_queue_init_16_ta97f U8 -> mem[inline_main_queue_init_16_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# In IlFunctionId("main"), at #7, replacing reference to inline_main_queue_init_16_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_queue_init_16_ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #8, replacing reference to inline_main_queue_init_16_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). mem[inline_main_queue_init_16_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 -> mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# In IlFunctionId("main"), at #6, replacing reference to inline_main_queue_init_16_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_queue_init_16_tb702 <- 0n987912/0x000f1308u32  -> inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# In IlFunctionId("main"), at #10, replacing reference to inline_main_queue_init_16_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). mem[inline_main_queue_init_16_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 -> mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# In IlFunctionId("main"), at #9, replacing reference to inline_main_queue_init_16_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). inline_main_queue_init_16_tc1ff <- 0n987916/0x000f130cu32  -> inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 
# In IlFunctionId("main"), at #3, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[tb70e] <- ta97f U8 -> mem[tb70e] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# In IlFunctionId("main"), at #5, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[td3f9] <- ta97f U8 -> mem[td3f9] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# In IlFunctionId("main"), at #53, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'main_while_body_4' else 'main_while_end_5' -> if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'main_while_end_5'
# In IlFunctionId("main"), at #87, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if tdcd9 != ta97f then 'main_if_true_0_7' else 'main_if_else_0_8' -> if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_else_0_8'
# In IlFunctionId("main"), at #93, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_main_getc_19_inline_getc_queue_pop_18_ta97f)
# In IlFunctionId("main"), at #2, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #52, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #86, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), optimizing round #49
# In IlFunctionId("main"), optimizing round #50
# In IlFunctionId("main"), in block from 0..=12, removing repetitive write at 7 because it is the same as at 2: inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), optimizing round #51
# IlFunctionId("disable_interrupts")()
#  Unreachable # None
#  return None # None
#  :function_end_disable_interrupts # None
#  Unreachable # None

# IlFunctionId("enable_interrupts")()
#  Unreachable # None
#  return None # None
#  :function_end_enable_interrupts # None
#  Unreachable # None

# IlFunctionId("handle_ps2")()
#  :inline_handle_ps2_globals_1_function_end_globals # None
#  Some(code) <= call io_read2() # Some('programs/test/keyboard_isr.j':(24,5))
#  tf68c <- code U8 # Some('programs/test/keyboard_isr.j':(28,5))
#  t528d U32 <- tf68c U8 # Some('programs/test/keyboard_isr.j':(28,5))
#  index <- t528d Multiply Number(0n4/0x00000004u32) # Some('programs/test/keyboard_isr.j':(28,5))
#  tb70e <- 0n987920/0x000f1310u32  # Some('programs/test/keyboard_isr.j':(29,5))
#  t7905 <- mem[tb70e] U8 # Some('programs/test/keyboard_isr.j':(29,5))
#  ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(29,5))
#  if t7905 != ta97f then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2' # Some('programs/test/keyboard_isr.j':(29,5))
#  :handle_ps2_if_true_0_1 # Some('programs/test/keyboard_isr.j':(29,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('programs/test/keyboard_isr.j':(29,5))
#  td18e <- index U32 # Some('programs/test/keyboard_isr.j':(29,5))
#  t674 <- td18e Add Number(0n1/0x00000001u32) # Some('programs/test/keyboard_isr.j':(29,5))
#  t23a <- t4c8b Add Var(t674) # Some('programs/test/keyboard_isr.j':(29,5))
#  ch <- mem[t23a] U8 # Some('programs/test/keyboard_isr.j':(29,5))
#  goto handle_ps2_if_end_0 # Some('programs/test/keyboard_isr.j':(29,5))
#  :handle_ps2_if_else_0_2 # Some('programs/test/keyboard_isr.j':(29,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('programs/test/keyboard_isr.j':(29,5))
#  td18e <- index U32 # Some('programs/test/keyboard_isr.j':(29,5))
#  tb62e <- t4c8b Add Var(td18e) # Some('programs/test/keyboard_isr.j':(29,5))
#  ch <- mem[tb62e] U8 # Some('programs/test/keyboard_isr.j':(29,5))
#  :handle_ps2_if_end_0 # Some('programs/test/keyboard_isr.j':(29,5))
#  td3f9 <- 0n987924/0x000f1314u32  # Some('programs/test/keyboard_isr.j':(35,5))
#  t75f <- mem[td3f9] U8 # Some('programs/test/keyboard_isr.j':(35,5))
#  ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(35,5))
#  if t75f == ta97f then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_else_0_5' # Some('programs/test/keyboard_isr.j':(35,5))
#  :handle_ps2_if_true_0_4 # Some('programs/test/keyboard_isr.j':(35,5))
#  tdcd9 <- ch U8 # Some('programs/test/keyboard_isr.j':(35,5))
#  inline_handle_ps2_queue_push_25_s <- 0n987656/0x000f1208u32  # Some('programs/test/keyboard_isr.j':(35,5))
#  inline_handle_ps2_queue_push_25_n <- tdcd9 U8 # Some('programs/test/keyboard_isr.j':(35,5))
#  inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_handle_ps2_queue_push_25_t5bb7 U32 <- inline_handle_ps2_queue_push_25_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_handle_ps2_queue_push_25_t2187 <- inline_handle_ps2_queue_push_25_s Add Var(inline_handle_ps2_queue_push_25_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  mem[inline_handle_ps2_queue_push_25_t2187] <- inline_handle_ps2_queue_push_25_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_handle_ps2_queue_push_25_tf3c4 <- inline_handle_ps2_queue_push_25_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  mem[inline_handle_ps2_queue_push_25_tc1ff] <- inline_handle_ps2_queue_push_25_tf3c4 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  :inline_handle_ps2_queue_push_25_function_end_queue_push # None
#  goto handle_ps2_if_end_3 # Some('programs/test/keyboard_isr.j':(35,5))
#  :handle_ps2_if_else_0_5 # Some('programs/test/keyboard_isr.j':(35,5))
#  :handle_ps2_if_end_3 # Some('programs/test/keyboard_isr.j':(35,5))
#  ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(43,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('programs/test/keyboard_isr.j':(43,5))
#  td18e <- index U32 # Some('programs/test/keyboard_isr.j':(43,5))
#  te5cf <- td18e Add Number(0n2/0x00000002u32) # Some('programs/test/keyboard_isr.j':(43,5))
#  ted94 <- t4c8b Add Var(te5cf) # Some('programs/test/keyboard_isr.j':(43,5))
#  t2ca9 <- mem[ted94] U8 # Some('programs/test/keyboard_isr.j':(43,5))
#  if ta97f != t2ca9 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_else_0_8' # Some('programs/test/keyboard_isr.j':(43,5))
#  :handle_ps2_if_true_0_7 # Some('programs/test/keyboard_isr.j':(43,5))
#  td3f9 <- 0n987924/0x000f1314u32  # Some('programs/test/keyboard_isr.j':(43,5))
#  t75f <- mem[td3f9] U8 # Some('programs/test/keyboard_isr.j':(43,5))
#  if t75f != ta97f then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11' # Some('programs/test/keyboard_isr.j':(43,5))
#  :handle_ps2_if_true_0_10 # Some('programs/test/keyboard_isr.j':(43,5))
#  tb70e <- 0n987920/0x000f1310u32  # Some('programs/test/keyboard_isr.j':(43,5))
#  mem[tb70e] <- ta97f U8 # Some('programs/test/keyboard_isr.j':(43,5))
#  goto handle_ps2_if_end_9 # Some('programs/test/keyboard_isr.j':(43,5))
#  :handle_ps2_if_else_0_11 # Some('programs/test/keyboard_isr.j':(43,5))
#  tb70e <- 0n987920/0x000f1310u32  # Some('programs/test/keyboard_isr.j':(43,5))
#  ta11a <- 0n1/0x01u8  # Some('programs/test/keyboard_isr.j':(43,5))
#  mem[tb70e] <- ta11a U8 # Some('programs/test/keyboard_isr.j':(43,5))
#  :handle_ps2_if_end_9 # Some('programs/test/keyboard_isr.j':(43,5))
#  goto handle_ps2_if_end_6 # Some('programs/test/keyboard_isr.j':(43,5))
#  :handle_ps2_if_else_0_8 # Some('programs/test/keyboard_isr.j':(43,5))
#  :handle_ps2_if_end_6 # Some('programs/test/keyboard_isr.j':(43,5))
#  ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(55,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('programs/test/keyboard_isr.j':(55,5))
#  td18e <- index U32 # Some('programs/test/keyboard_isr.j':(55,5))
#  t5e63 <- td18e Add Number(0n3/0x00000003u32) # Some('programs/test/keyboard_isr.j':(55,5))
#  t6cd9 <- t4c8b Add Var(t5e63) # Some('programs/test/keyboard_isr.j':(55,5))
#  t7b09 <- mem[t6cd9] U8 # Some('programs/test/keyboard_isr.j':(55,5))
#  if ta97f != t7b09 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14' # Some('programs/test/keyboard_isr.j':(55,5))
#  :handle_ps2_if_true_0_13 # Some('programs/test/keyboard_isr.j':(55,5))
#  td3f9 <- 0n987924/0x000f1314u32  # Some('programs/test/keyboard_isr.j':(55,5))
#  ta11a <- 0n1/0x01u8  # Some('programs/test/keyboard_isr.j':(55,5))
#  mem[td3f9] <- ta11a U8 # Some('programs/test/keyboard_isr.j':(55,5))
#  goto handle_ps2_if_end_12 # Some('programs/test/keyboard_isr.j':(55,5))
#  :handle_ps2_if_else_0_14 # Some('programs/test/keyboard_isr.j':(55,5))
#  td3f9 <- 0n987924/0x000f1314u32  # Some('programs/test/keyboard_isr.j':(55,5))
#  ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(55,5))
#  mem[td3f9] <- ta97f U8 # Some('programs/test/keyboard_isr.j':(55,5))
#  :handle_ps2_if_end_12 # Some('programs/test/keyboard_isr.j':(55,5))
#  return None # None
#  :function_end_handle_ps2 # None
#  Unreachable # None

# IlFunctionId("handle_tty")()
#  :inline_handle_tty_globals_2_function_end_globals # None
#  tb816 <- ttyin # Some('programs/test/keyboard_isr.j':(71,5))
#  inline_handle_tty_queue_push_26_s <- 0n987656/0x000f1208u32  # Some('programs/test/keyboard_isr.j':(71,5))
#  inline_handle_tty_queue_push_26_n <- tb816 U8 # Some('programs/test/keyboard_isr.j':(71,5))
#  inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_handle_tty_queue_push_26_t5bb7 U32 <- inline_handle_tty_queue_push_26_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_handle_tty_queue_push_26_t2187 <- inline_handle_tty_queue_push_26_s Add Var(inline_handle_tty_queue_push_26_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  mem[inline_handle_tty_queue_push_26_t2187] <- inline_handle_tty_queue_push_26_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32  # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32  # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_handle_tty_queue_push_26_tf3c4 <- inline_handle_tty_queue_push_26_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  mem[inline_handle_tty_queue_push_26_tc1ff] <- inline_handle_tty_queue_push_26_tf3c4 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  :inline_handle_tty_queue_push_26_function_end_queue_push # None
#  return None # None
#  :function_end_handle_tty # None
#  Unreachable # None

# IlFunctionId("io_read2")()
#  Unreachable # None
#  :function_end_io_read2 # None
#  Unreachable # None

# IlFunctionId("io_ready_to_read")()
#  Unreachable # None
#  :function_end_io_ready_to_read # None
#  Unreachable # None

# IlFunctionId("isr")()
#  Some(rtr) <= call io_ready_to_read() # Some('programs/test/keyboard_isr.j':(75,5))
#  t59ef <- rtr U8 # Some('programs/test/keyboard_isr.j':(77,5))
#  t864 <- t59ef BitwiseAnd Number(0n1/0x01u8) # Some('programs/test/keyboard_isr.j':(77,5))
#  ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(77,5))
#  if t864 != ta97f then 'isr_if_true_0_1' else 'isr_if_else_0_2' # Some('programs/test/keyboard_isr.j':(77,5))
#  :isr_if_true_0_1 # Some('programs/test/keyboard_isr.j':(77,5))
#  None <= call handle_tty() # Some('programs/test/keyboard_isr.j':(77,5))
#  goto isr_if_end_0 # Some('programs/test/keyboard_isr.j':(77,5))
#  :isr_if_else_0_2 # Some('programs/test/keyboard_isr.j':(77,5))
#  :isr_if_end_0 # Some('programs/test/keyboard_isr.j':(77,5))
#  t59ef <- rtr U8 # Some('programs/test/keyboard_isr.j':(81,5))
#  tc44e <- t59ef BitwiseAnd Number(0n4/0x04u8) # Some('programs/test/keyboard_isr.j':(81,5))
#  ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(81,5))
#  if tc44e != ta97f then 'isr_if_true_0_4' else 'isr_if_else_0_5' # Some('programs/test/keyboard_isr.j':(81,5))
#  :isr_if_true_0_4 # Some('programs/test/keyboard_isr.j':(81,5))
#  None <= call handle_ps2() # Some('programs/test/keyboard_isr.j':(81,5))
#  goto isr_if_end_3 # Some('programs/test/keyboard_isr.j':(81,5))
#  :isr_if_else_0_5 # Some('programs/test/keyboard_isr.j':(81,5))
#  :isr_if_end_3 # Some('programs/test/keyboard_isr.j':(81,5))
#  return None # None
#  :function_end_isr # None
#  Unreachable # None

# IlFunctionId("main")()
#  :inline_main_globals_3_function_end_globals # None
#  tb70e <- 0n987920/0x000f1310u32  # Some('programs/test/keyboard_isr.j':(96,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(96,5))
#  mem[tb70e] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 # Some('programs/test/keyboard_isr.j':(96,5))
#  td3f9 <- 0n987924/0x000f1314u32  # Some('programs/test/keyboard_isr.j':(97,5))
#  mem[td3f9] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 # Some('programs/test/keyboard_isr.j':(97,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  # Some('/lutcomp/programs/lib/Queue.j':(8,5))
#  mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(8,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  # Some('/lutcomp/programs/lib/Queue.j':(9,5))
#  mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(9,5))
#  :inline_main_queue_init_16_function_end_queue_init # None
#  None <= call enable_interrupts() # Some('programs/test/keyboard_isr.j':(100,5))
#  :main_while_predicate_0 # Some('programs/test/keyboard_isr.j':(102,5))
#  t5eeb <- 0n97/0x61u8  # Some('programs/test/keyboard_isr.j':(102,5))
#  :inline_main_getc_19_inline_getc_globals_0_function_end_globals # None
#  None <= call disable_interrupts() # Some('programs/test/keyboard_isr.j':(88,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32  # Some('programs/test/keyboard_isr.j':(89,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  if inline_main_getc_19_inline_getc_queue_pop_18_tb6dd == inline_main_getc_19_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2' # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  goto inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  goto inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_19_inline_getc_queue_pop_18_tb469) # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_value <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tae11] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_te468 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_te468 U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_t44ed <- inline_main_getc_19_inline_getc_queue_pop_18_value U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_t44ed U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  :inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop # None
#  None <= call enable_interrupts() # Some('programs/test/keyboard_isr.j':(90,5))
#  inline_main_getc_19_tdcd9 <- inline_main_getc_19_ch U8 # Some('programs/test/keyboard_isr.j':(91,5))
#  t4d24 <- inline_main_getc_19_tdcd9 U8 # Some('programs/test/keyboard_isr.j':(91,5))
#  :inline_main_getc_19_function_end_getc # None
#  if t5eeb != t4d24 then 'main_while_body_1' else 'main_while_end_2' # Some('programs/test/keyboard_isr.j':(102,5))
#  :main_while_body_1 # Some('programs/test/keyboard_isr.j':(102,5))
#  goto main_while_predicate_0 # Some('programs/test/keyboard_isr.j':(102,5))
#  :main_while_end_2 # Some('programs/test/keyboard_isr.j':(102,5))
#  t5eeb <- 0n97/0x61u8  # Some('programs/test/keyboard_isr.j':(105,5))
#  ttyout <- t5eeb # Some('programs/test/keyboard_isr.j':(105,5))
#  :main_while_predicate_3 # Some('programs/test/keyboard_isr.j':(107,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(107,5))
#  if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'main_while_end_5' # Some('programs/test/keyboard_isr.j':(107,5))
#  :main_while_body_4 # Some('programs/test/keyboard_isr.j':(107,5))
#  :inline_main_getc_20_inline_getc_globals_0_function_end_globals # None
#  None <= call disable_interrupts() # Some('programs/test/keyboard_isr.j':(88,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32  # Some('programs/test/keyboard_isr.j':(89,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  if inline_main_getc_20_inline_getc_queue_pop_18_tb6dd == inline_main_getc_20_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2' # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_getc_20_ch <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  goto inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  goto inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_getc_20_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_getc_20_inline_getc_queue_pop_18_value <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tae11] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_getc_20_inline_getc_queue_pop_18_te468 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_te468 U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_getc_20_inline_getc_queue_pop_18_t44ed <- inline_main_getc_20_inline_getc_queue_pop_18_value U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_t44ed U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  :inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop # None
#  None <= call enable_interrupts() # Some('programs/test/keyboard_isr.j':(90,5))
#  inline_main_getc_20_tdcd9 <- inline_main_getc_20_ch U8 # Some('programs/test/keyboard_isr.j':(91,5))
#  ch <- inline_main_getc_20_tdcd9 U8 # Some('programs/test/keyboard_isr.j':(91,5))
#  :inline_main_getc_20_function_end_getc # None
#  tdcd9 <- ch U8 # Some('programs/test/keyboard_isr.j':(107,5))
#  inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_isr.j':(107,5))
#  if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_else_0_8' # Some('programs/test/keyboard_isr.j':(107,5))
#  :main_if_true_0_7 # Some('programs/test/keyboard_isr.j':(107,5))
#  tdcd9 <- ch U8 # Some('programs/test/keyboard_isr.j':(107,5))
#  tdf6e <- 0n113/0x71u8  # Some('programs/test/keyboard_isr.j':(107,5))
#  if tdcd9 == tdf6e then 'main_if_true_0_10' else 'main_if_else_0_11' # Some('programs/test/keyboard_isr.j':(107,5))
#  :main_if_true_0_10 # Some('programs/test/keyboard_isr.j':(107,5))
#  return Some(inline_main_getc_19_inline_getc_queue_pop_18_ta97f) # Some('programs/test/keyboard_isr.j':(107,5))
#  goto main_if_end_9 # Some('programs/test/keyboard_isr.j':(107,5))
#  :main_if_else_0_11 # Some('programs/test/keyboard_isr.j':(107,5))
#  :main_if_end_9 # Some('programs/test/keyboard_isr.j':(107,5))
#  tdcd9 <- ch U8 # Some('programs/test/keyboard_isr.j':(107,5))
#  ttyout <- tdcd9 # Some('programs/test/keyboard_isr.j':(107,5))
#  goto main_if_end_6 # Some('programs/test/keyboard_isr.j':(107,5))
#  :main_if_else_0_8 # Some('programs/test/keyboard_isr.j':(107,5))
#  :main_if_end_6 # Some('programs/test/keyboard_isr.j':(107,5))
#  goto main_while_predicate_3 # Some('programs/test/keyboard_isr.j':(107,5))
#  :main_while_end_5 # Some('programs/test/keyboard_isr.j':(107,5))
#  :function_end_main # None
#  Unreachable # None


# ImageBaseAddress=0x00000000
# entry
# 00000 Init []
#       Initialzing flags and internal regs.
00 

# 00001 LoadImm32 [Register(0x0c), Constant32(0x000f0f00=986880)]
#       Initialzing stack register to 0x000f0f00.
20 0c 00 0f 0f 00 

# 00007 LoadImm32 [Register(0x10), Constant32(0x000f0f0c=986892)]
#       load address of ISR slot 0x000f0f0c into R10.
20 10 0c 0f 0f 00 

# 0000d StoreImm32 [Register(0x10), Label32(:isr)]
#       store address of ISR isr to ISR slot 0x000f0f0c into R10.
25 10 a9 05 00 00 

# 00013 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:main))
32 0c fc ff ff ff 

# 00019 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:main))
25 0c 23 00 00 00 

# 0001f JmpImm [Label24(:main)]
#       PseudoCall(Label24(:main))
70 0e 06 00 

# 00023 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:main))
32 0c 04 00 00 00 

# 00029 Halt [Constant32(0x00000000=0)]
#       Halting after return from entry function.
7e 00 00 00 00 

# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
20 
20 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
0a 
0a 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :handle_ps2
# Ret None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([16])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([16])
# Var index (Local index Number(U32) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_handle_ps2_queue_push_25_n (Arg1 n Number(U8)) Reg(U8) Some([16])
# Var inline_handle_ps2_queue_push_25_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([24, 25, 26, 27]) Number(0n987656/0x000f1208u32)
# Var inline_handle_ps2_queue_push_25_t2187 (t2187 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_handle_ps2_queue_push_25_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([28])
# Var inline_handle_ps2_queue_push_25_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_handle_ps2_queue_push_25_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([36, 37, 38, 39]) Number(0n987916/0x000f130cu32)
# Var inline_handle_ps2_queue_push_25_tf3c4 (tf3c4 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))) Reg(U8) Some([16])
# Var t23a (t23a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }) Reg(U32) Some([40, 41, 42, 43])
# Var t2ca9 (t2ca9 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))) Reg(U8) Some([16])
# Var t4c8b (t4c8b Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([40, 41, 42, 43])
# Var t528d (t528d Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }) Reg(U32) Some([40, 41, 42, 43])
# Var t5e63 (t5e63 Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) Reg(U32) Some([20, 21, 22, 23])
# Var t674 (t674 Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) Reg(U32) Some([24, 25, 26, 27])
# Var t6cd9 (t6cd9 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }) Reg(U32) Some([40, 41, 42, 43])
# Var t75f (t75f PtrFieldDeref("g", "release_in_progress")) Reg(U8) Some([44])
# Var t7905 (t7905 PtrFieldDeref("g", "shift_held")) Reg(U8) Some([16])
# Var t7b09 (t7b09 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))) Reg(U8) Some([16])
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([16]) Number(0n1/0x01u8)
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([28]) Number(0n0/0x00u8)
# Var tb62e (tb62e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([40, 41, 42, 43])
# Var tb70e (tb70e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }) Reg(U32) Some([24, 25, 26, 27]) Number(0n987920/0x000f1310u32)
# Var td18e (td18e Ident("index")) Reg(U32) Some([20, 21, 22, 23])
# Var td3f9 (td3f9 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }) Reg(U32) Some([24, 25, 26, 27]) Number(0n987924/0x000f1314u32)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([16])
# Var te5cf (te5cf Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) Reg(U32) Some([24, 25, 26, 27])
# Var ted94 (ted94 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }) Reg(U32) Some([40, 41, 42, 43])
# Var tf68c (tf68c Ident("code")) Reg(U8) Some([16])
# :inline_handle_ps2_globals_1_function_end_globals None
# inline_handle_ps2_globals_1_function_end_globals
# Some(code) <= call io_read2() Some('programs/test/keyboard_isr.j':(24,5))
# Assign { target: Ident("code"), var_type: None, value: Call(Call { function: "io_read2", parameters: [] }) }
# Call(Call { function: "io_read2", parameters: [] })
# 00433 In2 [Register(0x10)]
#       IoRead2
62 10 

# tf68c <- code U8 Some('programs/test/keyboard_isr.j':(28,5))
# Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
# Ident("code")
# optimized away noop copy Instruction { source: "tf68c <- code U8 Some('programs/test/keyboard_isr.j':(28,5))\nAssign { target: Ident(\"index\"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident(\"code\")) }\nArithmetic(Multiply, Number(0n4/0x00000004u32), Ident(\"code\"))\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"code\") }\nIdent(\"code\")\n", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# t528d U32 <- tf68c U8 Some('programs/test/keyboard_isr.j':(28,5))
# Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
# 00435 LoadImm32 [Register(0x28), Constant32(0x00000000=0)]
#       Zero-pad for t528d U32 <- tf68c U8 Some('programs/test/keyboard_isr.j':(28,5))
#       Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
20 28 00 00 00 00 

# 0043b Copy8 [Register(0x10), Register(0x28)]
#       t528d U32 <- tf68c U8 Some('programs/test/keyboard_isr.j':(28,5))
#       Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
0b 10 28 

# index <- t528d Multiply Number(0n4/0x00000004u32) Some('programs/test/keyboard_isr.j':(28,5))
# Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# 0043e LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('programs/test/keyboard_isr.j':(28,5))
#       Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
20 00 04 00 00 00 

# 00444 Mul8_16 [Register(0x28), Register(0x00), Register(0x14)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('programs/test/keyboard_isr.j':(28,5))
#       Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
11 28 00 14 

# 00448 LoadImm8 [Register(0x16), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('programs/test/keyboard_isr.j':(28,5))
#       Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
04 16 00 

# 0044b LoadImm8 [Register(0x17), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('programs/test/keyboard_isr.j':(28,5))
#       Assign { target: Ident("index"), var_type: None, value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
04 17 00 

# tb70e <- 0n987920/0x000f1310u32  Some('programs/test/keyboard_isr.j':(29,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("g", "shift_held")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32))
# # In IlFunctionId("handle_ps2"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
# 0044e LoadImm32 [Register(0x18), Constant32(0x000f1310=987920)]
#       tb70e <- 0n987920/0x000f1310u32  Some('programs/test/keyboard_isr.j':(29,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("g", "shift_held")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32))
#       # In IlFunctionId("handle_ps2"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
20 18 10 13 0f 00 

# t7905 <- mem[tb70e] U8 Some('programs/test/keyboard_isr.j':(29,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("g", "shift_held")
# 00454 Load8 [Register(0x18), Register(0x10)]
#       t7905 <- mem[tb70e] U8 Some('programs/test/keyboard_isr.j':(29,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("g", "shift_held")
05 18 10 

# ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(29,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00457 LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(29,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 1c 00 

# if t7905 != ta97f then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2' Some('programs/test/keyboard_isr.j':(29,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }
# 0045a Cmp8 [Register(0x10), Register(0x1c)]
#       if t7905 != ta97f then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2' Some('programs/test/keyboard_isr.j':(29,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }
15 10 1c 

# 0045d JzImm [Label24(handle_ps2_if_else_0_2)]
#       if t7905 != ta97f then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2' Some('programs/test/keyboard_isr.j':(29,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }
72 7d 04 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t7905 != ta97f then 'handle_ps2_if_true_0_1' else 'handle_ps2_if_else_0_2' Some('programs/test/keyboard_isr.j':(29,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"shift_held\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_1)], resolved: None }
# :handle_ps2_if_true_0_1 Some('programs/test/keyboard_isr.j':(29,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# handle_ps2_if_true_0_1
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 00461 LoadImm32 [Register(0x28), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 28 2e 00 00 00 

# td18e <- index U32 Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('programs/test/keyboard_isr.j':(29,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t674 <- td18e Add Number(0n1/0x00000001u32) Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
# 00467 Copy32 [Register(0x14), Register(0x18)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
21 14 18 

# 0046a AddImm32IgnoreCarry [Register(0x18), Constant32(0x00000001=1)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
32 18 01 00 00 00 

# t23a <- t4c8b Add Var(t674) Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# 00470 ClearCarry []
#       t23a <- t4c8b Add Var(t674) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
03 

# 00471 AddCarry32_1 [Register(0x28), Register(0x18), Register(0x28)]
#       t23a <- t4c8b Add Var(t674) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
30 28 18 28 

# 00475 AddCarry32_2 []
#       t23a <- t4c8b Add Var(t674) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
31 

# ch <- mem[t23a] U8 Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# 00476 Load8 [Register(0x28), Register(0x10)]
#       ch <- mem[t23a] U8 Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
05 28 10 

# goto handle_ps2_if_end_0 Some('programs/test/keyboard_isr.j':(29,5))
# 00479 JmpImm [Label24(handle_ps2_if_end_0)]
#       goto handle_ps2_if_end_0 Some('programs/test/keyboard_isr.j':(29,5))
70 8c 04 00 

# :handle_ps2_if_else_0_2 Some('programs/test/keyboard_isr.j':(29,5))
# handle_ps2_if_else_0_2
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 0047d LoadImm32 [Register(0x28), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 28 2e 00 00 00 

# td18e <- index U32 Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('programs/test/keyboard_isr.j':(29,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# tb62e <- t4c8b Add Var(td18e) Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# 00483 ClearCarry []
#       tb62e <- t4c8b Add Var(td18e) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
03 

# 00484 AddCarry32_1 [Register(0x28), Register(0x14), Register(0x28)]
#       tb62e <- t4c8b Add Var(td18e) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
30 28 14 28 

# 00488 AddCarry32_2 []
#       tb62e <- t4c8b Add Var(td18e) Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
31 

# ch <- mem[tb62e] U8 Some('programs/test/keyboard_isr.j':(29,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# 00489 Load8 [Register(0x28), Register(0x10)]
#       ch <- mem[tb62e] U8 Some('programs/test/keyboard_isr.j':(29,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
05 28 10 

# :handle_ps2_if_end_0 Some('programs/test/keyboard_isr.j':(29,5))
# handle_ps2_if_end_0
# td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("g", "release_in_progress")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
# # In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# 0048c LoadImm32 [Register(0x18), Constant32(0x000f1314=987924)]
#       td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("g", "release_in_progress")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
#       # In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
20 18 14 13 0f 00 

# t75f <- mem[td3f9] U8 Some('programs/test/keyboard_isr.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("g", "release_in_progress")
# 00492 Load8 [Register(0x18), Register(0x2c)]
#       t75f <- mem[td3f9] U8 Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("g", "release_in_progress")
05 18 2c 

# ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00495 LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 1c 00 

# if t75f == ta97f then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_else_0_5' Some('programs/test/keyboard_isr.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
# 00498 Cmp8 [Register(0x2c), Register(0x1c)]
#       if t75f == ta97f then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_else_0_5' Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
15 2c 1c 

# 0049b JzImm [Label24(handle_ps2_if_true_0_4)]
#       if t75f == ta97f then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_else_0_5' Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
72 a3 04 00 

# 0049f JmpImm [Label24(handle_ps2_if_else_0_5)]
#       if t75f == ta97f then 'handle_ps2_if_true_0_4' else 'handle_ps2_if_else_0_5' Some('programs/test/keyboard_isr.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
70 d5 04 00 

# :handle_ps2_if_true_0_4 Some('programs/test/keyboard_isr.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }])], else_block: [] }
# handle_ps2_if_true_0_4
# tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(35,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_handle_ps2_queue_push_25_s <- 0n987656/0x000f1208u32  Some('programs/test/keyboard_isr.j':(35,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] })
# # In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_s <- t938b U32` with constant `inline_handle_ps2_queue_push_25_s <- 0n987656/0x000f1208u32 `.
# 004a3 LoadImm32 [Register(0x18), Constant32(0x000f1208=987656)]
#       inline_handle_ps2_queue_push_25_s <- 0n987656/0x000f1208u32  Some('programs/test/keyboard_isr.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] })
#       # In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_s <- t938b U32` with constant `inline_handle_ps2_queue_push_25_s <- 0n987656/0x000f1208u32 `.
20 18 08 12 0f 00 

# inline_handle_ps2_queue_push_25_n <- tdcd9 U8 Some('programs/test/keyboard_isr.j':(35,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), Ident("ch")] })
# optimized away noop copy Instruction { source: "inline_handle_ps2_queue_push_25_n <- tdcd9 U8 Some('programs/test/keyboard_isr.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), Ident(\"ch\")] })\n", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32 `.
# 004a9 LoadImm32 [Register(0x24), Constant32(0x000f130c=987916)]
#       inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("handle_ps2"), replacing `inline_handle_ps2_queue_push_25_tc1ff <- inline_handle_ps2_queue_push_25_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_ps2_queue_push_25_tc1ff <- 0n987916/0x000f130cu32 `.
20 24 0c 13 0f 00 

# inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 004af Load8 [Register(0x24), Register(0x1c)]
#       inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 24 1c 

# inline_handle_ps2_queue_push_25_t5bb7 U32 <- inline_handle_ps2_queue_push_25_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# 004b2 LoadImm32 [Register(0x20), Constant32(0x00000000=0)]
#       Zero-pad for inline_handle_ps2_queue_push_25_t5bb7 U32 <- inline_handle_ps2_queue_push_25_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
20 20 00 00 00 00 

# 004b8 Copy8 [Register(0x1c), Register(0x20)]
#       inline_handle_ps2_queue_push_25_t5bb7 U32 <- inline_handle_ps2_queue_push_25_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
0b 1c 20 

# inline_handle_ps2_queue_push_25_t2187 <- inline_handle_ps2_queue_push_25_s Add Var(inline_handle_ps2_queue_push_25_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# 004bb ClearCarry []
#       inline_handle_ps2_queue_push_25_t2187 <- inline_handle_ps2_queue_push_25_s Add Var(inline_handle_ps2_queue_push_25_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
03 

# 004bc AddCarry32_1 [Register(0x18), Register(0x20), Register(0x18)]
#       inline_handle_ps2_queue_push_25_t2187 <- inline_handle_ps2_queue_push_25_s Add Var(inline_handle_ps2_queue_push_25_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
30 18 20 18 

# 004c0 AddCarry32_2 []
#       inline_handle_ps2_queue_push_25_t2187 <- inline_handle_ps2_queue_push_25_s Add Var(inline_handle_ps2_queue_push_25_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
31 

# mem[inline_handle_ps2_queue_push_25_t2187] <- inline_handle_ps2_queue_push_25_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 004c1 Store8 [Register(0x10), Register(0x18)]
#       mem[inline_handle_ps2_queue_push_25_t2187] <- inline_handle_ps2_queue_push_25_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 10 18 

# inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# 004c4 Load8 [Register(0x24), Register(0x1c)]
#       inline_handle_ps2_queue_push_25_t3ee <- mem[inline_handle_ps2_queue_push_25_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
05 24 1c 

# inline_handle_ps2_queue_push_25_tf3c4 <- inline_handle_ps2_queue_push_25_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# 004c7 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_handle_ps2_queue_push_25_tf3c4 <- inline_handle_ps2_queue_push_25_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
04 00 01 

# 004ca Add8NoCarryIn [Register(0x1c), Register(0x00), Register(0x10)]
#       inline_handle_ps2_queue_push_25_tf3c4 <- inline_handle_ps2_queue_push_25_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
14 1c 00 10 

# mem[inline_handle_ps2_queue_push_25_tc1ff] <- inline_handle_ps2_queue_push_25_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# 004ce Store8 [Register(0x10), Register(0x24)]
#       mem[inline_handle_ps2_queue_push_25_tc1ff] <- inline_handle_ps2_queue_push_25_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
06 10 24 

# :inline_handle_ps2_queue_push_25_function_end_queue_push None
# inline_handle_ps2_queue_push_25_function_end_queue_push
# goto handle_ps2_if_end_3 Some('programs/test/keyboard_isr.j':(35,5))
# 004d1 JmpImm [Label24(handle_ps2_if_end_3)]
#       goto handle_ps2_if_end_3 Some('programs/test/keyboard_isr.j':(35,5))
70 d5 04 00 

# :handle_ps2_if_else_0_5 Some('programs/test/keyboard_isr.j':(35,5))
# handle_ps2_if_else_0_5
# :handle_ps2_if_end_3 Some('programs/test/keyboard_isr.j':(35,5))
# handle_ps2_if_end_3
# ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Number(0n0/0x00u8)
# 004d5 LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Number(0n0/0x00u8)
04 1c 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 004d8 LoadImm32 [Register(0x28), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 28 2e 00 00 00 

# td18e <- index U32 Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('programs/test/keyboard_isr.j':(43,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# te5cf <- td18e Add Number(0n2/0x00000002u32) Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
# 004de Copy32 [Register(0x14), Register(0x18)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
21 14 18 

# 004e1 AddImm32IgnoreCarry [Register(0x18), Constant32(0x00000002=2)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
32 18 02 00 00 00 

# ted94 <- t4c8b Add Var(te5cf) Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# 004e7 ClearCarry []
#       ted94 <- t4c8b Add Var(te5cf) Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
03 

# 004e8 AddCarry32_1 [Register(0x28), Register(0x18), Register(0x28)]
#       ted94 <- t4c8b Add Var(te5cf) Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
30 28 18 28 

# 004ec AddCarry32_2 []
#       ted94 <- t4c8b Add Var(te5cf) Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
31 

# t2ca9 <- mem[ted94] U8 Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# 004ed Load8 [Register(0x28), Register(0x10)]
#       t2ca9 <- mem[ted94] U8 Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
05 28 10 

# if ta97f != t2ca9 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_else_0_8' Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# 004f0 Cmp8 [Register(0x1c), Register(0x10)]
#       if ta97f != t2ca9 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_else_0_8' Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
15 1c 10 

# 004f3 JzImm [Label24(handle_ps2_if_else_0_8)]
#       if ta97f != t2ca9 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_else_0_8' Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
72 24 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta97f != t2ca9 then 'handle_ps2_if_true_0_7' else 'handle_ps2_if_else_0_8' Some('programs/test/keyboard_isr.j':(43,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\n", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_7)], resolved: None }
# :handle_ps2_if_true_0_7 Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# handle_ps2_if_true_0_7
# td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("g", "release_in_progress")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
# # In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# 004f7 LoadImm32 [Register(0x18), Constant32(0x000f1314=987924)]
#       td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("g", "release_in_progress")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
#       # In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
20 18 14 13 0f 00 

# t75f <- mem[td3f9] U8 Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("g", "release_in_progress")
# 004fd Load8 [Register(0x18), Register(0x2c)]
#       t75f <- mem[td3f9] U8 Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("g", "release_in_progress")
05 18 2c 

# if t75f != ta97f then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11' Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
# 00500 Cmp8 [Register(0x2c), Register(0x1c)]
#       if t75f != ta97f then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11' Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
15 2c 1c 

# 00503 JzImm [Label24(handle_ps2_if_else_0_11)]
#       if t75f != ta97f then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11' Some('programs/test/keyboard_isr.j':(43,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }
72 14 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t75f != ta97f then 'handle_ps2_if_true_0_10' else 'handle_ps2_if_else_0_11' Some('programs/test/keyboard_isr.j':(43,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"g\", \"release_in_progress\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_10)], resolved: None }
# :handle_ps2_if_true_0_10 Some('programs/test/keyboard_isr.j':(43,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("g", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# handle_ps2_if_true_0_10
# tb70e <- 0n987920/0x000f1310u32  Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32))
# # In IlFunctionId("handle_ps2"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
# 00507 LoadImm32 [Register(0x18), Constant32(0x000f1310=987920)]
#       tb70e <- 0n987920/0x000f1310u32  Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32))
#       # In IlFunctionId("handle_ps2"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
20 18 10 13 0f 00 

# mem[tb70e] <- ta97f U8 Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# 0050d Store8 [Register(0x1c), Register(0x18)]
#       mem[tb70e] <- ta97f U8 Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
06 1c 18 

# goto handle_ps2_if_end_9 Some('programs/test/keyboard_isr.j':(43,5))
# 00510 JmpImm [Label24(handle_ps2_if_end_9)]
#       goto handle_ps2_if_end_9 Some('programs/test/keyboard_isr.j':(43,5))
70 20 05 00 

# :handle_ps2_if_else_0_11 Some('programs/test/keyboard_isr.j':(43,5))
# handle_ps2_if_else_0_11
# tb70e <- 0n987920/0x000f1310u32  Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32))
# # In IlFunctionId("handle_ps2"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
# 00514 LoadImm32 [Register(0x18), Constant32(0x000f1310=987920)]
#       tb70e <- 0n987920/0x000f1310u32  Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32))
#       # In IlFunctionId("handle_ps2"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
20 18 10 13 0f 00 

# ta11a <- 0n1/0x01u8  Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 0051a LoadImm8 [Register(0x10), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 10 01 

# mem[tb70e] <- ta11a U8 Some('programs/test/keyboard_isr.j':(43,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# 0051d Store8 [Register(0x10), Register(0x18)]
#       mem[tb70e] <- ta11a U8 Some('programs/test/keyboard_isr.j':(43,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
06 10 18 

# :handle_ps2_if_end_9 Some('programs/test/keyboard_isr.j':(43,5))
# handle_ps2_if_end_9
# goto handle_ps2_if_end_6 Some('programs/test/keyboard_isr.j':(43,5))
# 00520 JmpImm [Label24(handle_ps2_if_end_6)]
#       goto handle_ps2_if_end_6 Some('programs/test/keyboard_isr.j':(43,5))
70 24 05 00 

# :handle_ps2_if_else_0_8 Some('programs/test/keyboard_isr.j':(43,5))
# handle_ps2_if_else_0_8
# :handle_ps2_if_end_6 Some('programs/test/keyboard_isr.j':(43,5))
# handle_ps2_if_end_6
# ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Number(0n0/0x00u8)
# 00524 LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Number(0n0/0x00u8)
04 1c 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 00527 LoadImm32 [Register(0x28), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 28 2e 00 00 00 

# td18e <- index U32 Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('programs/test/keyboard_isr.j':(55,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
# 0052d AddImm32IgnoreCarry [Register(0x14), Constant32(0x00000003=3)]
#       t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
32 14 03 00 00 00 

# t6cd9 <- t4c8b Add Var(t5e63) Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# 00533 ClearCarry []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
03 

# 00534 AddCarry32_1 [Register(0x28), Register(0x14), Register(0x28)]
#       t6cd9 <- t4c8b Add Var(t5e63) Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
30 28 14 28 

# 00538 AddCarry32_2 []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
31 

# t7b09 <- mem[t6cd9] U8 Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# 00539 Load8 [Register(0x28), Register(0x10)]
#       t7b09 <- mem[t6cd9] U8 Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
05 28 10 

# if ta97f != t7b09 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14' Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# 0053c Cmp8 [Register(0x1c), Register(0x10)]
#       if ta97f != t7b09 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14' Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
15 1c 10 

# 0053f JzImm [Label24(handle_ps2_if_else_0_14)]
#       if ta97f != t7b09 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14' Some('programs/test/keyboard_isr.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
72 53 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta97f != t7b09 then 'handle_ps2_if_true_0_13' else 'handle_ps2_if_else_0_14' Some('programs/test/keyboard_isr.j':(55,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref(\"g\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\n", opcode: JmpImm, args: [Label24(handle_ps2_if_true_0_13)], resolved: None }
# :handle_ps2_if_true_0_13 Some('programs/test/keyboard_isr.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# handle_ps2_if_true_0_13
# td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
# # In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# 00543 LoadImm32 [Register(0x18), Constant32(0x000f1314=987924)]
#       td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
#       # In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
20 18 14 13 0f 00 

# ta11a <- 0n1/0x01u8  Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 00549 LoadImm8 [Register(0x10), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 10 01 

# mem[td3f9] <- ta11a U8 Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# 0054c Store8 [Register(0x10), Register(0x18)]
#       mem[td3f9] <- ta11a U8 Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
06 10 18 

# goto handle_ps2_if_end_12 Some('programs/test/keyboard_isr.j':(55,5))
# 0054f JmpImm [Label24(handle_ps2_if_end_12)]
#       goto handle_ps2_if_end_12 Some('programs/test/keyboard_isr.j':(55,5))
70 5f 05 00 

# :handle_ps2_if_else_0_14 Some('programs/test/keyboard_isr.j':(55,5))
# handle_ps2_if_else_0_14
# td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
# # In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# 00553 LoadImm32 [Register(0x18), Constant32(0x000f1314=987924)]
#       td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
#       # In IlFunctionId("handle_ps2"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
20 18 14 13 0f 00 

# ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00559 LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 1c 00 

# mem[td3f9] <- ta97f U8 Some('programs/test/keyboard_isr.j':(55,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# 0055c Store8 [Register(0x1c), Register(0x18)]
#       mem[td3f9] <- ta97f U8 Some('programs/test/keyboard_isr.j':(55,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
06 1c 18 

# :handle_ps2_if_end_12 Some('programs/test/keyboard_isr.j':(55,5))
# handle_ps2_if_end_12
# return None None
# Return { value: None }
# 0055f JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_handle_ps2 None
# function_end_handle_ps2
# Unreachable None
# 00561 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :handle_tty
# Ret None
# Var inline_handle_tty_queue_push_26_n (Arg1 n Number(U8)) Reg(U8) Some([45])
# Var inline_handle_tty_queue_push_26_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([48, 49, 50, 51]) Number(0n987656/0x000f1208u32)
# Var inline_handle_tty_queue_push_26_t2187 (t2187 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([48, 49, 50, 51])
# Var inline_handle_tty_queue_push_26_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([52])
# Var inline_handle_tty_queue_push_26_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_handle_tty_queue_push_26_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([60, 61, 62, 63]) Number(0n987916/0x000f130cu32)
# Var inline_handle_tty_queue_push_26_tf3c4 (tf3c4 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))) Reg(U8) Some([45])
# Var tb816 (tb816 TtyIn) Reg(U8) Some([45])
# :inline_handle_tty_globals_2_function_end_globals None
# inline_handle_tty_globals_2_function_end_globals
# tb816 <- ttyin Some('programs/test/keyboard_isr.j':(71,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })
# TtyIn
# 00566 In0 [Register(0x2d)]
#       tb816 <- ttyin Some('programs/test/keyboard_isr.j':(71,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })
#       TtyIn
60 2d 

# inline_handle_tty_queue_push_26_s <- 0n987656/0x000f1208u32  Some('programs/test/keyboard_isr.j':(71,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })
# # In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_s <- t938b U32` with constant `inline_handle_tty_queue_push_26_s <- 0n987656/0x000f1208u32 `.
# 00568 LoadImm32 [Register(0x30), Constant32(0x000f1208=987656)]
#       inline_handle_tty_queue_push_26_s <- 0n987656/0x000f1208u32  Some('programs/test/keyboard_isr.j':(71,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })
#       # In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_s <- t938b U32` with constant `inline_handle_tty_queue_push_26_s <- 0n987656/0x000f1208u32 `.
20 30 08 12 0f 00 

# inline_handle_tty_queue_push_26_n <- tb816 U8 Some('programs/test/keyboard_isr.j':(71,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(PtrFieldDeref("g", "stdin")), TtyIn] })
# optimized away noop copy Instruction { source: "inline_handle_tty_queue_push_26_n <- tb816 U8 Some('programs/test/keyboard_isr.j':(71,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(PtrFieldDeref(\"g\", \"stdin\")), TtyIn] })\n", opcode: Copy8, args: [Register(0x2d), Register(0x2d)], resolved: None }
# inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32 `.
# 0056e LoadImm32 [Register(0x3c), Constant32(0x000f130c=987916)]
#       inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32 `.
20 3c 0c 13 0f 00 

# inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 00574 Load8 [Register(0x3c), Register(0x34)]
#       inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 3c 34 

# inline_handle_tty_queue_push_26_t5bb7 U32 <- inline_handle_tty_queue_push_26_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# 00577 LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       Zero-pad for inline_handle_tty_queue_push_26_t5bb7 U32 <- inline_handle_tty_queue_push_26_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
20 38 00 00 00 00 

# 0057d Copy8 [Register(0x34), Register(0x38)]
#       inline_handle_tty_queue_push_26_t5bb7 U32 <- inline_handle_tty_queue_push_26_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
0b 34 38 

# inline_handle_tty_queue_push_26_t2187 <- inline_handle_tty_queue_push_26_s Add Var(inline_handle_tty_queue_push_26_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# 00580 ClearCarry []
#       inline_handle_tty_queue_push_26_t2187 <- inline_handle_tty_queue_push_26_s Add Var(inline_handle_tty_queue_push_26_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
03 

# 00581 AddCarry32_1 [Register(0x30), Register(0x38), Register(0x30)]
#       inline_handle_tty_queue_push_26_t2187 <- inline_handle_tty_queue_push_26_s Add Var(inline_handle_tty_queue_push_26_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
30 30 38 30 

# 00585 AddCarry32_2 []
#       inline_handle_tty_queue_push_26_t2187 <- inline_handle_tty_queue_push_26_s Add Var(inline_handle_tty_queue_push_26_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
31 

# mem[inline_handle_tty_queue_push_26_t2187] <- inline_handle_tty_queue_push_26_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 00586 Store8 [Register(0x2d), Register(0x30)]
#       mem[inline_handle_tty_queue_push_26_t2187] <- inline_handle_tty_queue_push_26_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 2d 30 

# inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32 `.
# 00589 LoadImm32 [Register(0x3c), Constant32(0x000f130c=987916)]
#       inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32 `.
20 3c 0c 13 0f 00 

# inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32 `.
# 0058f LoadImm32 [Register(0x3c), Constant32(0x000f130c=987916)]
#       inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("handle_tty"), replacing `inline_handle_tty_queue_push_26_tc1ff <- inline_handle_tty_queue_push_26_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_handle_tty_queue_push_26_tc1ff <- 0n987916/0x000f130cu32 `.
20 3c 0c 13 0f 00 

# inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# 00595 Load8 [Register(0x3c), Register(0x34)]
#       inline_handle_tty_queue_push_26_t3ee <- mem[inline_handle_tty_queue_push_26_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
05 3c 34 

# inline_handle_tty_queue_push_26_tf3c4 <- inline_handle_tty_queue_push_26_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# 00598 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_handle_tty_queue_push_26_tf3c4 <- inline_handle_tty_queue_push_26_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
04 00 01 

# 0059b Add8NoCarryIn [Register(0x34), Register(0x00), Register(0x2d)]
#       inline_handle_tty_queue_push_26_tf3c4 <- inline_handle_tty_queue_push_26_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
14 34 00 2d 

# mem[inline_handle_tty_queue_push_26_tc1ff] <- inline_handle_tty_queue_push_26_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# 0059f Store8 [Register(0x2d), Register(0x3c)]
#       mem[inline_handle_tty_queue_push_26_tc1ff] <- inline_handle_tty_queue_push_26_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
06 2d 3c 

# :inline_handle_tty_queue_push_26_function_end_queue_push None
# inline_handle_tty_queue_push_26_function_end_queue_push
# return None None
# Return { value: None }
# 005a2 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_handle_tty None
# function_end_handle_tty
# Unreachable None
# 005a4 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :isr
# Ret None
# Var rtr (Local rtr Number(U8) Reg(U8)) Reg(U8) Some([64])
# Var t59ef (t59ef Ident("rtr")) Reg(U8) Some([64])
# Var t864 (t864 Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8))) Reg(U8) Some([65])
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([66]) Number(0n0/0x00u8)
# Var tc44e (tc44e Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8))) Reg(U8) Some([64])
# Registers used by this function: {64, 65, 66}
# 005a9 Push8 [Register(0x42)]
#       Saving reg0x42 before before entering ISR body
09 42 

# 005ab Push8 [Register(0x41)]
#       Saving reg0x41 before before entering ISR body
09 41 

# 005ad Push8 [Register(0x40)]
#       Saving reg0x40 before before entering ISR body
09 40 

# Some(rtr) <= call io_ready_to_read() Some('programs/test/keyboard_isr.j':(75,5))
# Assign { target: Ident("rtr"), var_type: None, value: Call(Call { function: "io_ready_to_read", parameters: [] }) }
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 005af IoReadyToRead [Register(0x40)]
#       ReadyToRead
79 40 

# t59ef <- rtr U8 Some('programs/test/keyboard_isr.j':(77,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8))
# Ident("rtr")
# optimized away noop copy Instruction { source: "t59ef <- rtr U8 Some('programs/test/keyboard_isr.j':(77,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }\nArithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n1/0x01u8))\nIdent(\"rtr\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# t864 <- t59ef BitwiseAnd Number(0n1/0x01u8) Some('programs/test/keyboard_isr.j':(77,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8))
# 005b1 Copy8 [Register(0x40), Register(0x41)]
#       t864 <- t59ef BitwiseAnd Number(0n1/0x01u8) Some('programs/test/keyboard_isr.j':(77,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8))
0b 40 41 

# 005b4 AndImm8 [Register(0x41), Constant8(0x01=1)]
#       t864 <- t59ef BitwiseAnd Number(0n1/0x01u8) Some('programs/test/keyboard_isr.j':(77,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8))
18 41 01 

# ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(77,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 005b7 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(77,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 42 00 

# if t864 != ta97f then 'isr_if_true_0_1' else 'isr_if_else_0_2' Some('programs/test/keyboard_isr.j':(77,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# 005ba Cmp8 [Register(0x41), Register(0x42)]
#       if t864 != ta97f then 'isr_if_true_0_1' else 'isr_if_else_0_2' Some('programs/test/keyboard_isr.j':(77,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
15 41 42 

# 005bd JzImm [Label24(isr_if_else_0_2)]
#       if t864 != ta97f then 'isr_if_true_0_1' else 'isr_if_else_0_2' Some('programs/test/keyboard_isr.j':(77,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
72 db 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t864 != ta97f then 'isr_if_true_0_1' else 'isr_if_else_0_2' Some('programs/test/keyboard_isr.j':(77,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"handle_tty\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(isr_if_true_0_1)], resolved: None }
# :isr_if_true_0_1 Some('programs/test/keyboard_isr.j':(77,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }])], else_block: [] }
# isr_if_true_0_1
# None <= call handle_tty() Some('programs/test/keyboard_isr.j':(77,5))
# VoidExpression { expression: Call(Call { function: "handle_tty", parameters: [] }) }
# Call(Call { function: "handle_tty", parameters: [] })
# Registers used by this function: {64, 65, 66}
# Registers used by callee tree: {45, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 63}
# Registers to save: []
# 005c1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:handle_tty))
32 0c fc ff ff ff 

# 005c7 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:handle_tty))
25 0c d1 05 00 00 

# 005cd JmpImm [Label24(:handle_tty)]
#       PseudoCall(Label24(:handle_tty))
70 66 05 00 

# 005d1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:handle_tty))
32 0c 04 00 00 00 

# goto isr_if_end_0 Some('programs/test/keyboard_isr.j':(77,5))
# 005d7 JmpImm [Label24(isr_if_end_0)]
#       goto isr_if_end_0 Some('programs/test/keyboard_isr.j':(77,5))
70 db 05 00 

# :isr_if_else_0_2 Some('programs/test/keyboard_isr.j':(77,5))
# isr_if_else_0_2
# :isr_if_end_0 Some('programs/test/keyboard_isr.j':(77,5))
# isr_if_end_0
# t59ef <- rtr U8 Some('programs/test/keyboard_isr.j':(81,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8))
# Ident("rtr")
# optimized away noop copy Instruction { source: "t59ef <- rtr U8 Some('programs/test/keyboard_isr.j':(81,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }\nArithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n4/0x04u8))\nIdent(\"rtr\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# tc44e <- t59ef BitwiseAnd Number(0n4/0x04u8) Some('programs/test/keyboard_isr.j':(81,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8))
# 005db AndImm8 [Register(0x40), Constant8(0x04=4)]
#       tc44e <- t59ef BitwiseAnd Number(0n4/0x04u8) Some('programs/test/keyboard_isr.j':(81,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
#       Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8))
18 40 04 

# ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(81,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 005de LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(81,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 42 00 

# if tc44e != ta97f then 'isr_if_true_0_4' else 'isr_if_else_0_5' Some('programs/test/keyboard_isr.j':(81,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# 005e1 Cmp8 [Register(0x40), Register(0x42)]
#       if tc44e != ta97f then 'isr_if_true_0_4' else 'isr_if_else_0_5' Some('programs/test/keyboard_isr.j':(81,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
15 40 42 

# 005e4 JzImm [Label24(isr_if_else_0_5)]
#       if tc44e != ta97f then 'isr_if_true_0_4' else 'isr_if_else_0_5' Some('programs/test/keyboard_isr.j':(81,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
72 02 06 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tc44e != ta97f then 'isr_if_true_0_4' else 'isr_if_else_0_5' Some('programs/test/keyboard_isr.j':(81,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"handle_ps2\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident(\"rtr\"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(isr_if_true_0_4)], resolved: None }
# :isr_if_true_0_4 Some('programs/test/keyboard_isr.j':(81,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Ident("rtr"), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }])], else_block: [] }
# isr_if_true_0_4
# None <= call handle_ps2() Some('programs/test/keyboard_isr.j':(81,5))
# VoidExpression { expression: Call(Call { function: "handle_ps2", parameters: [] }) }
# Call(Call { function: "handle_ps2", parameters: [] })
# Registers used by this function: {64, 65, 66}
# Registers used by callee tree: {16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44}
# Registers to save: []
# 005e8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:handle_ps2))
32 0c fc ff ff ff 

# 005ee StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:handle_ps2))
25 0c f8 05 00 00 

# 005f4 JmpImm [Label24(:handle_ps2)]
#       PseudoCall(Label24(:handle_ps2))
70 33 04 00 

# 005f8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:handle_ps2))
32 0c 04 00 00 00 

# goto isr_if_end_3 Some('programs/test/keyboard_isr.j':(81,5))
# 005fe JmpImm [Label24(isr_if_end_3)]
#       goto isr_if_end_3 Some('programs/test/keyboard_isr.j':(81,5))
70 02 06 00 

# :isr_if_else_0_5 Some('programs/test/keyboard_isr.j':(81,5))
# isr_if_else_0_5
# :isr_if_end_3 Some('programs/test/keyboard_isr.j':(81,5))
# isr_if_end_3
# return None None
# Return { value: None }
# Registers used by this function: {64, 65, 66}
# 00602 Pop8 [Register(0x40)]
#       Restoring reg0x40 after ISR body
0a 40 

# 00604 Pop8 [Register(0x41)]
#       Restoring reg0x41 after ISR body
0a 41 

# 00606 Pop8 [Register(0x42)]
#       Restoring reg0x42 after ISR body
0a 42 

# 00608 ReturnFromInterrupt []
#       return from ISR
78 

# :function_end_isr None
# function_end_isr
# Unreachable None
# 00609 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :main
# Ret Some(U8)
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([67])
# Var inline_main_getc_19_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([67])
# Var inline_main_getc_19_inline_getc_queue_pop_18_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([68, 69, 70, 71]) Number(0n987656/0x000f1208u32)
# Var inline_main_getc_19_inline_getc_queue_pop_18_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([72])
# Var inline_main_getc_19_inline_getc_queue_pop_18_t44ed (t44ed Ident("value")) Reg(U8) Some([67])
# Var inline_main_getc_19_inline_getc_queue_pop_18_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([72]) Number(0n0/0x00u8)
# Var inline_main_getc_19_inline_getc_queue_pop_18_tae11 (tae11 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_getc_19_inline_getc_queue_pop_18_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_main_getc_19_inline_getc_queue_pop_18_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([80])
# Var inline_main_getc_19_inline_getc_queue_pop_18_tb702 (tb702 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }) Reg(U32) Some([84, 85, 86, 87]) Number(0n987912/0x000f1308u32)
# Var inline_main_getc_19_inline_getc_queue_pop_18_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([84, 85, 86, 87]) Number(0n987916/0x000f130cu32)
# Var inline_main_getc_19_inline_getc_queue_pop_18_te468 (te468 Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))) Reg(U8) Some([67])
# Var inline_main_getc_19_inline_getc_queue_pop_18_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([72])
# Var inline_main_getc_19_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([67])
# Var inline_main_getc_20_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([67])
# Var inline_main_getc_20_inline_getc_queue_pop_18_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([72])
# Var inline_main_getc_20_inline_getc_queue_pop_18_t44ed (t44ed Ident("value")) Reg(U8) Some([67])
# Var inline_main_getc_20_inline_getc_queue_pop_18_tae11 (tae11 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_getc_20_inline_getc_queue_pop_18_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_main_getc_20_inline_getc_queue_pop_18_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([80])
# Var inline_main_getc_20_inline_getc_queue_pop_18_te468 (te468 Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))) Reg(U8) Some([67])
# Var inline_main_getc_20_inline_getc_queue_pop_18_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([72])
# Var inline_main_getc_20_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([67])
# Var t4d24 (t4d24 Call(Call { function: "getc", parameters: [] })) Reg(U8) Some([67])
# Var t5eeb (t5eeb Number(0n97/0x61u8)) Reg(U8) Some([88]) Number(0n97/0x61u8)
# Var tb70e (tb70e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }) Reg(U32) Some([68, 69, 70, 71]) Number(0n987920/0x000f1310u32)
# Var td3f9 (td3f9 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }) Reg(U32) Some([68, 69, 70, 71]) Number(0n987924/0x000f1314u32)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([67])
# Var tdf6e (tdf6e Number(0n113/0x71u8)) Reg(U8) Some([80]) Number(0n113/0x71u8)
# :inline_main_globals_3_function_end_globals None
# inline_main_globals_3_function_end_globals
# tb70e <- 0n987920/0x000f1310u32  Some('programs/test/keyboard_isr.j':(96,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32))
# # In IlFunctionId("main"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
# 0060e LoadImm32 [Register(0x44), Constant32(0x000f1310=987920)]
#       tb70e <- 0n987920/0x000f1310u32  Some('programs/test/keyboard_isr.j':(96,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n264/0x00000108u32))
#       # In IlFunctionId("main"), replacing `tb70e <- tbb6d Add Number(0n264/0x00000108u32)` with constant `tb70e <- 0n987920/0x000f1310u32 `.
20 44 10 13 0f 00 

# inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(96,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #2, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# 00614 LoadImm8 [Register(0x48), Constant8(0x00=0)]
#       inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(96,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #2, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
04 48 00 

# mem[tb70e] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('programs/test/keyboard_isr.j':(96,5))
# Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #3, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[tb70e] <- ta97f U8 -> mem[tb70e] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# 00617 Store8 [Register(0x48), Register(0x44)]
#       mem[tb70e] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('programs/test/keyboard_isr.j':(96,5))
#       Assign { target: PtrFieldDeref("g", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #3, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[tb70e] <- ta97f U8 -> mem[tb70e] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
06 48 44 

# td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(97,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
# # In IlFunctionId("main"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
# 0061a LoadImm32 [Register(0x44), Constant32(0x000f1314=987924)]
#       td3f9 <- 0n987924/0x000f1314u32  Some('programs/test/keyboard_isr.j':(97,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Globals"))), new_type: Number(U32), value: Ident("g") }, Number(0n268/0x0000010cu32))
#       # In IlFunctionId("main"), replacing `td3f9 <- tbb6d Add Number(0n268/0x0000010cu32)` with constant `td3f9 <- 0n987924/0x000f1314u32 `.
20 44 14 13 0f 00 

# mem[td3f9] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('programs/test/keyboard_isr.j':(97,5))
# Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #5, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[td3f9] <- ta97f U8 -> mem[td3f9] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# 00620 Store8 [Register(0x48), Register(0x44)]
#       mem[td3f9] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('programs/test/keyboard_isr.j':(97,5))
#       Assign { target: PtrFieldDeref("g", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #5, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[td3f9] <- ta97f U8 -> mem[td3f9] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
06 48 44 

# inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("main"), replacing `inline_main_queue_init_16_tb702 <- inline_main_queue_init_16_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_queue_init_16_tb702 <- 0n987912/0x000f1308u32 `.
# # In IlFunctionId("main"), at #6, replacing reference to inline_main_queue_init_16_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_queue_init_16_tb702 <- 0n987912/0x000f1308u32  -> inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# 00623 LoadImm32 [Register(0x54), Constant32(0x000f1308=987912)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("main"), replacing `inline_main_queue_init_16_tb702 <- inline_main_queue_init_16_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_queue_init_16_tb702 <- 0n987912/0x000f1308u32 `.
#       # In IlFunctionId("main"), at #6, replacing reference to inline_main_queue_init_16_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_queue_init_16_tb702 <- 0n987912/0x000f1308u32  -> inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
20 54 08 13 0f 00 

# mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #8, replacing reference to inline_main_queue_init_16_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_main_queue_init_16_tb702] <- inline_main_queue_init_16_ta97f U8 -> mem[inline_main_queue_init_16_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# # In IlFunctionId("main"), at #8, replacing reference to inline_main_queue_init_16_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). mem[inline_main_queue_init_16_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 -> mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# 00629 Store8 [Register(0x48), Register(0x54)]
#       mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #8, replacing reference to inline_main_queue_init_16_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_main_queue_init_16_tb702] <- inline_main_queue_init_16_ta97f U8 -> mem[inline_main_queue_init_16_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
#       # In IlFunctionId("main"), at #8, replacing reference to inline_main_queue_init_16_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). mem[inline_main_queue_init_16_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 -> mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
06 48 54 

# inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("main"), replacing `inline_main_queue_init_16_tc1ff <- inline_main_queue_init_16_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_queue_init_16_tc1ff <- 0n987916/0x000f130cu32 `.
# # In IlFunctionId("main"), at #9, replacing reference to inline_main_queue_init_16_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). inline_main_queue_init_16_tc1ff <- 0n987916/0x000f130cu32  -> inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 
# 0062c LoadImm32 [Register(0x54), Constant32(0x000f130c=987916)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("main"), replacing `inline_main_queue_init_16_tc1ff <- inline_main_queue_init_16_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_queue_init_16_tc1ff <- 0n987916/0x000f130cu32 `.
#       # In IlFunctionId("main"), at #9, replacing reference to inline_main_queue_init_16_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). inline_main_queue_init_16_tc1ff <- 0n987916/0x000f130cu32  -> inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 
20 54 0c 13 0f 00 

# mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #10, replacing reference to inline_main_queue_init_16_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_main_queue_init_16_tc1ff] <- inline_main_queue_init_16_ta97f U8 -> mem[inline_main_queue_init_16_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# # In IlFunctionId("main"), at #10, replacing reference to inline_main_queue_init_16_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). mem[inline_main_queue_init_16_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 -> mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# 00632 Store8 [Register(0x48), Register(0x54)]
#       mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #10, replacing reference to inline_main_queue_init_16_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_main_queue_init_16_tc1ff] <- inline_main_queue_init_16_ta97f U8 -> mem[inline_main_queue_init_16_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
#       # In IlFunctionId("main"), at #10, replacing reference to inline_main_queue_init_16_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). mem[inline_main_queue_init_16_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 -> mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
06 48 54 

# :inline_main_queue_init_16_function_end_queue_init None
# inline_main_queue_init_16_function_end_queue_init
# None <= call enable_interrupts() Some('programs/test/keyboard_isr.j':(100,5))
# VoidExpression { expression: Call(Call { function: "enable_interrupts", parameters: [] }) }
# Call(Call { function: "enable_interrupts", parameters: [] })
# 00635 EnableInterrupts []
#       EnableInterrupts
76 

# :main_while_predicate_0 Some('programs/test/keyboard_isr.j':(102,5))
# While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
# main_while_predicate_0
# t5eeb <- 0n97/0x61u8  Some('programs/test/keyboard_isr.j':(102,5))
# While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
# Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }
# Number(0n97/0x61u8)
# 00636 LoadImm8 [Register(0x58), Constant8(0x61=97)]
#       t5eeb <- 0n97/0x61u8  Some('programs/test/keyboard_isr.j':(102,5))
#       While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
#       Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }
#       Number(0n97/0x61u8)
04 58 61 

# :inline_main_getc_19_inline_getc_globals_0_function_end_globals None
# inline_main_getc_19_inline_getc_globals_0_function_end_globals
# None <= call disable_interrupts() Some('programs/test/keyboard_isr.j':(88,5))
# VoidExpression { expression: Call(Call { function: "disable_interrupts", parameters: [] }) }
# Call(Call { function: "disable_interrupts", parameters: [] })
# 00639 DisableInterrupts []
#       DisableInterrupts
77 

# inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32  Some('programs/test/keyboard_isr.j':(89,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })
# # In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_s <- inline_main_getc_19_t938b U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32 `.
# 0063a LoadImm32 [Register(0x44), Constant32(0x000f1208=987656)]
#       inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32  Some('programs/test/keyboard_isr.j':(89,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })
#       # In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_s <- inline_main_getc_19_t938b U32` with constant `inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32 `.
20 44 08 12 0f 00 

# inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# 00640 LoadImm32 [Register(0x54), Constant32(0x000f1308=987912)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
20 54 08 13 0f 00 

# inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# 00646 Load8 [Register(0x54), Register(0x50)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
05 54 50 

# inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 `.
# 00649 LoadImm32 [Register(0x54), Constant32(0x000f130c=987916)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 `.
20 54 0c 13 0f 00 

# inline_main_getc_19_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 0064f Load8 [Register(0x54), Register(0x48)]
#       inline_main_getc_19_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 54 48 

# if inline_main_getc_19_inline_getc_queue_pop_18_tb6dd == inline_main_getc_19_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 00652 Cmp8 [Register(0x50), Register(0x48)]
#       if inline_main_getc_19_inline_getc_queue_pop_18_tb6dd == inline_main_getc_19_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 50 48 

# 00655 JzImm [Label24(inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1)]
#       if inline_main_getc_19_inline_getc_queue_pop_18_tb6dd == inline_main_getc_19_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 5d 06 00 

# 00659 JmpImm [Label24(inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2)]
#       if inline_main_getc_19_inline_getc_queue_pop_18_tb6dd == inline_main_getc_19_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 6b 06 00 

# :inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_true_0_1
# inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# 0065d LoadImm8 [Register(0x48), Constant8(0x00=0)]
#       inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
04 48 00 

# inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 00660 Copy8 [Register(0x48), Register(0x43)]
#       inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
0b 48 43 

# goto inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 00663 JmpImm [Label24(inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop)]
#       goto inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
70 96 06 00 

# goto inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 00667 JmpImm [Label24(inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0)]
#       goto inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
70 6b 06 00 

# :inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_else_0_2
# :inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_getc_19_inline_getc_queue_pop_18_queue_pop_if_end_0
# inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# 0066b LoadImm32 [Register(0x54), Constant32(0x000f1308=987912)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("main"), replacing `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- inline_main_getc_19_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
20 54 08 13 0f 00 

# inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# 00671 Load8 [Register(0x54), Register(0x50)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
05 54 50 

# inline_main_getc_19_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# 00674 LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_main_getc_19_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
20 4c 00 00 00 00 

# 0067a Copy8 [Register(0x50), Register(0x4c)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
0b 50 4c 

# inline_main_getc_19_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_19_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# 0067d ClearCarry []
#       inline_main_getc_19_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_19_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
03 

# 0067e AddCarry32_1 [Register(0x44), Register(0x4c), Register(0x44)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_19_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
30 44 4c 44 

# 00682 AddCarry32_2 []
#       inline_main_getc_19_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_19_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
31 

# inline_main_getc_19_inline_getc_queue_pop_18_value <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 00683 Load8 [Register(0x44), Register(0x48)]
#       inline_main_getc_19_inline_getc_queue_pop_18_value <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 44 48 

# inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first")
# 00686 Load8 [Register(0x54), Register(0x50)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first")
05 54 50 

# inline_main_getc_19_inline_getc_queue_pop_18_te468 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# 00689 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_main_getc_19_inline_getc_queue_pop_18_te468 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
04 00 01 

# 0068c Add8NoCarryIn [Register(0x50), Register(0x00), Register(0x43)]
#       inline_main_getc_19_inline_getc_queue_pop_18_te468 <- inline_main_getc_19_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
14 50 00 43 

# mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# 00690 Store8 [Register(0x43), Register(0x54)]
#       mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_19_inline_getc_queue_pop_18_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
06 43 54 

# inline_main_getc_19_inline_getc_queue_pop_18_t44ed <- inline_main_getc_19_inline_getc_queue_pop_18_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 00693 Copy8 [Register(0x48), Register(0x43)]
#       inline_main_getc_19_inline_getc_queue_pop_18_t44ed <- inline_main_getc_19_inline_getc_queue_pop_18_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 48 43 

# inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "inline_main_getc_19_ch <- inline_main_getc_19_inline_getc_queue_pop_18_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# :inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop None
# inline_main_getc_19_inline_getc_queue_pop_18_function_end_queue_pop
# None <= call enable_interrupts() Some('programs/test/keyboard_isr.j':(90,5))
# VoidExpression { expression: Call(Call { function: "enable_interrupts", parameters: [] }) }
# Call(Call { function: "enable_interrupts", parameters: [] })
# 00696 EnableInterrupts []
#       EnableInterrupts
76 

# inline_main_getc_19_tdcd9 <- inline_main_getc_19_ch U8 Some('programs/test/keyboard_isr.j':(91,5))
# Return { value: Some(Ident("ch")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_getc_19_tdcd9 <- inline_main_getc_19_ch U8 Some('programs/test/keyboard_isr.j':(91,5))\nReturn { value: Some(Ident(\"ch\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# t4d24 <- inline_main_getc_19_tdcd9 U8 Some('programs/test/keyboard_isr.j':(91,5))
# Return { value: Some(Ident("ch")) }
# optimized away noop copy Instruction { source: "t4d24 <- inline_main_getc_19_tdcd9 U8 Some('programs/test/keyboard_isr.j':(91,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# :inline_main_getc_19_function_end_getc None
# inline_main_getc_19_function_end_getc
# if t5eeb != t4d24 then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/keyboard_isr.j':(102,5))
# While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
# Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }
# 00697 Cmp8 [Register(0x58), Register(0x43)]
#       if t5eeb != t4d24 then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/keyboard_isr.j':(102,5))
#       While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
#       Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }
15 58 43 

# 0069a JzImm [Label24(main_while_end_2)]
#       if t5eeb != t4d24 then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/keyboard_isr.j':(102,5))
#       While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
#       Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }
72 a2 06 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5eeb != t4d24 then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/keyboard_isr.j':(102,5))\nWhile { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: \"getc\", parameters: [] }) }, while_true: [] }\nComparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: \"getc\", parameters: [] }) }\n", opcode: JmpImm, args: [Label24(main_while_body_1)], resolved: None }
# :main_while_body_1 Some('programs/test/keyboard_isr.j':(102,5))
# While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
# main_while_body_1
# goto main_while_predicate_0 Some('programs/test/keyboard_isr.j':(102,5))
# While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
# 0069e JmpImm [Label24(main_while_predicate_0)]
#       goto main_while_predicate_0 Some('programs/test/keyboard_isr.j':(102,5))
#       While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
70 36 06 00 

# :main_while_end_2 Some('programs/test/keyboard_isr.j':(102,5))
# While { predicate: Comparison { op: NotEquals, left: Number(0n97/0x61u8), right: Call(Call { function: "getc", parameters: [] }) }, while_true: [] }
# main_while_end_2
# t5eeb <- 0n97/0x61u8  Some('programs/test/keyboard_isr.j':(105,5))
# TtyOut { value: Number(0n97/0x61u8) }
# Number(0n97/0x61u8)
# 006a2 LoadImm8 [Register(0x58), Constant8(0x61=97)]
#       t5eeb <- 0n97/0x61u8  Some('programs/test/keyboard_isr.j':(105,5))
#       TtyOut { value: Number(0n97/0x61u8) }
#       Number(0n97/0x61u8)
04 58 61 

# ttyout <- t5eeb Some('programs/test/keyboard_isr.j':(105,5))
# TtyOut { value: Number(0n97/0x61u8) }
# 006a5 Out0 [Register(0x58)]
#       ttyout <- t5eeb Some('programs/test/keyboard_isr.j':(105,5))
#       TtyOut { value: Number(0n97/0x61u8) }
68 58 

# :main_while_predicate_3 Some('programs/test/keyboard_isr.j':(107,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
# main_while_predicate_3
# inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(107,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #52, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# 006a7 LoadImm8 [Register(0x48), Constant8(0x00=0)]
#       inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(107,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #52, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
04 48 00 

# if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'main_while_end_5' Some('programs/test/keyboard_isr.j':(107,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #53, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'main_while_body_4' else 'main_while_end_5' -> if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'main_while_end_5'
# 006aa Cmp8 [Register(0x48), Register(0x48)]
#       if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'main_while_end_5' Some('programs/test/keyboard_isr.j':(107,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #53, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'main_while_body_4' else 'main_while_end_5' -> if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'main_while_end_5'
15 48 48 

# 006ad JzImm [Label24(main_while_body_4)]
#       if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'main_while_end_5' Some('programs/test/keyboard_isr.j':(107,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #53, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'main_while_body_4' else 'main_while_end_5' -> if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'main_while_end_5'
72 b5 06 00 

# 006b1 JmpImm [Label24(main_while_end_5)]
#       if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'main_while_end_5' Some('programs/test/keyboard_isr.j':(107,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #53, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'main_while_body_4' else 'main_while_end_5' -> if inline_main_getc_19_inline_getc_queue_pop_18_ta97f == inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_while_body_4' else 'main_while_end_5'
70 3e 07 00 

# :main_while_body_4 Some('programs/test/keyboard_isr.j':(107,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getc", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }] }
# main_while_body_4
# :inline_main_getc_20_inline_getc_globals_0_function_end_globals None
# inline_main_getc_20_inline_getc_globals_0_function_end_globals
# None <= call disable_interrupts() Some('programs/test/keyboard_isr.j':(88,5))
# VoidExpression { expression: Call(Call { function: "disable_interrupts", parameters: [] }) }
# Call(Call { function: "disable_interrupts", parameters: [] })
# 006b5 DisableInterrupts []
#       DisableInterrupts
77 

# inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32  Some('programs/test/keyboard_isr.j':(89,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })
# # In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_s <- inline_main_getc_20_t938b U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32 `.
# # In IlFunctionId("main"), at #57, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_s with inline_main_getc_19_inline_getc_queue_pop_18_s as they share the same const value: Number(0n987656/0x000f1208u32). inline_main_getc_20_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32  -> inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32 
# 006b6 LoadImm32 [Register(0x44), Constant32(0x000f1208=987656)]
#       inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32  Some('programs/test/keyboard_isr.j':(89,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(PtrFieldDeref("g", "stdin"))] })
#       # In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_s <- inline_main_getc_20_t938b U32` with constant `inline_main_getc_20_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32 `.
#       # In IlFunctionId("main"), at #57, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_s with inline_main_getc_19_inline_getc_queue_pop_18_s as they share the same const value: Number(0n987656/0x000f1208u32). inline_main_getc_20_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32  -> inline_main_getc_19_inline_getc_queue_pop_18_s <- 0n987656/0x000f1208u32 
20 44 08 12 0f 00 

# inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# # In IlFunctionId("main"), at #58, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  -> inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# 006bc LoadImm32 [Register(0x54), Constant32(0x000f1308=987912)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
#       # In IlFunctionId("main"), at #58, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  -> inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
20 54 08 13 0f 00 

# inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# # In IlFunctionId("main"), at #59, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
# 006c2 Load8 [Register(0x54), Register(0x50)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       # In IlFunctionId("main"), at #59, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
05 54 50 

# inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 `.
# # In IlFunctionId("main"), at #60, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  -> inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 
# 006c5 LoadImm32 [Register(0x54), Constant32(0x000f130c=987916)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 `.
#       # In IlFunctionId("main"), at #60, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). inline_main_getc_20_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32  -> inline_main_getc_19_inline_getc_queue_pop_18_tc1ff <- 0n987916/0x000f130cu32 
20 54 0c 13 0f 00 

# inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# # In IlFunctionId("main"), at #61, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tc1ff] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8
# 006cb Load8 [Register(0x54), Register(0x48)]
#       inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       # In IlFunctionId("main"), at #61, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tc1ff with inline_main_getc_19_inline_getc_queue_pop_18_tc1ff as they share the same const value: Number(0n987916/0x000f130cu32). inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tc1ff] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_t3ee <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tc1ff] U8
05 54 48 

# if inline_main_getc_20_inline_getc_queue_pop_18_tb6dd == inline_main_getc_20_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 006ce Cmp8 [Register(0x50), Register(0x48)]
#       if inline_main_getc_20_inline_getc_queue_pop_18_tb6dd == inline_main_getc_20_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 50 48 

# 006d1 JzImm [Label24(inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1)]
#       if inline_main_getc_20_inline_getc_queue_pop_18_tb6dd == inline_main_getc_20_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 d9 06 00 

# 006d5 JmpImm [Label24(inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2)]
#       if inline_main_getc_20_inline_getc_queue_pop_18_tb6dd == inline_main_getc_20_inline_getc_queue_pop_18_t3ee then 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1' else 'inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 e7 06 00 

# :inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_true_0_1
# inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #64, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getc_20_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# 006d9 LoadImm8 [Register(0x48), Constant8(0x00=0)]
#       inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #64, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getc_20_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
04 48 00 

# inline_main_getc_20_ch <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# # In IlFunctionId("main"), at #65, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_ta97f U8 -> inline_main_getc_20_ch <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
# 006dc Copy8 [Register(0x48), Register(0x43)]
#       inline_main_getc_20_ch <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       # In IlFunctionId("main"), at #65, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_ta97f U8 -> inline_main_getc_20_ch <- inline_main_getc_19_inline_getc_queue_pop_18_ta97f U8
0b 48 43 

# goto inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 006df JmpImm [Label24(inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop)]
#       goto inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
70 12 07 00 

# goto inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 006e3 JmpImm [Label24(inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0)]
#       goto inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
70 e7 06 00 

# :inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_else_0_2
# :inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_getc_20_inline_getc_queue_pop_18_queue_pop_if_end_0
# inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
# # In IlFunctionId("main"), at #70, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  -> inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
# 006e7 LoadImm32 [Register(0x54), Constant32(0x000f1308=987912)]
#       inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("main"), replacing `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- inline_main_getc_20_inline_getc_queue_pop_18_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 `.
#       # In IlFunctionId("main"), at #70, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32  -> inline_main_getc_19_inline_getc_queue_pop_18_tb702 <- 0n987912/0x000f1308u32 
20 54 08 13 0f 00 

# inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# # In IlFunctionId("main"), at #71, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
# 006ed Load8 [Register(0x54), Register(0x50)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       # In IlFunctionId("main"), at #71, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
05 54 50 

# inline_main_getc_20_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# 006f0 LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_main_getc_20_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
20 4c 00 00 00 00 

# 006f6 Copy8 [Register(0x50), Register(0x4c)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb469 U32 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
0b 50 4c 

# inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# # In IlFunctionId("main"), at #73, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_s with inline_main_getc_19_inline_getc_queue_pop_18_s as they share the same const value: Number(0n987656/0x000f1208u32). inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_20_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) -> inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469)
# 006f9 ClearCarry []
#       inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       # In IlFunctionId("main"), at #73, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_s with inline_main_getc_19_inline_getc_queue_pop_18_s as they share the same const value: Number(0n987656/0x000f1208u32). inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_20_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) -> inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469)
03 

# 006fa AddCarry32_1 [Register(0x44), Register(0x4c), Register(0x44)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       # In IlFunctionId("main"), at #73, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_s with inline_main_getc_19_inline_getc_queue_pop_18_s as they share the same const value: Number(0n987656/0x000f1208u32). inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_20_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) -> inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469)
30 44 4c 44 

# 006fe AddCarry32_2 []
#       inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       # In IlFunctionId("main"), at #73, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_s with inline_main_getc_19_inline_getc_queue_pop_18_s as they share the same const value: Number(0n987656/0x000f1208u32). inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_20_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469) -> inline_main_getc_20_inline_getc_queue_pop_18_tae11 <- inline_main_getc_19_inline_getc_queue_pop_18_s Add Var(inline_main_getc_20_inline_getc_queue_pop_18_tb469)
31 

# inline_main_getc_20_inline_getc_queue_pop_18_value <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 006ff Load8 [Register(0x44), Register(0x48)]
#       inline_main_getc_20_inline_getc_queue_pop_18_value <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 44 48 

# inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first")
# # In IlFunctionId("main"), at #75, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
# 00702 Load8 [Register(0x54), Register(0x50)]
#       inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first")
#       # In IlFunctionId("main"), at #75, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] U8 -> inline_main_getc_20_inline_getc_queue_pop_18_tb6dd <- mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] U8
05 54 50 

# inline_main_getc_20_inline_getc_queue_pop_18_te468 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# 00705 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_main_getc_20_inline_getc_queue_pop_18_te468 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
04 00 01 

# 00708 Add8NoCarryIn [Register(0x50), Register(0x00), Register(0x43)]
#       inline_main_getc_20_inline_getc_queue_pop_18_te468 <- inline_main_getc_20_inline_getc_queue_pop_18_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
14 50 00 43 

# mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# # In IlFunctionId("main"), at #77, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_te468 U8 -> mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_te468 U8
# 0070c Store8 [Register(0x43), Register(0x54)]
#       mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       # In IlFunctionId("main"), at #77, replacing reference to inline_main_getc_20_inline_getc_queue_pop_18_tb702 with inline_main_getc_19_inline_getc_queue_pop_18_tb702 as they share the same const value: Number(0n987912/0x000f1308u32). mem[inline_main_getc_20_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_te468 U8 -> mem[inline_main_getc_19_inline_getc_queue_pop_18_tb702] <- inline_main_getc_20_inline_getc_queue_pop_18_te468 U8
06 43 54 

# inline_main_getc_20_inline_getc_queue_pop_18_t44ed <- inline_main_getc_20_inline_getc_queue_pop_18_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 0070f Copy8 [Register(0x48), Register(0x43)]
#       inline_main_getc_20_inline_getc_queue_pop_18_t44ed <- inline_main_getc_20_inline_getc_queue_pop_18_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 48 43 

# inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "inline_main_getc_20_ch <- inline_main_getc_20_inline_getc_queue_pop_18_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# :inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop None
# inline_main_getc_20_inline_getc_queue_pop_18_function_end_queue_pop
# None <= call enable_interrupts() Some('programs/test/keyboard_isr.j':(90,5))
# VoidExpression { expression: Call(Call { function: "enable_interrupts", parameters: [] }) }
# Call(Call { function: "enable_interrupts", parameters: [] })
# 00712 EnableInterrupts []
#       EnableInterrupts
76 

# inline_main_getc_20_tdcd9 <- inline_main_getc_20_ch U8 Some('programs/test/keyboard_isr.j':(91,5))
# Return { value: Some(Ident("ch")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_getc_20_tdcd9 <- inline_main_getc_20_ch U8 Some('programs/test/keyboard_isr.j':(91,5))\nReturn { value: Some(Ident(\"ch\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# ch <- inline_main_getc_20_tdcd9 U8 Some('programs/test/keyboard_isr.j':(91,5))
# Return { value: Some(Ident("ch")) }
# optimized away noop copy Instruction { source: "ch <- inline_main_getc_20_tdcd9 U8 Some('programs/test/keyboard_isr.j':(91,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# :inline_main_getc_20_function_end_getc None
# inline_main_getc_20_function_end_getc
# tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(107,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #86, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
# 00713 LoadImm8 [Register(0x48), Constant8(0x00=0)]
#       inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #86, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getc_19_inline_getc_queue_pop_18_ta97f <- 0n0/0x00u8 
04 48 00 

# if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_else_0_8' Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #87, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if tdcd9 != ta97f then 'main_if_true_0_7' else 'main_if_else_0_8' -> if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_else_0_8'
# 00716 Cmp8 [Register(0x43), Register(0x48)]
#       if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_else_0_8' Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #87, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if tdcd9 != ta97f then 'main_if_true_0_7' else 'main_if_else_0_8' -> if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_else_0_8'
15 43 48 

# 00719 JzImm [Label24(main_if_else_0_8)]
#       if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_else_0_8' Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #87, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if tdcd9 != ta97f then 'main_if_true_0_7' else 'main_if_else_0_8' -> if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_else_0_8'
72 3a 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_else_0_8' Some('programs/test/keyboard_isr.j':(107,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident(\"ch\") }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"main\"), at #87, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). if tdcd9 != ta97f then 'main_if_true_0_7' else 'main_if_else_0_8' -> if tdcd9 != inline_main_getc_19_inline_getc_queue_pop_18_ta97f then 'main_if_true_0_7' else 'main_if_else_0_8'\n", opcode: JmpImm, args: [Label24(main_if_true_0_7)], resolved: None }
# :main_if_true_0_7 Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Number(0n0/0x00u8) }, [IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }, TtyOut { value: Ident("ch") }])], else_block: [] }
# main_if_true_0_7
# tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(107,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n113/0x71u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# tdf6e <- 0n113/0x71u8  Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# Number(0n113/0x71u8)
# 0071d LoadImm8 [Register(0x50), Constant8(0x71=113)]
#       tdf6e <- 0n113/0x71u8  Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
#       Number(0n113/0x71u8)
04 50 71 

# if tdcd9 == tdf6e then 'main_if_true_0_10' else 'main_if_else_0_11' Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# 00720 Cmp8 [Register(0x43), Register(0x50)]
#       if tdcd9 == tdf6e then 'main_if_true_0_10' else 'main_if_else_0_11' Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
15 43 50 

# 00723 JzImm [Label24(main_if_true_0_10)]
#       if tdcd9 == tdf6e then 'main_if_true_0_10' else 'main_if_else_0_11' Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
72 2b 07 00 

# 00727 JmpImm [Label24(main_if_else_0_11)]
#       if tdcd9 == tdf6e then 'main_if_true_0_10' else 'main_if_else_0_11' Some('programs/test/keyboard_isr.j':(107,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
70 34 07 00 

# :main_if_true_0_10 Some('programs/test/keyboard_isr.j':(107,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# main_if_true_0_10
# return Some(inline_main_getc_19_inline_getc_queue_pop_18_ta97f) Some('programs/test/keyboard_isr.j':(107,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# # In IlFunctionId("main"), at #93, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_main_getc_19_inline_getc_queue_pop_18_ta97f)
# 0072b Copy8 [Register(0x48), Register(0x00)]
#       return Some(inline_main_getc_19_inline_getc_queue_pop_18_ta97f) Some('programs/test/keyboard_isr.j':(107,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       # In IlFunctionId("main"), at #93, replacing reference to ta97f with inline_main_getc_19_inline_getc_queue_pop_18_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_main_getc_19_inline_getc_queue_pop_18_ta97f)
0b 48 00 

# 0072e JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto main_if_end_9 Some('programs/test/keyboard_isr.j':(107,5))
# 00730 JmpImm [Label24(main_if_end_9)]
#       goto main_if_end_9 Some('programs/test/keyboard_isr.j':(107,5))
70 34 07 00 

# :main_if_else_0_11 Some('programs/test/keyboard_isr.j':(107,5))
# main_if_else_0_11
# :main_if_end_9 Some('programs/test/keyboard_isr.j':(107,5))
# main_if_end_9
# tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(107,5))
# TtyOut { value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/test/keyboard_isr.j':(107,5))\nTtyOut { value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# ttyout <- tdcd9 Some('programs/test/keyboard_isr.j':(107,5))
# TtyOut { value: Ident("ch") }
# 00734 Out0 [Register(0x43)]
#       ttyout <- tdcd9 Some('programs/test/keyboard_isr.j':(107,5))
#       TtyOut { value: Ident("ch") }
68 43 

# goto main_if_end_6 Some('programs/test/keyboard_isr.j':(107,5))
# 00736 JmpImm [Label24(main_if_end_6)]
#       goto main_if_end_6 Some('programs/test/keyboard_isr.j':(107,5))
70 3a 07 00 

# :main_if_else_0_8 Some('programs/test/keyboard_isr.j':(107,5))
# main_if_else_0_8
# :main_if_end_6 Some('programs/test/keyboard_isr.j':(107,5))
# main_if_end_6
# goto main_while_predicate_3 Some('programs/test/keyboard_isr.j':(107,5))
# 0073a JmpImm [Label24(main_while_predicate_3)]
#       goto main_while_predicate_3 Some('programs/test/keyboard_isr.j':(107,5))
70 a7 06 00 

# :main_while_end_5 Some('programs/test/keyboard_isr.j':(107,5))
# main_while_end_5
# :function_end_main None
# function_end_main
# Unreachable None
# 0073e Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

