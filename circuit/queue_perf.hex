v2.0 raw
# IlFunctionId("main")()
#  t0 <- 0n987136/0x000f1000u32  # Some('programs/test/queue_perf.j':(7,5))
#  t5cf6 <- t0 U32 # Some('programs/test/queue_perf.j':(7,5))
#  inline_main_queue_init_0_s <- t5cf6 U32 # Some('programs/test/queue_perf.j':(7,5))
#  inline_main_queue_init_0_t4d4f <- inline_main_queue_init_0_s U32 # Some('/lutcomp/programs/lib/Queue.j':(8,5))
#  inline_main_queue_init_0_tb702 <- inline_main_queue_init_0_t4d4f Add Number(0n256/0x00000100u32) # Some('/lutcomp/programs/lib/Queue.j':(8,5))
#  inline_main_queue_init_0_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(8,5))
#  mem[inline_main_queue_init_0_tb702] <- inline_main_queue_init_0_tb36e U8 # Some('/lutcomp/programs/lib/Queue.j':(8,5))
#  inline_main_queue_init_0_t4d4f <- inline_main_queue_init_0_s U32 # Some('/lutcomp/programs/lib/Queue.j':(9,5))
#  inline_main_queue_init_0_tc1ff <- inline_main_queue_init_0_t4d4f Add Number(0n260/0x00000104u32) # Some('/lutcomp/programs/lib/Queue.j':(9,5))
#  inline_main_queue_init_0_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(9,5))
#  mem[inline_main_queue_init_0_tc1ff] <- inline_main_queue_init_0_tb36e U8 # Some('/lutcomp/programs/lib/Queue.j':(9,5))
#  goto inline_main_queue_init_0_function_end_queue_init # None
#  :inline_main_queue_init_0_function_end_queue_init # None
#  n <- 0n1/0x01u8  # Some('programs/test/queue_perf.j':(8,5))
#  :main_while_predicate_0 # Some('programs/test/queue_perf.j':(9,5))
#  t531d <- n U8 # Some('programs/test/queue_perf.j':(9,5))
#  tc0d <- 0n10/0x0au8  # Some('programs/test/queue_perf.j':(9,5))
#  tcb41 <- tc0d Add Number(0n1/0x01u8) # Some('programs/test/queue_perf.j':(9,5))
#  if t531d != tcb41 then 'main_while_body_1' else 'main_while_end_2' # Some('programs/test/queue_perf.j':(9,5))
#  :main_while_body_1 # Some('programs/test/queue_perf.j':(9,5))
#  t1 <- 0n987136/0x000f1000u32  # Some('programs/test/queue_perf.j':(9,5))
#  t5cf6 <- t1 U32 # Some('programs/test/queue_perf.j':(9,5))
#  t531d <- n U8 # Some('programs/test/queue_perf.j':(9,5))
#  inline_main_queue_push_3_s <- t5cf6 U32 # Some('programs/test/queue_perf.j':(9,5))
#  inline_main_queue_push_3_n <- t531d U8 # Some('programs/test/queue_perf.j':(9,5))
#  inline_main_queue_push_3_t565a <- inline_main_queue_push_3_s U32 # Some('/lutcomp/programs/lib/Queue.j':(24,5))
#  inline_main_queue_push_3_values <- inline_main_queue_push_3_t565a U32 # Some('/lutcomp/programs/lib/Queue.j':(24,5))
#  inline_main_queue_push_3_t1d36 <- inline_main_queue_push_3_values U32 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_main_queue_push_3_t4d4f <- inline_main_queue_push_3_s U32 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_main_queue_push_3_t3ee <- mem[inline_main_queue_push_3_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_main_queue_push_3_t5bb7 U32 <- inline_main_queue_push_3_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_main_queue_push_3_t2187 <- inline_main_queue_push_3_t1d36 Add Var(inline_main_queue_push_3_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_main_queue_push_3_t531d <- inline_main_queue_push_3_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  mem[inline_main_queue_push_3_t2187] <- inline_main_queue_push_3_t531d U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_main_queue_push_3_t4d4f <- inline_main_queue_push_3_s U32 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_main_queue_push_3_t4d4f <- inline_main_queue_push_3_s U32 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_main_queue_push_3_t3ee <- mem[inline_main_queue_push_3_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_main_queue_push_3_t6778 <- inline_main_queue_push_3_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  mem[inline_main_queue_push_3_tc1ff] <- inline_main_queue_push_3_t6778 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  goto inline_main_queue_push_3_function_end_queue_push # None
#  :inline_main_queue_push_3_function_end_queue_push # None
#  t531d <- n U8 # Some('programs/test/queue_perf.j':(9,5))
#  n <- t531d Add Number(0n1/0x01u8) # Some('programs/test/queue_perf.j':(9,5))
#  goto main_while_predicate_0 # Some('programs/test/queue_perf.j':(9,5))
#  :main_while_end_2 # Some('programs/test/queue_perf.j':(9,5))
#  n <- 0n10/0x0au8  # Some('programs/test/queue_perf.j':(13,5))
#  :main_while_predicate_3 # Some('programs/test/queue_perf.j':(14,5))
#  t531d <- n U8 # Some('programs/test/queue_perf.j':(14,5))
#  tb36e <- 0n0/0x00u8  # Some('programs/test/queue_perf.j':(14,5))
#  if t531d != tb36e then 'main_while_body_4' else 'main_while_end_5' # Some('programs/test/queue_perf.j':(14,5))
#  :main_while_body_4 # Some('programs/test/queue_perf.j':(14,5))
#  t531d <- n U8 # Some('programs/test/queue_perf.j':(14,5))
#  t2 <- 0n987136/0x000f1000u32  # Some('programs/test/queue_perf.j':(14,5))
#  t5cf6 <- t2 U32 # Some('programs/test/queue_perf.j':(14,5))
#  inline_main_queue_pop_1_s <- t5cf6 U32 # Some('programs/test/queue_perf.j':(14,5))
#  inline_main_queue_pop_1_t4d4f <- inline_main_queue_pop_1_s U32 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_queue_pop_1_tb702 <- inline_main_queue_pop_1_t4d4f Add Number(0n256/0x00000100u32) # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_queue_pop_1_tb6dd <- mem[inline_main_queue_pop_1_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_queue_pop_1_t4d4f <- inline_main_queue_pop_1_s U32 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_queue_pop_1_tc1ff <- inline_main_queue_pop_1_t4d4f Add Number(0n260/0x00000104u32) # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_queue_pop_1_t3ee <- mem[inline_main_queue_pop_1_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  if inline_main_queue_pop_1_tb6dd == inline_main_queue_pop_1_t3ee then 'inline_main_queue_pop_1_queue_pop_if_true_0_1' else 'inline_main_queue_pop_1_queue_pop_if_else_0_2' # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_main_queue_pop_1_queue_pop_if_true_0_1 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_queue_pop_1_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  t24cd <- inline_main_queue_pop_1_tb36e U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  goto inline_main_queue_pop_1_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  goto inline_main_queue_pop_1_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_main_queue_pop_1_queue_pop_if_else_0_2 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_main_queue_pop_1_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_queue_pop_1_t565a <- inline_main_queue_pop_1_s U32 # Some('/lutcomp/programs/lib/Queue.j':(17,5))
#  inline_main_queue_pop_1_values <- inline_main_queue_pop_1_t565a U32 # Some('/lutcomp/programs/lib/Queue.j':(17,5))
#  inline_main_queue_pop_1_t1d36 <- inline_main_queue_pop_1_values U32 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_queue_pop_1_t4d4f <- inline_main_queue_pop_1_s U32 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_queue_pop_1_tb702 <- inline_main_queue_pop_1_t4d4f Add Number(0n256/0x00000100u32) # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_queue_pop_1_tb6dd <- mem[inline_main_queue_pop_1_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_queue_pop_1_tb469 U32 <- inline_main_queue_pop_1_tb6dd U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_queue_pop_1_tae11 <- inline_main_queue_pop_1_t1d36 Add Var(inline_main_queue_pop_1_tb469) # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_queue_pop_1_value <- mem[inline_main_queue_pop_1_tae11] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_queue_pop_1_t4d4f <- inline_main_queue_pop_1_s U32 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_queue_pop_1_tb702 <- inline_main_queue_pop_1_t4d4f Add Number(0n256/0x00000100u32) # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_queue_pop_1_t4d4f <- inline_main_queue_pop_1_s U32 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_queue_pop_1_tb702 <- inline_main_queue_pop_1_t4d4f Add Number(0n256/0x00000100u32) # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_queue_pop_1_tb6dd <- mem[inline_main_queue_pop_1_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_queue_pop_1_t6fdb <- inline_main_queue_pop_1_tb6dd Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  mem[inline_main_queue_pop_1_tb702] <- inline_main_queue_pop_1_t6fdb U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_queue_pop_1_t44ed <- inline_main_queue_pop_1_value U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  t24cd <- inline_main_queue_pop_1_t44ed U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  goto inline_main_queue_pop_1_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  :inline_main_queue_pop_1_function_end_queue_pop # None
#  if t531d != t24cd then 'main_if_true_0_7' else 'main_if_else_0_8' # Some('programs/test/queue_perf.j':(14,5))
#  :main_if_true_0_7 # Some('programs/test/queue_perf.j':(14,5))
#  t531d <- n U8 # Some('programs/test/queue_perf.j':(14,5))
#  return Some(t531d) # Some('programs/test/queue_perf.j':(14,5))
#  goto main_if_end_6 # Some('programs/test/queue_perf.j':(14,5))
#  :main_if_else_0_8 # Some('programs/test/queue_perf.j':(14,5))
#  :main_if_end_6 # Some('programs/test/queue_perf.j':(14,5))
#  t531d <- n U8 # Some('programs/test/queue_perf.j':(14,5))
#  n <- t531d Subtract Number(0n1/0x01u8) # Some('programs/test/queue_perf.j':(14,5))
#  goto main_while_predicate_3 # Some('programs/test/queue_perf.j':(14,5))
#  :main_while_end_5 # Some('programs/test/queue_perf.j':(14,5))
#  tb36e <- 0n0/0x00u8  # Some('programs/test/queue_perf.j':(21,5))
#  t3 <- 0n987136/0x000f1000u32  # Some('programs/test/queue_perf.j':(21,5))
#  t5cf6 <- t3 U32 # Some('programs/test/queue_perf.j':(21,5))
#  inline_main_queue_pop_2_s <- t5cf6 U32 # Some('programs/test/queue_perf.j':(21,5))
#  inline_main_queue_pop_2_t4d4f <- inline_main_queue_pop_2_s U32 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_queue_pop_2_tb702 <- inline_main_queue_pop_2_t4d4f Add Number(0n256/0x00000100u32) # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_queue_pop_2_tb6dd <- mem[inline_main_queue_pop_2_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_queue_pop_2_t4d4f <- inline_main_queue_pop_2_s U32 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_queue_pop_2_tc1ff <- inline_main_queue_pop_2_t4d4f Add Number(0n260/0x00000104u32) # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_queue_pop_2_t3ee <- mem[inline_main_queue_pop_2_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  if inline_main_queue_pop_2_tb6dd == inline_main_queue_pop_2_t3ee then 'inline_main_queue_pop_2_queue_pop_if_true_0_1' else 'inline_main_queue_pop_2_queue_pop_if_else_0_2' # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_main_queue_pop_2_queue_pop_if_true_0_1 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_queue_pop_2_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  t24cd <- inline_main_queue_pop_2_tb36e U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  goto inline_main_queue_pop_2_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  goto inline_main_queue_pop_2_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_main_queue_pop_2_queue_pop_if_else_0_2 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_main_queue_pop_2_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_queue_pop_2_t565a <- inline_main_queue_pop_2_s U32 # Some('/lutcomp/programs/lib/Queue.j':(17,5))
#  inline_main_queue_pop_2_values <- inline_main_queue_pop_2_t565a U32 # Some('/lutcomp/programs/lib/Queue.j':(17,5))
#  inline_main_queue_pop_2_t1d36 <- inline_main_queue_pop_2_values U32 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_queue_pop_2_t4d4f <- inline_main_queue_pop_2_s U32 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_queue_pop_2_tb702 <- inline_main_queue_pop_2_t4d4f Add Number(0n256/0x00000100u32) # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_queue_pop_2_tb6dd <- mem[inline_main_queue_pop_2_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_queue_pop_2_tb469 U32 <- inline_main_queue_pop_2_tb6dd U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_queue_pop_2_tae11 <- inline_main_queue_pop_2_t1d36 Add Var(inline_main_queue_pop_2_tb469) # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_queue_pop_2_value <- mem[inline_main_queue_pop_2_tae11] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_queue_pop_2_t4d4f <- inline_main_queue_pop_2_s U32 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_queue_pop_2_tb702 <- inline_main_queue_pop_2_t4d4f Add Number(0n256/0x00000100u32) # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_queue_pop_2_t4d4f <- inline_main_queue_pop_2_s U32 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_queue_pop_2_tb702 <- inline_main_queue_pop_2_t4d4f Add Number(0n256/0x00000100u32) # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_queue_pop_2_tb6dd <- mem[inline_main_queue_pop_2_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_queue_pop_2_t6fdb <- inline_main_queue_pop_2_tb6dd Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  mem[inline_main_queue_pop_2_tb702] <- inline_main_queue_pop_2_t6fdb U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_queue_pop_2_t44ed <- inline_main_queue_pop_2_value U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  t24cd <- inline_main_queue_pop_2_t44ed U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  goto inline_main_queue_pop_2_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  :inline_main_queue_pop_2_function_end_queue_pop # None
#  if tb36e != t24cd then 'main_if_true_0_10' else 'main_if_else_0_11' # Some('programs/test/queue_perf.j':(21,5))
#  :main_if_true_0_10 # Some('programs/test/queue_perf.j':(21,5))
#  tc168 <- 0n255/0xffu8  # Some('programs/test/queue_perf.j':(21,5))
#  return Some(tc168) # Some('programs/test/queue_perf.j':(21,5))
#  goto main_if_end_9 # Some('programs/test/queue_perf.j':(21,5))
#  :main_if_else_0_11 # Some('programs/test/queue_perf.j':(21,5))
#  :main_if_end_9 # Some('programs/test/queue_perf.j':(21,5))
#  :function_end_main # None
#  Unreachable # None

# ImageBaseAddress=0x00000000
# entry
# 00000 Init []
#       Initialzing flags and internal regs.
00 

# 00001 LoadImm32 [Register(0x0c), Constant32(0x000f0f00=986880)]
#       Initialzing stack register to 0x000f0f00.
20 0c 00 0f 0f 00 

# 00007 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:main))
32 0c fc ff ff ff 

# 0000d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:main))
25 0c 17 00 00 00 

# 00013 JmpImm [Label24(:main)]
#       PseudoCall(Label24(:main))
70 23 00 00 

# 00017 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:main))
32 0c 04 00 00 00 

# 0001d Halt [Constant32(0x00000000=0)]
#       Halting after return from entry function.
7e 00 00 00 00 

# :NUM
# const Number(U8)
0a 
# :main
# Ret Some(U8)
# Var NUM (global const "NUM") GlobalConst(NUM) None [10]
# Var inline_main_queue_init_0_NUM (global const "NUM") GlobalConst(NUM) None [10]
# Var inline_main_queue_init_0_q (local view of global static q) Static(987136) None
# Var inline_main_queue_init_0_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_main_queue_init_0_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_main_queue_init_0_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([20]) [0]
# Var inline_main_queue_init_0_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_queue_init_0_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_main_queue_pop_1_NUM (global const "NUM") GlobalConst(NUM) None [10]
# Var inline_main_queue_pop_1_q (local view of global static q) Static(987136) None
# Var inline_main_queue_pop_1_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_main_queue_pop_1_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_queue_pop_1_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([20])
# Var inline_main_queue_pop_1_t44ed (t44ed Ident("value")) Reg(U8) Some([32])
# Var inline_main_queue_pop_1_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_main_queue_pop_1_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_main_queue_pop_1_t6fdb (t6fdb Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))) Reg(U8) Some([32])
# Var inline_main_queue_pop_1_tae11 (tae11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_queue_pop_1_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([32]) [0]
# Var inline_main_queue_pop_1_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_queue_pop_1_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([33])
# Var inline_main_queue_pop_1_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_main_queue_pop_1_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_queue_pop_1_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([20])
# Var inline_main_queue_pop_1_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_queue_pop_2_NUM (global const "NUM") GlobalConst(NUM) None [10]
# Var inline_main_queue_pop_2_q (local view of global static q) Static(987136) None
# Var inline_main_queue_pop_2_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_main_queue_pop_2_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_queue_pop_2_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([20])
# Var inline_main_queue_pop_2_t44ed (t44ed Ident("value")) Reg(U8) Some([32])
# Var inline_main_queue_pop_2_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_main_queue_pop_2_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_main_queue_pop_2_t6fdb (t6fdb Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))) Reg(U8) Some([32])
# Var inline_main_queue_pop_2_tae11 (tae11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_queue_pop_2_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([32]) [0]
# Var inline_main_queue_pop_2_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_queue_pop_2_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([33])
# Var inline_main_queue_pop_2_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_main_queue_pop_2_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_queue_pop_2_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([20])
# Var inline_main_queue_pop_2_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_queue_push_3_NUM (global const "NUM") GlobalConst(NUM) None [10]
# Var inline_main_queue_push_3_n (Arg1 n Number(U8)) Reg(U8) Some([32])
# Var inline_main_queue_push_3_q (local view of global static q) Static(987136) None
# Var inline_main_queue_push_3_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_queue_push_3_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_queue_push_3_t2187 (t2187 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_queue_push_3_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([40])
# Var inline_main_queue_push_3_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_queue_push_3_t531d (t531d Ident("n")) Reg(U8) Some([32])
# Var inline_main_queue_push_3_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_queue_push_3_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_main_queue_push_3_t6778 (t6778 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([32])
# Var inline_main_queue_push_3_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_main_queue_push_3_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var n (Local n Number(U8) Reg(U8)) Reg(U8) Some([48])
# Var q (local view of global static q) Static(987136) None
# Var t0 (static "q" addr) Reg(U32) Some([16, 17, 18, 19])
# Var t1 (static "q" addr) Reg(U32) Some([16, 17, 18, 19])
# Var t2 (static "q" addr) Reg(U32) Some([16, 17, 18, 19])
# Var t24cd (t24cd Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] })) Reg(U8) Some([32])
# Var t3 (static "q" addr) Reg(U32) Some([16, 17, 18, 19])
# Var t531d (t531d Ident("n")) Reg(U8) Some([49])
# Var t5cf6 (t5cf6 AddressOf(Ident("q"))) Reg(U32) Some([16, 17, 18, 19])
# Var t658b (t658b Call(Call { function: "queue_init", parameters: [AddressOf(Ident("q"))] })) Reg(U8) Some([32])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([50]) [0]
# Var tc0d (tc0d Ident("NUM")) Reg(U8) Some([32])
# Var tc168 (tc168 Number(U8, 255)) Reg(U8) Some([32]) [255]
# Var tcb41 (tcb41 Arithmetic(Add, Ident("NUM"), Number(U8, 1))) Reg(U8) Some([32])
# Var tcf6c (tcf6c Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] })) Reg(U8) Some([32])
# Consts t0: 0n987136/0x000f1000u32
# Consts t1: 0n987136/0x000f1000u32
# Consts t2: 0n987136/0x000f1000u32
# Consts t3: 0n987136/0x000f1000u32
# Consts tc0d: 0n10/0x0au8
# Consts tc168: 0n255/0xffu8
# t0 <- 0n987136/0x000f1000u32  Some('programs/test/queue_perf.j':(7,5))
# VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(Ident("q"))] }) }
# Call(Call { function: "queue_init", parameters: [AddressOf(Ident("q"))] })
# AddressOf(Ident("q"))
# 00023 LoadImm32 [Register(0x10), Constant32(0x000f1000=987136)]
#       t0 <- 0n987136/0x000f1000u32  Some('programs/test/queue_perf.j':(7,5))
#       VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(Ident("q"))] }) }
#       Call(Call { function: "queue_init", parameters: [AddressOf(Ident("q"))] })
#       AddressOf(Ident("q"))
20 10 00 10 0f 00 

# t5cf6 <- t0 U32 Some('programs/test/queue_perf.j':(7,5))
# VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(Ident("q"))] }) }
# Call(Call { function: "queue_init", parameters: [AddressOf(Ident("q"))] })
# AddressOf(Ident("q"))
# optimized away noop copy Instruction { source: "t5cf6 <- t0 U32 Some('programs/test/queue_perf.j':(7,5))\nVoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"q\"))] }) }\nCall(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"q\"))] })\nAddressOf(Ident(\"q\"))\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_init_0_s <- t5cf6 U32 Some('programs/test/queue_perf.j':(7,5))
# VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(Ident("q"))] }) }
# Call(Call { function: "queue_init", parameters: [AddressOf(Ident("q"))] })
# optimized away noop copy Instruction { source: "inline_main_queue_init_0_s <- t5cf6 U32 Some('programs/test/queue_perf.j':(7,5))\nVoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"q\"))] }) }\nCall(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"q\"))] })\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_init_0_t4d4f <- inline_main_queue_init_0_s U32 Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_init_0_t4d4f <- inline_main_queue_init_0_s U32 Some('/lutcomp/programs/lib/Queue.j':(8,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_init_0_tb702 <- inline_main_queue_init_0_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 00029 Copy32 [Register(0x10), Register(0x18)]
#       inline_main_queue_init_0_tb702 <- inline_main_queue_init_0_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 10 18 

# 0002c AddImm32IgnoreCarry [Register(0x18), Constant32(0x00000100=256)]
#       inline_main_queue_init_0_tb702 <- inline_main_queue_init_0_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 18 00 01 00 00 

# inline_main_queue_init_0_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00032 LoadImm8 [Register(0x14), Constant8(0x00=0)]
#       inline_main_queue_init_0_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 14 00 

# mem[inline_main_queue_init_0_tb702] <- inline_main_queue_init_0_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# 00035 Store8 [Register(0x14), Register(0x18)]
#       mem[inline_main_queue_init_0_tb702] <- inline_main_queue_init_0_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
06 14 18 

# inline_main_queue_init_0_t4d4f <- inline_main_queue_init_0_s U32 Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_init_0_t4d4f <- inline_main_queue_init_0_s U32 Some('/lutcomp/programs/lib/Queue.j':(9,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_init_0_tc1ff <- inline_main_queue_init_0_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 00038 AddImm32IgnoreCarry [Register(0x10), Constant32(0x00000104=260)]
#       inline_main_queue_init_0_tc1ff <- inline_main_queue_init_0_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 10 04 01 00 00 

# inline_main_queue_init_0_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 0003e LoadImm8 [Register(0x14), Constant8(0x00=0)]
#       inline_main_queue_init_0_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 14 00 

# mem[inline_main_queue_init_0_tc1ff] <- inline_main_queue_init_0_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# 00041 Store8 [Register(0x14), Register(0x10)]
#       mem[inline_main_queue_init_0_tc1ff] <- inline_main_queue_init_0_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
06 14 10 

# goto inline_main_queue_init_0_function_end_queue_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_queue_init_0_function_end_queue_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_queue_init_0_function_end_queue_init)], resolved: None }
# :inline_main_queue_init_0_function_end_queue_init None
# inline_main_queue_init_0_function_end_queue_init
# n <- 0n1/0x01u8  Some('programs/test/queue_perf.j':(8,5))
# Assign { target: Ident("n"), var_type: Some(Number(U8)), value: Number(U8, 1) }
# Number(U8, 1)
# 00044 LoadImm8 [Register(0x30), Constant8(0x01=1)]
#       n <- 0n1/0x01u8  Some('programs/test/queue_perf.j':(8,5))
#       Assign { target: Ident("n"), var_type: Some(Number(U8)), value: Number(U8, 1) }
#       Number(U8, 1)
04 30 01 

# :main_while_predicate_0 Some('programs/test/queue_perf.j':(9,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }, while_true: [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Add, Ident("n"), Number(U8, 1)) }] }
# main_while_predicate_0
# t531d <- n U8 Some('programs/test/queue_perf.j':(9,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }, while_true: [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Add, Ident("n"), Number(U8, 1)) }] }
# Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }
# Ident("n")
# 00047 Copy8 [Register(0x30), Register(0x31)]
#       t531d <- n U8 Some('programs/test/queue_perf.j':(9,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }, while_true: [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Add, Ident("n"), Number(U8, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }
#       Ident("n")
0b 30 31 

# tc0d <- 0n10/0x0au8  Some('programs/test/queue_perf.j':(9,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }, while_true: [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Add, Ident("n"), Number(U8, 1)) }] }
# Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }
# Arithmetic(Add, Ident("NUM"), Number(U8, 1))
# Ident("NUM")
# 0004a LoadImm8 [Register(0x20), Constant8(0x0a=10)]
#       tc0d <- 0n10/0x0au8  Some('programs/test/queue_perf.j':(9,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }, while_true: [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Add, Ident("n"), Number(U8, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("NUM"), Number(U8, 1))
#       Ident("NUM")
04 20 0a 

# tcb41 <- tc0d Add Number(0n1/0x01u8) Some('programs/test/queue_perf.j':(9,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }, while_true: [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Add, Ident("n"), Number(U8, 1)) }] }
# Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }
# Arithmetic(Add, Ident("NUM"), Number(U8, 1))
# 0004d LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tcb41 <- tc0d Add Number(0n1/0x01u8) Some('programs/test/queue_perf.j':(9,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }, while_true: [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Add, Ident("n"), Number(U8, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("NUM"), Number(U8, 1))
04 00 01 

# 00050 Add8NoCarryIn [Register(0x20), Register(0x00), Register(0x20)]
#       tcb41 <- tc0d Add Number(0n1/0x01u8) Some('programs/test/queue_perf.j':(9,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }, while_true: [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Add, Ident("n"), Number(U8, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("NUM"), Number(U8, 1))
14 20 00 20 

# if t531d != tcb41 then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/queue_perf.j':(9,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }, while_true: [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Add, Ident("n"), Number(U8, 1)) }] }
# Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }
# 00054 Cmp8 [Register(0x31), Register(0x20)]
#       if t531d != tcb41 then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/queue_perf.j':(9,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }, while_true: [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Add, Ident("n"), Number(U8, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }
15 31 20 

# 00057 JzImm [Label24(main_while_end_2)]
#       if t531d != tcb41 then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/queue_perf.j':(9,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }, while_true: [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Add, Ident("n"), Number(U8, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }
72 b8 00 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t531d != tcb41 then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/queue_perf.j':(9,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Arithmetic(Add, Ident(\"NUM\"), Number(U8, 1)) }, while_true: [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"q\")), Ident(\"n\")] }) }, Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Add, Ident(\"n\"), Number(U8, 1)) }] }\nComparison { op: NotEquals, left: Ident(\"n\"), right: Arithmetic(Add, Ident(\"NUM\"), Number(U8, 1)) }\n", opcode: JmpImm, args: [Label24(main_while_body_1)], resolved: None }
# :main_while_body_1 Some('programs/test/queue_perf.j':(9,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Arithmetic(Add, Ident("NUM"), Number(U8, 1)) }, while_true: [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Add, Ident("n"), Number(U8, 1)) }] }
# main_while_body_1
# t1 <- 0n987136/0x000f1000u32  Some('programs/test/queue_perf.j':(9,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] })
# AddressOf(Ident("q"))
# 0005b LoadImm32 [Register(0x10), Constant32(0x000f1000=987136)]
#       t1 <- 0n987136/0x000f1000u32  Some('programs/test/queue_perf.j':(9,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] })
#       AddressOf(Ident("q"))
20 10 00 10 0f 00 

# t5cf6 <- t1 U32 Some('programs/test/queue_perf.j':(9,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] })
# AddressOf(Ident("q"))
# optimized away noop copy Instruction { source: "t5cf6 <- t1 U32 Some('programs/test/queue_perf.j':(9,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"q\")), Ident(\"n\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"q\")), Ident(\"n\")] })\nAddressOf(Ident(\"q\"))\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# t531d <- n U8 Some('programs/test/queue_perf.j':(9,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] })
# Ident("n")
# 00061 Copy8 [Register(0x30), Register(0x31)]
#       t531d <- n U8 Some('programs/test/queue_perf.j':(9,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] })
#       Ident("n")
0b 30 31 

# inline_main_queue_push_3_s <- t5cf6 U32 Some('programs/test/queue_perf.j':(9,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] })
# 00064 Copy32 [Register(0x10), Register(0x1c)]
#       inline_main_queue_push_3_s <- t5cf6 U32 Some('programs/test/queue_perf.j':(9,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] })
21 10 1c 

# inline_main_queue_push_3_n <- t531d U8 Some('programs/test/queue_perf.j':(9,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] })
# 00067 Copy8 [Register(0x31), Register(0x20)]
#       inline_main_queue_push_3_n <- t531d U8 Some('programs/test/queue_perf.j':(9,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("q")), Ident("n")] })
0b 31 20 

# inline_main_queue_push_3_t565a <- inline_main_queue_push_3_s U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_push_3_t565a <- inline_main_queue_push_3_s U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_queue_push_3_values <- inline_main_queue_push_3_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 0006a Copy32 [Register(0x1c), Register(0x18)]
#       inline_main_queue_push_3_values <- inline_main_queue_push_3_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 1c 18 

# inline_main_queue_push_3_t1d36 <- inline_main_queue_push_3_values U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_main_queue_push_3_t1d36 <- inline_main_queue_push_3_values U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_queue_push_3_t4d4f <- inline_main_queue_push_3_s U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_push_3_t4d4f <- inline_main_queue_push_3_s U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 0006d Copy32 [Register(0x1c), Register(0x2c)]
#       inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 1c 2c 

# 00070 AddImm32IgnoreCarry [Register(0x2c), Constant32(0x00000104=260)]
#       inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 2c 04 01 00 00 

# inline_main_queue_push_3_t3ee <- mem[inline_main_queue_push_3_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 00076 Load8 [Register(0x2c), Register(0x28)]
#       inline_main_queue_push_3_t3ee <- mem[inline_main_queue_push_3_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 2c 28 

# inline_main_queue_push_3_t5bb7 U32 <- inline_main_queue_push_3_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# 00079 LoadImm32 [Register(0x24), Constant32(0x00000000=0)]
#       Zero-pad for inline_main_queue_push_3_t5bb7 U32 <- inline_main_queue_push_3_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
20 24 00 00 00 00 

# 0007f Copy8 [Register(0x28), Register(0x24)]
#       inline_main_queue_push_3_t5bb7 U32 <- inline_main_queue_push_3_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
0b 28 24 

# inline_main_queue_push_3_t2187 <- inline_main_queue_push_3_t1d36 Add Var(inline_main_queue_push_3_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# 00082 ClearCarry []
#       inline_main_queue_push_3_t2187 <- inline_main_queue_push_3_t1d36 Add Var(inline_main_queue_push_3_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
03 

# 00083 AddCarry32_1 [Register(0x18), Register(0x24), Register(0x18)]
#       inline_main_queue_push_3_t2187 <- inline_main_queue_push_3_t1d36 Add Var(inline_main_queue_push_3_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
30 18 24 18 

# 00087 AddCarry32_2 []
#       inline_main_queue_push_3_t2187 <- inline_main_queue_push_3_t1d36 Add Var(inline_main_queue_push_3_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
31 

# inline_main_queue_push_3_t531d <- inline_main_queue_push_3_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_main_queue_push_3_t531d <- inline_main_queue_push_3_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# mem[inline_main_queue_push_3_t2187] <- inline_main_queue_push_3_t531d U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 00088 Store8 [Register(0x20), Register(0x18)]
#       mem[inline_main_queue_push_3_t2187] <- inline_main_queue_push_3_t531d U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 20 18 

# inline_main_queue_push_3_t4d4f <- inline_main_queue_push_3_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_push_3_t4d4f <- inline_main_queue_push_3_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 0008b Copy32 [Register(0x1c), Register(0x2c)]
#       inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 1c 2c 

# 0008e AddImm32IgnoreCarry [Register(0x2c), Constant32(0x00000104=260)]
#       inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 2c 04 01 00 00 

# inline_main_queue_push_3_t4d4f <- inline_main_queue_push_3_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_push_3_t4d4f <- inline_main_queue_push_3_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 00094 Copy32 [Register(0x1c), Register(0x2c)]
#       inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 1c 2c 

# 00097 AddImm32IgnoreCarry [Register(0x2c), Constant32(0x00000104=260)]
#       inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 2c 04 01 00 00 

# inline_main_queue_push_3_t3ee <- mem[inline_main_queue_push_3_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# 0009d Load8 [Register(0x2c), Register(0x28)]
#       inline_main_queue_push_3_t3ee <- mem[inline_main_queue_push_3_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
05 2c 28 

# inline_main_queue_push_3_t6778 <- inline_main_queue_push_3_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# 000a0 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_main_queue_push_3_t6778 <- inline_main_queue_push_3_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
04 00 01 

# 000a3 Add8NoCarryIn [Register(0x28), Register(0x00), Register(0x20)]
#       inline_main_queue_push_3_t6778 <- inline_main_queue_push_3_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
14 28 00 20 

# mem[inline_main_queue_push_3_tc1ff] <- inline_main_queue_push_3_t6778 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# 000a7 Store8 [Register(0x20), Register(0x2c)]
#       mem[inline_main_queue_push_3_tc1ff] <- inline_main_queue_push_3_t6778 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
06 20 2c 

# goto inline_main_queue_push_3_function_end_queue_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_queue_push_3_function_end_queue_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_queue_push_3_function_end_queue_push)], resolved: None }
# :inline_main_queue_push_3_function_end_queue_push None
# inline_main_queue_push_3_function_end_queue_push
# t531d <- n U8 Some('programs/test/queue_perf.j':(9,5))
# Assign { target: Ident("n"), var_type: None, value: Arithmetic(Add, Ident("n"), Number(U8, 1)) }
# Arithmetic(Add, Ident("n"), Number(U8, 1))
# Ident("n")
# 000aa Copy8 [Register(0x30), Register(0x31)]
#       t531d <- n U8 Some('programs/test/queue_perf.j':(9,5))
#       Assign { target: Ident("n"), var_type: None, value: Arithmetic(Add, Ident("n"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("n"), Number(U8, 1))
#       Ident("n")
0b 30 31 

# n <- t531d Add Number(0n1/0x01u8) Some('programs/test/queue_perf.j':(9,5))
# Assign { target: Ident("n"), var_type: None, value: Arithmetic(Add, Ident("n"), Number(U8, 1)) }
# Arithmetic(Add, Ident("n"), Number(U8, 1))
# 000ad LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       n <- t531d Add Number(0n1/0x01u8) Some('programs/test/queue_perf.j':(9,5))
#       Assign { target: Ident("n"), var_type: None, value: Arithmetic(Add, Ident("n"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("n"), Number(U8, 1))
04 00 01 

# 000b0 Add8NoCarryIn [Register(0x31), Register(0x00), Register(0x30)]
#       n <- t531d Add Number(0n1/0x01u8) Some('programs/test/queue_perf.j':(9,5))
#       Assign { target: Ident("n"), var_type: None, value: Arithmetic(Add, Ident("n"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("n"), Number(U8, 1))
14 31 00 30 

# goto main_while_predicate_0 Some('programs/test/queue_perf.j':(9,5))
# 000b4 JmpImm [Label24(main_while_predicate_0)]
#       goto main_while_predicate_0 Some('programs/test/queue_perf.j':(9,5))
70 47 00 00 

# :main_while_end_2 Some('programs/test/queue_perf.j':(9,5))
# main_while_end_2
# n <- 0n10/0x0au8  Some('programs/test/queue_perf.j':(13,5))
# Assign { target: Ident("n"), var_type: None, value: Ident("NUM") }
# Ident("NUM")
# 000b8 LoadImm8 [Register(0x30), Constant8(0x0a=10)]
#       n <- 0n10/0x0au8  Some('programs/test/queue_perf.j':(13,5))
#       Assign { target: Ident("n"), var_type: None, value: Ident("NUM") }
#       Ident("NUM")
04 30 0a 

# :main_while_predicate_3 Some('programs/test/queue_perf.j':(14,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Subtract, Ident("n"), Number(U8, 1)) }] }
# main_while_predicate_3
# t531d <- n U8 Some('programs/test/queue_perf.j':(14,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Subtract, Ident("n"), Number(U8, 1)) }] }
# Comparison { op: NotEquals, left: Ident("n"), right: Number(U8, 0) }
# Ident("n")
# 000bb Copy8 [Register(0x30), Register(0x31)]
#       t531d <- n U8 Some('programs/test/queue_perf.j':(14,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Subtract, Ident("n"), Number(U8, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("n"), right: Number(U8, 0) }
#       Ident("n")
0b 30 31 

# tb36e <- 0n0/0x00u8  Some('programs/test/queue_perf.j':(14,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Subtract, Ident("n"), Number(U8, 1)) }] }
# Comparison { op: NotEquals, left: Ident("n"), right: Number(U8, 0) }
# Number(U8, 0)
# 000be LoadImm8 [Register(0x32), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/queue_perf.j':(14,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Subtract, Ident("n"), Number(U8, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("n"), right: Number(U8, 0) }
#       Number(U8, 0)
04 32 00 

# if t531d != tb36e then 'main_while_body_4' else 'main_while_end_5' Some('programs/test/queue_perf.j':(14,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Subtract, Ident("n"), Number(U8, 1)) }] }
# Comparison { op: NotEquals, left: Ident("n"), right: Number(U8, 0) }
# 000c1 Cmp8 [Register(0x31), Register(0x32)]
#       if t531d != tb36e then 'main_while_body_4' else 'main_while_end_5' Some('programs/test/queue_perf.j':(14,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Subtract, Ident("n"), Number(U8, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("n"), right: Number(U8, 0) }
15 31 32 

# 000c4 JzImm [Label24(main_while_end_5)]
#       if t531d != tb36e then 'main_while_body_4' else 'main_while_end_5' Some('programs/test/queue_perf.j':(14,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Subtract, Ident("n"), Number(U8, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("n"), right: Number(U8, 0) }
72 67 01 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t531d != tb36e then 'main_while_body_4' else 'main_while_end_5' Some('programs/test/queue_perf.j':(14,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"n\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"n\"), right: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"q\"))] }) }, [Return { value: Some(Ident(\"n\")) }])], else_block: [] }, Assign { target: Ident(\"n\"), var_type: None, value: Arithmetic(Subtract, Ident(\"n\"), Number(U8, 1)) }] }\nComparison { op: NotEquals, left: Ident(\"n\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(main_while_body_4)], resolved: None }
# :main_while_body_4 Some('programs/test/queue_perf.j':(14,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("n"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }, Assign { target: Ident("n"), var_type: None, value: Arithmetic(Subtract, Ident("n"), Number(U8, 1)) }] }
# main_while_body_4
# t531d <- n U8 Some('programs/test/queue_perf.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }
# Ident("n")
# 000c8 Copy8 [Register(0x30), Register(0x31)]
#       t531d <- n U8 Some('programs/test/queue_perf.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }
#       Ident("n")
0b 30 31 

# t2 <- 0n987136/0x000f1000u32  Some('programs/test/queue_perf.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] })
# AddressOf(Ident("q"))
# 000cb LoadImm32 [Register(0x10), Constant32(0x000f1000=987136)]
#       t2 <- 0n987136/0x000f1000u32  Some('programs/test/queue_perf.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] })
#       AddressOf(Ident("q"))
20 10 00 10 0f 00 

# t5cf6 <- t2 U32 Some('programs/test/queue_perf.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] })
# AddressOf(Ident("q"))
# optimized away noop copy Instruction { source: "t5cf6 <- t2 U32 Some('programs/test/queue_perf.j':(14,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"n\"), right: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"q\"))] }) }, [Return { value: Some(Ident(\"n\")) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"n\"), right: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"q\"))] }) }\nCall(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"q\"))] })\nAddressOf(Ident(\"q\"))\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_pop_1_s <- t5cf6 U32 Some('programs/test/queue_perf.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] })
# optimized away noop copy Instruction { source: "inline_main_queue_pop_1_s <- t5cf6 U32 Some('programs/test/queue_perf.j':(14,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"n\"), right: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"q\"))] }) }, [Return { value: Some(Ident(\"n\")) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"n\"), right: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"q\"))] }) }\nCall(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"q\"))] })\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_pop_1_t4d4f <- inline_main_queue_pop_1_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_pop_1_t4d4f <- inline_main_queue_pop_1_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_pop_1_tb702 <- inline_main_queue_pop_1_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 000d1 Copy32 [Register(0x10), Register(0x24)]
#       inline_main_queue_pop_1_tb702 <- inline_main_queue_pop_1_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 10 24 

# 000d4 AddImm32IgnoreCarry [Register(0x24), Constant32(0x00000100=256)]
#       inline_main_queue_pop_1_tb702 <- inline_main_queue_pop_1_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 24 00 01 00 00 

# inline_main_queue_pop_1_tb6dd <- mem[inline_main_queue_pop_1_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# 000da Load8 [Register(0x24), Register(0x21)]
#       inline_main_queue_pop_1_tb6dd <- mem[inline_main_queue_pop_1_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
05 24 21 

# inline_main_queue_pop_1_t4d4f <- inline_main_queue_pop_1_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_pop_1_t4d4f <- inline_main_queue_pop_1_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_pop_1_tc1ff <- inline_main_queue_pop_1_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 000dd Copy32 [Register(0x10), Register(0x1c)]
#       inline_main_queue_pop_1_tc1ff <- inline_main_queue_pop_1_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 10 1c 

# 000e0 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x00000104=260)]
#       inline_main_queue_pop_1_tc1ff <- inline_main_queue_pop_1_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 1c 04 01 00 00 

# inline_main_queue_pop_1_t3ee <- mem[inline_main_queue_pop_1_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 000e6 Load8 [Register(0x1c), Register(0x14)]
#       inline_main_queue_pop_1_t3ee <- mem[inline_main_queue_pop_1_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 1c 14 

# if inline_main_queue_pop_1_tb6dd == inline_main_queue_pop_1_t3ee then 'inline_main_queue_pop_1_queue_pop_if_true_0_1' else 'inline_main_queue_pop_1_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 000e9 Cmp8 [Register(0x21), Register(0x14)]
#       if inline_main_queue_pop_1_tb6dd == inline_main_queue_pop_1_t3ee then 'inline_main_queue_pop_1_queue_pop_if_true_0_1' else 'inline_main_queue_pop_1_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 21 14 

# 000ec JzImm [Label24(inline_main_queue_pop_1_queue_pop_if_true_0_1)]
#       if inline_main_queue_pop_1_tb6dd == inline_main_queue_pop_1_t3ee then 'inline_main_queue_pop_1_queue_pop_if_true_0_1' else 'inline_main_queue_pop_1_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 f4 00 00 

# 000f0 JmpImm [Label24(inline_main_queue_pop_1_queue_pop_if_else_0_2)]
#       if inline_main_queue_pop_1_tb6dd == inline_main_queue_pop_1_t3ee then 'inline_main_queue_pop_1_queue_pop_if_true_0_1' else 'inline_main_queue_pop_1_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 ff 00 00 

# :inline_main_queue_pop_1_queue_pop_if_true_0_1 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# inline_main_queue_pop_1_queue_pop_if_true_0_1
# inline_main_queue_pop_1_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 000f4 LoadImm8 [Register(0x20), Constant8(0x00=0)]
#       inline_main_queue_pop_1_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 20 00 

# t24cd <- inline_main_queue_pop_1_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# optimized away noop copy Instruction { source: "t24cd <- inline_main_queue_pop_1_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nReturn { value: Some(Number(U8, 0)) }\n", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# goto inline_main_queue_pop_1_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# 000f7 JmpImm [Label24(inline_main_queue_pop_1_function_end_queue_pop)]
#       goto inline_main_queue_pop_1_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
70 46 01 00 

# goto inline_main_queue_pop_1_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 000fb JmpImm [Label24(inline_main_queue_pop_1_queue_pop_if_end_0)]
#       goto inline_main_queue_pop_1_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
70 ff 00 00 

# :inline_main_queue_pop_1_queue_pop_if_else_0_2 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_queue_pop_1_queue_pop_if_else_0_2
# :inline_main_queue_pop_1_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_queue_pop_1_queue_pop_if_end_0
# inline_main_queue_pop_1_t565a <- inline_main_queue_pop_1_s U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_pop_1_t565a <- inline_main_queue_pop_1_s U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_pop_1_values <- inline_main_queue_pop_1_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 000ff Copy32 [Register(0x10), Register(0x1c)]
#       inline_main_queue_pop_1_values <- inline_main_queue_pop_1_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 10 1c 

# inline_main_queue_pop_1_t1d36 <- inline_main_queue_pop_1_values U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_main_queue_pop_1_t1d36 <- inline_main_queue_pop_1_values U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))\nAssign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_queue_pop_1_t4d4f <- inline_main_queue_pop_1_s U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_pop_1_t4d4f <- inline_main_queue_pop_1_s U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))\nAssign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_pop_1_tb702 <- inline_main_queue_pop_1_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 00102 Copy32 [Register(0x10), Register(0x24)]
#       inline_main_queue_pop_1_tb702 <- inline_main_queue_pop_1_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 10 24 

# 00105 AddImm32IgnoreCarry [Register(0x24), Constant32(0x00000100=256)]
#       inline_main_queue_pop_1_tb702 <- inline_main_queue_pop_1_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 24 00 01 00 00 

# inline_main_queue_pop_1_tb6dd <- mem[inline_main_queue_pop_1_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# 0010b Load8 [Register(0x24), Register(0x21)]
#       inline_main_queue_pop_1_tb6dd <- mem[inline_main_queue_pop_1_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
05 24 21 

# inline_main_queue_pop_1_tb469 U32 <- inline_main_queue_pop_1_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# 0010e LoadImm32 [Register(0x18), Constant32(0x00000000=0)]
#       Zero-pad for inline_main_queue_pop_1_tb469 U32 <- inline_main_queue_pop_1_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
20 18 00 00 00 00 

# 00114 Copy8 [Register(0x21), Register(0x18)]
#       inline_main_queue_pop_1_tb469 U32 <- inline_main_queue_pop_1_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
0b 21 18 

# inline_main_queue_pop_1_tae11 <- inline_main_queue_pop_1_t1d36 Add Var(inline_main_queue_pop_1_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# 00117 ClearCarry []
#       inline_main_queue_pop_1_tae11 <- inline_main_queue_pop_1_t1d36 Add Var(inline_main_queue_pop_1_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
03 

# 00118 AddCarry32_1 [Register(0x1c), Register(0x18), Register(0x1c)]
#       inline_main_queue_pop_1_tae11 <- inline_main_queue_pop_1_t1d36 Add Var(inline_main_queue_pop_1_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
30 1c 18 1c 

# 0011c AddCarry32_2 []
#       inline_main_queue_pop_1_tae11 <- inline_main_queue_pop_1_t1d36 Add Var(inline_main_queue_pop_1_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
31 

# inline_main_queue_pop_1_value <- mem[inline_main_queue_pop_1_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 0011d Load8 [Register(0x1c), Register(0x14)]
#       inline_main_queue_pop_1_value <- mem[inline_main_queue_pop_1_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 1c 14 

# inline_main_queue_pop_1_t4d4f <- inline_main_queue_pop_1_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_pop_1_t4d4f <- inline_main_queue_pop_1_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_pop_1_tb702 <- inline_main_queue_pop_1_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 00120 Copy32 [Register(0x10), Register(0x24)]
#       inline_main_queue_pop_1_tb702 <- inline_main_queue_pop_1_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 10 24 

# 00123 AddImm32IgnoreCarry [Register(0x24), Constant32(0x00000100=256)]
#       inline_main_queue_pop_1_tb702 <- inline_main_queue_pop_1_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 24 00 01 00 00 

# inline_main_queue_pop_1_t4d4f <- inline_main_queue_pop_1_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_pop_1_t4d4f <- inline_main_queue_pop_1_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_pop_1_tb702 <- inline_main_queue_pop_1_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 00129 Copy32 [Register(0x10), Register(0x24)]
#       inline_main_queue_pop_1_tb702 <- inline_main_queue_pop_1_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 10 24 

# 0012c AddImm32IgnoreCarry [Register(0x24), Constant32(0x00000100=256)]
#       inline_main_queue_pop_1_tb702 <- inline_main_queue_pop_1_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 24 00 01 00 00 

# inline_main_queue_pop_1_tb6dd <- mem[inline_main_queue_pop_1_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# 00132 Load8 [Register(0x24), Register(0x21)]
#       inline_main_queue_pop_1_tb6dd <- mem[inline_main_queue_pop_1_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
05 24 21 

# inline_main_queue_pop_1_t6fdb <- inline_main_queue_pop_1_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# 00135 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_main_queue_pop_1_t6fdb <- inline_main_queue_pop_1_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
04 00 01 

# 00138 Add8NoCarryIn [Register(0x21), Register(0x00), Register(0x20)]
#       inline_main_queue_pop_1_t6fdb <- inline_main_queue_pop_1_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
14 21 00 20 

# mem[inline_main_queue_pop_1_tb702] <- inline_main_queue_pop_1_t6fdb U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# 0013c Store8 [Register(0x20), Register(0x24)]
#       mem[inline_main_queue_pop_1_tb702] <- inline_main_queue_pop_1_t6fdb U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
06 20 24 

# inline_main_queue_pop_1_t44ed <- inline_main_queue_pop_1_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 0013f Copy8 [Register(0x14), Register(0x20)]
#       inline_main_queue_pop_1_t44ed <- inline_main_queue_pop_1_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 14 20 

# t24cd <- inline_main_queue_pop_1_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "t24cd <- inline_main_queue_pop_1_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# goto inline_main_queue_pop_1_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# 00142 JmpImm [Label24(inline_main_queue_pop_1_function_end_queue_pop)]
#       goto inline_main_queue_pop_1_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
70 46 01 00 

# :inline_main_queue_pop_1_function_end_queue_pop None
# inline_main_queue_pop_1_function_end_queue_pop
# if t531d != t24cd then 'main_if_true_0_7' else 'main_if_else_0_8' Some('programs/test/queue_perf.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }
# 00146 Cmp8 [Register(0x31), Register(0x20)]
#       if t531d != t24cd then 'main_if_true_0_7' else 'main_if_else_0_8' Some('programs/test/queue_perf.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }
15 31 20 

# 00149 JzImm [Label24(main_if_else_0_8)]
#       if t531d != t24cd then 'main_if_true_0_7' else 'main_if_else_0_8' Some('programs/test/queue_perf.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }
72 59 01 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t531d != t24cd then 'main_if_true_0_7' else 'main_if_else_0_8' Some('programs/test/queue_perf.j':(14,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"n\"), right: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"q\"))] }) }, [Return { value: Some(Ident(\"n\")) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"n\"), right: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"q\"))] }) }\n", opcode: JmpImm, args: [Label24(main_if_true_0_7)], resolved: None }
# :main_if_true_0_7 Some('programs/test/queue_perf.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("n"), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Ident("n")) }])], else_block: [] }
# main_if_true_0_7
# t531d <- n U8 Some('programs/test/queue_perf.j':(14,5))
# Return { value: Some(Ident("n")) }
# Ident("n")
# 0014d Copy8 [Register(0x30), Register(0x31)]
#       t531d <- n U8 Some('programs/test/queue_perf.j':(14,5))
#       Return { value: Some(Ident("n")) }
#       Ident("n")
0b 30 31 

# return Some(t531d) Some('programs/test/queue_perf.j':(14,5))
# Return { value: Some(Ident("n")) }
# 00150 Copy8 [Register(0x31), Register(0x00)]
#       return Some(t531d) Some('programs/test/queue_perf.j':(14,5))
#       Return { value: Some(Ident("n")) }
0b 31 00 

# 00153 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto main_if_end_6 Some('programs/test/queue_perf.j':(14,5))
# 00155 JmpImm [Label24(main_if_end_6)]
#       goto main_if_end_6 Some('programs/test/queue_perf.j':(14,5))
70 59 01 00 

# :main_if_else_0_8 Some('programs/test/queue_perf.j':(14,5))
# main_if_else_0_8
# :main_if_end_6 Some('programs/test/queue_perf.j':(14,5))
# main_if_end_6
# t531d <- n U8 Some('programs/test/queue_perf.j':(14,5))
# Assign { target: Ident("n"), var_type: None, value: Arithmetic(Subtract, Ident("n"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("n"), Number(U8, 1))
# Ident("n")
# 00159 Copy8 [Register(0x30), Register(0x31)]
#       t531d <- n U8 Some('programs/test/queue_perf.j':(14,5))
#       Assign { target: Ident("n"), var_type: None, value: Arithmetic(Subtract, Ident("n"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("n"), Number(U8, 1))
#       Ident("n")
0b 30 31 

# n <- t531d Subtract Number(0n1/0x01u8) Some('programs/test/queue_perf.j':(14,5))
# Assign { target: Ident("n"), var_type: None, value: Arithmetic(Subtract, Ident("n"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("n"), Number(U8, 1))
# 0015c LoadImm8 [Register(0x00), Constant8(0xff=255)]
#       n <- t531d Subtract Number(0n1/0x01u8) Some('programs/test/queue_perf.j':(14,5))
#       Assign { target: Ident("n"), var_type: None, value: Arithmetic(Subtract, Ident("n"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("n"), Number(U8, 1))
04 00 ff 

# 0015f Add8NoCarryIn [Register(0x31), Register(0x00), Register(0x30)]
#       n <- t531d Subtract Number(0n1/0x01u8) Some('programs/test/queue_perf.j':(14,5))
#       Assign { target: Ident("n"), var_type: None, value: Arithmetic(Subtract, Ident("n"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("n"), Number(U8, 1))
14 31 00 30 

# goto main_while_predicate_3 Some('programs/test/queue_perf.j':(14,5))
# 00163 JmpImm [Label24(main_while_predicate_3)]
#       goto main_while_predicate_3 Some('programs/test/queue_perf.j':(14,5))
70 bb 00 00 

# :main_while_end_5 Some('programs/test/queue_perf.j':(14,5))
# main_while_end_5
# tb36e <- 0n0/0x00u8  Some('programs/test/queue_perf.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Number(U8, 255)) }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }
# Number(U8, 0)
# 00167 LoadImm8 [Register(0x32), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/queue_perf.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Number(U8, 255)) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }
#       Number(U8, 0)
04 32 00 

# t3 <- 0n987136/0x000f1000u32  Some('programs/test/queue_perf.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Number(U8, 255)) }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] })
# AddressOf(Ident("q"))
# 0016a LoadImm32 [Register(0x10), Constant32(0x000f1000=987136)]
#       t3 <- 0n987136/0x000f1000u32  Some('programs/test/queue_perf.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Number(U8, 255)) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] })
#       AddressOf(Ident("q"))
20 10 00 10 0f 00 

# t5cf6 <- t3 U32 Some('programs/test/queue_perf.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Number(U8, 255)) }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] })
# AddressOf(Ident("q"))
# optimized away noop copy Instruction { source: "t5cf6 <- t3 U32 Some('programs/test/queue_perf.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"q\"))] }) }, [Return { value: Some(Number(U8, 255)) }])], else_block: [] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"q\"))] }) }\nCall(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"q\"))] })\nAddressOf(Ident(\"q\"))\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_pop_2_s <- t5cf6 U32 Some('programs/test/queue_perf.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Number(U8, 255)) }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] })
# optimized away noop copy Instruction { source: "inline_main_queue_pop_2_s <- t5cf6 U32 Some('programs/test/queue_perf.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"q\"))] }) }, [Return { value: Some(Number(U8, 255)) }])], else_block: [] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"q\"))] }) }\nCall(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"q\"))] })\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_pop_2_t4d4f <- inline_main_queue_pop_2_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_pop_2_t4d4f <- inline_main_queue_pop_2_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_pop_2_tb702 <- inline_main_queue_pop_2_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 00170 Copy32 [Register(0x10), Register(0x24)]
#       inline_main_queue_pop_2_tb702 <- inline_main_queue_pop_2_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 10 24 

# 00173 AddImm32IgnoreCarry [Register(0x24), Constant32(0x00000100=256)]
#       inline_main_queue_pop_2_tb702 <- inline_main_queue_pop_2_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 24 00 01 00 00 

# inline_main_queue_pop_2_tb6dd <- mem[inline_main_queue_pop_2_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# 00179 Load8 [Register(0x24), Register(0x21)]
#       inline_main_queue_pop_2_tb6dd <- mem[inline_main_queue_pop_2_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
05 24 21 

# inline_main_queue_pop_2_t4d4f <- inline_main_queue_pop_2_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_pop_2_t4d4f <- inline_main_queue_pop_2_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_pop_2_tc1ff <- inline_main_queue_pop_2_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 0017c Copy32 [Register(0x10), Register(0x1c)]
#       inline_main_queue_pop_2_tc1ff <- inline_main_queue_pop_2_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 10 1c 

# 0017f AddImm32IgnoreCarry [Register(0x1c), Constant32(0x00000104=260)]
#       inline_main_queue_pop_2_tc1ff <- inline_main_queue_pop_2_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 1c 04 01 00 00 

# inline_main_queue_pop_2_t3ee <- mem[inline_main_queue_pop_2_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 00185 Load8 [Register(0x1c), Register(0x14)]
#       inline_main_queue_pop_2_t3ee <- mem[inline_main_queue_pop_2_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 1c 14 

# if inline_main_queue_pop_2_tb6dd == inline_main_queue_pop_2_t3ee then 'inline_main_queue_pop_2_queue_pop_if_true_0_1' else 'inline_main_queue_pop_2_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 00188 Cmp8 [Register(0x21), Register(0x14)]
#       if inline_main_queue_pop_2_tb6dd == inline_main_queue_pop_2_t3ee then 'inline_main_queue_pop_2_queue_pop_if_true_0_1' else 'inline_main_queue_pop_2_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 21 14 

# 0018b JzImm [Label24(inline_main_queue_pop_2_queue_pop_if_true_0_1)]
#       if inline_main_queue_pop_2_tb6dd == inline_main_queue_pop_2_t3ee then 'inline_main_queue_pop_2_queue_pop_if_true_0_1' else 'inline_main_queue_pop_2_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 93 01 00 

# 0018f JmpImm [Label24(inline_main_queue_pop_2_queue_pop_if_else_0_2)]
#       if inline_main_queue_pop_2_tb6dd == inline_main_queue_pop_2_t3ee then 'inline_main_queue_pop_2_queue_pop_if_true_0_1' else 'inline_main_queue_pop_2_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 9e 01 00 

# :inline_main_queue_pop_2_queue_pop_if_true_0_1 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# inline_main_queue_pop_2_queue_pop_if_true_0_1
# inline_main_queue_pop_2_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 00193 LoadImm8 [Register(0x20), Constant8(0x00=0)]
#       inline_main_queue_pop_2_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 20 00 

# t24cd <- inline_main_queue_pop_2_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# optimized away noop copy Instruction { source: "t24cd <- inline_main_queue_pop_2_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nReturn { value: Some(Number(U8, 0)) }\n", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# goto inline_main_queue_pop_2_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# 00196 JmpImm [Label24(inline_main_queue_pop_2_function_end_queue_pop)]
#       goto inline_main_queue_pop_2_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
70 e5 01 00 

# goto inline_main_queue_pop_2_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 0019a JmpImm [Label24(inline_main_queue_pop_2_queue_pop_if_end_0)]
#       goto inline_main_queue_pop_2_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
70 9e 01 00 

# :inline_main_queue_pop_2_queue_pop_if_else_0_2 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_queue_pop_2_queue_pop_if_else_0_2
# :inline_main_queue_pop_2_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_queue_pop_2_queue_pop_if_end_0
# inline_main_queue_pop_2_t565a <- inline_main_queue_pop_2_s U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_pop_2_t565a <- inline_main_queue_pop_2_s U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_pop_2_values <- inline_main_queue_pop_2_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 0019e Copy32 [Register(0x10), Register(0x1c)]
#       inline_main_queue_pop_2_values <- inline_main_queue_pop_2_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 10 1c 

# inline_main_queue_pop_2_t1d36 <- inline_main_queue_pop_2_values U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_main_queue_pop_2_t1d36 <- inline_main_queue_pop_2_values U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))\nAssign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_queue_pop_2_t4d4f <- inline_main_queue_pop_2_s U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_pop_2_t4d4f <- inline_main_queue_pop_2_s U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))\nAssign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_pop_2_tb702 <- inline_main_queue_pop_2_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 001a1 Copy32 [Register(0x10), Register(0x24)]
#       inline_main_queue_pop_2_tb702 <- inline_main_queue_pop_2_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 10 24 

# 001a4 AddImm32IgnoreCarry [Register(0x24), Constant32(0x00000100=256)]
#       inline_main_queue_pop_2_tb702 <- inline_main_queue_pop_2_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 24 00 01 00 00 

# inline_main_queue_pop_2_tb6dd <- mem[inline_main_queue_pop_2_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# 001aa Load8 [Register(0x24), Register(0x21)]
#       inline_main_queue_pop_2_tb6dd <- mem[inline_main_queue_pop_2_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
05 24 21 

# inline_main_queue_pop_2_tb469 U32 <- inline_main_queue_pop_2_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# 001ad LoadImm32 [Register(0x18), Constant32(0x00000000=0)]
#       Zero-pad for inline_main_queue_pop_2_tb469 U32 <- inline_main_queue_pop_2_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
20 18 00 00 00 00 

# 001b3 Copy8 [Register(0x21), Register(0x18)]
#       inline_main_queue_pop_2_tb469 U32 <- inline_main_queue_pop_2_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
0b 21 18 

# inline_main_queue_pop_2_tae11 <- inline_main_queue_pop_2_t1d36 Add Var(inline_main_queue_pop_2_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# 001b6 ClearCarry []
#       inline_main_queue_pop_2_tae11 <- inline_main_queue_pop_2_t1d36 Add Var(inline_main_queue_pop_2_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
03 

# 001b7 AddCarry32_1 [Register(0x1c), Register(0x18), Register(0x1c)]
#       inline_main_queue_pop_2_tae11 <- inline_main_queue_pop_2_t1d36 Add Var(inline_main_queue_pop_2_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
30 1c 18 1c 

# 001bb AddCarry32_2 []
#       inline_main_queue_pop_2_tae11 <- inline_main_queue_pop_2_t1d36 Add Var(inline_main_queue_pop_2_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
31 

# inline_main_queue_pop_2_value <- mem[inline_main_queue_pop_2_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 001bc Load8 [Register(0x1c), Register(0x14)]
#       inline_main_queue_pop_2_value <- mem[inline_main_queue_pop_2_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 1c 14 

# inline_main_queue_pop_2_t4d4f <- inline_main_queue_pop_2_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_pop_2_t4d4f <- inline_main_queue_pop_2_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_pop_2_tb702 <- inline_main_queue_pop_2_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 001bf Copy32 [Register(0x10), Register(0x24)]
#       inline_main_queue_pop_2_tb702 <- inline_main_queue_pop_2_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 10 24 

# 001c2 AddImm32IgnoreCarry [Register(0x24), Constant32(0x00000100=256)]
#       inline_main_queue_pop_2_tb702 <- inline_main_queue_pop_2_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 24 00 01 00 00 

# inline_main_queue_pop_2_t4d4f <- inline_main_queue_pop_2_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_queue_pop_2_t4d4f <- inline_main_queue_pop_2_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_main_queue_pop_2_tb702 <- inline_main_queue_pop_2_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 001c8 Copy32 [Register(0x10), Register(0x24)]
#       inline_main_queue_pop_2_tb702 <- inline_main_queue_pop_2_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 10 24 

# 001cb AddImm32IgnoreCarry [Register(0x24), Constant32(0x00000100=256)]
#       inline_main_queue_pop_2_tb702 <- inline_main_queue_pop_2_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 24 00 01 00 00 

# inline_main_queue_pop_2_tb6dd <- mem[inline_main_queue_pop_2_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# 001d1 Load8 [Register(0x24), Register(0x21)]
#       inline_main_queue_pop_2_tb6dd <- mem[inline_main_queue_pop_2_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
05 24 21 

# inline_main_queue_pop_2_t6fdb <- inline_main_queue_pop_2_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# 001d4 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_main_queue_pop_2_t6fdb <- inline_main_queue_pop_2_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
04 00 01 

# 001d7 Add8NoCarryIn [Register(0x21), Register(0x00), Register(0x20)]
#       inline_main_queue_pop_2_t6fdb <- inline_main_queue_pop_2_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
14 21 00 20 

# mem[inline_main_queue_pop_2_tb702] <- inline_main_queue_pop_2_t6fdb U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# 001db Store8 [Register(0x20), Register(0x24)]
#       mem[inline_main_queue_pop_2_tb702] <- inline_main_queue_pop_2_t6fdb U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
06 20 24 

# inline_main_queue_pop_2_t44ed <- inline_main_queue_pop_2_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 001de Copy8 [Register(0x14), Register(0x20)]
#       inline_main_queue_pop_2_t44ed <- inline_main_queue_pop_2_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 14 20 

# t24cd <- inline_main_queue_pop_2_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "t24cd <- inline_main_queue_pop_2_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# goto inline_main_queue_pop_2_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# 001e1 JmpImm [Label24(inline_main_queue_pop_2_function_end_queue_pop)]
#       goto inline_main_queue_pop_2_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
70 e5 01 00 

# :inline_main_queue_pop_2_function_end_queue_pop None
# inline_main_queue_pop_2_function_end_queue_pop
# if tb36e != t24cd then 'main_if_true_0_10' else 'main_if_else_0_11' Some('programs/test/queue_perf.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Number(U8, 255)) }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }
# 001e5 Cmp8 [Register(0x32), Register(0x20)]
#       if tb36e != t24cd then 'main_if_true_0_10' else 'main_if_else_0_11' Some('programs/test/queue_perf.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Number(U8, 255)) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }
15 32 20 

# 001e8 JzImm [Label24(main_if_else_0_11)]
#       if tb36e != t24cd then 'main_if_true_0_10' else 'main_if_else_0_11' Some('programs/test/queue_perf.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Number(U8, 255)) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }
72 f8 01 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb36e != t24cd then 'main_if_true_0_10' else 'main_if_else_0_11' Some('programs/test/queue_perf.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"q\"))] }) }, [Return { value: Some(Number(U8, 255)) }])], else_block: [] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"q\"))] }) }\n", opcode: JmpImm, args: [Label24(main_if_true_0_10)], resolved: None }
# :main_if_true_0_10 Some('programs/test/queue_perf.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("q"))] }) }, [Return { value: Some(Number(U8, 255)) }])], else_block: [] }
# main_if_true_0_10
# tc168 <- 0n255/0xffu8  Some('programs/test/queue_perf.j':(21,5))
# Return { value: Some(Number(U8, 255)) }
# Number(U8, 255)
# 001ec LoadImm8 [Register(0x20), Constant8(0xff=255)]
#       tc168 <- 0n255/0xffu8  Some('programs/test/queue_perf.j':(21,5))
#       Return { value: Some(Number(U8, 255)) }
#       Number(U8, 255)
04 20 ff 

# return Some(tc168) Some('programs/test/queue_perf.j':(21,5))
# Return { value: Some(Number(U8, 255)) }
# 001ef Copy8 [Register(0x20), Register(0x00)]
#       return Some(tc168) Some('programs/test/queue_perf.j':(21,5))
#       Return { value: Some(Number(U8, 255)) }
0b 20 00 

# 001f2 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto main_if_end_9 Some('programs/test/queue_perf.j':(21,5))
# 001f4 JmpImm [Label24(main_if_end_9)]
#       goto main_if_end_9 Some('programs/test/queue_perf.j':(21,5))
70 f8 01 00 

# :main_if_else_0_11 Some('programs/test/queue_perf.j':(21,5))
# main_if_else_0_11
# :main_if_end_9 Some('programs/test/queue_perf.j':(21,5))
# main_if_end_9
# :function_end_main None
# function_end_main
# Unreachable None
# 001f8 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# hits:540 pc:00070=main+0x4d
# Instruction(Instruction { source: "inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\n", opcode: AddImm32IgnoreCarry, args: [Register(0x2c), Constant32(0x00000104=260)], resolved: None })
# hits:540 pc:0008e=main+0x6b
# Instruction(Instruction { source: "inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\n", opcode: AddImm32IgnoreCarry, args: [Register(0x2c), Constant32(0x00000104=260)], resolved: None })
# hits:540 pc:00097=main+0x74
# Instruction(Instruction { source: "inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\n", opcode: AddImm32IgnoreCarry, args: [Register(0x2c), Constant32(0x00000104=260)], resolved: None })
# hits:470 pc:00083=main+0x60
# Instruction(Instruction { source: "inline_main_queue_push_3_t2187 <- inline_main_queue_push_3_t1d36 Add Var(inline_main_queue_push_3_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\n", opcode: AddCarry32_1, args: [Register(0x18), Register(0x24), Register(0x18)], resolved: None })
# hits:370 pc:00064=main+0x41
# Comment("inline_main_queue_push_3_s <- t5cf6 U32 Some('programs/test/queue_perf.j':(9,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"q\")), Ident(\"n\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"q\")), Ident(\"n\")] })\n")
# Instruction(Instruction { source: "inline_main_queue_push_3_s <- t5cf6 U32 Some('programs/test/queue_perf.j':(9,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"q\")), Ident(\"n\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"q\")), Ident(\"n\")] })\n", opcode: Copy32, args: [Register(0x10), Register(0x1c)], resolved: None })
# hits:370 pc:0006a=main+0x47
# Comment("inline_main_queue_push_3_t565a <- inline_main_queue_push_3_s U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n")
# Comment("optimized away noop copy Instruction { source: \"inline_main_queue_push_3_t565a <- inline_main_queue_push_3_s U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))\\nAssign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\\nAddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\\nCast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\\nIdent(\\\"s\\\")\\n\", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }")
# Comment("inline_main_queue_push_3_values <- inline_main_queue_push_3_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\n")
# Instruction(Instruction { source: "inline_main_queue_push_3_values <- inline_main_queue_push_3_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\n", opcode: Copy32, args: [Register(0x1c), Register(0x18)], resolved: None })
# hits:370 pc:0006d=main+0x4a
# Comment("inline_main_queue_push_3_t1d36 <- inline_main_queue_push_3_values U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n")
# Comment("optimized away noop copy Instruction { source: \"inline_main_queue_push_3_t1d36 <- inline_main_queue_push_3_values U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))\\nAssign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\\nIdent(\\\"values\\\")\\n\", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }")
# Comment("inline_main_queue_push_3_t4d4f <- inline_main_queue_push_3_s U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n")
# Comment("optimized away noop copy Instruction { source: \"inline_main_queue_push_3_t4d4f <- inline_main_queue_push_3_s U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))\\nAssign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\\nPtrFieldDeref(\\\"s\\\", \\\"last\\\")\\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\\nCast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\\nIdent(\\\"s\\\")\\n\", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }")
# Comment("inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\n")
# Instruction(Instruction { source: "inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\n", opcode: Copy32, args: [Register(0x1c), Register(0x2c)], resolved: None })
# hits:370 pc:0008b=main+0x68
# Comment("inline_main_queue_push_3_t4d4f <- inline_main_queue_push_3_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n")
# Comment("optimized away noop copy Instruction { source: \"inline_main_queue_push_3_t4d4f <- inline_main_queue_push_3_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))\\nAssign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\\nCast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\\nIdent(\\\"s\\\")\\n\", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }")
# Comment("inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\n")
# Instruction(Instruction { source: "inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\n", opcode: Copy32, args: [Register(0x1c), Register(0x2c)], resolved: None })
# hits:370 pc:00094=main+0x71
# Comment("inline_main_queue_push_3_t4d4f <- inline_main_queue_push_3_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n")
# Comment("optimized away noop copy Instruction { source: \"inline_main_queue_push_3_t4d4f <- inline_main_queue_push_3_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))\\nAssign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\\nArithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\\nPtrFieldDeref(\\\"s\\\", \\\"last\\\")\\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\\nCast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\\nIdent(\\\"s\\\")\\n\", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }")
# Comment("inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\n")
# Instruction(Instruction { source: "inline_main_queue_push_3_tc1ff <- inline_main_queue_push_3_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\n", opcode: Copy32, args: [Register(0x1c), Register(0x2c)], resolved: None })
# hits:320 pc:00087=main+0x64
# Instruction(Instruction { source: "inline_main_queue_push_3_t2187 <- inline_main_queue_push_3_t1d36 Add Var(inline_main_queue_push_3_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\n", opcode: AddCarry32_2, args: [], resolved: None })
# Tick Count: 75360
