v2.0 raw
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) } -> 987136
# const Number(USIZE, 987136) -> 987136
# const Number(U8, 0) -> 0
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) } -> 987140
# const Number(USIZE, 987140) -> 987140
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) } -> 987136
# const Number(USIZE, 987136) -> 987136
# const Number(U8, 0) -> 0
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) } -> 987140
# const Number(USIZE, 987140) -> 987140
# const Number(U8, 0) -> 0
# const AddressOf(Ident("stdin")) -> 987236
# const Number(USIZE, 987236) -> 987236
# const Number(U8, 0) -> 0
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) } -> 987140
# const Number(USIZE, 987140) -> 987140
# const Number(U8, 0) -> 0
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) } -> 987136
# const Number(USIZE, 987136) -> 987136
# const Number(U8, 0) -> 0
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) } -> 987136
# const Number(USIZE, 987136) -> 987136
# const Number(U8, 1) -> 1
# const Number(U8, 0) -> 0
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) } -> 987140
# const Number(USIZE, 987140) -> 987140
# const Number(U8, 1) -> 1
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) } -> 987140
# const Number(USIZE, 987140) -> 987140
# const Number(U8, 0) -> 0
# In IlFunctionId("Keyboard_poll"), resolved the constant val `[100, 16, 15, 0]` for var `tfff6`.
# const Number(USIZE, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const AddressOf(Ident("stdin")) -> 987236
# const Number(USIZE, 987236) -> 987236
# const Number(U8, 0) -> 0
# const AddressOf(Ident("stdin")) -> 987236
# const Number(USIZE, 987236) -> 987236
# In IlFunctionId("getchar"), resolved the constant val `[8, 16, 15, 0]` for var `t0`.
# In IlFunctionId("getchar"), resolved the constant val `[100, 16, 15, 0]` for var `tfff6`.
# const Number(USIZE, 2) -> 2
# const Number(USIZE, 2) -> 2
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `td0f3` - which is also never modified. Replacing refs to latter with the former and deleting the copy: td0f3 <- i U8
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(U8, 80) -> 80
# const Number(U8, 32) -> 32
# const Number(U8, 3) -> 3
# const Number(USIZE, 1) -> 1
# const Number(U8, 3) -> 3
# const Number(USIZE, 1) -> 1
# const Number(U8, 3) -> 3
# const Number(USIZE, 1) -> 1
# const Number(U8, 2) -> 2
# const Number(USIZE, 2) -> 2
# const Number(U8, 2) -> 2
# const Number(U8, 8) -> 8
# const Number(USIZE, 2) -> 2
# const Number(U8, 0) -> 0
# const Number(U8, 12) -> 12
# const Number(USIZE, 2) -> 2
# const Number(U8, 0) -> 0
# const Number(U8, 1) -> 1
# const Number(USIZE, 2) -> 2
# In IlFunctionId("lcd_init"), resolved the constant val `[12, 16, 15, 0]` for var `t0`.
# const Number(U8, 10) -> 10
# const Number(U8, 32) -> 32
# const Number(U8, 80) -> 80
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t0`.
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t1`.
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t2`.
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t3`.
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t4`.
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t5`.
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t6`.
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t7`.
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t8`.
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t9`.
# const Number(U8, 0) -> 0
# const Number(U8, 60) -> 60
# const Number(U8, 80) -> 80
# const Number(U8, 32) -> 32
# const Number(U8, 32) -> 32
# const Number(U8, 32) -> 32
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `[12, 16, 15, 0]` for var `t0`.
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `[12, 16, 15, 0]` for var `t1`.
# const Number(U8, 72) -> 72
# const Number(U8, 105) -> 105
# const Number(U8, 33) -> 33
# const Number(U8, 10) -> 10
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(U8, 62) -> 62
# const Number(U8, 58) -> 58
# const Number(U8, 0) -> 0
# const Number(U8, 10) -> 10
# const Number(U8, 113) -> 113
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# In IlFunctionId("putc"), resolved the constant val `[96, 16, 15, 0]` for var `t0`.
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_push"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U8
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(U8, 13) -> 13
# const Number(U8, 10) -> 10
# const Number(U8, 0) -> 0
# const Number(U8, 1) -> 1
# const Number(U8, 1) -> 1
# const AddressOf(Ident("stdin")) -> 987236
# const Number(USIZE, 987236) -> 987236
# In IlFunctionId("stdio_init"), resolved the constant val `[96, 16, 15, 0]` for var `t0`.
# In IlFunctionId("stdio_init"), resolved the constant val `[8, 16, 15, 0]` for var `t1`.
# In IlFunctionId("stdio_init"), resolved the constant val `[100, 16, 15, 0]` for var `tfff6`.
# const Number(U8, 0) -> 0
# In IlFunctionId("test_delay"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U32
# const Number(U8, 0) -> 0
# In IlFunctionId("Keyboard_poll"), resolved the constant val `[100, 16, 15, 0]` for var `inline_Keyboard_poll_queue_push_5_s`.
# In IlFunctionId("Keyboard_poll"), resolved the constant val `[100, 16, 15, 0]` for var `inline_Keyboard_poll_queue_push_5_t4d4f`.
# In IlFunctionId("Keyboard_poll"), resolved the constant val `[104, 17, 15, 0]` for var `inline_Keyboard_poll_queue_push_5_tc1ff`.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_5_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_5_s <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_5_t4d4f <- inline_Keyboard_poll_queue_push_5_s U32` with constant `inline_Keyboard_poll_queue_push_5_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_5_tc1ff <- inline_Keyboard_poll_queue_push_5_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_5_tc1ff <- 0n987496/0x000f1168u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_5_t4d4f <- inline_Keyboard_poll_queue_push_5_s U32` with constant `inline_Keyboard_poll_queue_push_5_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_5_tc1ff <- inline_Keyboard_poll_queue_push_5_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_5_tc1ff <- 0n987496/0x000f1168u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_5_t4d4f <- inline_Keyboard_poll_queue_push_5_s U32` with constant `inline_Keyboard_poll_queue_push_5_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_5_tc1ff <- inline_Keyboard_poll_queue_push_5_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_5_tc1ff <- 0n987496/0x000f1168u32 `.
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_5_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_5_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_5_t4d4f <- inline_Keyboard_poll_queue_push_5_s U32` with constant `inline_Keyboard_poll_queue_push_5_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_5_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_5_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_5_t4d4f <- inline_Keyboard_poll_queue_push_5_s U32` with constant `inline_Keyboard_poll_queue_push_5_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_5_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_5_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_5_t4d4f <- inline_Keyboard_poll_queue_push_5_s U32` with constant `inline_Keyboard_poll_queue_push_5_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("Keyboard_poll"), var `tfff6` is written to, but never read. Removing the instruction that writes to it: (tfff6 <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Keyboard.j':(31,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(USIZE, 987236)"] })
# In IlFunctionId("main"), resolved the constant val `[100, 16, 15, 0]` for var `inline_main_getchar_7_inline_getchar_queue_pop_4_s`.
# In IlFunctionId("main"), resolved the constant val `[100, 16, 15, 0]` for var `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f`.
# In IlFunctionId("main"), resolved the constant val `[100, 17, 15, 0]` for var `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702`.
# In IlFunctionId("main"), resolved the constant val `[104, 17, 15, 0]` for var `inline_main_getchar_7_inline_getchar_queue_pop_4_tc1ff`.
# In IlFunctionId("main"), resolved the constant val `[100, 16, 15, 0]` for var `inline_main_getchar_7_inline_getchar_queue_push_6_s`.
# In IlFunctionId("main"), resolved the constant val `[100, 16, 15, 0]` for var `inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f`.
# In IlFunctionId("main"), resolved the constant val `[104, 17, 15, 0]` for var `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff`.
# In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_push_6_s <- inline_main_getchar_7_tfff6 U32` with constant `inline_main_getchar_7_inline_getchar_queue_push_6_s <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f <- inline_main_getchar_7_inline_getchar_queue_push_6_s U32` with constant `inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- 0n987496/0x000f1168u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f <- inline_main_getchar_7_inline_getchar_queue_push_6_s U32` with constant `inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- 0n987496/0x000f1168u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f <- inline_main_getchar_7_inline_getchar_queue_push_6_s U32` with constant `inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- 0n987496/0x000f1168u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_s <- inline_main_getchar_7_tfff6 U32` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_s <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- inline_main_getchar_7_inline_getchar_queue_pop_4_s U32` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- inline_main_getchar_7_inline_getchar_queue_pop_4_s U32` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_tc1ff <- inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_tc1ff <- 0n987496/0x000f1168u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- inline_main_getchar_7_inline_getchar_queue_pop_4_s U32` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- inline_main_getchar_7_inline_getchar_queue_pop_4_s U32` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- inline_main_getchar_7_inline_getchar_queue_pop_4_s U32` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32 `.
# In IlFunctionId("main"), var `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- inline_main_getchar_7_inline_getchar_queue_pop_4_s U32` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("main"), var `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- inline_main_getchar_7_inline_getchar_queue_pop_4_s U32` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("main"), var `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(18,5)), SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- inline_main_getchar_7_inline_getchar_queue_pop_4_s U32` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("main"), var `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- inline_main_getchar_7_inline_getchar_queue_pop_4_s U32` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("main"), var `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- inline_main_getchar_7_inline_getchar_queue_pop_4_s U32` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("main"), var `inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f <- inline_main_getchar_7_inline_getchar_queue_push_6_s U32` with constant `inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("main"), var `inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f <- inline_main_getchar_7_inline_getchar_queue_push_6_s U32` with constant `inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("main"), var `inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f <- inline_main_getchar_7_inline_getchar_queue_push_6_s U32` with constant `inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("main"), var `inline_main_getchar_7_tfff6` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_7_tfff6 <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/stdio.j':(21,5)), SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(USIZE, 987236)"] })
# In IlFunctionId("main"), var `inline_main_getchar_7_tfff6` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_7_tfff6 <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/stdio.j':(21,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(USIZE, 987236)"] })
# IlFunctionId("Keyboard_poll")()
#  Some(t861f) <= call io_ready_to_read() # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  t3334 <- t861f BitwiseAnd Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  :Keyboard_poll_if_true_0_1 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  return None # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  goto Keyboard_poll_if_end_0 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  :Keyboard_poll_if_else_0_2 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  :Keyboard_poll_if_end_0 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  Some(code) <= call io_read2() # Some('/lutcomp/programs/lib/Keyboard.j':(20,5))
#  tf68c <- code U8 # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#  t528d U32 <- tf68c U8 # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#  index <- t528d Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t379c <- mem[td45b] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  :Keyboard_poll_if_true_0_4 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t674 <- td18e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t23a <- t4c8b Add Var(t674) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  c <- mem[t23a] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  goto Keyboard_poll_if_end_3 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  :Keyboard_poll_if_else_0_5 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  tb62e <- t4c8b Add Var(td18e) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  c <- mem[tb62e] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  :Keyboard_poll_if_end_3 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  t7ebd <- mem[tdaa] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  :Keyboard_poll_if_true_0_7 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  tac13 <- c U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  inline_Keyboard_poll_queue_push_5_s <- 0n987236/0x000f1064u32  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  inline_Keyboard_poll_queue_push_5_n <- tac13 U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  inline_Keyboard_poll_queue_push_5_tc1ff <- 0n987496/0x000f1168u32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_5_t3ee <- mem[inline_Keyboard_poll_queue_push_5_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_5_t5bb7 U32 <- inline_Keyboard_poll_queue_push_5_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_5_t2187 <- inline_Keyboard_poll_queue_push_5_s Add Var(inline_Keyboard_poll_queue_push_5_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  mem[inline_Keyboard_poll_queue_push_5_t2187] <- inline_Keyboard_poll_queue_push_5_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_5_tc1ff <- 0n987496/0x000f1168u32  # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_Keyboard_poll_queue_push_5_tc1ff <- 0n987496/0x000f1168u32  # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_Keyboard_poll_queue_push_5_t3ee <- mem[inline_Keyboard_poll_queue_push_5_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_Keyboard_poll_queue_push_5_t6778 <- inline_Keyboard_poll_queue_push_5_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  mem[inline_Keyboard_poll_queue_push_5_tc1ff] <- inline_Keyboard_poll_queue_push_5_t6778 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  goto inline_Keyboard_poll_queue_push_5_function_end_queue_push # None
#  :inline_Keyboard_poll_queue_push_5_function_end_queue_push # None
#  goto Keyboard_poll_if_end_6 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  :Keyboard_poll_if_else_0_8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  :Keyboard_poll_if_end_6 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  te5cf <- td18e Add Number(0n2/0x00000002u32) # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  ted94 <- t4c8b Add Var(te5cf) # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  t2ca9 <- mem[ted94] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_true_0_10 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  t7ebd <- mem[tdaa] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_true_0_13 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  mem[td45b] <- tb36e U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  goto Keyboard_poll_if_end_12 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_else_0_14 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  tfcd <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  mem[td45b] <- tfcd U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_end_12 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  goto Keyboard_poll_if_end_9 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_else_0_11 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_end_9 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t5e63 <- td18e Add Number(0n3/0x00000003u32) # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t6cd9 <- t4c8b Add Var(t5e63) # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t7b09 <- mem[t6cd9] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  :Keyboard_poll_if_true_0_16 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  tfcd <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  mem[tdaa] <- tfcd U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  goto Keyboard_poll_if_end_15 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  :Keyboard_poll_if_else_0_17 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  mem[tdaa] <- tb36e U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  :Keyboard_poll_if_end_15 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  return None # None
#  :function_end_Keyboard_poll # None
#  Unreachable # None

# IlFunctionId("io_read2")()
#  Unreachable # None
#  :function_end_io_read2 # None
#  Unreachable # None

# IlFunctionId("io_ready_to_read")()
#  Unreachable # None
#  :function_end_io_ready_to_read # None
#  Unreachable # None

# IlFunctionId("main")()
#  t6100 <- 0n72/0x48u8  # Some('programs/test/echo.j':(4,5))
#  ttyout <- t6100 # Some('programs/test/echo.j':(4,5))
#  tc49a <- 0n105/0x69u8  # Some('programs/test/echo.j':(5,5))
#  ttyout <- tc49a # Some('programs/test/echo.j':(5,5))
#  tf089 <- 0n33/0x21u8  # Some('programs/test/echo.j':(6,5))
#  ttyout <- tf089 # Some('programs/test/echo.j':(6,5))
#  td7b5 <- 0n10/0x0au8  # Some('programs/test/echo.j':(7,5))
#  ttyout <- td7b5 # Some('programs/test/echo.j':(7,5))
#  ch <- 0n0/0x00u8  # Some('programs/test/echo.j':(8,5))
#  :main_while_predicate_0 # Some('programs/test/echo.j':(9,5))
#  tb36e <- 0n0/0x00u8  # Some('programs/test/echo.j':(9,5))
#  tb36e <- 0n0/0x00u8  # Some('programs/test/echo.j':(9,5))
#  if tb36e == tb36e then 'main_while_body_1' else 'main_while_end_2' # Some('programs/test/echo.j':(9,5))
#  :main_while_body_1 # Some('programs/test/echo.j':(9,5))
#  tfc57 <- 0n62/0x3eu8  # Some('programs/test/echo.j':(9,5))
#  ttyout <- tfc57 # Some('programs/test/echo.j':(9,5))
#  tebdf <- 0n58/0x3au8  # Some('programs/test/echo.j':(9,5))
#  ttyout <- tebdf # Some('programs/test/echo.j':(9,5))
#  ch <- 0n0/0x00u8  # Some('programs/test/echo.j':(9,5))
#  :main_while_predicate_3 # Some('programs/test/echo.j':(9,5))
#  tdcd9 <- ch U8 # Some('programs/test/echo.j':(9,5))
#  td7b5 <- 0n10/0x0au8  # Some('programs/test/echo.j':(9,5))
#  if tdcd9 != td7b5 then 'main_while_body_4' else 'main_while_end_5' # Some('programs/test/echo.j':(9,5))
#  :main_while_body_4 # Some('programs/test/echo.j':(9,5))
#  inline_main_getchar_7_ch <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(19,5))
#  :inline_main_getchar_7_getchar_while_predicate_0 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_main_getchar_7_tdcd9 <- inline_main_getchar_7_ch U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_main_getchar_7_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  if inline_main_getchar_7_tdcd9 == inline_main_getchar_7_tb36e then 'inline_main_getchar_7_getchar_while_body_1' else 'inline_main_getchar_7_getchar_while_end_2' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_main_getchar_7_getchar_while_body_1 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  Some(inline_main_getchar_7_t861f) <= call io_ready_to_read() # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_main_getchar_7_tf0b5 <- inline_main_getchar_7_t861f BitwiseAnd Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_main_getchar_7_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  if inline_main_getchar_7_tf0b5 != inline_main_getchar_7_tb36e then 'inline_main_getchar_7_getchar_if_true_0_4' else 'inline_main_getchar_7_getchar_if_else_0_5' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_main_getchar_7_getchar_if_true_0_4 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_main_getchar_7_tb816 <- ttyin # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_main_getchar_7_inline_getchar_queue_push_6_s <- 0n987236/0x000f1064u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_main_getchar_7_inline_getchar_queue_push_6_n <- inline_main_getchar_7_tb816 U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- 0n987496/0x000f1168u32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_main_getchar_7_inline_getchar_queue_push_6_t3ee <- mem[inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_main_getchar_7_inline_getchar_queue_push_6_t5bb7 U32 <- inline_main_getchar_7_inline_getchar_queue_push_6_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_main_getchar_7_inline_getchar_queue_push_6_t2187 <- inline_main_getchar_7_inline_getchar_queue_push_6_s Add Var(inline_main_getchar_7_inline_getchar_queue_push_6_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  mem[inline_main_getchar_7_inline_getchar_queue_push_6_t2187] <- inline_main_getchar_7_inline_getchar_queue_push_6_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- 0n987496/0x000f1168u32  # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- 0n987496/0x000f1168u32  # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_main_getchar_7_inline_getchar_queue_push_6_t3ee <- mem[inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_main_getchar_7_inline_getchar_queue_push_6_t6778 <- inline_main_getchar_7_inline_getchar_queue_push_6_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  mem[inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff] <- inline_main_getchar_7_inline_getchar_queue_push_6_t6778 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  goto inline_main_getchar_7_inline_getchar_queue_push_6_function_end_queue_push # None
#  :inline_main_getchar_7_inline_getchar_queue_push_6_function_end_queue_push # None
#  goto inline_main_getchar_7_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_main_getchar_7_getchar_if_else_0_5 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_main_getchar_7_t0 <- 0n987144/0x000f1008u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_main_getchar_7_teb6e <- mem[inline_main_getchar_7_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_main_getchar_7_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  if inline_main_getchar_7_teb6e != inline_main_getchar_7_tb36e then 'inline_main_getchar_7_getchar_if_true_1_6' else 'inline_main_getchar_7_getchar_if_else_1_7' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_main_getchar_7_getchar_if_true_1_6 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  None <= call Keyboard_poll() # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  goto inline_main_getchar_7_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_main_getchar_7_getchar_if_else_1_7 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_main_getchar_7_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_main_getchar_7_inline_getchar_queue_pop_4_s <- 0n987236/0x000f1064u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd <- mem[inline_main_getchar_7_inline_getchar_queue_pop_4_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_getchar_7_inline_getchar_queue_pop_4_tc1ff <- 0n987496/0x000f1168u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_getchar_7_inline_getchar_queue_pop_4_t3ee <- mem[inline_main_getchar_7_inline_getchar_queue_pop_4_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  if inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd == inline_main_getchar_7_inline_getchar_queue_pop_4_t3ee then 'inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_true_0_1' else 'inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_else_0_2' # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_true_0_1 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_getchar_7_inline_getchar_queue_pop_4_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_getchar_7_ch <- inline_main_getchar_7_inline_getchar_queue_pop_4_tb36e U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  goto inline_main_getchar_7_inline_getchar_queue_pop_4_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  goto inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_else_0_2 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32  # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd <- mem[inline_main_getchar_7_inline_getchar_queue_pop_4_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_getchar_7_inline_getchar_queue_pop_4_tb469 U32 <- inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_getchar_7_inline_getchar_queue_pop_4_tae11 <- inline_main_getchar_7_inline_getchar_queue_pop_4_s Add Var(inline_main_getchar_7_inline_getchar_queue_pop_4_tb469) # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_getchar_7_inline_getchar_queue_pop_4_value <- mem[inline_main_getchar_7_inline_getchar_queue_pop_4_tae11] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32  # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32  # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd <- mem[inline_main_getchar_7_inline_getchar_queue_pop_4_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_getchar_7_inline_getchar_queue_pop_4_t6fdb <- inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  mem[inline_main_getchar_7_inline_getchar_queue_pop_4_tb702] <- inline_main_getchar_7_inline_getchar_queue_pop_4_t6fdb U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_main_getchar_7_inline_getchar_queue_pop_4_t44ed <- inline_main_getchar_7_inline_getchar_queue_pop_4_value U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  inline_main_getchar_7_ch <- inline_main_getchar_7_inline_getchar_queue_pop_4_t44ed U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  goto inline_main_getchar_7_inline_getchar_queue_pop_4_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  :inline_main_getchar_7_inline_getchar_queue_pop_4_function_end_queue_pop # None
#  goto inline_main_getchar_7_getchar_while_predicate_0 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_main_getchar_7_getchar_while_end_2 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_main_getchar_7_tdcd9 <- inline_main_getchar_7_ch U8 # Some('/lutcomp/programs/lib/stdio.j':(31,5))
#  ch <- inline_main_getchar_7_tdcd9 U8 # Some('/lutcomp/programs/lib/stdio.j':(31,5))
#  goto inline_main_getchar_7_function_end_getchar # Some('/lutcomp/programs/lib/stdio.j':(31,5))
#  :inline_main_getchar_7_function_end_getchar # None
#  tdcd9 <- ch U8 # Some('programs/test/echo.j':(9,5))
#  ttyout <- tdcd9 # Some('programs/test/echo.j':(9,5))
#  tdcd9 <- ch U8 # Some('programs/test/echo.j':(9,5))
#  t1501 <- 0n113/0x71u8  # Some('programs/test/echo.j':(9,5))
#  if tdcd9 == t1501 then 'main_if_true_0_7' else 'main_if_else_0_8' # Some('programs/test/echo.j':(9,5))
#  :main_if_true_0_7 # Some('programs/test/echo.j':(9,5))
#  tb36e <- 0n0/0x00u8  # Some('programs/test/echo.j':(9,5))
#  return Some(tb36e) # Some('programs/test/echo.j':(9,5))
#  goto main_if_end_6 # Some('programs/test/echo.j':(9,5))
#  :main_if_else_0_8 # Some('programs/test/echo.j':(9,5))
#  :main_if_end_6 # Some('programs/test/echo.j':(9,5))
#  goto main_while_predicate_3 # Some('programs/test/echo.j':(9,5))
#  :main_while_end_5 # Some('programs/test/echo.j':(9,5))
#  goto main_while_predicate_0 # Some('programs/test/echo.j':(9,5))
#  :main_while_end_2 # Some('programs/test/echo.j':(9,5))
#  :function_end_main # None
#  Unreachable # None


# ImageBaseAddress=0x00000000
# entry
# 00000 Init []
#       Initialzing flags and internal regs.
00 

# 00001 LoadImm32 [Register(0x0c), Constant32(0x000f0f00=986880)]
#       Initialzing stack register to 0x000f0f00.
20 0c 00 0f 0f 00 

# 00007 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:main))
32 0c fc ff ff ff 

# 0000d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:main))
25 0c 17 00 00 00 

# 00013 JmpImm [Label24(:main)]
#       PseudoCall(Label24(:main))
70 85 05 00 

# 00017 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:main))
32 0c 04 00 00 00 

# 0001d Halt [Constant32(0x00000000=0)]
#       Halting after return from entry function.
7e 00 00 00 00 

# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
20 
20 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
0a 
0a 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :Keyboard_poll
# Ret None
# Var c (Local c Number(U8) Reg(U8)) Reg(U8) Some([16])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([16])
# Var index (Local index Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_Keyboard_poll_queue_push_5_n (Arg1 n Number(U8)) Reg(U8) Some([16])
# Var inline_Keyboard_poll_queue_push_5_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([24, 25, 26, 27]) [100, 16, 15, 0]
# Var inline_Keyboard_poll_queue_push_5_t2187 (t2187 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_Keyboard_poll_queue_push_5_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([28])
# Var inline_Keyboard_poll_queue_push_5_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_5_t6778 (t6778 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([16])
# Var inline_Keyboard_poll_queue_push_5_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([36, 37, 38, 39]) [104, 17, 15, 0]
# Var t23a (t23a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }) Reg(U32) Some([40, 41, 42, 43])
# Var t2ca9 (t2ca9 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))) Reg(U8) Some([16])
# Var t3334 (t3334 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))) Reg(U8) Some([16])
# Var t379c (t379c LocalFieldDeref("keyboard", "shift_held")) Reg(U8) Some([16])
# Var t4c8b (t4c8b Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([40, 41, 42, 43])
# Var t528d (t528d Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }) Reg(U32) Some([40, 41, 42, 43])
# Var t5e63 (t5e63 Arithmetic(Add, Ident("index"), Number(USIZE, 3))) Reg(U32) Some([20, 21, 22, 23])
# Var t674 (t674 Arithmetic(Add, Ident("index"), Number(USIZE, 1))) Reg(U32) Some([24, 25, 26, 27])
# Var t6cd9 (t6cd9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }) Reg(U32) Some([40, 41, 42, 43])
# Var t7b09 (t7b09 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))) Reg(U8) Some([16])
# Var t7ebd (t7ebd LocalFieldDeref("keyboard", "release_in_progress")) Reg(U8) Some([44])
# Var t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([16])
# Var tac13 (tac13 Ident("c")) Reg(U8) Some([16])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([28]) [0]
# Var tb62e (tb62e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([40, 41, 42, 43])
# Var td18e (td18e Ident("index")) Reg(U32) Some([20, 21, 22, 23])
# Var td45b (td45b Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }) Reg(U32) Some([40, 41, 42, 43]) [0, 16, 15, 0]
# Var tdaa (tdaa Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([24, 25, 26, 27]) [4, 16, 15, 0]
# Var te5cf (te5cf Arithmetic(Add, Ident("index"), Number(USIZE, 2))) Reg(U32) Some([24, 25, 26, 27])
# Var ted94 (ted94 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }) Reg(U32) Some([40, 41, 42, 43])
# Var tf68c (tf68c Ident("code")) Reg(U8) Some([16])
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([28]) [1]
# Some(t861f) <= call io_ready_to_read() Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 00427 IoReadyToRead [Register(0x10)]
#       ReadyToRead
79 10 

# t3334 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))
# 00429 AndImm8 [Register(0x10), Constant8(0x04=4)]
#       t3334 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
#       Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))
18 10 04 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# Number(U8, 0)
# 0042c LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
#       Number(U8, 0)
04 1c 00 

# if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# 0042f Cmp8 [Register(0x10), Register(0x1c)]
#       if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
15 10 1c 

# 00432 JzImm [Label24(Keyboard_poll_if_true_0_1)]
#       if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
72 3a 04 00 

# 00436 JmpImm [Label24(Keyboard_poll_if_else_0_2)]
#       if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
70 40 04 00 

# :Keyboard_poll_if_true_0_1 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Keyboard_poll_if_true_0_1
# return None Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Return { value: None }
# 0043a JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 0043c JmpImm [Label24(Keyboard_poll_if_end_0)]
#       goto Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
70 40 04 00 

# :Keyboard_poll_if_else_0_2 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_else_0_2
# :Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_end_0
# Some(code) <= call io_read2() Some('/lutcomp/programs/lib/Keyboard.j':(20,5))
# Assign { target: Ident("code"), var_type: Some(Number(U8)), value: Call(Call { function: "io_read2", parameters: [] }) }
# Call(Call { function: "io_read2", parameters: [] })
# 00440 In2 [Register(0x10)]
#       IoRead2
62 10 

# tf68c <- code U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
# Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
# Ident("code")
# optimized away noop copy Instruction { source: "tf68c <- code U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))\nAssign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }\nArithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }\nIdent(\"code\")\n", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
# Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
# 00442 LoadImm32 [Register(0x28), Constant32(0x00000000=0)]
#       Zero-pad for t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
20 28 00 00 00 00 

# 00448 Copy8 [Register(0x10), Register(0x28)]
#       t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
0b 10 28 

# index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
# Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
# 0044b LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
20 00 04 00 00 00 

# 00451 Mul8_16 [Register(0x28), Register(0x00), Register(0x14)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
11 28 00 14 

# 00455 LoadImm8 [Register(0x16), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
04 16 00 

# 00458 LoadImm8 [Register(0x17), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
04 17 00 

# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "shift_held")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
# Number(USIZE, 987136)
# 0045b LoadImm32 [Register(0x28), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "shift_held")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
#       Number(USIZE, 987136)
20 28 00 10 0f 00 

# t379c <- mem[td45b] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "shift_held")
# 00461 Load8 [Register(0x28), Register(0x10)]
#       t379c <- mem[td45b] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "shift_held")
05 28 10 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# Number(U8, 0)
# 00464 LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
#       Number(U8, 0)
04 1c 00 

# if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# 00467 Cmp8 [Register(0x10), Register(0x1c)]
#       if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
15 10 1c 

# 0046a JzImm [Label24(Keyboard_poll_if_else_0_5)]
#       if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
72 8a 04 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_4)], resolved: None }
# :Keyboard_poll_if_true_0_4 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Keyboard_poll_if_true_0_4
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 0046e LoadImm32 [Register(0x28), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 28 22 00 00 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 1))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))\nArithmetic(Add, Ident(\"index\"), Number(USIZE, 1))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 1))
# 00474 Copy32 [Register(0x14), Register(0x18)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 1))
21 14 18 

# 00477 AddImm32IgnoreCarry [Register(0x18), Constant32(0x00000001=1)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 1))
32 18 01 00 00 00 

# t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# 0047d ClearCarry []
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
03 

# 0047e AddCarry32_1 [Register(0x28), Register(0x18), Register(0x28)]
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
30 28 18 28 

# 00482 AddCarry32_2 []
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
31 

# c <- mem[t23a] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# 00483 Load8 [Register(0x28), Register(0x10)]
#       c <- mem[t23a] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
05 28 10 

# goto Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 00486 JmpImm [Label24(Keyboard_poll_if_end_3)]
#       goto Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
70 99 04 00 

# :Keyboard_poll_if_else_0_5 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_else_0_5
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 0048a LoadImm32 [Register(0x28), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 28 22 00 00 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# 00490 ClearCarry []
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
03 

# 00491 AddCarry32_1 [Register(0x28), Register(0x14), Register(0x28)]
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
30 28 14 28 

# 00495 AddCarry32_2 []
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
31 

# c <- mem[tb62e] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# 00496 Load8 [Register(0x28), Register(0x10)]
#       c <- mem[tb62e] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
05 28 10 

# :Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_end_3
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 00499 LoadImm32 [Register(0x18), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 18 04 10 0f 00 

# t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 0049f Load8 [Register(0x18), Register(0x2c)]
#       t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 18 2c 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# Number(U8, 0)
# 004a2 LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       Number(U8, 0)
04 1c 00 

# if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# 004a5 Cmp8 [Register(0x2c), Register(0x1c)]
#       if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
15 2c 1c 

# 004a8 JzImm [Label24(Keyboard_poll_if_true_0_7)]
#       if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
72 b0 04 00 

# 004ac JmpImm [Label24(Keyboard_poll_if_else_0_8)]
#       if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
70 ee 04 00 

# :Keyboard_poll_if_true_0_7 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Keyboard_poll_if_true_0_7
# tac13 <- c U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_Keyboard_poll_queue_push_5_s <- 0n987236/0x000f1064u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_5_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_5_s <- 0n987236/0x000f1064u32 `.
# 004b0 LoadImm32 [Register(0x18), Constant32(0x000f1064=987236)]
#       inline_Keyboard_poll_queue_push_5_s <- 0n987236/0x000f1064u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_5_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_5_s <- 0n987236/0x000f1064u32 `.
20 18 64 10 0f 00 

# inline_Keyboard_poll_queue_push_5_n <- tac13 U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_5_n <- tac13 U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\n", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_Keyboard_poll_queue_push_5_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_5_tc1ff <- inline_Keyboard_poll_queue_push_5_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_5_tc1ff <- 0n987496/0x000f1168u32 `.
# 004b6 LoadImm32 [Register(0x24), Constant32(0x000f1168=987496)]
#       inline_Keyboard_poll_queue_push_5_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_5_tc1ff <- inline_Keyboard_poll_queue_push_5_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_5_tc1ff <- 0n987496/0x000f1168u32 `.
20 24 68 11 0f 00 

# inline_Keyboard_poll_queue_push_5_t3ee <- mem[inline_Keyboard_poll_queue_push_5_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 004bc Load8 [Register(0x24), Register(0x1c)]
#       inline_Keyboard_poll_queue_push_5_t3ee <- mem[inline_Keyboard_poll_queue_push_5_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 24 1c 

# inline_Keyboard_poll_queue_push_5_t5bb7 U32 <- inline_Keyboard_poll_queue_push_5_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# 004bf LoadImm32 [Register(0x20), Constant32(0x00000000=0)]
#       Zero-pad for inline_Keyboard_poll_queue_push_5_t5bb7 U32 <- inline_Keyboard_poll_queue_push_5_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
20 20 00 00 00 00 

# 004c5 Copy8 [Register(0x1c), Register(0x20)]
#       inline_Keyboard_poll_queue_push_5_t5bb7 U32 <- inline_Keyboard_poll_queue_push_5_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
0b 1c 20 

# inline_Keyboard_poll_queue_push_5_t2187 <- inline_Keyboard_poll_queue_push_5_s Add Var(inline_Keyboard_poll_queue_push_5_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# 004c8 ClearCarry []
#       inline_Keyboard_poll_queue_push_5_t2187 <- inline_Keyboard_poll_queue_push_5_s Add Var(inline_Keyboard_poll_queue_push_5_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
03 

# 004c9 AddCarry32_1 [Register(0x18), Register(0x20), Register(0x18)]
#       inline_Keyboard_poll_queue_push_5_t2187 <- inline_Keyboard_poll_queue_push_5_s Add Var(inline_Keyboard_poll_queue_push_5_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
30 18 20 18 

# 004cd AddCarry32_2 []
#       inline_Keyboard_poll_queue_push_5_t2187 <- inline_Keyboard_poll_queue_push_5_s Add Var(inline_Keyboard_poll_queue_push_5_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
31 

# mem[inline_Keyboard_poll_queue_push_5_t2187] <- inline_Keyboard_poll_queue_push_5_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 004ce Store8 [Register(0x10), Register(0x18)]
#       mem[inline_Keyboard_poll_queue_push_5_t2187] <- inline_Keyboard_poll_queue_push_5_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 10 18 

# inline_Keyboard_poll_queue_push_5_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_5_tc1ff <- inline_Keyboard_poll_queue_push_5_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_5_tc1ff <- 0n987496/0x000f1168u32 `.
# 004d1 LoadImm32 [Register(0x24), Constant32(0x000f1168=987496)]
#       inline_Keyboard_poll_queue_push_5_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_5_tc1ff <- inline_Keyboard_poll_queue_push_5_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_5_tc1ff <- 0n987496/0x000f1168u32 `.
20 24 68 11 0f 00 

# inline_Keyboard_poll_queue_push_5_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_5_tc1ff <- inline_Keyboard_poll_queue_push_5_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_5_tc1ff <- 0n987496/0x000f1168u32 `.
# 004d7 LoadImm32 [Register(0x24), Constant32(0x000f1168=987496)]
#       inline_Keyboard_poll_queue_push_5_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_5_tc1ff <- inline_Keyboard_poll_queue_push_5_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_5_tc1ff <- 0n987496/0x000f1168u32 `.
20 24 68 11 0f 00 

# inline_Keyboard_poll_queue_push_5_t3ee <- mem[inline_Keyboard_poll_queue_push_5_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# 004dd Load8 [Register(0x24), Register(0x1c)]
#       inline_Keyboard_poll_queue_push_5_t3ee <- mem[inline_Keyboard_poll_queue_push_5_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
05 24 1c 

# inline_Keyboard_poll_queue_push_5_t6778 <- inline_Keyboard_poll_queue_push_5_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# 004e0 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_Keyboard_poll_queue_push_5_t6778 <- inline_Keyboard_poll_queue_push_5_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
04 00 01 

# 004e3 Add8NoCarryIn [Register(0x1c), Register(0x00), Register(0x10)]
#       inline_Keyboard_poll_queue_push_5_t6778 <- inline_Keyboard_poll_queue_push_5_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
14 1c 00 10 

# mem[inline_Keyboard_poll_queue_push_5_tc1ff] <- inline_Keyboard_poll_queue_push_5_t6778 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# 004e7 Store8 [Register(0x10), Register(0x24)]
#       mem[inline_Keyboard_poll_queue_push_5_tc1ff] <- inline_Keyboard_poll_queue_push_5_t6778 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
06 10 24 

# goto inline_Keyboard_poll_queue_push_5_function_end_queue_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_Keyboard_poll_queue_push_5_function_end_queue_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_Keyboard_poll_queue_push_5_function_end_queue_push)], resolved: None }
# :inline_Keyboard_poll_queue_push_5_function_end_queue_push None
# inline_Keyboard_poll_queue_push_5_function_end_queue_push
# goto Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 004ea JmpImm [Label24(Keyboard_poll_if_end_6)]
#       goto Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
70 ee 04 00 

# :Keyboard_poll_if_else_0_8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# Keyboard_poll_if_else_0_8
# :Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# Keyboard_poll_if_end_6
# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Number(U8, 0)
# 004ee LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Number(U8, 0)
04 1c 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 004f1 LoadImm32 [Register(0x28), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 28 22 00 00 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 2))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))\nArithmetic(Add, Ident(\"index\"), Number(USIZE, 2))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 2))
# 004f7 Copy32 [Register(0x14), Register(0x18)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 2))
21 14 18 

# 004fa AddImm32IgnoreCarry [Register(0x18), Constant32(0x00000002=2)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 2))
32 18 02 00 00 00 

# ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# 00500 ClearCarry []
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
03 

# 00501 AddCarry32_1 [Register(0x28), Register(0x18), Register(0x28)]
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
30 28 18 28 

# 00505 AddCarry32_2 []
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
31 

# t2ca9 <- mem[ted94] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# 00506 Load8 [Register(0x28), Register(0x10)]
#       t2ca9 <- mem[ted94] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
05 28 10 

# if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# 00509 Cmp8 [Register(0x1c), Register(0x10)]
#       if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
15 1c 10 

# 0050c JzImm [Label24(Keyboard_poll_if_else_0_11)]
#       if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
72 43 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_10)], resolved: None }
# :Keyboard_poll_if_true_0_10 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Keyboard_poll_if_true_0_10
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 00510 LoadImm32 [Register(0x18), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 18 04 10 0f 00 

# t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 00516 Load8 [Register(0x18), Register(0x2c)]
#       t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 18 2c 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# Number(U8, 0)
# 00519 LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       Number(U8, 0)
04 1c 00 

# if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# 0051c Cmp8 [Register(0x2c), Register(0x1c)]
#       if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
15 2c 1c 

# 0051f JzImm [Label24(Keyboard_poll_if_else_0_14)]
#       if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
72 33 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_13)], resolved: None }
# :Keyboard_poll_if_true_0_13 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Keyboard_poll_if_true_0_13
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
# Number(USIZE, 987136)
# 00523 LoadImm32 [Register(0x28), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
#       Number(USIZE, 987136)
20 28 00 10 0f 00 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00529 LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 1c 00 

# mem[td45b] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# 0052c Store8 [Register(0x1c), Register(0x28)]
#       mem[td45b] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
06 1c 28 

# goto Keyboard_poll_if_end_12 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 0052f JmpImm [Label24(Keyboard_poll_if_end_12)]
#       goto Keyboard_poll_if_end_12 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
70 3f 05 00 

# :Keyboard_poll_if_else_0_14 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_14
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
# Number(USIZE, 987136)
# 00533 LoadImm32 [Register(0x28), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
#       Number(USIZE, 987136)
20 28 00 10 0f 00 

# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 00539 LoadImm8 [Register(0x1c), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 1c 01 

# mem[td45b] <- tfcd U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
# 0053c Store8 [Register(0x1c), Register(0x28)]
#       mem[td45b] <- tfcd U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
06 1c 28 

# :Keyboard_poll_if_end_12 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_12
# goto Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 0053f JmpImm [Label24(Keyboard_poll_if_end_9)]
#       goto Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
70 43 05 00 

# :Keyboard_poll_if_else_0_11 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_11
# :Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_9
# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Number(U8, 0)
# 00543 LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Number(U8, 0)
04 1c 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 00546 LoadImm32 [Register(0x28), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 28 22 00 00 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 3))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))\nArithmetic(Add, Ident(\"index\"), Number(USIZE, 3))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 3))
# 0054c AddImm32IgnoreCarry [Register(0x14), Constant32(0x00000003=3)]
#       t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 3))
32 14 03 00 00 00 

# t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# 00552 ClearCarry []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
03 

# 00553 AddCarry32_1 [Register(0x28), Register(0x14), Register(0x28)]
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
30 28 14 28 

# 00557 AddCarry32_2 []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
31 

# t7b09 <- mem[t6cd9] U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# 00558 Load8 [Register(0x28), Register(0x10)]
#       t7b09 <- mem[t6cd9] U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
05 28 10 

# if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# 0055b Cmp8 [Register(0x1c), Register(0x10)]
#       if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
15 1c 10 

# 0055e JzImm [Label24(Keyboard_poll_if_else_0_17)]
#       if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
72 72 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_16)], resolved: None }
# :Keyboard_poll_if_true_0_16 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Keyboard_poll_if_true_0_16
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 00562 LoadImm32 [Register(0x18), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 18 04 10 0f 00 

# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 00568 LoadImm8 [Register(0x1c), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 1c 01 

# mem[tdaa] <- tfcd U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# 0056b Store8 [Register(0x1c), Register(0x18)]
#       mem[tdaa] <- tfcd U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
06 1c 18 

# goto Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 0056e JmpImm [Label24(Keyboard_poll_if_end_15)]
#       goto Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
70 7e 05 00 

# :Keyboard_poll_if_else_0_17 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_else_0_17
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 00572 LoadImm32 [Register(0x18), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 18 04 10 0f 00 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00578 LoadImm8 [Register(0x1c), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 1c 00 

# mem[tdaa] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# 0057b Store8 [Register(0x1c), Register(0x18)]
#       mem[tdaa] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
06 1c 18 

# :Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_end_15
# return None None
# Return { value: None }
# 0057e JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_Keyboard_poll None
# function_end_Keyboard_poll
# Unreachable None
# 00580 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :main
# Ret Some(U8)
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([45])
# Var inline_main_getchar_7_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([45])
# Var inline_main_getchar_7_inline_getchar_queue_pop_4_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([48, 49, 50, 51]) [100, 16, 15, 0]
# Var inline_main_getchar_7_inline_getchar_queue_pop_4_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([52])
# Var inline_main_getchar_7_inline_getchar_queue_pop_4_t44ed (t44ed Ident("value")) Reg(U8) Some([45])
# Var inline_main_getchar_7_inline_getchar_queue_pop_4_t6fdb (t6fdb Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))) Reg(U8) Some([45])
# Var inline_main_getchar_7_inline_getchar_queue_pop_4_tae11 (tae11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([48, 49, 50, 51])
# Var inline_main_getchar_7_inline_getchar_queue_pop_4_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([45]) [0]
# Var inline_main_getchar_7_inline_getchar_queue_pop_4_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([60])
# Var inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([56, 57, 58, 59]) [100, 17, 15, 0]
# Var inline_main_getchar_7_inline_getchar_queue_pop_4_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([56, 57, 58, 59]) [104, 17, 15, 0]
# Var inline_main_getchar_7_inline_getchar_queue_pop_4_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([61])
# Var inline_main_getchar_7_inline_getchar_queue_push_6_n (Arg1 n Number(U8)) Reg(U8) Some([45])
# Var inline_main_getchar_7_inline_getchar_queue_push_6_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([56, 57, 58, 59]) [100, 16, 15, 0]
# Var inline_main_getchar_7_inline_getchar_queue_push_6_t2187 (t2187 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_main_getchar_7_inline_getchar_queue_push_6_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([60])
# Var inline_main_getchar_7_inline_getchar_queue_push_6_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_main_getchar_7_inline_getchar_queue_push_6_t6778 (t6778 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([45])
# Var inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([68, 69, 70, 71]) [104, 17, 15, 0]
# Var inline_main_getchar_7_t0 (static "keyboard_enable" addr) Reg(U32) Some([48, 49, 50, 51]) [8, 16, 15, 0]
# Var inline_main_getchar_7_t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([45])
# Var inline_main_getchar_7_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([52]) [0]
# Var inline_main_getchar_7_tb816 (tb816 TtyIn) Reg(U8) Some([45])
# Var inline_main_getchar_7_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([45])
# Var inline_main_getchar_7_teb6e (teb6e Ident("keyboard_enable")) Reg(U8) Some([45])
# Var inline_main_getchar_7_tf0b5 (tf0b5 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))) Reg(U8) Some([45])
# Var t1501 (t1501 Number(U8, 113)) Reg(U8) Some([52]) [113]
# Var t6100 (t6100 Number(U8, 72)) Reg(U8) Some([45]) [72]
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([45]) [0]
# Var tc49a (tc49a Number(U8, 105)) Reg(U8) Some([45]) [105]
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([45]) [10]
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([60])
# Var tebdf (tebdf Number(U8, 58)) Reg(U8) Some([45]) [58]
# Var tf089 (tf089 Number(U8, 33)) Reg(U8) Some([45]) [33]
# Var tfc57 (tfc57 Number(U8, 62)) Reg(U8) Some([45]) [62]
# t6100 <- 0n72/0x48u8  Some('programs/test/echo.j':(4,5))
# TtyOut { value: Number(U8, 72) }
# Number(U8, 72)
# 00585 LoadImm8 [Register(0x2d), Constant8(0x48=72)]
#       t6100 <- 0n72/0x48u8  Some('programs/test/echo.j':(4,5))
#       TtyOut { value: Number(U8, 72) }
#       Number(U8, 72)
04 2d 48 

# ttyout <- t6100 Some('programs/test/echo.j':(4,5))
# TtyOut { value: Number(U8, 72) }
# 00588 Out0 [Register(0x2d)]
#       ttyout <- t6100 Some('programs/test/echo.j':(4,5))
#       TtyOut { value: Number(U8, 72) }
68 2d 

# tc49a <- 0n105/0x69u8  Some('programs/test/echo.j':(5,5))
# TtyOut { value: Number(U8, 105) }
# Number(U8, 105)
# 0058a LoadImm8 [Register(0x2d), Constant8(0x69=105)]
#       tc49a <- 0n105/0x69u8  Some('programs/test/echo.j':(5,5))
#       TtyOut { value: Number(U8, 105) }
#       Number(U8, 105)
04 2d 69 

# ttyout <- tc49a Some('programs/test/echo.j':(5,5))
# TtyOut { value: Number(U8, 105) }
# 0058d Out0 [Register(0x2d)]
#       ttyout <- tc49a Some('programs/test/echo.j':(5,5))
#       TtyOut { value: Number(U8, 105) }
68 2d 

# tf089 <- 0n33/0x21u8  Some('programs/test/echo.j':(6,5))
# TtyOut { value: Number(U8, 33) }
# Number(U8, 33)
# 0058f LoadImm8 [Register(0x2d), Constant8(0x21=33)]
#       tf089 <- 0n33/0x21u8  Some('programs/test/echo.j':(6,5))
#       TtyOut { value: Number(U8, 33) }
#       Number(U8, 33)
04 2d 21 

# ttyout <- tf089 Some('programs/test/echo.j':(6,5))
# TtyOut { value: Number(U8, 33) }
# 00592 Out0 [Register(0x2d)]
#       ttyout <- tf089 Some('programs/test/echo.j':(6,5))
#       TtyOut { value: Number(U8, 33) }
68 2d 

# td7b5 <- 0n10/0x0au8  Some('programs/test/echo.j':(7,5))
# TtyOut { value: Number(U8, 10) }
# Number(U8, 10)
# 00594 LoadImm8 [Register(0x2d), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('programs/test/echo.j':(7,5))
#       TtyOut { value: Number(U8, 10) }
#       Number(U8, 10)
04 2d 0a 

# ttyout <- td7b5 Some('programs/test/echo.j':(7,5))
# TtyOut { value: Number(U8, 10) }
# 00597 Out0 [Register(0x2d)]
#       ttyout <- td7b5 Some('programs/test/echo.j':(7,5))
#       TtyOut { value: Number(U8, 10) }
68 2d 

# ch <- 0n0/0x00u8  Some('programs/test/echo.j':(8,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 00599 LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       ch <- 0n0/0x00u8  Some('programs/test/echo.j':(8,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 2d 00 

# :main_while_predicate_0 Some('programs/test/echo.j':(9,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [TtyOut { value: Number(U8, 62) }, TtyOut { value: Number(U8, 58) }, Assign { target: Ident("ch"), var_type: None, value: Number(U8, 0) }, While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }] }
# main_while_predicate_0
# tb36e <- 0n0/0x00u8  Some('programs/test/echo.j':(9,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [TtyOut { value: Number(U8, 62) }, TtyOut { value: Number(U8, 58) }, Assign { target: Ident("ch"), var_type: None, value: Number(U8, 0) }, While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# Number(U8, 0)
# 0059c LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/echo.j':(9,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [TtyOut { value: Number(U8, 62) }, TtyOut { value: Number(U8, 58) }, Assign { target: Ident("ch"), var_type: None, value: Number(U8, 0) }, While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
#       Number(U8, 0)
04 2d 00 

# tb36e <- 0n0/0x00u8  Some('programs/test/echo.j':(9,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [TtyOut { value: Number(U8, 62) }, TtyOut { value: Number(U8, 58) }, Assign { target: Ident("ch"), var_type: None, value: Number(U8, 0) }, While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# Number(U8, 0)
# 0059f LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/echo.j':(9,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [TtyOut { value: Number(U8, 62) }, TtyOut { value: Number(U8, 58) }, Assign { target: Ident("ch"), var_type: None, value: Number(U8, 0) }, While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
#       Number(U8, 0)
04 2d 00 

# if tb36e == tb36e then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/echo.j':(9,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [TtyOut { value: Number(U8, 62) }, TtyOut { value: Number(U8, 58) }, Assign { target: Ident("ch"), var_type: None, value: Number(U8, 0) }, While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# 005a2 Cmp8 [Register(0x2d), Register(0x2d)]
#       if tb36e == tb36e then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/echo.j':(9,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [TtyOut { value: Number(U8, 62) }, TtyOut { value: Number(U8, 58) }, Assign { target: Ident("ch"), var_type: None, value: Number(U8, 0) }, While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
15 2d 2d 

# 005a5 JzImm [Label24(main_while_body_1)]
#       if tb36e == tb36e then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/echo.j':(9,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [TtyOut { value: Number(U8, 62) }, TtyOut { value: Number(U8, 58) }, Assign { target: Ident("ch"), var_type: None, value: Number(U8, 0) }, While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
72 ad 05 00 

# 005a9 JmpImm [Label24(main_while_end_2)]
#       if tb36e == tb36e then 'main_while_body_1' else 'main_while_end_2' Some('programs/test/echo.j':(9,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [TtyOut { value: Number(U8, 62) }, TtyOut { value: Number(U8, 58) }, Assign { target: Ident("ch"), var_type: None, value: Number(U8, 0) }, While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
70 eb 06 00 

# :main_while_body_1 Some('programs/test/echo.j':(9,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [TtyOut { value: Number(U8, 62) }, TtyOut { value: Number(U8, 58) }, Assign { target: Ident("ch"), var_type: None, value: Number(U8, 0) }, While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }] }
# main_while_body_1
# tfc57 <- 0n62/0x3eu8  Some('programs/test/echo.j':(9,5))
# TtyOut { value: Number(U8, 62) }
# Number(U8, 62)
# 005ad LoadImm8 [Register(0x2d), Constant8(0x3e=62)]
#       tfc57 <- 0n62/0x3eu8  Some('programs/test/echo.j':(9,5))
#       TtyOut { value: Number(U8, 62) }
#       Number(U8, 62)
04 2d 3e 

# ttyout <- tfc57 Some('programs/test/echo.j':(9,5))
# TtyOut { value: Number(U8, 62) }
# 005b0 Out0 [Register(0x2d)]
#       ttyout <- tfc57 Some('programs/test/echo.j':(9,5))
#       TtyOut { value: Number(U8, 62) }
68 2d 

# tebdf <- 0n58/0x3au8  Some('programs/test/echo.j':(9,5))
# TtyOut { value: Number(U8, 58) }
# Number(U8, 58)
# 005b2 LoadImm8 [Register(0x2d), Constant8(0x3a=58)]
#       tebdf <- 0n58/0x3au8  Some('programs/test/echo.j':(9,5))
#       TtyOut { value: Number(U8, 58) }
#       Number(U8, 58)
04 2d 3a 

# ttyout <- tebdf Some('programs/test/echo.j':(9,5))
# TtyOut { value: Number(U8, 58) }
# 005b5 Out0 [Register(0x2d)]
#       ttyout <- tebdf Some('programs/test/echo.j':(9,5))
#       TtyOut { value: Number(U8, 58) }
68 2d 

# ch <- 0n0/0x00u8  Some('programs/test/echo.j':(9,5))
# Assign { target: Ident("ch"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 005b7 LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       ch <- 0n0/0x00u8  Some('programs/test/echo.j':(9,5))
#       Assign { target: Ident("ch"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 2d 00 

# :main_while_predicate_3 Some('programs/test/echo.j':(9,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# main_while_predicate_3
# tdcd9 <- ch U8 Some('programs/test/echo.j':(9,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }
# Ident("ch")
# 005ba Copy8 [Register(0x2d), Register(0x3c)]
#       tdcd9 <- ch U8 Some('programs/test/echo.j':(9,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }
#       Ident("ch")
0b 2d 3c 

# td7b5 <- 0n10/0x0au8  Some('programs/test/echo.j':(9,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }
# Number(U8, 10)
# 005bd LoadImm8 [Register(0x2d), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('programs/test/echo.j':(9,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }
#       Number(U8, 10)
04 2d 0a 

# if tdcd9 != td7b5 then 'main_while_body_4' else 'main_while_end_5' Some('programs/test/echo.j':(9,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }
# 005c0 Cmp8 [Register(0x3c), Register(0x2d)]
#       if tdcd9 != td7b5 then 'main_while_body_4' else 'main_while_end_5' Some('programs/test/echo.j':(9,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }
15 3c 2d 

# 005c3 JzImm [Label24(main_while_end_5)]
#       if tdcd9 != td7b5 then 'main_while_body_4' else 'main_while_end_5' Some('programs/test/echo.j':(9,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }
72 e7 06 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tdcd9 != td7b5 then 'main_while_body_4' else 'main_while_end_5' Some('programs/test/echo.j':(9,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 10) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"getchar\", parameters: [] }) }, TtyOut { value: Ident(\"ch\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 10) }\n", opcode: JmpImm, args: [Label24(main_while_body_4)], resolved: None }
# :main_while_body_4 Some('programs/test/echo.j':(9,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("ch"), right: Number(U8, 10) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "getchar", parameters: [] }) }, TtyOut { value: Ident("ch") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# main_while_body_4
# inline_main_getchar_7_ch <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(19,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 005c7 LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       inline_main_getchar_7_ch <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(19,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 2d 00 

# :inline_main_getchar_7_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_main_getchar_7_getchar_while_predicate_0
# inline_main_getchar_7_tdcd9 <- inline_main_getchar_7_ch U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_getchar_7_tdcd9 <- inline_main_getchar_7_ch U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))\nWhile { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }])], else_block: [] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x2d), Register(0x2d)], resolved: None }
# inline_main_getchar_7_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
# Number(U8, 0)
# 005ca LoadImm8 [Register(0x34), Constant8(0x00=0)]
#       inline_main_getchar_7_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
#       Number(U8, 0)
04 34 00 

# if inline_main_getchar_7_tdcd9 == inline_main_getchar_7_tb36e then 'inline_main_getchar_7_getchar_while_body_1' else 'inline_main_getchar_7_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
# 005cd Cmp8 [Register(0x2d), Register(0x34)]
#       if inline_main_getchar_7_tdcd9 == inline_main_getchar_7_tb36e then 'inline_main_getchar_7_getchar_while_body_1' else 'inline_main_getchar_7_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
15 2d 34 

# 005d0 JzImm [Label24(inline_main_getchar_7_getchar_while_body_1)]
#       if inline_main_getchar_7_tdcd9 == inline_main_getchar_7_tb36e then 'inline_main_getchar_7_getchar_while_body_1' else 'inline_main_getchar_7_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
72 d8 05 00 

# 005d4 JmpImm [Label24(inline_main_getchar_7_getchar_while_end_2)]
#       if inline_main_getchar_7_tdcd9 == inline_main_getchar_7_tb36e then 'inline_main_getchar_7_getchar_while_body_1' else 'inline_main_getchar_7_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
70 c1 06 00 

# :inline_main_getchar_7_getchar_while_body_1 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_main_getchar_7_getchar_while_body_1
# Some(inline_main_getchar_7_t861f) <= call io_ready_to_read() Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 005d8 IoReadyToRead [Register(0x2d)]
#       ReadyToRead
79 2d 

# inline_main_getchar_7_tf0b5 <- inline_main_getchar_7_t861f BitwiseAnd Number(0n1/0x01u8) Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
# 005da AndImm8 [Register(0x2d), Constant8(0x01=1)]
#       inline_main_getchar_7_tf0b5 <- inline_main_getchar_7_t861f BitwiseAnd Number(0n1/0x01u8) Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
#       Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
18 2d 01 

# inline_main_getchar_7_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# Number(U8, 0)
# 005dd LoadImm8 [Register(0x34), Constant8(0x00=0)]
#       inline_main_getchar_7_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
#       Number(U8, 0)
04 34 00 

# if inline_main_getchar_7_tf0b5 != inline_main_getchar_7_tb36e then 'inline_main_getchar_7_getchar_if_true_0_4' else 'inline_main_getchar_7_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# 005e0 Cmp8 [Register(0x2d), Register(0x34)]
#       if inline_main_getchar_7_tf0b5 != inline_main_getchar_7_tb36e then 'inline_main_getchar_7_getchar_if_true_0_4' else 'inline_main_getchar_7_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
15 2d 34 

# 005e3 JzImm [Label24(inline_main_getchar_7_getchar_if_else_0_5)]
#       if inline_main_getchar_7_tf0b5 != inline_main_getchar_7_tb36e then 'inline_main_getchar_7_getchar_if_true_0_4' else 'inline_main_getchar_7_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
72 27 06 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_getchar_7_tf0b5 != inline_main_getchar_7_tb36e then 'inline_main_getchar_7_getchar_if_true_0_4' else 'inline_main_getchar_7_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_main_getchar_7_getchar_if_true_0_4)], resolved: None }
# :inline_main_getchar_7_getchar_if_true_0_4 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# inline_main_getchar_7_getchar_if_true_0_4
# inline_main_getchar_7_tb816 <- ttyin Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# TtyIn
# 005e7 In0 [Register(0x2d)]
#       inline_main_getchar_7_tb816 <- ttyin Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       TtyIn
60 2d 

# inline_main_getchar_7_inline_getchar_queue_push_6_s <- 0n987236/0x000f1064u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_push_6_s <- inline_main_getchar_7_tfff6 U32` with constant `inline_main_getchar_7_inline_getchar_queue_push_6_s <- 0n987236/0x000f1064u32 `.
# 005e9 LoadImm32 [Register(0x38), Constant32(0x000f1064=987236)]
#       inline_main_getchar_7_inline_getchar_queue_push_6_s <- 0n987236/0x000f1064u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_push_6_s <- inline_main_getchar_7_tfff6 U32` with constant `inline_main_getchar_7_inline_getchar_queue_push_6_s <- 0n987236/0x000f1064u32 `.
20 38 64 10 0f 00 

# inline_main_getchar_7_inline_getchar_queue_push_6_n <- inline_main_getchar_7_tb816 U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# optimized away noop copy Instruction { source: "inline_main_getchar_7_inline_getchar_queue_push_6_n <- inline_main_getchar_7_tb816 U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })\n", opcode: Copy8, args: [Register(0x2d), Register(0x2d)], resolved: None }
# inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- 0n987496/0x000f1168u32 `.
# 005ef LoadImm32 [Register(0x44), Constant32(0x000f1168=987496)]
#       inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
#       # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- 0n987496/0x000f1168u32 `.
20 44 68 11 0f 00 

# inline_main_getchar_7_inline_getchar_queue_push_6_t3ee <- mem[inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 005f5 Load8 [Register(0x44), Register(0x3c)]
#       inline_main_getchar_7_inline_getchar_queue_push_6_t3ee <- mem[inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 44 3c 

# inline_main_getchar_7_inline_getchar_queue_push_6_t5bb7 U32 <- inline_main_getchar_7_inline_getchar_queue_push_6_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# 005f8 LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       Zero-pad for inline_main_getchar_7_inline_getchar_queue_push_6_t5bb7 U32 <- inline_main_getchar_7_inline_getchar_queue_push_6_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
20 40 00 00 00 00 

# 005fe Copy8 [Register(0x3c), Register(0x40)]
#       inline_main_getchar_7_inline_getchar_queue_push_6_t5bb7 U32 <- inline_main_getchar_7_inline_getchar_queue_push_6_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
0b 3c 40 

# inline_main_getchar_7_inline_getchar_queue_push_6_t2187 <- inline_main_getchar_7_inline_getchar_queue_push_6_s Add Var(inline_main_getchar_7_inline_getchar_queue_push_6_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# 00601 ClearCarry []
#       inline_main_getchar_7_inline_getchar_queue_push_6_t2187 <- inline_main_getchar_7_inline_getchar_queue_push_6_s Add Var(inline_main_getchar_7_inline_getchar_queue_push_6_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
03 

# 00602 AddCarry32_1 [Register(0x38), Register(0x40), Register(0x38)]
#       inline_main_getchar_7_inline_getchar_queue_push_6_t2187 <- inline_main_getchar_7_inline_getchar_queue_push_6_s Add Var(inline_main_getchar_7_inline_getchar_queue_push_6_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
30 38 40 38 

# 00606 AddCarry32_2 []
#       inline_main_getchar_7_inline_getchar_queue_push_6_t2187 <- inline_main_getchar_7_inline_getchar_queue_push_6_s Add Var(inline_main_getchar_7_inline_getchar_queue_push_6_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
31 

# mem[inline_main_getchar_7_inline_getchar_queue_push_6_t2187] <- inline_main_getchar_7_inline_getchar_queue_push_6_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 00607 Store8 [Register(0x2d), Register(0x38)]
#       mem[inline_main_getchar_7_inline_getchar_queue_push_6_t2187] <- inline_main_getchar_7_inline_getchar_queue_push_6_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 2d 38 

# inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- 0n987496/0x000f1168u32 `.
# 0060a LoadImm32 [Register(0x44), Constant32(0x000f1168=987496)]
#       inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
#       # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- 0n987496/0x000f1168u32 `.
20 44 68 11 0f 00 

# inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- 0n987496/0x000f1168u32 `.
# 00610 LoadImm32 [Register(0x44), Constant32(0x000f1168=987496)]
#       inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
#       # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- inline_main_getchar_7_inline_getchar_queue_push_6_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff <- 0n987496/0x000f1168u32 `.
20 44 68 11 0f 00 

# inline_main_getchar_7_inline_getchar_queue_push_6_t3ee <- mem[inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# 00616 Load8 [Register(0x44), Register(0x3c)]
#       inline_main_getchar_7_inline_getchar_queue_push_6_t3ee <- mem[inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
05 44 3c 

# inline_main_getchar_7_inline_getchar_queue_push_6_t6778 <- inline_main_getchar_7_inline_getchar_queue_push_6_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# 00619 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_main_getchar_7_inline_getchar_queue_push_6_t6778 <- inline_main_getchar_7_inline_getchar_queue_push_6_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
04 00 01 

# 0061c Add8NoCarryIn [Register(0x3c), Register(0x00), Register(0x2d)]
#       inline_main_getchar_7_inline_getchar_queue_push_6_t6778 <- inline_main_getchar_7_inline_getchar_queue_push_6_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
14 3c 00 2d 

# mem[inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff] <- inline_main_getchar_7_inline_getchar_queue_push_6_t6778 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# 00620 Store8 [Register(0x2d), Register(0x44)]
#       mem[inline_main_getchar_7_inline_getchar_queue_push_6_tc1ff] <- inline_main_getchar_7_inline_getchar_queue_push_6_t6778 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
06 2d 44 

# goto inline_main_getchar_7_inline_getchar_queue_push_6_function_end_queue_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_getchar_7_inline_getchar_queue_push_6_function_end_queue_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_getchar_7_inline_getchar_queue_push_6_function_end_queue_push)], resolved: None }
# :inline_main_getchar_7_inline_getchar_queue_push_6_function_end_queue_push None
# inline_main_getchar_7_inline_getchar_queue_push_6_function_end_queue_push
# goto inline_main_getchar_7_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 00623 JmpImm [Label24(inline_main_getchar_7_getchar_if_end_3)]
#       goto inline_main_getchar_7_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 54 06 00 

# :inline_main_getchar_7_getchar_if_else_0_5 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_main_getchar_7_getchar_if_else_0_5
# inline_main_getchar_7_t0 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
# Ident("keyboard_enable")
# 00627 LoadImm32 [Register(0x30), Constant32(0x000f1008=987144)]
#       inline_main_getchar_7_t0 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
#       Ident("keyboard_enable")
20 30 08 10 0f 00 

# inline_main_getchar_7_teb6e <- mem[inline_main_getchar_7_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
# Ident("keyboard_enable")
# 0062d Load8 [Register(0x30), Register(0x2d)]
#       inline_main_getchar_7_teb6e <- mem[inline_main_getchar_7_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
#       Ident("keyboard_enable")
05 30 2d 

# inline_main_getchar_7_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 00630 LoadImm8 [Register(0x34), Constant8(0x00=0)]
#       inline_main_getchar_7_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 34 00 

# if inline_main_getchar_7_teb6e != inline_main_getchar_7_tb36e then 'inline_main_getchar_7_getchar_if_true_1_6' else 'inline_main_getchar_7_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
# 00633 Cmp8 [Register(0x2d), Register(0x34)]
#       if inline_main_getchar_7_teb6e != inline_main_getchar_7_tb36e then 'inline_main_getchar_7_getchar_if_true_1_6' else 'inline_main_getchar_7_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
15 2d 34 

# 00636 JzImm [Label24(inline_main_getchar_7_getchar_if_else_1_7)]
#       if inline_main_getchar_7_teb6e != inline_main_getchar_7_tb36e then 'inline_main_getchar_7_getchar_if_true_1_6' else 'inline_main_getchar_7_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
72 54 06 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_getchar_7_teb6e != inline_main_getchar_7_tb36e then 'inline_main_getchar_7_getchar_if_true_1_6' else 'inline_main_getchar_7_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))\nComparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_main_getchar_7_getchar_if_true_1_6)], resolved: None }
# :inline_main_getchar_7_getchar_if_true_1_6 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_main_getchar_7_getchar_if_true_1_6
# None <= call Keyboard_poll() Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }
# Call(Call { function: "Keyboard_poll", parameters: [] })
# Registers used by this function: {45, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71}
# Registers used by callee tree: {16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44}
# Registers to save: []
# 0063a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c fc ff ff ff 

# 00640 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:Keyboard_poll))
25 0c 4a 06 00 00 

# 00646 JmpImm [Label24(:Keyboard_poll)]
#       PseudoCall(Label24(:Keyboard_poll))
70 27 04 00 

# 0064a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c 04 00 00 00 

# goto inline_main_getchar_7_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 00650 JmpImm [Label24(inline_main_getchar_7_getchar_if_end_3)]
#       goto inline_main_getchar_7_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 54 06 00 

# :inline_main_getchar_7_getchar_if_else_1_7 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_main_getchar_7_getchar_if_else_1_7
# :inline_main_getchar_7_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_main_getchar_7_getchar_if_end_3
# inline_main_getchar_7_inline_getchar_queue_pop_4_s <- 0n987236/0x000f1064u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_s <- inline_main_getchar_7_tfff6 U32` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_s <- 0n987236/0x000f1064u32 `.
# 00654 LoadImm32 [Register(0x30), Constant32(0x000f1064=987236)]
#       inline_main_getchar_7_inline_getchar_queue_pop_4_s <- 0n987236/0x000f1064u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
#       # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_s <- inline_main_getchar_7_tfff6 U32` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_s <- 0n987236/0x000f1064u32 `.
20 30 64 10 0f 00 

# inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32 `.
# 0065a LoadImm32 [Register(0x38), Constant32(0x000f1164=987492)]
#       inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
#       # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32 `.
20 38 64 11 0f 00 

# inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd <- mem[inline_main_getchar_7_inline_getchar_queue_pop_4_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# 00660 Load8 [Register(0x38), Register(0x3c)]
#       inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd <- mem[inline_main_getchar_7_inline_getchar_queue_pop_4_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
05 38 3c 

# inline_main_getchar_7_inline_getchar_queue_pop_4_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_tc1ff <- inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_tc1ff <- 0n987496/0x000f1168u32 `.
# 00663 LoadImm32 [Register(0x38), Constant32(0x000f1168=987496)]
#       inline_main_getchar_7_inline_getchar_queue_pop_4_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
#       # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_tc1ff <- inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_tc1ff <- 0n987496/0x000f1168u32 `.
20 38 68 11 0f 00 

# inline_main_getchar_7_inline_getchar_queue_pop_4_t3ee <- mem[inline_main_getchar_7_inline_getchar_queue_pop_4_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 00669 Load8 [Register(0x38), Register(0x34)]
#       inline_main_getchar_7_inline_getchar_queue_pop_4_t3ee <- mem[inline_main_getchar_7_inline_getchar_queue_pop_4_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 38 34 

# if inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd == inline_main_getchar_7_inline_getchar_queue_pop_4_t3ee then 'inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_true_0_1' else 'inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 0066c Cmp8 [Register(0x3c), Register(0x34)]
#       if inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd == inline_main_getchar_7_inline_getchar_queue_pop_4_t3ee then 'inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_true_0_1' else 'inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 3c 34 

# 0066f JzImm [Label24(inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_true_0_1)]
#       if inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd == inline_main_getchar_7_inline_getchar_queue_pop_4_t3ee then 'inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_true_0_1' else 'inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 77 06 00 

# 00673 JmpImm [Label24(inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_else_0_2)]
#       if inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd == inline_main_getchar_7_inline_getchar_queue_pop_4_t3ee then 'inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_true_0_1' else 'inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 82 06 00 

# :inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_true_0_1 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_true_0_1
# inline_main_getchar_7_inline_getchar_queue_pop_4_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 00677 LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       inline_main_getchar_7_inline_getchar_queue_pop_4_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 2d 00 

# inline_main_getchar_7_ch <- inline_main_getchar_7_inline_getchar_queue_pop_4_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# optimized away noop copy Instruction { source: "inline_main_getchar_7_ch <- inline_main_getchar_7_inline_getchar_queue_pop_4_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nReturn { value: Some(Number(U8, 0)) }\n", opcode: Copy8, args: [Register(0x2d), Register(0x2d)], resolved: None }
# goto inline_main_getchar_7_inline_getchar_queue_pop_4_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# 0067a JmpImm [Label24(inline_main_getchar_7_inline_getchar_queue_pop_4_function_end_queue_pop)]
#       goto inline_main_getchar_7_inline_getchar_queue_pop_4_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
70 bd 06 00 

# goto inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 0067e JmpImm [Label24(inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_end_0)]
#       goto inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
70 82 06 00 

# :inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_else_0_2 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_else_0_2
# :inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_getchar_7_inline_getchar_queue_pop_4_queue_pop_if_end_0
# inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32 `.
# 00682 LoadImm32 [Register(0x38), Constant32(0x000f1164=987492)]
#       inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
#       # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32 `.
20 38 64 11 0f 00 

# inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd <- mem[inline_main_getchar_7_inline_getchar_queue_pop_4_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# 00688 Load8 [Register(0x38), Register(0x3c)]
#       inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd <- mem[inline_main_getchar_7_inline_getchar_queue_pop_4_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
05 38 3c 

# inline_main_getchar_7_inline_getchar_queue_pop_4_tb469 U32 <- inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# 0068b LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       Zero-pad for inline_main_getchar_7_inline_getchar_queue_pop_4_tb469 U32 <- inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
20 38 00 00 00 00 

# 00691 Copy8 [Register(0x3c), Register(0x38)]
#       inline_main_getchar_7_inline_getchar_queue_pop_4_tb469 U32 <- inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
0b 3c 38 

# inline_main_getchar_7_inline_getchar_queue_pop_4_tae11 <- inline_main_getchar_7_inline_getchar_queue_pop_4_s Add Var(inline_main_getchar_7_inline_getchar_queue_pop_4_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# 00694 ClearCarry []
#       inline_main_getchar_7_inline_getchar_queue_pop_4_tae11 <- inline_main_getchar_7_inline_getchar_queue_pop_4_s Add Var(inline_main_getchar_7_inline_getchar_queue_pop_4_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
03 

# 00695 AddCarry32_1 [Register(0x30), Register(0x38), Register(0x30)]
#       inline_main_getchar_7_inline_getchar_queue_pop_4_tae11 <- inline_main_getchar_7_inline_getchar_queue_pop_4_s Add Var(inline_main_getchar_7_inline_getchar_queue_pop_4_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
30 30 38 30 

# 00699 AddCarry32_2 []
#       inline_main_getchar_7_inline_getchar_queue_pop_4_tae11 <- inline_main_getchar_7_inline_getchar_queue_pop_4_s Add Var(inline_main_getchar_7_inline_getchar_queue_pop_4_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
31 

# inline_main_getchar_7_inline_getchar_queue_pop_4_value <- mem[inline_main_getchar_7_inline_getchar_queue_pop_4_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 0069a Load8 [Register(0x30), Register(0x3d)]
#       inline_main_getchar_7_inline_getchar_queue_pop_4_value <- mem[inline_main_getchar_7_inline_getchar_queue_pop_4_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 30 3d 

# inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32  Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32 `.
# 0069d LoadImm32 [Register(0x38), Constant32(0x000f1164=987492)]
#       inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32  Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
#       # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32 `.
20 38 64 11 0f 00 

# inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32  Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32 `.
# 006a3 LoadImm32 [Register(0x38), Constant32(0x000f1164=987492)]
#       inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32  Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
#       # In IlFunctionId("main"), replacing `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- inline_main_getchar_7_inline_getchar_queue_pop_4_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_7_inline_getchar_queue_pop_4_tb702 <- 0n987492/0x000f1164u32 `.
20 38 64 11 0f 00 

# inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd <- mem[inline_main_getchar_7_inline_getchar_queue_pop_4_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# 006a9 Load8 [Register(0x38), Register(0x3c)]
#       inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd <- mem[inline_main_getchar_7_inline_getchar_queue_pop_4_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
05 38 3c 

# inline_main_getchar_7_inline_getchar_queue_pop_4_t6fdb <- inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# 006ac LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_main_getchar_7_inline_getchar_queue_pop_4_t6fdb <- inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
04 00 01 

# 006af Add8NoCarryIn [Register(0x3c), Register(0x00), Register(0x2d)]
#       inline_main_getchar_7_inline_getchar_queue_pop_4_t6fdb <- inline_main_getchar_7_inline_getchar_queue_pop_4_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
14 3c 00 2d 

# mem[inline_main_getchar_7_inline_getchar_queue_pop_4_tb702] <- inline_main_getchar_7_inline_getchar_queue_pop_4_t6fdb U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# 006b3 Store8 [Register(0x2d), Register(0x38)]
#       mem[inline_main_getchar_7_inline_getchar_queue_pop_4_tb702] <- inline_main_getchar_7_inline_getchar_queue_pop_4_t6fdb U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
06 2d 38 

# inline_main_getchar_7_inline_getchar_queue_pop_4_t44ed <- inline_main_getchar_7_inline_getchar_queue_pop_4_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 006b6 Copy8 [Register(0x3d), Register(0x2d)]
#       inline_main_getchar_7_inline_getchar_queue_pop_4_t44ed <- inline_main_getchar_7_inline_getchar_queue_pop_4_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 3d 2d 

# inline_main_getchar_7_ch <- inline_main_getchar_7_inline_getchar_queue_pop_4_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "inline_main_getchar_7_ch <- inline_main_getchar_7_inline_getchar_queue_pop_4_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x2d), Register(0x2d)], resolved: None }
# goto inline_main_getchar_7_inline_getchar_queue_pop_4_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# 006b9 JmpImm [Label24(inline_main_getchar_7_inline_getchar_queue_pop_4_function_end_queue_pop)]
#       goto inline_main_getchar_7_inline_getchar_queue_pop_4_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
70 bd 06 00 

# :inline_main_getchar_7_inline_getchar_queue_pop_4_function_end_queue_pop None
# inline_main_getchar_7_inline_getchar_queue_pop_4_function_end_queue_pop
# goto inline_main_getchar_7_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 006bd JmpImm [Label24(inline_main_getchar_7_getchar_while_predicate_0)]
#       goto inline_main_getchar_7_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 ca 05 00 

# :inline_main_getchar_7_getchar_while_end_2 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_main_getchar_7_getchar_while_end_2
# inline_main_getchar_7_tdcd9 <- inline_main_getchar_7_ch U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_getchar_7_tdcd9 <- inline_main_getchar_7_ch U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x2d), Register(0x2d)], resolved: None }
# ch <- inline_main_getchar_7_tdcd9 U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# optimized away noop copy Instruction { source: "ch <- inline_main_getchar_7_tdcd9 U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: Copy8, args: [Register(0x2d), Register(0x2d)], resolved: None }
# goto inline_main_getchar_7_function_end_getchar Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_getchar_7_function_end_getchar Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: JmpImm, args: [Label24(inline_main_getchar_7_function_end_getchar)], resolved: None }
# :inline_main_getchar_7_function_end_getchar None
# inline_main_getchar_7_function_end_getchar
# tdcd9 <- ch U8 Some('programs/test/echo.j':(9,5))
# TtyOut { value: Ident("ch") }
# Ident("ch")
# 006c1 Copy8 [Register(0x2d), Register(0x3c)]
#       tdcd9 <- ch U8 Some('programs/test/echo.j':(9,5))
#       TtyOut { value: Ident("ch") }
#       Ident("ch")
0b 2d 3c 

# ttyout <- tdcd9 Some('programs/test/echo.j':(9,5))
# TtyOut { value: Ident("ch") }
# 006c4 Out0 [Register(0x3c)]
#       ttyout <- tdcd9 Some('programs/test/echo.j':(9,5))
#       TtyOut { value: Ident("ch") }
68 3c 

# tdcd9 <- ch U8 Some('programs/test/echo.j':(9,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# Ident("ch")
# 006c6 Copy8 [Register(0x2d), Register(0x3c)]
#       tdcd9 <- ch U8 Some('programs/test/echo.j':(9,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
#       Ident("ch")
0b 2d 3c 

# t1501 <- 0n113/0x71u8  Some('programs/test/echo.j':(9,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# Number(U8, 113)
# 006c9 LoadImm8 [Register(0x34), Constant8(0x71=113)]
#       t1501 <- 0n113/0x71u8  Some('programs/test/echo.j':(9,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
#       Number(U8, 113)
04 34 71 

# if tdcd9 == t1501 then 'main_if_true_0_7' else 'main_if_else_0_8' Some('programs/test/echo.j':(9,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# 006cc Cmp8 [Register(0x3c), Register(0x34)]
#       if tdcd9 == t1501 then 'main_if_true_0_7' else 'main_if_else_0_8' Some('programs/test/echo.j':(9,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
15 3c 34 

# 006cf JzImm [Label24(main_if_true_0_7)]
#       if tdcd9 == t1501 then 'main_if_true_0_7' else 'main_if_else_0_8' Some('programs/test/echo.j':(9,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
72 d7 06 00 

# 006d3 JmpImm [Label24(main_if_else_0_8)]
#       if tdcd9 == t1501 then 'main_if_true_0_7' else 'main_if_else_0_8' Some('programs/test/echo.j':(9,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
70 e3 06 00 

# :main_if_true_0_7 Some('programs/test/echo.j':(9,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# main_if_true_0_7
# tb36e <- 0n0/0x00u8  Some('programs/test/echo.j':(9,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 006d7 LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/test/echo.j':(9,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 2d 00 

# return Some(tb36e) Some('programs/test/echo.j':(9,5))
# Return { value: Some(Number(U8, 0)) }
# 006da Copy8 [Register(0x2d), Register(0x00)]
#       return Some(tb36e) Some('programs/test/echo.j':(9,5))
#       Return { value: Some(Number(U8, 0)) }
0b 2d 00 

# 006dd JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto main_if_end_6 Some('programs/test/echo.j':(9,5))
# 006df JmpImm [Label24(main_if_end_6)]
#       goto main_if_end_6 Some('programs/test/echo.j':(9,5))
70 e3 06 00 

# :main_if_else_0_8 Some('programs/test/echo.j':(9,5))
# main_if_else_0_8
# :main_if_end_6 Some('programs/test/echo.j':(9,5))
# main_if_end_6
# goto main_while_predicate_3 Some('programs/test/echo.j':(9,5))
# 006e3 JmpImm [Label24(main_while_predicate_3)]
#       goto main_while_predicate_3 Some('programs/test/echo.j':(9,5))
70 ba 05 00 

# :main_while_end_5 Some('programs/test/echo.j':(9,5))
# main_while_end_5
# goto main_while_predicate_0 Some('programs/test/echo.j':(9,5))
# 006e7 JmpImm [Label24(main_while_predicate_0)]
#       goto main_while_predicate_0 Some('programs/test/echo.j':(9,5))
70 9c 05 00 

# :main_while_end_2 Some('programs/test/echo.j':(9,5))
# main_while_end_2
# :function_end_main None
# function_end_main
# Unreachable None
# 006eb Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

