v2.0 raw
# In IlFunctionId("KeyBoard_init"), optimizing round #0
# In IlFunctionId("KeyBoard_init"), in block from 0..7, removing repetitive write at 4 because it is the same as at 1: ta97f <- 0n0/0x00u8 
# In IlFunctionId("KeyBoard_init"), optimizing round #1
# In IlFunctionId("Keyboard_poll"), optimizing round #0
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("Keyboard_poll"), optimizing round #1
# In IlFunctionId("Keyboard_poll"), merging duplicate labels at #64 && #65: 'IlLabelId("Keyboard_poll_if_else_0_11")' and 'IlLabelId("Keyboard_poll_if_end_9")' to 'IlLabelId("Keyboard_poll_if_end_9")'
# In IlFunctionId("Keyboard_poll"), merging duplicate labels at #39 && #40: 'IlLabelId("Keyboard_poll_if_else_0_8")' and 'IlLabelId("Keyboard_poll_if_end_6")' to 'IlLabelId("Keyboard_poll_if_end_6")'
# In IlFunctionId("Keyboard_poll"), merging duplicate labels at #7 && #8: 'IlLabelId("Keyboard_poll_if_else_0_2")' and 'IlLabelId("Keyboard_poll_if_end_0")' to 'IlLabelId("Keyboard_poll_if_end_0")'
# In IlFunctionId("Keyboard_poll"), optimizing round #2
# In IlFunctionId("Keyboard_poll"), removing no-op goto instruction #61: goto Keyboard_poll_if_end_9
# In IlFunctionId("Keyboard_poll"), removing no-op goto instruction #37: goto Keyboard_poll_if_end_6
# In IlFunctionId("Keyboard_poll"), removing no-op goto instruction #6: goto Keyboard_poll_if_end_0
# In IlFunctionId("Keyboard_poll"), optimizing round #3
# In IlFunctionId("Keyboard_poll"), merging duplicate labels at #58 && #59: 'IlLabelId("Keyboard_poll_if_end_12")' and 'IlLabelId("Keyboard_poll_if_end_9")' to 'IlLabelId("Keyboard_poll_if_end_9")'
# In IlFunctionId("Keyboard_poll"), optimizing round #4
# In IlFunctionId("RpnCalc_handle"), optimizing round #0
# In IlFunctionId("RpnCalc_handle"), `c` is never written to, but is copied to `tbc15` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tbc15 <- c U32
# In IlFunctionId("RpnCalc_handle"), optimizing round #1
# In IlFunctionId("RpnCalc_handle"), optimizing round #2
# In IlFunctionId("RpnCalc_handle"), `c` is never written to, but is copied to `stack` - which is also never modified. Replacing refs to latter with the former and deleting the copy: stack <- c U32
# In IlFunctionId("RpnCalc_handle"), optimizing round #3
# In IlFunctionId("RpnCalc_handle"), optimizing round #4
# In IlFunctionId("RpnCalc_handle"), `c` is never written to, but is copied to `t7f48` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t7f48 <- c U32
# In IlFunctionId("RpnCalc_handle"), optimizing round #5
# In IlFunctionId("RpnCalc_handle"), optimizing round #6
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #254 && #255: 'IlLabelId("RpnCalc_handle_if_else_10_48")' and 'IlLabelId("RpnCalc_handle_if_end_23")' to 'IlLabelId("RpnCalc_handle_if_end_23")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #251 && #252: 'IlLabelId("RpnCalc_handle_if_else_0_51")' and 'IlLabelId("RpnCalc_handle_if_end_49")' to 'IlLabelId("RpnCalc_handle_if_end_49")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #84 && #85: 'IlLabelId("RpnCalc_handle_if_else_0_22")' and 'IlLabelId("RpnCalc_handle_if_end_20")' to 'IlLabelId("RpnCalc_handle_if_end_20")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #75 && #76: 'IlLabelId("RpnCalc_handle_if_else_0_19")' and 'IlLabelId("RpnCalc_handle_if_end_17")' to 'IlLabelId("RpnCalc_handle_if_end_17")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #66 && #67: 'IlLabelId("RpnCalc_handle_if_else_0_16")' and 'IlLabelId("RpnCalc_handle_if_end_14")' to 'IlLabelId("RpnCalc_handle_if_end_14")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #46 && #47: 'IlLabelId("RpnCalc_handle_if_else_0_13")' and 'IlLabelId("RpnCalc_handle_if_end_11")' to 'IlLabelId("RpnCalc_handle_if_end_11")'
# In IlFunctionId("RpnCalc_handle"), optimizing round #7
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #248: goto RpnCalc_handle_if_end_23
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #246: goto RpnCalc_handle_if_end_49
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #80: goto RpnCalc_handle_if_end_20
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #72: goto RpnCalc_handle_if_end_17
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #64: goto RpnCalc_handle_if_end_14
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #45: goto RpnCalc_handle_if_end_11
# In IlFunctionId("RpnCalc_handle"), optimizing round #8
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #242 && #243: 'IlLabelId("RpnCalc_handle_if_end_49")' and 'IlLabelId("RpnCalc_handle_if_end_23")' to 'IlLabelId("RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23")'
# In IlFunctionId("RpnCalc_handle"), optimizing round #9
# In IlFunctionId("RpnCalc_handle"), in block from 52..63, removing repetitive write at 57 because it is the same as at 55: tf36 <- 0n82/0x52u8 
# In IlFunctionId("RpnCalc_handle"), optimizing round #10
# In IlFunctionId("RpnCalc_init"), optimizing round #0
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `tbc15` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tbc15 <- c U32
# In IlFunctionId("RpnCalc_init"), optimizing round #1
# In IlFunctionId("RpnCalc_init"), optimizing round #2
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `s` - which is also never modified. Replacing refs to latter with the former and deleting the copy: s <- c U32
# In IlFunctionId("RpnCalc_init"), optimizing round #3
# In IlFunctionId("RpnCalc_init"), optimizing round #4
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `tb2e9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tb2e9 <- c U32
# In IlFunctionId("RpnCalc_init"), optimizing round #5
# In IlFunctionId("RpnCalc_init"), optimizing round #6
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `tb1ed` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tb1ed <- c U32
# In IlFunctionId("RpnCalc_init"), optimizing round #7
# In IlFunctionId("RpnCalc_init"), optimizing round #8
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #0
# In IlFunctionId("RpnCalc_push_pending"), `c` is never written to, but is copied to `tbc15` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tbc15 <- c U32
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #1
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #2
# In IlFunctionId("RpnCalc_push_pending"), `c` is never written to, but is copied to `t4760` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t4760 <- c U32
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #3
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #4
# In IlFunctionId("RpnCalc_push_pending"), merging duplicate labels at #19 && #20: 'IlLabelId("RpnCalc_push_pending_if_else_0_2")' and 'IlLabelId("RpnCalc_push_pending_if_end_0")' to 'IlLabelId("RpnCalc_push_pending_if_end_0")'
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #5
# In IlFunctionId("RpnCalc_push_pending"), removing no-op goto instruction #18: goto RpnCalc_push_pending_if_end_0
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #6
# In IlFunctionId("RpnCalc_run"), optimizing round #0
# In IlFunctionId("RpnCalc_run"), `calc` is never written to, but is copied to `td337` - which is also never modified. Replacing refs to latter with the former and deleting the copy: td337 <- calc U32
# In IlFunctionId("RpnCalc_run"), optimizing round #1
# In IlFunctionId("RpnCalc_run"), optimizing round #2
# In IlFunctionId("RpnCalc_run"), merging duplicate labels at #18 && #19: 'IlLabelId("RpnCalc_run_while_end_2")' and 'IlLabelId("function_end_RpnCalc_run")' to 'IlLabelId("function_end_RpnCalc_run")'
# In IlFunctionId("RpnCalc_run"), merging duplicate labels at #15 && #16: 'IlLabelId("RpnCalc_run_if_else_0_5")' and 'IlLabelId("RpnCalc_run_if_end_3")' to 'IlLabelId("RpnCalc_run_if_end_3")'
# In IlFunctionId("RpnCalc_run"), optimizing round #3
# In IlFunctionId("RpnCalc_run"), removing no-op goto instruction #14: goto RpnCalc_run_if_end_3
# In IlFunctionId("RpnCalc_run"), optimizing round #4
# In IlFunctionId("RpnCalc_run"), in block from 0..4, removing repetitive write at 2 because it is the same as at 1: ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), optimizing round #5
# In IlFunctionId("add_U64"), optimizing round #0
# In IlFunctionId("add_U64"), `a` is never written to, but is copied to `t3203` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t3203 <- a U32
# In IlFunctionId("add_U64"), optimizing round #1
# In IlFunctionId("add_U64"), optimizing round #2
# In IlFunctionId("add_U64"), `b` is never written to, but is copied to `teec0` - which is also never modified. Replacing refs to latter with the former and deleting the copy: teec0 <- b U32
# In IlFunctionId("add_U64"), optimizing round #3
# In IlFunctionId("add_U64"), optimizing round #4
# In IlFunctionId("add_U64"), `b` is never written to, but is copied to `t24ae` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t24ae <- b U32
# In IlFunctionId("add_U64"), optimizing round #5
# In IlFunctionId("add_U64"), optimizing round #6
# In IlFunctionId("add_U64"), merging duplicate labels at #29 && #30: 'IlLabelId("add_U64_if_else_0_2")' and 'IlLabelId("add_U64_if_end_0")' to 'IlLabelId("add_U64_if_end_0")'
# In IlFunctionId("add_U64"), optimizing round #7
# In IlFunctionId("add_U64"), removing no-op goto instruction #28: goto add_U64_if_end_0
# In IlFunctionId("add_U64"), optimizing round #8
# In IlFunctionId("delay"), optimizing round #0
# In IlFunctionId("div16"), optimizing round #0
# In IlFunctionId("div16"), merging duplicate labels at #84 && #85: 'IlLabelId("div16_if_else_0_23")' and 'IlLabelId("div16_if_end_21")' to 'IlLabelId("div16_if_end_21")'
# In IlFunctionId("div16"), merging duplicate labels at #72 && #73: 'IlLabelId("div16_if_else_0_20")' and 'IlLabelId("div16_if_end_18")' to 'IlLabelId("div16_if_end_18")'
# In IlFunctionId("div16"), merging duplicate labels at #63 && #64: 'IlLabelId("div16_if_else_0_17")' and 'IlLabelId("div16_if_end_15")' to 'IlLabelId("div16_if_end_15")'
# In IlFunctionId("div16"), merging duplicate labels at #53 && #54: 'IlLabelId("div16_if_else_0_14")' and 'IlLabelId("div16_if_end_12")' to 'IlLabelId("div16_if_end_12")'
# In IlFunctionId("div16"), merging duplicate labels at #43 && #44: 'IlLabelId("div16_if_else_0_11")' and 'IlLabelId("div16_if_end_9")' to 'IlLabelId("div16_if_end_9")'
# In IlFunctionId("div16"), merging duplicate labels at #19 && #20: 'IlLabelId("div16_if_else_0_5")' and 'IlLabelId("div16_if_end_3")' to 'IlLabelId("div16_if_end_3")'
# In IlFunctionId("div16"), merging duplicate labels at #7 && #8: 'IlLabelId("div16_if_else_0_2")' and 'IlLabelId("div16_if_end_0")' to 'IlLabelId("div16_if_end_0")'
# In IlFunctionId("div16"), optimizing round #1
# In IlFunctionId("div16"), removing no-op goto instruction #77: goto div16_if_end_21
# In IlFunctionId("div16"), removing no-op goto instruction #66: goto div16_if_end_18
# In IlFunctionId("div16"), removing no-op goto instruction #58: goto div16_if_end_15
# In IlFunctionId("div16"), removing no-op goto instruction #49: goto div16_if_end_12
# In IlFunctionId("div16"), removing no-op goto instruction #40: goto div16_if_end_9
# In IlFunctionId("div16"), removing no-op goto instruction #17: goto div16_if_end_3
# In IlFunctionId("div16"), removing no-op goto instruction #6: goto div16_if_end_0
# In IlFunctionId("div16"), optimizing round #2
# In IlFunctionId("div32"), optimizing round #0
# In IlFunctionId("div32"), removing no-op il instruction: t4a94 <- te825 Add Number(0n0/0x00000000u32)
# In IlFunctionId("div32"), optimizing round #1
# In IlFunctionId("div32"), optimizing round #2
# In IlFunctionId("div32"), merging duplicate labels at #85 && #86: 'IlLabelId("div32_if_else_0_20")' and 'IlLabelId("div32_if_end_18")' to 'IlLabelId("div32_if_end_18")'
# In IlFunctionId("div32"), merging duplicate labels at #72 && #73: 'IlLabelId("div32_if_else_0_17")' and 'IlLabelId("div32_if_end_15")' to 'IlLabelId("div32_if_end_15")'
# In IlFunctionId("div32"), merging duplicate labels at #62 && #63: 'IlLabelId("div32_if_else_0_14")' and 'IlLabelId("div32_if_end_12")' to 'IlLabelId("div32_if_end_12")'
# In IlFunctionId("div32"), merging duplicate labels at #50 && #51: 'IlLabelId("div32_if_else_0_11")' and 'IlLabelId("div32_if_end_9")' to 'IlLabelId("div32_if_end_9")'
# In IlFunctionId("div32"), merging duplicate labels at #21 && #22: 'IlLabelId("div32_if_else_0_5")' and 'IlLabelId("div32_if_end_3")' to 'IlLabelId("div32_if_end_3")'
# In IlFunctionId("div32"), merging duplicate labels at #9 && #10: 'IlLabelId("div32_if_else_0_2")' and 'IlLabelId("div32_if_end_0")' to 'IlLabelId("div32_if_end_0")'
# In IlFunctionId("div32"), optimizing round #3
# In IlFunctionId("div32"), removing no-op goto instruction #79: goto div32_if_end_18
# In IlFunctionId("div32"), removing no-op goto instruction #67: goto div32_if_end_15
# In IlFunctionId("div32"), removing no-op goto instruction #58: goto div32_if_end_12
# In IlFunctionId("div32"), removing no-op goto instruction #47: goto div32_if_end_9
# In IlFunctionId("div32"), removing no-op goto instruction #19: goto div32_if_end_3
# In IlFunctionId("div32"), removing no-op goto instruction #8: goto div32_if_end_0
# In IlFunctionId("div32"), optimizing round #4
# In IlFunctionId("div32_by10"), optimizing round #0
# In IlFunctionId("div32_by10"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t1c61`.
# In IlFunctionId("div32_by10"), optimizing round #1
# In IlFunctionId("div32_by10"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("div32_by10"), optimizing round #2
# In IlFunctionId("div32_by10"), optimizing round #3
# In IlFunctionId("getchar"), optimizing round #0
# In IlFunctionId("getchar"), resolved the constant val `Number(0n987144/0x000f1008u32)` for var `t0`.
# In IlFunctionId("getchar"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("getchar"), optimizing round #1
# In IlFunctionId("getchar"), merging duplicate labels at #23 && #24: 'IlLabelId("getchar_if_else_1_7")' and 'IlLabelId("getchar_if_end_3")' to 'IlLabelId("getchar_if_end_3")'
# In IlFunctionId("getchar"), optimizing round #2
# In IlFunctionId("getchar"), removing no-op goto instruction #22: goto getchar_if_end_3
# In IlFunctionId("getchar"), optimizing round #3
# In IlFunctionId("lcd_draw_char"), optimizing round #0
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `td0f3` - which is also never modified. Replacing refs to latter with the former and deleting the copy: td0f3 <- i U8
# In IlFunctionId("lcd_draw_char"), optimizing round #1
# In IlFunctionId("lcd_draw_char"), optimizing round #2
# In IlFunctionId("lcd_draw_char"), in block from 0..21, removing repetitive write at 18 because it is the same as at 8: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_draw_char"), optimizing round #3
# In IlFunctionId("lcd_init"), optimizing round #0
# In IlFunctionId("lcd_init"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_init"), optimizing round #1
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 24 because it is the same as at 20: t385d <- 0n1/0x00000001u32 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 28 because it is the same as at 24: t385d <- 0n1/0x00000001u32 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 22 because it is the same as at 18: t3d69 <- 0n3/0x03u8 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 26 because it is the same as at 22: t3d69 <- 0n3/0x03u8 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 38 because it is the same as at 32: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 44 because it is the same as at 38: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 50 because it is the same as at 44: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 34 because it is the same as at 30: t9f48 <- 0n2/0x02u8 
# In IlFunctionId("lcd_init"), in block from 17..53, removing repetitive write at 46 because it is the same as at 40: ta97f <- 0n0/0x00u8 
# In IlFunctionId("lcd_init"), optimizing round #2
# In IlFunctionId("lcd_logical_to_physical"), optimizing round #0
# In IlFunctionId("lcd_putc"), optimizing round #0
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t1`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t2`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t3`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t4`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t5`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t6`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t7`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t8`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t9`.
# In IlFunctionId("lcd_putc"), optimizing round #1
# In IlFunctionId("lcd_putc"), merging duplicate labels at #53 && #54: 'IlLabelId("lcd_putc_if_else_0_8")' and 'IlLabelId("lcd_putc_if_end_6")' to 'IlLabelId("lcd_putc_if_end_6")'
# In IlFunctionId("lcd_putc"), optimizing round #2
# In IlFunctionId("lcd_putc"), removing no-op goto instruction #52: goto lcd_putc_if_end_6
# In IlFunctionId("lcd_putc"), optimizing round #3
# In IlFunctionId("lcd_putc"), at #11, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #10, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t1 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #16, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t2] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #15, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t2 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #25, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t3] <- tefac U8 -> mem[t0] <- tefac U8
# In IlFunctionId("lcd_putc"), at #21, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t3 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #23, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t4] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #22, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t4 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #31, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t5] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #30, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #37, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t6] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #36, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t6 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #44, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t7] <- tefac U8 -> mem[t0] <- tefac U8
# In IlFunctionId("lcd_putc"), at #40, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t7 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #42, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t8] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #41, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t8 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #47, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t9] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #46, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t9 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), optimizing round #4
# In IlFunctionId("lcd_putc"), optimizing round #5
# In IlFunctionId("lcd_putc"), in block from 14..27, removing repetitive write at 21 because it is the same as at 15: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 14..27, removing repetitive write at 22 because it is the same as at 21: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 29..45, removing repetitive write at 36 because it is the same as at 30: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 29..45, removing repetitive write at 40 because it is the same as at 36: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 29..45, removing repetitive write at 41 because it is the same as at 40: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), optimizing round #6
# In IlFunctionId("lcd_scroll_up"), optimizing round #0
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t1`.
# In IlFunctionId("lcd_scroll_up"), optimizing round #1
# In IlFunctionId("lcd_scroll_up"), merging duplicate labels at #59 && #60: 'IlLabelId("lcd_scroll_up_if_else_0_11")' and 'IlLabelId("lcd_scroll_up_if_end_9")' to 'IlLabelId("lcd_scroll_up_if_end_9")'
# In IlFunctionId("lcd_scroll_up"), merging duplicate labels at #37 && #38: 'IlLabelId("lcd_scroll_up_while_end_2")' and 'IlLabelId("lcd_scroll_up_while_predicate_6")' to 'IlLabelId("lcd_scroll_up_while_end_2")'
# In IlFunctionId("lcd_scroll_up"), merging duplicate labels at #32 && #33: 'IlLabelId("lcd_scroll_up_if_else_0_5")' and 'IlLabelId("lcd_scroll_up_if_end_3")' to 'IlLabelId("lcd_scroll_up_if_end_3")'
# In IlFunctionId("lcd_scroll_up"), optimizing round #2
# In IlFunctionId("lcd_scroll_up"), removing no-op goto instruction #56: goto lcd_scroll_up_if_end_9
# In IlFunctionId("lcd_scroll_up"), removing no-op goto instruction #31: goto lcd_scroll_up_if_end_3
# In IlFunctionId("lcd_scroll_up"), optimizing round #3
# In IlFunctionId("lcd_scroll_up"), in block from 46..55, removing repetitive write at 53 because it is the same as at 50: tdf3b <- 0n32/0x20u8 
# In IlFunctionId("lcd_scroll_up"), optimizing round #4
# In IlFunctionId("lcd_scroll_up"), at #2, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_scroll_up"), at #1, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t1 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_scroll_up"), optimizing round #5
# In IlFunctionId("lcd_scroll_up"), optimizing round #6
# In IlFunctionId("lcd_scroll_up"), in block from 0..6, removing repetitive write at 1 because it is the same as at 0: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_scroll_up"), optimizing round #7
# In IlFunctionId("main"), optimizing round #0
# In IlFunctionId("main"), resolved the constant val `Number(0n987664/0x000f1210u32)` for var `tca8`.
# In IlFunctionId("main"), optimizing round #1
# In IlFunctionId("main"), in block from 0..14, removing repetitive write at 11 because it is the same as at 5: tca8 <- 0n987664/0x000f1210u32 
# In IlFunctionId("main"), optimizing round #2
# In IlFunctionId("mul16_32"), optimizing round #0
# In IlFunctionId("mul16_32"), in block from 0..42, removing repetitive write at 14 because it is the same as at 12: ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul16_32"), in block from 0..42, removing repetitive write at 36 because it is the same as at 14: ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul16_32"), optimizing round #1
# In IlFunctionId("mul32_32"), optimizing round #0
# In IlFunctionId("mul32_32"), in block from 0..32, removing repetitive write at 26 because it is the same as at 24: ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_32"), optimizing round #1
# In IlFunctionId("mul32_64"), optimizing round #0
# In IlFunctionId("mul32_64"), `c` is never written to, but is copied to `t8956` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8956 <- c U32
# In IlFunctionId("mul32_64"), optimizing round #1
# In IlFunctionId("mul32_64"), optimizing round #2
# In IlFunctionId("mul32_64"), `c` is never written to, but is copied to `t2558` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t2558 <- c U32
# In IlFunctionId("mul32_64"), optimizing round #3
# In IlFunctionId("mul32_64"), optimizing round #4
# In IlFunctionId("mul32_by10"), optimizing round #0
# In IlFunctionId("mul8"), optimizing round #0
# In IlFunctionId("mul8"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U8
# In IlFunctionId("mul8"), optimizing round #1
# In IlFunctionId("mul8"), optimizing round #2
# In IlFunctionId("mul8"), `y` is never written to, but is copied to `t8ae2` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8ae2 <- y U8
# In IlFunctionId("mul8"), optimizing round #3
# In IlFunctionId("mul8"), optimizing round #4
# In IlFunctionId("mul8_16"), optimizing round #0
# In IlFunctionId("mul8_16"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U8
# In IlFunctionId("mul8_16"), optimizing round #1
# In IlFunctionId("mul8_16"), optimizing round #2
# In IlFunctionId("mul8_16"), `y` is never written to, but is copied to `t8ae2` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8ae2 <- y U8
# In IlFunctionId("mul8_16"), optimizing round #3
# In IlFunctionId("mul8_16"), optimizing round #4
# In IlFunctionId("print_dec32"), optimizing round #0
# In IlFunctionId("print_dec32"), merging duplicate labels at #8 && #9: 'IlLabelId("print_dec32_if_else_0_2")' and 'IlLabelId("print_dec32_if_end_0")' to 'IlLabelId("print_dec32_if_end_0")'
# In IlFunctionId("print_dec32"), optimizing round #1
# In IlFunctionId("print_dec32"), removing no-op goto instruction #7: goto print_dec32_if_end_0
# In IlFunctionId("print_dec32"), optimizing round #2
# In IlFunctionId("print_dec32_test"), optimizing round #0
# In IlFunctionId("print_dec32_test"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("print_dec32_test"), optimizing round #1
# In IlFunctionId("print_dec32_test"), optimizing round #2
# In IlFunctionId("print_dec8"), optimizing round #0
# In IlFunctionId("print_dec8"), merging duplicate labels at #13 && #14: 'IlLabelId("print_dec8_if_else_0_2")' and 'IlLabelId("print_dec8_if_end_0")' to 'IlLabelId("print_dec8_if_end_0")'
# In IlFunctionId("print_dec8"), optimizing round #1
# In IlFunctionId("print_dec8"), removing no-op goto instruction #12: goto print_dec8_if_end_0
# In IlFunctionId("print_dec8"), optimizing round #2
# In IlFunctionId("print_dec8_test"), optimizing round #0
# In IlFunctionId("print_dec8_test"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U8
# In IlFunctionId("print_dec8_test"), optimizing round #1
# In IlFunctionId("print_dec8_test"), optimizing round #2
# In IlFunctionId("print_digit"), optimizing round #0
# In IlFunctionId("println"), optimizing round #0
# In IlFunctionId("putc"), optimizing round #0
# In IlFunctionId("putc"), resolved the constant val `Number(0n987228/0x000f105cu32)` for var `t0`.
# In IlFunctionId("putc"), optimizing round #1
# In IlFunctionId("putc"), merging duplicate labels at #10 && #11: 'IlLabelId("putc_if_else_0_2")' and 'IlLabelId("putc_if_end_0")' to 'IlLabelId("putc_if_end_0")'
# In IlFunctionId("putc"), optimizing round #2
# In IlFunctionId("putc"), removing no-op goto instruction #9: goto putc_if_end_0
# In IlFunctionId("putc"), optimizing round #3
# In IlFunctionId("queue_init"), optimizing round #0
# In IlFunctionId("queue_init"), in block from 0..9, removing repetitive write at 6 because it is the same as at 2: ta97f <- 0n0/0x00u8 
# In IlFunctionId("queue_init"), optimizing round #1
# In IlFunctionId("queue_pop"), optimizing round #0
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_pop"), optimizing round #1
# In IlFunctionId("queue_pop"), optimizing round #2
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_pop"), optimizing round #3
# In IlFunctionId("queue_pop"), optimizing round #4
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_pop"), optimizing round #5
# In IlFunctionId("queue_pop"), optimizing round #6
# In IlFunctionId("queue_pop"), merging duplicate labels at #11 && #12: 'IlLabelId("queue_pop_if_else_0_2")' and 'IlLabelId("queue_pop_if_end_0")' to 'IlLabelId("queue_pop_if_end_0")'
# In IlFunctionId("queue_pop"), optimizing round #7
# In IlFunctionId("queue_pop"), removing no-op goto instruction #10: goto queue_pop_if_end_0
# In IlFunctionId("queue_pop"), optimizing round #8
# In IlFunctionId("queue_push"), optimizing round #0
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_push"), optimizing round #1
# In IlFunctionId("queue_push"), optimizing round #2
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_push"), optimizing round #3
# In IlFunctionId("queue_push"), optimizing round #4
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_push"), optimizing round #5
# In IlFunctionId("queue_push"), optimizing round #6
# In IlFunctionId("queue_push"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U8
# In IlFunctionId("queue_push"), optimizing round #7
# In IlFunctionId("queue_push"), optimizing round #8
# In IlFunctionId("readline"), optimizing round #0
# In IlFunctionId("readline"), in block from 0..4, removing repetitive write at 2 because it is the same as at 1: ta97f <- 0n0/0x00u8 
# In IlFunctionId("readline"), optimizing round #1
# In IlFunctionId("shiftright1"), optimizing round #0
# In IlFunctionId("shiftright3"), optimizing round #0
# In IlFunctionId("stack_get"), optimizing round #0
# In IlFunctionId("stack_get"), `s` is never written to, but is copied to `t587d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t587d <- s U32
# In IlFunctionId("stack_get"), optimizing round #1
# In IlFunctionId("stack_get"), optimizing round #2
# In IlFunctionId("stack_get"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("stack_get"), optimizing round #3
# In IlFunctionId("stack_get"), optimizing round #4
# In IlFunctionId("stack_get"), `s` is never written to, but is copied to `tf90a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tf90a <- s U32
# In IlFunctionId("stack_get"), optimizing round #5
# In IlFunctionId("stack_get"), optimizing round #6
# In IlFunctionId("stack_get"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U32
# In IlFunctionId("stack_get"), optimizing round #7
# In IlFunctionId("stack_get"), optimizing round #8
# In IlFunctionId("stack_init"), optimizing round #0
# In IlFunctionId("stack_init"), `s` is never written to, but is copied to `t4bb9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t4bb9 <- s U32
# In IlFunctionId("stack_init"), optimizing round #1
# In IlFunctionId("stack_init"), optimizing round #2
# In IlFunctionId("stack_pop"), optimizing round #0
# In IlFunctionId("stack_pop"), `s` is never written to, but is copied to `t587d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t587d <- s U32
# In IlFunctionId("stack_pop"), optimizing round #1
# In IlFunctionId("stack_pop"), optimizing round #2
# In IlFunctionId("stack_pop"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("stack_pop"), optimizing round #3
# In IlFunctionId("stack_pop"), optimizing round #4
# In IlFunctionId("stack_pop"), `s` is never written to, but is copied to `tf90a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tf90a <- s U32
# In IlFunctionId("stack_pop"), optimizing round #5
# In IlFunctionId("stack_pop"), optimizing round #6
# In IlFunctionId("stack_push"), optimizing round #0
# In IlFunctionId("stack_push"), `s` is never written to, but is copied to `t587d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t587d <- s U32
# In IlFunctionId("stack_push"), optimizing round #1
# In IlFunctionId("stack_push"), optimizing round #2
# In IlFunctionId("stack_push"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("stack_push"), optimizing round #3
# In IlFunctionId("stack_push"), optimizing round #4
# In IlFunctionId("stack_push"), `s` is never written to, but is copied to `tf90a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tf90a <- s U32
# In IlFunctionId("stack_push"), optimizing round #5
# In IlFunctionId("stack_push"), optimizing round #6
# In IlFunctionId("stack_push"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U32
# In IlFunctionId("stack_push"), optimizing round #7
# In IlFunctionId("stack_push"), optimizing round #8
# In IlFunctionId("stdio_init"), optimizing round #0
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987228/0x000f105cu32)` for var `t0`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987144/0x000f1008u32)` for var `t1`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("stdio_init"), optimizing round #1
# In IlFunctionId("stdio_init"), in block from 0..11, removing repetitive write at 4 because it is the same as at 1: ta11a <- 0n1/0x01u8 
# In IlFunctionId("stdio_init"), optimizing round #2
# In IlFunctionId("test_add_U64"), optimizing round #0
# In IlFunctionId("test_add_U64"), resolved the constant val `Number(0n987740/0x000f125cu32)` for var `tcc7b`.
# In IlFunctionId("test_add_U64"), optimizing round #1
# In IlFunctionId("test_add_U64"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("test_add_U64"), optimizing round #2
# In IlFunctionId("test_add_U64"), optimizing round #3
# In IlFunctionId("test_add_U64"), `b` is never written to, but is copied to `tace9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tace9 <- b U32
# In IlFunctionId("test_add_U64"), optimizing round #4
# In IlFunctionId("test_add_U64"), optimizing round #5
# In IlFunctionId("test_add_U64"), in block from 0..4, removing repetitive write at 2 because it is the same as at 0: tcc7b <- 0n987740/0x000f125cu32 
# In IlFunctionId("test_add_U64"), optimizing round #6
# In IlFunctionId("test_delay"), optimizing round #0
# In IlFunctionId("test_delay"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U32
# In IlFunctionId("test_delay"), optimizing round #1
# In IlFunctionId("test_delay"), optimizing round #2
# In IlFunctionId("test_echoline"), optimizing round #0
# In IlFunctionId("test_mul32_64"), optimizing round #0
# In IlFunctionId("test_mul32_64"), resolved the constant val `Number(0n987748/0x000f1264u32)` for var `tcc7b`.
# In IlFunctionId("test_mul32_64"), optimizing round #1
# In IlFunctionId("test_mul32_64"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("test_mul32_64"), optimizing round #2
# In IlFunctionId("test_mul32_64"), optimizing round #3
# In IlFunctionId("test_mul32_64"), `b` is never written to, but is copied to `tace9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tace9 <- b U32
# In IlFunctionId("test_mul32_64"), optimizing round #4
# In IlFunctionId("test_mul32_64"), optimizing round #5
# In IlFunctionId("test_mul32_64"), in block from 0..4, removing repetitive write at 2 because it is the same as at 0: tcc7b <- 0n987748/0x000f1264u32 
# In IlFunctionId("test_mul32_64"), optimizing round #6
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_Keyboard_poll_queue_push_37_s`.
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_Keyboard_poll_queue_push_37_t4d4f`.
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_Keyboard_poll_queue_push_37_tc1ff`.
# In IlFunctionId("Keyboard_poll"), optimizing round #0
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("Keyboard_poll"), optimizing round #1
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_37_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("Keyboard_poll"), optimizing round #2
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_37_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("Keyboard_poll"), optimizing round #3
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_37_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("Keyboard_poll"), optimizing round #4
# In IlFunctionId("Keyboard_poll"), optimizing round #5
# In IlFunctionId("Keyboard_poll"), var `tfff6` is written to, but never read. Removing the instruction that writes to it: (tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Keyboard.j':(31,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("Keyboard_poll"), optimizing round #6
# In IlFunctionId("Keyboard_poll"), optimizing round #7
# In IlFunctionId("Keyboard_poll"), removing no-op goto instruction #46: goto inline_Keyboard_poll_queue_push_37_function_end_queue_push
# In IlFunctionId("Keyboard_poll"), optimizing round #8
# In IlFunctionId("Keyboard_poll"), removing unreferenced label: :inline_Keyboard_poll_queue_push_37_function_end_queue_push
# In IlFunctionId("Keyboard_poll"), optimizing round #9
# In IlFunctionId("Keyboard_poll"), in block from 32..46, removing repetitive write at 41 because it is the same as at 36: inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("Keyboard_poll"), in block from 32..46, removing repetitive write at 42 because it is the same as at 41: inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("Keyboard_poll"), optimizing round #10
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n69/0x45u8)` for var `inline_RpnCalc_handle_putc_15_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n69/0x45u8)` for var `inline_RpnCalc_handle_putc_15_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_16_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_16_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_17_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_17_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_18_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_18_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_19_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_19_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_20_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_20_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_21_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_21_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_22_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_22_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n58/0x3au8)` for var `inline_RpnCalc_handle_putc_23_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n58/0x3au8)` for var `inline_RpnCalc_handle_putc_23_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_24_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_24_tac13`.
# In IlFunctionId("RpnCalc_handle"), optimizing round #0
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_c <- t7ec4 U8` with constant `inline_RpnCalc_handle_putc_15_c <- 0n69/0x45u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_16_c <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_17_c <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_18_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_19_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_20_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_21_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_22_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_c <- t506b U8` with constant `inline_RpnCalc_handle_putc_23_c <- 0n58/0x3au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_24_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), optimizing round #1
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_15_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_15_c <- 0n69/0x45u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_15_c <- t7ec4 U8` with constant `inline_RpnCalc_handle_putc_15_c <- 0n69/0x45u8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #2
# In IlFunctionId("RpnCalc_handle"), optimizing round #3
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_16_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_16_c <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_16_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_16_c <- 0n82/0x52u8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #4
# In IlFunctionId("RpnCalc_handle"), optimizing round #5
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_17_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_17_c <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_17_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_17_c <- 0n82/0x52u8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #6
# In IlFunctionId("RpnCalc_handle"), optimizing round #7
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_18_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_18_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_18_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_18_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #8
# In IlFunctionId("RpnCalc_handle"), optimizing round #9
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_19_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_19_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_19_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_19_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #10
# In IlFunctionId("RpnCalc_handle"), optimizing round #11
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_20_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_20_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_20_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_20_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #12
# In IlFunctionId("RpnCalc_handle"), optimizing round #13
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_21_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_21_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_21_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_21_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #14
# In IlFunctionId("RpnCalc_handle"), optimizing round #15
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_22_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_22_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_22_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_22_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #16
# In IlFunctionId("RpnCalc_handle"), optimizing round #17
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_23_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_23_c <- 0n58/0x3au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_23_c <- t506b U8` with constant `inline_RpnCalc_handle_putc_23_c <- 0n58/0x3au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #18
# In IlFunctionId("RpnCalc_handle"), optimizing round #19
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_24_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_24_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_24_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_24_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #20
# In IlFunctionId("RpnCalc_handle"), optimizing round #21
# In IlFunctionId("RpnCalc_handle"), var `t506b` is written to, but never read. Removing the instruction that writes to it: (t506b <- 0n58/0x3au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "Number(0n58/0x3au8)", "Number(0n58/0x3au8)"] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #22
# In IlFunctionId("RpnCalc_handle"), optimizing round #23
# In IlFunctionId("RpnCalc_handle"), var `t7ec4` is written to, but never read. Removing the instruction that writes to it: (t7ec4 <- 0n69/0x45u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "Number(0n69/0x45u8)", "Number(0n69/0x45u8)"] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #24
# In IlFunctionId("RpnCalc_handle"), optimizing round #25
# In IlFunctionId("RpnCalc_handle"), var `tf36` is written to, but never read. Removing the instruction that writes to it: (tf36 <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Number(0n82/0x52u8)", "Number(0n82/0x52u8)"] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #26
# In IlFunctionId("RpnCalc_handle"), optimizing round #27
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #770: goto inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #731: goto inline_RpnCalc_handle_putc_24_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #717: goto inline_RpnCalc_handle_stack_get_48_function_end_stack_get
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #706: goto inline_RpnCalc_handle_putc_23_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #680: goto inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #675: goto inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #661: goto inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #650: goto inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #616: goto inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #605: goto inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #563: goto inline_RpnCalc_handle_stack_push_59_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #544: goto inline_RpnCalc_handle_stack_push_58_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #519: goto inline_RpnCalc_handle_stack_push_57_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #500: goto inline_RpnCalc_handle_putc_22_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #476: goto inline_RpnCalc_handle_stack_push_56_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #457: goto inline_RpnCalc_handle_putc_21_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #442: goto inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #428: goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #382: goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #326: goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #270: goto inline_RpnCalc_handle_stack_push_55_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #251: goto inline_RpnCalc_handle_putc_20_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #227: goto inline_RpnCalc_handle_stack_push_54_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #208: goto inline_RpnCalc_handle_putc_19_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #185: goto inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #162: goto inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #137: goto inline_RpnCalc_handle_putc_18_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #124: goto inline_RpnCalc_handle_putc_17_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #112: goto inline_RpnCalc_handle_putc_16_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #100: goto inline_RpnCalc_handle_putc_15_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #80: goto inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #69: goto inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), optimizing round #28
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_putc_15_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_putc_16_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_putc_17_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_putc_18_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_putc_19_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_stack_push_54_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_putc_20_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_stack_push_55_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_putc_21_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_stack_push_56_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_putc_22_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_stack_push_57_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_stack_push_58_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_stack_push_59_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_putc_23_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_stack_get_48_function_end_stack_get
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_putc_24_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing unreferenced label: :inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10
# In IlFunctionId("RpnCalc_handle"), optimizing round #29
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #77 && #78: 'IlLabelId("inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0")' and 'IlLabelId("RpnCalc_handle_if_end_11")' to 'IlLabelId("RpnCalc_handle_if_end_11")'
# In IlFunctionId("RpnCalc_handle"), optimizing round #30
# In IlFunctionId("RpnCalc_handle"), at #624, replacing reference to inline_RpnCalc_handle_RpnCalc_init_50_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# In IlFunctionId("RpnCalc_handle"), at #623, replacing reference to inline_RpnCalc_handle_RpnCalc_init_50_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("RpnCalc_handle"), at #72, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# In IlFunctionId("RpnCalc_handle"), at #71, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("RpnCalc_handle"), at #563, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# In IlFunctionId("RpnCalc_handle"), at #562, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("RpnCalc_handle"), at #540, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #567, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f U8 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #539, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #566, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #604, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# In IlFunctionId("RpnCalc_handle"), at #603, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("RpnCalc_handle"), at #581, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #608, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f U8 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #580, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #607, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #274, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #275, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #296, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #273, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #328, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #329, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #350, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #327, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #372, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #373, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #394, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #371, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #405, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #406, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #404, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #90, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' -> if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #89, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_15_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #98, replacing reference to inline_RpnCalc_handle_putc_16_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 -> inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #97, replacing reference to inline_RpnCalc_handle_putc_16_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_16_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #100, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' -> if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #99, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_16_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #108, replacing reference to inline_RpnCalc_handle_putc_17_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 -> inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #107, replacing reference to inline_RpnCalc_handle_putc_17_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_17_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #110, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' -> if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #109, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_17_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #106, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). None <= call io_write0(inline_RpnCalc_handle_putc_17_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #113, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #105, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  -> inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 
# In IlFunctionId("RpnCalc_handle"), at #112, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  -> inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 
# In IlFunctionId("RpnCalc_handle"), at #119, replacing reference to inline_RpnCalc_handle_putc_18_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 -> inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #118, replacing reference to inline_RpnCalc_handle_putc_18_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_18_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #121, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' -> if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #120, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_18_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #184, replacing reference to inline_RpnCalc_handle_putc_19_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 -> inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #183, replacing reference to inline_RpnCalc_handle_putc_19_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_19_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #186, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' -> if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #185, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_19_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #182, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_19_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #189, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #181, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #188, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #223, replacing reference to inline_RpnCalc_handle_putc_20_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 -> inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #222, replacing reference to inline_RpnCalc_handle_putc_20_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_20_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #225, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' -> if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #224, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_20_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #221, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_20_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #228, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #220, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #227, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #417, replacing reference to inline_RpnCalc_handle_putc_21_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 -> inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #416, replacing reference to inline_RpnCalc_handle_putc_21_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_21_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #419, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' -> if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #418, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_21_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #415, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_21_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #422, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #414, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #421, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #456, replacing reference to inline_RpnCalc_handle_putc_22_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 -> inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #455, replacing reference to inline_RpnCalc_handle_putc_22_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_22_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #458, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' -> if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #457, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_22_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #454, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_22_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #461, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #453, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #460, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #642, replacing reference to inline_RpnCalc_handle_putc_23_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 -> inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #641, replacing reference to inline_RpnCalc_handle_putc_23_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_23_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #644, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' -> if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #643, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_23_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #663, replacing reference to inline_RpnCalc_handle_putc_24_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 -> inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #662, replacing reference to inline_RpnCalc_handle_putc_24_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_24_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #665, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' -> if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #664, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_24_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #661, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_24_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #668, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #660, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #667, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #532, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' -> if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
# In IlFunctionId("RpnCalc_handle"), at #115, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #180, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #219, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #413, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #452, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #531, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #659, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #41, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11'
# In IlFunctionId("RpnCalc_handle"), at #131, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17'
# In IlFunctionId("RpnCalc_handle"), at #527, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f)
# In IlFunctionId("RpnCalc_handle"), at #40, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #130, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #526, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), optimizing round #31
# In IlFunctionId("RpnCalc_handle"), optimizing round #32
# In IlFunctionId("RpnCalc_handle"), in block from 114..122, removing repetitive write at 116 because it is the same as at 115: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), in block from 174..187, removing repetitive write at 181 because it is the same as at 180: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), in block from 213..226, removing repetitive write at 220 because it is the same as at 219: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), in block from 252..420, removing repetitive write at 327 because it is the same as at 273: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), in block from 252..420, removing repetitive write at 371 because it is the same as at 327: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), in block from 252..420, removing repetitive write at 404 because it is the same as at 371: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), in block from 252..420, removing repetitive write at 418 because it is the same as at 404: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), in block from 252..420, removing repetitive write at 414 because it is the same as at 413: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), in block from 446..459, removing repetitive write at 453 because it is the same as at 452: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), in block from 615..626, removing repetitive write at 623 because it is the same as at 620: inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("RpnCalc_handle"), in block from 648..666, removing repetitive write at 660 because it is the same as at 659: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), optimizing round #33
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987648/0x000f1200u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff`.
# In IlFunctionId("RpnCalc_run"), optimizing round #0
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), optimizing round #1
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #2
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #3
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(18,5)), SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #4
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #5
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #6
# In IlFunctionId("RpnCalc_run"), optimizing round #7
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #8
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #9
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #10
# In IlFunctionId("RpnCalc_run"), optimizing round #11
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_tfff6` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(21,5)), SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("RpnCalc_run"), optimizing round #12
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_tfff6` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(21,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("RpnCalc_run"), optimizing round #13
# In IlFunctionId("RpnCalc_run"), optimizing round #14
# In IlFunctionId("RpnCalc_run"), removing no-op goto instruction #68: goto inline_RpnCalc_run_getchar_39_function_end_getchar
# In IlFunctionId("RpnCalc_run"), removing no-op goto instruction #62: goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop
# In IlFunctionId("RpnCalc_run"), removing no-op goto instruction #28: goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push
# In IlFunctionId("RpnCalc_run"), optimizing round #15
# In IlFunctionId("RpnCalc_run"), removing unreferenced label: :inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push
# In IlFunctionId("RpnCalc_run"), removing unreferenced label: :inline_RpnCalc_run_getchar_39_function_end_getchar
# In IlFunctionId("RpnCalc_run"), optimizing round #16
# In IlFunctionId("RpnCalc_run"), in block from 14..29, removing repetitive write at 23 because it is the same as at 18: inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("RpnCalc_run"), in block from 14..29, removing repetitive write at 24 because it is the same as at 23: inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("RpnCalc_run"), in block from 47..60, removing repetitive write at 53 because it is the same as at 48: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 
# In IlFunctionId("RpnCalc_run"), in block from 47..60, removing repetitive write at 54 because it is the same as at 53: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 
# In IlFunctionId("RpnCalc_run"), optimizing round #17
# In IlFunctionId("RpnCalc_run"), at #21, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)
# In IlFunctionId("RpnCalc_run"), at #16, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 
# In IlFunctionId("RpnCalc_run"), at #19, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
# In IlFunctionId("RpnCalc_run"), at #23, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
# In IlFunctionId("RpnCalc_run"), at #25, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 -> mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8
# In IlFunctionId("RpnCalc_run"), at #18, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("RpnCalc_run"), at #8, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' -> if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'
# In IlFunctionId("RpnCalc_run"), at #13, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' -> if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'
# In IlFunctionId("RpnCalc_run"), at #31, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' -> if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3'
# In IlFunctionId("RpnCalc_run"), at #7, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), at #12, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), at #30, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), at #2, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' -> if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run'
# In IlFunctionId("RpnCalc_run"), at #65, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' -> if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3'
# In IlFunctionId("RpnCalc_run"), at #68, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f)
# In IlFunctionId("RpnCalc_run"), at #1, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), at #64, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), at #67, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), optimizing round #18
# In IlFunctionId("RpnCalc_run"), optimizing round #19
# In IlFunctionId("div32"), removing no-op goto instruction #285: goto inline_div32_shiftright1_45_function_end_shiftright1
# In IlFunctionId("div32"), removing no-op goto instruction #240: goto inline_div32_shiftright1_44_function_end_shiftright1
# In IlFunctionId("div32"), removing no-op goto instruction #185: goto inline_div32_div16_43_function_end_div16
# In IlFunctionId("div32"), removing no-op goto instruction #134: goto inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32
# In IlFunctionId("div32"), removing no-op goto instruction #88: goto inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1
# In IlFunctionId("div32"), optimizing round #0
# In IlFunctionId("div32"), removing unreferenced label: :inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1
# In IlFunctionId("div32"), removing unreferenced label: :inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32
# In IlFunctionId("div32"), removing unreferenced label: :inline_div32_shiftright1_44_function_end_shiftright1
# In IlFunctionId("div32"), removing unreferenced label: :inline_div32_shiftright1_45_function_end_shiftright1
# In IlFunctionId("div32"), optimizing round #1
# In IlFunctionId("div32"), at #134, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' -> if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9'
# In IlFunctionId("div32"), at #142, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' -> if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12'
# In IlFunctionId("div32"), at #133, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). inline_div32_div16_43_ta97f <- 0n0/0x00u8  -> inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8 
# In IlFunctionId("div32"), at #141, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). inline_div32_div16_43_ta97f <- 0n0/0x00u8  -> inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8 
# In IlFunctionId("div32"), at #7, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). return Some(t60ec) -> return Some(inline_div32_div16_43_t60ec)
# In IlFunctionId("div32"), at #288, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9'
# In IlFunctionId("div32"), at #5, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). t60ec <- 0n0/0x00000000u32  -> inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("div32"), at #287, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). t60ec <- 0n0/0x00000000u32  -> inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("div32"), optimizing round #2
# In IlFunctionId("div32"), optimizing round #3
# In IlFunctionId("div32"), in block from 42..135, removing repetitive write at 133 because it is the same as at 104: inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8 
# In IlFunctionId("div32"), optimizing round #4
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `inline_lcd_draw_char_lcd_logical_to_physical_3_i` - which is also never modified. Replacing refs to latter with the former and deleting the copy: inline_lcd_draw_char_lcd_logical_to_physical_3_i <- i U8
# In IlFunctionId("lcd_draw_char"), optimizing round #0
# In IlFunctionId("lcd_draw_char"), optimizing round #1
# In IlFunctionId("lcd_draw_char"), removing no-op goto instruction #14: goto inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# In IlFunctionId("lcd_draw_char"), optimizing round #2
# In IlFunctionId("lcd_draw_char"), removing unreferenced label: :inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# In IlFunctionId("lcd_draw_char"), optimizing round #3
# In IlFunctionId("main"), resolved the constant val `Number(0n987664/0x000f1210u32)` for var `inline_main_RpnCalc_init_51_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987664/0x000f1210u32)` for var `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987728/0x000f1250u32)` for var `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987732/0x000f1254u32)` for var `inline_main_RpnCalc_init_51_t6e8e`.
# In IlFunctionId("main"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_main_putc_25_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_main_putc_25_tac13`.
# In IlFunctionId("main"), resolved the constant val `Number(0n80/0x50u8)` for var `inline_main_putc_26_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n80/0x50u8)` for var `inline_main_putc_26_tac13`.
# In IlFunctionId("main"), resolved the constant val `Number(0n78/0x4eu8)` for var `inline_main_putc_27_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n78/0x4eu8)` for var `inline_main_putc_27_tac13`.
# In IlFunctionId("main"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_main_putc_28_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_main_putc_28_tac13`.
# In IlFunctionId("main"), optimizing round #0
# In IlFunctionId("main"), replacing `inline_main_putc_25_c <- tf36 U8` with constant `inline_main_putc_25_c <- 0n82/0x52u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_26_c <- td749 U8` with constant `inline_main_putc_26_c <- 0n80/0x50u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_c <- tca8 U32` with constant `inline_main_RpnCalc_init_51_c <- 0n987664/0x000f1210u32 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- inline_main_RpnCalc_init_51_c U32` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- 0n987664/0x000f1210u32 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32)` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_c Add Number(0n68/0x00000044u32)` with constant `inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32 `.
# In IlFunctionId("main"), replacing `inline_main_putc_27_c <- t6adf U8` with constant `inline_main_putc_27_c <- 0n78/0x4eu8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_28_c <- t25ee U8` with constant `inline_main_putc_28_c <- 0n10/0x0au8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("main"), optimizing round #1
# In IlFunctionId("main"), var `inline_main_RpnCalc_init_51_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_RpnCalc_init_51_c <- 0n987664/0x000f1210u32 , Some('programs/app/rpn.j':(12,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "# In IlFunctionId(\"main\"), replacing `inline_main_RpnCalc_init_51_c <- tca8 U32` with constant `inline_main_RpnCalc_init_51_c <- 0n987664/0x000f1210u32 `."] })
# In IlFunctionId("main"), optimizing round #2
# In IlFunctionId("main"), optimizing round #3
# In IlFunctionId("main"), var `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s` is written to, but never read. Removing the instruction that writes to it: (inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- 0n987664/0x000f1210u32 , Some('/lutcomp/programs/lib/rpnlib.j':(15,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "# In IlFunctionId(\"main\"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- inline_main_RpnCalc_init_51_c U32` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- 0n987664/0x000f1210u32 `."] })
# In IlFunctionId("main"), optimizing round #4
# In IlFunctionId("main"), optimizing round #5
# In IlFunctionId("main"), var `inline_main_putc_25_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_25_c <- 0n82/0x52u8 , Some('programs/app/rpn.j':(6,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_25_c <- tf36 U8` with constant `inline_main_putc_25_c <- 0n82/0x52u8 `."] })
# In IlFunctionId("main"), optimizing round #6
# In IlFunctionId("main"), optimizing round #7
# In IlFunctionId("main"), var `inline_main_putc_26_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_26_c <- 0n80/0x50u8 , Some('programs/app/rpn.j':(10,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_26_c <- td749 U8` with constant `inline_main_putc_26_c <- 0n80/0x50u8 `."] })
# In IlFunctionId("main"), optimizing round #8
# In IlFunctionId("main"), optimizing round #9
# In IlFunctionId("main"), var `inline_main_putc_27_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_27_c <- 0n78/0x4eu8 , Some('programs/app/rpn.j':(14,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_27_c <- t6adf U8` with constant `inline_main_putc_27_c <- 0n78/0x4eu8 `."] })
# In IlFunctionId("main"), optimizing round #10
# In IlFunctionId("main"), optimizing round #11
# In IlFunctionId("main"), var `inline_main_putc_28_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_28_c <- 0n10/0x0au8 , Some('programs/app/rpn.j':(15,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_28_c <- t25ee U8` with constant `inline_main_putc_28_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("main"), optimizing round #12
# In IlFunctionId("main"), optimizing round #13
# In IlFunctionId("main"), var `t25ee` is written to, but never read. Removing the instruction that writes to it: (t25ee <- 0n10/0x0au8 , Some('programs/app/rpn.j':(15,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Number(0n10/0x0au8)", "Number(0n10/0x0au8)"] })
# In IlFunctionId("main"), optimizing round #14
# In IlFunctionId("main"), optimizing round #15
# In IlFunctionId("main"), var `t6adf` is written to, but never read. Removing the instruction that writes to it: (t6adf <- 0n78/0x4eu8 , Some('programs/app/rpn.j':(14,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "Number(0n78/0x4eu8)", "Number(0n78/0x4eu8)"] })
# In IlFunctionId("main"), optimizing round #16
# In IlFunctionId("main"), optimizing round #17
# In IlFunctionId("main"), var `td749` is written to, but never read. Removing the instruction that writes to it: (td749 <- 0n80/0x50u8 , Some('programs/app/rpn.j':(10,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "Number(0n80/0x50u8)", "Number(0n80/0x50u8)"] })
# In IlFunctionId("main"), optimizing round #18
# In IlFunctionId("main"), optimizing round #19
# In IlFunctionId("main"), var `tf36` is written to, but never read. Removing the instruction that writes to it: (tf36 <- 0n82/0x52u8 , Some('programs/app/rpn.j':(6,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Number(0n82/0x52u8)", "Number(0n82/0x52u8)"] })
# In IlFunctionId("main"), optimizing round #20
# In IlFunctionId("main"), optimizing round #21
# In IlFunctionId("main"), removing no-op goto instruction #58: goto inline_main_putc_28_function_end_putc
# In IlFunctionId("main"), removing no-op goto instruction #46: goto inline_main_putc_27_function_end_putc
# In IlFunctionId("main"), removing no-op goto instruction #34: goto inline_main_RpnCalc_init_51_function_end_RpnCalc_init
# In IlFunctionId("main"), removing no-op goto instruction #29: goto inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# In IlFunctionId("main"), removing no-op goto instruction #23: goto inline_main_putc_26_function_end_putc
# In IlFunctionId("main"), removing no-op goto instruction #11: goto inline_main_putc_25_function_end_putc
# In IlFunctionId("main"), optimizing round #22
# In IlFunctionId("main"), removing unreferenced label: :inline_main_putc_25_function_end_putc
# In IlFunctionId("main"), removing unreferenced label: :inline_main_putc_26_function_end_putc
# In IlFunctionId("main"), removing unreferenced label: :inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# In IlFunctionId("main"), removing unreferenced label: :inline_main_RpnCalc_init_51_function_end_RpnCalc_init
# In IlFunctionId("main"), removing unreferenced label: :inline_main_putc_27_function_end_putc
# In IlFunctionId("main"), removing unreferenced label: :inline_main_putc_28_function_end_putc
# In IlFunctionId("main"), optimizing round #23
# In IlFunctionId("main"), at #27, replacing reference to inline_main_RpnCalc_init_51_t60ec with inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 -> mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32
# In IlFunctionId("main"), at #26, replacing reference to inline_main_RpnCalc_init_51_t60ec with inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32  -> inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("main"), at #14, replacing reference to inline_main_putc_26_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 -> inline_main_putc_26_t76c7 <- mem[inline_main_putc_25_t0] U8
# In IlFunctionId("main"), at #13, replacing reference to inline_main_putc_26_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_26_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("main"), at #16, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' -> if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0'
# In IlFunctionId("main"), at #15, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_26_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #31, replacing reference to inline_main_putc_27_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 -> inline_main_putc_27_t76c7 <- mem[inline_main_putc_25_t0] U8
# In IlFunctionId("main"), at #30, replacing reference to inline_main_putc_27_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_27_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("main"), at #33, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' -> if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0'
# In IlFunctionId("main"), at #32, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_27_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #41, replacing reference to inline_main_putc_28_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 -> inline_main_putc_28_t76c7 <- mem[inline_main_putc_25_t0] U8
# In IlFunctionId("main"), at #40, replacing reference to inline_main_putc_28_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_28_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("main"), at #43, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' -> if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0'
# In IlFunctionId("main"), at #42, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_28_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), optimizing round #24
# In IlFunctionId("main"), optimizing round #25
# In IlFunctionId("main"), in block from 20..34, removing repetitive write at 26 because it is the same as at 23: inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("main"), optimizing round #26
# In IlFunctionId("mul32_64"), removing no-op goto instruction #306: goto inline_mul32_64_add_U64_1_function_end_add_U64
# In IlFunctionId("mul32_64"), removing no-op goto instruction #252: goto inline_mul32_64_mul16_32_11_function_end_mul16_32
# In IlFunctionId("mul32_64"), removing no-op goto instruction #206: goto inline_mul32_64_add_U64_0_function_end_add_U64
# In IlFunctionId("mul32_64"), removing no-op goto instruction #152: goto inline_mul32_64_mul16_32_10_function_end_mul16_32
# In IlFunctionId("mul32_64"), removing no-op goto instruction #103: goto inline_mul32_64_mul16_32_9_function_end_mul16_32
# In IlFunctionId("mul32_64"), removing no-op goto instruction #55: goto inline_mul32_64_mul16_32_8_function_end_mul16_32
# In IlFunctionId("mul32_64"), optimizing round #0
# In IlFunctionId("mul32_64"), removing unreferenced label: :inline_mul32_64_mul16_32_8_function_end_mul16_32
# In IlFunctionId("mul32_64"), removing unreferenced label: :inline_mul32_64_mul16_32_9_function_end_mul16_32
# In IlFunctionId("mul32_64"), removing unreferenced label: :inline_mul32_64_mul16_32_10_function_end_mul16_32
# In IlFunctionId("mul32_64"), removing unreferenced label: :inline_mul32_64_add_U64_0_function_end_add_U64
# In IlFunctionId("mul32_64"), removing unreferenced label: :inline_mul32_64_mul16_32_11_function_end_mul16_32
# In IlFunctionId("mul32_64"), removing unreferenced label: :inline_mul32_64_add_U64_1_function_end_add_U64
# In IlFunctionId("mul32_64"), optimizing round #1
# In IlFunctionId("mul32_64"), at #217, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #218, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #239, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #216, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), at #28, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #29, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #50, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #27, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), at #74, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #75, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #96, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #73, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), optimizing round #2
# In IlFunctionId("mul32_64"), optimizing round #3
# In IlFunctionId("mul32_64"), in block from 0..191, removing repetitive write at 73 because it is the same as at 27: inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), in block from 0..191, removing repetitive write at 120 because it is the same as at 73: inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), optimizing round #4
# In IlFunctionId("print_dec32"), removing no-op goto instruction #96: goto inline_print_dec32_putc_29_function_end_putc
# In IlFunctionId("print_dec32"), removing no-op goto instruction #80: goto inline_print_dec32_mul32_by10_14_function_end_mul32_by10
# In IlFunctionId("print_dec32"), removing no-op goto instruction #60: goto inline_print_dec32_div32_by10_47_function_end_div32_by10
# In IlFunctionId("print_dec32"), removing no-op goto instruction #57: goto inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3
# In IlFunctionId("print_dec32"), optimizing round #0
# In IlFunctionId("print_dec32"), removing unreferenced label: :inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3
# In IlFunctionId("print_dec32"), removing unreferenced label: :inline_print_dec32_div32_by10_47_function_end_div32_by10
# In IlFunctionId("print_dec32"), removing unreferenced label: :inline_print_dec32_mul32_by10_14_function_end_mul32_by10
# In IlFunctionId("print_dec32"), removing unreferenced label: :inline_print_dec32_putc_29_function_end_putc
# In IlFunctionId("print_dec32"), optimizing round #1
# In IlFunctionId("print_dec8"), removing no-op goto instruction #26: goto inline_print_dec8_putc_30_function_end_putc
# In IlFunctionId("print_dec8"), optimizing round #0
# In IlFunctionId("print_dec8"), removing unreferenced label: :inline_print_dec8_putc_30_function_end_putc
# In IlFunctionId("print_dec8"), optimizing round #1
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_stdio_init_queue_init_35_s`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_stdio_init_queue_init_35_t4d4f`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987648/0x000f1200u32)` for var `inline_stdio_init_queue_init_35_tb702`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_stdio_init_queue_init_35_tc1ff`.
# In IlFunctionId("stdio_init"), optimizing round #0
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_s <- tfff6 U32` with constant `inline_stdio_init_queue_init_35_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("stdio_init"), optimizing round #1
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_35_s` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_35_s <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(13,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_35_s <- tfff6 U32` with constant `inline_stdio_init_queue_init_35_s <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("stdio_init"), optimizing round #2
# In IlFunctionId("stdio_init"), optimizing round #3
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_35_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(9,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("stdio_init"), optimizing round #4
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_35_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(8,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("stdio_init"), optimizing round #5
# In IlFunctionId("stdio_init"), optimizing round #6
# In IlFunctionId("stdio_init"), var `tfff6` is written to, but never read. Removing the instruction that writes to it: (tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(13,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("stdio_init"), optimizing round #7
# In IlFunctionId("stdio_init"), optimizing round #8
# In IlFunctionId("stdio_init"), removing no-op goto instruction #10: goto inline_stdio_init_queue_init_35_function_end_queue_init
# In IlFunctionId("stdio_init"), optimizing round #9
# In IlFunctionId("stdio_init"), removing unreferenced label: :inline_stdio_init_queue_init_35_function_end_queue_init
# In IlFunctionId("stdio_init"), optimizing round #10
# IlFunctionId("KeyBoard_init")()
# 00: td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# 01: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# 02: mem[td45b] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# 03: tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# 04: mem[tdaa] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# 05: return None # None
# 06: :function_end_KeyBoard_init # None
# 07: Unreachable # None

# IlFunctionId("Keyboard_poll")()
# 00: Some(t861f) <= call io_ready_to_read() # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 01: t5ea1 <- t861f BitwiseAnd Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 02: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 03: if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_end_0' # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 04: :Keyboard_poll_if_true_0_1 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 05: return None # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 06: :Keyboard_poll_if_end_0 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 07: Some(code) <= call io_read2() # Some('/lutcomp/programs/lib/Keyboard.j':(20,5))
# 08: tf68c <- code U8 # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# 09: t528d U32 <- tf68c U8 # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# 10: index <- t528d Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# 11: td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 12: t379c <- mem[td45b] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 13: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 14: if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 15: :Keyboard_poll_if_true_0_4 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 16: t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 17: td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 18: t674 <- td18e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 19: t23a <- t4c8b Add Var(t674) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 20: c <- mem[t23a] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 21: goto Keyboard_poll_if_end_3 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 22: :Keyboard_poll_if_else_0_5 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 23: t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 24: td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 25: tb62e <- t4c8b Add Var(td18e) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 26: c <- mem[tb62e] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 27: :Keyboard_poll_if_end_3 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 28: tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 29: t7ebd <- mem[tdaa] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 30: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 31: if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_end_6' # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 32: :Keyboard_poll_if_true_0_7 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 33: tac13 <- c U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 34: inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 35: inline_Keyboard_poll_queue_push_37_n <- tac13 U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 36: inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 37: inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 38: inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 39: inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 40: mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 41: inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 42: inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 43: mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_tf3c4 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 44: :Keyboard_poll_if_end_6 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 45: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 46: t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 47: td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 48: te5cf <- td18e Add Number(0n2/0x00000002u32) # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 49: ted94 <- t4c8b Add Var(te5cf) # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 50: t2ca9 <- mem[ted94] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 51: if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_end_9' # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 52: :Keyboard_poll_if_true_0_10 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 53: tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 54: t7ebd <- mem[tdaa] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 55: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 56: if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 57: :Keyboard_poll_if_true_0_13 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 58: td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 59: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 60: mem[td45b] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 61: goto Keyboard_poll_if_end_9 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 62: :Keyboard_poll_if_else_0_14 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 63: td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 64: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 65: mem[td45b] <- ta11a U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 66: :Keyboard_poll_if_end_9 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 67: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 68: t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 69: td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 70: t5e63 <- td18e Add Number(0n3/0x00000003u32) # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 71: t6cd9 <- t4c8b Add Var(t5e63) # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 72: t7b09 <- mem[t6cd9] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 73: if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 74: :Keyboard_poll_if_true_0_16 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 75: tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 76: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 77: mem[tdaa] <- ta11a U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 78: goto Keyboard_poll_if_end_15 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 79: :Keyboard_poll_if_else_0_17 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 80: tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 81: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 82: mem[tdaa] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 83: :Keyboard_poll_if_end_15 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 84: return None # None
# 85: :function_end_Keyboard_poll # None
# 86: Unreachable # None

# IlFunctionId("RpnCalc_handle")(c,ch,)
# 00: a <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
# 01: b <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
# 02: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 03: tc333 <- 0n43/0x2bu8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 04: if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 05: :RpnCalc_handle_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 06: stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 07: goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 08: :RpnCalc_handle_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 09: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 10: t8f63 <- 0n45/0x2du8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 11: if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 12: :RpnCalc_handle_if_true_1_3 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 13: stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 14: goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 15: :RpnCalc_handle_if_else_1_4 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 16: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 17: t622 <- 0n42/0x2au8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 18: if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 19: :RpnCalc_handle_if_true_2_5 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 20: stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 21: goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 22: :RpnCalc_handle_if_else_2_6 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 23: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 24: t13c5 <- 0n47/0x2fu8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 25: if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 26: :RpnCalc_handle_if_true_3_7 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 27: stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 28: goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 29: :RpnCalc_handle_if_else_3_8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 30: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 31: tcdcd <- 0n115/0x73u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 32: if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 33: :RpnCalc_handle_if_true_4_9 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 34: stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 35: goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 36: :RpnCalc_handle_if_else_4_10 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 37: stack_needed <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 38: :RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 39: t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# 40: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# 41: if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# 42: :RpnCalc_handle_if_true_0_12 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# 43: tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# 44: inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# 45: inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 46: inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 47: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 48: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 49: if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'RpnCalc_handle_if_end_11' # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 50: :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 51: inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 52: inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 53: inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 54: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 55: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 56: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 57: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 58: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 59: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 60: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 61: mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 62: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 63: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 64: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 65: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 66: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 67: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 68: mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 69: inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 70: inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 71: inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 72: mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 73: inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 74: inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 75: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 76: mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 77: :RpnCalc_handle_if_end_11 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 78: tbf93 <- c Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# 79: stack_count_usize <- mem[tbf93] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# 80: stack_count <- stack_count_usize[0x00..0x01] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
# 81: t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 82: t6001 <- stack_count U8 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 83: if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_end_14' # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 84: :RpnCalc_handle_if_true_0_15 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 85: inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 86: None <= call io_write0(inline_RpnCalc_handle_putc_15_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 87: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 88: inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 89: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 90: if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 91: :inline_RpnCalc_handle_putc_15_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 92: inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 93: None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 94: :inline_RpnCalc_handle_putc_15_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 95: inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 96: None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 97: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 98: inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 99: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 100: if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 101: :inline_RpnCalc_handle_putc_16_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 102: inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 103: None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 104: :inline_RpnCalc_handle_putc_16_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 105: inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 106: None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 107: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 108: inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 109: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 110: if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 111: :inline_RpnCalc_handle_putc_17_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 112: inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 113: None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 114: :inline_RpnCalc_handle_putc_17_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 115: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 116: None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 117: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 118: inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 119: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 120: if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 121: :inline_RpnCalc_handle_putc_18_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 122: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 123: None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 124: :inline_RpnCalc_handle_putc_18_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 125: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 126: return Some(ta11a) # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 127: :RpnCalc_handle_if_end_14 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 128: t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# 129: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# 130: if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# 131: :RpnCalc_handle_if_true_0_18 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# 132: tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# 133: inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# 134: inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 135: inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 136: inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 137: inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 138: inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 139: inline_RpnCalc_handle_stack_pop_52_t1533 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 140: mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 141: inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 142: inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 143: inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 144: inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 145: inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 146: inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 147: a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 148: :RpnCalc_handle_if_end_17 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# 149: t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# 150: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# 151: if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_end_20' # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# 152: :RpnCalc_handle_if_true_0_21 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# 153: tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# 154: inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# 155: inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 156: inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 157: inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 158: inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 159: inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 160: inline_RpnCalc_handle_stack_pop_53_t1533 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 161: mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 162: inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 163: inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 164: inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 165: inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 166: inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 167: inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 168: b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 169: :RpnCalc_handle_if_end_20 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# 170: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 171: tc333 <- 0n43/0x2bu8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 172: if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 173: :RpnCalc_handle_if_true_0_24 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 174: tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 175: t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 176: sum <- tace9 Add Var(t8792) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 177: t670d <- sum U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 178: None <= call print_dec32(t670d,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 179: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 180: None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 181: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 182: inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 183: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 184: if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 185: :inline_RpnCalc_handle_putc_19_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 186: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 187: None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 188: :inline_RpnCalc_handle_putc_19_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 189: tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 190: t670d <- sum U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 191: inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 192: inline_RpnCalc_handle_stack_push_54_n <- t670d U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 193: inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 194: inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 195: inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 196: inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 197: inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 198: mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 199: inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 200: inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 201: inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 202: inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 203: inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 204: inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 205: mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 206: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 207: :RpnCalc_handle_if_else_0_25 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 208: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 209: t8f63 <- 0n45/0x2du8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 210: if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 211: :RpnCalc_handle_if_true_1_26 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 212: tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 213: t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 214: diff <- tace9 Subtract Var(t8792) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 215: t17ee <- diff U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 216: None <= call print_dec32(t17ee,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 217: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 218: None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 219: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 220: inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 221: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 222: if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 223: :inline_RpnCalc_handle_putc_20_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 224: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 225: None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 226: :inline_RpnCalc_handle_putc_20_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 227: tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 228: t17ee <- diff U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 229: inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 230: inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 231: inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 232: inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 233: inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 234: inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 235: inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 236: mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 237: inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 238: inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 239: inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 240: inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 241: inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 242: inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 243: mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 244: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 245: :RpnCalc_handle_if_else_1_27 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 246: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 247: t622 <- 0n42/0x2au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 248: if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 249: :RpnCalc_handle_if_true_2_28 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 250: tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 251: t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 252: inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 253: inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 254: inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
# 255: inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
# 256: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
# 257: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
# 258: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 259: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 260: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 261: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 262: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 263: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 264: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 265: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 266: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 267: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 268: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 269: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 270: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 271: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 272: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
# 273: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 274: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 275: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 276: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 277: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 278: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 279: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 280: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 281: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 282: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 283: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 284: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 285: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 286: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 287: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 288: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 289: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 290: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 291: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 292: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 293: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
# 294: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 295: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 296: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 297: inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 298: inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(32,5))
# 299: inline_RpnCalc_handle_mul32_32_12_t94df <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(33,5))
# 300: inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t94df U8 # Some('/lutcomp/programs/lib/mul.j':(33,5))
# 301: inline_RpnCalc_handle_mul32_32_12_t3b02 <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(34,5))
# 302: inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t3b02 U8 # Some('/lutcomp/programs/lib/mul.j':(34,5))
# 303: inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(36,5))
# 304: inline_RpnCalc_handle_mul32_32_12_ta5f7 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(37,5))
# 305: inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta5f7 U8 # Some('/lutcomp/programs/lib/mul.j':(37,5))
# 306: inline_RpnCalc_handle_mul32_32_12_t82cc <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(38,5))
# 307: inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t82cc U8 # Some('/lutcomp/programs/lib/mul.j':(38,5))
# 308: inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
# 309: inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
# 310: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
# 311: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
# 312: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 313: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 314: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 315: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 316: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 317: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 318: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 319: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 320: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 321: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 322: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 323: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 324: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 325: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
# 326: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 327: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 328: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 329: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 330: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 331: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 332: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 333: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 334: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 335: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 336: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 337: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 338: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 339: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 340: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 341: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 342: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 343: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 344: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 345: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 346: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
# 347: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 348: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 349: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 350: inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 351: inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
# 352: inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
# 353: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
# 354: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
# 355: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 356: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 357: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 358: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 359: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 360: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 361: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 362: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 363: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 364: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 365: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 366: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 367: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 368: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
# 369: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 370: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 371: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 372: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 373: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 374: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 375: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 376: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 377: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 378: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 379: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 380: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 381: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 382: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 383: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 384: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 385: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 386: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 387: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 388: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 389: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
# 390: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 391: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 392: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 393: inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 394: inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) # Some('/lutcomp/programs/lib/mul.j':(40,5))
# 395: inline_RpnCalc_handle_mul32_32_12_t34f7 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(41,5))
# 396: inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(41,5))
# 397: inline_RpnCalc_handle_mul32_32_12_t30b9 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(42,5))
# 398: inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(42,5))
# 399: inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(43,5))
# 400: inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(44,5))
# 401: inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
# 402: inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
# 403: inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) # Some('/lutcomp/programs/lib/mul.j':(45,5))
# 404: product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
# 405: t2754 <- product U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 406: None <= call print_dec32(t2754,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 407: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 408: None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 409: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 410: inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 411: if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 412: :inline_RpnCalc_handle_putc_21_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 413: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 414: None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 415: :inline_RpnCalc_handle_putc_21_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 416: tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 417: t2754 <- product U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 418: inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 419: inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 420: inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 421: inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 422: inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 423: inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 424: inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 425: mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 426: inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 427: inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 428: inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 429: inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 430: inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 431: inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 432: mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 433: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 434: :RpnCalc_handle_if_else_2_29 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 435: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 436: t13c5 <- 0n47/0x2fu8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 437: if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 438: :RpnCalc_handle_if_true_3_30 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 439: tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 440: t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 441: Some(quotient) <= call div32(tace9,t8792,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 442: t1ba9 <- quotient U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 443: None <= call print_dec32(t1ba9,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 444: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 445: None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 446: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 447: inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 448: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 449: if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 450: :inline_RpnCalc_handle_putc_22_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 451: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 452: None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 453: :inline_RpnCalc_handle_putc_22_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 454: tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 455: t1ba9 <- quotient U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 456: inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 457: inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 458: inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 459: inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 460: inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 461: inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 462: inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 463: mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 464: inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 465: inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 466: inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 467: inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 468: inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 469: inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 470: mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 471: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 472: :RpnCalc_handle_if_else_3_31 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 473: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 474: tcdcd <- 0n115/0x73u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 475: if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 476: :RpnCalc_handle_if_true_4_32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 477: tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 478: t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 479: inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 480: inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 481: inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 482: inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 483: inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 484: inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 485: inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 486: mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 487: inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 488: inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 489: inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 490: inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 491: inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 492: inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 493: mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 494: tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 495: tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 496: inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 497: inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 498: inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 499: inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 500: inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 501: inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 502: inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 503: mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 504: inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 505: inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 506: inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 507: inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 508: inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 509: inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 510: mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 511: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 512: :RpnCalc_handle_if_else_4_33 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 513: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 514: tdf6e <- 0n113/0x71u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 515: if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 516: :RpnCalc_handle_if_true_5_34 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 517: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 518: return Some(inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 519: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 520: :RpnCalc_handle_if_else_5_35 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 521: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 522: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 523: if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 524: :RpnCalc_handle_if_true_6_36 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 525: tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 526: inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 527: inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 528: inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 529: inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 530: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 531: if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 532: :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 533: inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 534: inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 535: inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 536: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 537: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 538: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 539: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 540: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 541: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 542: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 543: mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 544: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 545: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 546: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 547: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 548: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 549: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 550: mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 551: inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 552: inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 553: inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 554: mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 555: inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 556: inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 557: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 558: mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 559: :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 560: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 561: :RpnCalc_handle_if_else_6_37 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 562: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 563: tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 564: if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 565: :RpnCalc_handle_if_true_7_38 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 566: tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 567: inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 568: inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 569: inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 570: inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 571: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 572: if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 573: :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 574: inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 575: inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 576: inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 577: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 578: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 579: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 580: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 581: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 582: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 583: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 584: mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 585: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 586: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 587: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 588: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 589: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 590: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 591: mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 592: inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 593: inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 594: inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 595: mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 596: inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 597: inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 598: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 599: mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 600: :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 601: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 602: :RpnCalc_handle_if_else_7_39 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 603: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 604: t47ec <- 0n99/0x63u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 605: if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 606: :RpnCalc_handle_if_true_8_40 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 607: tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 608: inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 609: inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(15,5))
# 610: inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(7,5))
# 611: inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/Stack.j':(7,5))
# 612: mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/Stack.j':(7,5))
# 613: inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# 614: mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# 615: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 616: :RpnCalc_handle_if_else_8_41 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 617: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 618: tcc42 <- 0n100/0x64u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 619: if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 620: :RpnCalc_handle_if_true_9_42 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 621: i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 622: :RpnCalc_handle_while_predicate_44 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 623: td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 624: t6001 <- stack_count U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 625: if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 626: :RpnCalc_handle_while_body_45 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 627: td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 628: None <= call print_dec8(td0f3,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 629: inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 630: None <= call io_write0(inline_RpnCalc_handle_putc_23_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 631: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 632: inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 633: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 634: if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 635: :inline_RpnCalc_handle_putc_23_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 636: inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 637: None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 638: :inline_RpnCalc_handle_putc_23_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 639: tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 640: td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 641: t4376 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 642: inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 643: inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 644: inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(24,5))
# 645: inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) # Some('/lutcomp/programs/lib/Stack.j':(24,5))
# 646: inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 # Some('/lutcomp/programs/lib/Stack.j':(24,5))
# 647: tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 # Some('/lutcomp/programs/lib/Stack.j':(24,5))
# 648: None <= call print_dec32(tb336,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 649: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 650: None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 651: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 652: inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 653: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 654: if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 655: :inline_RpnCalc_handle_putc_24_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 656: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 657: None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 658: :inline_RpnCalc_handle_putc_24_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 659: td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 660: i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 661: goto RpnCalc_handle_while_predicate_44 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 662: :RpnCalc_handle_while_end_46 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 663: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 664: :RpnCalc_handle_if_else_9_43 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 665: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 666: teed8 <- 0n57/0x39u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 667: if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 668: :RpnCalc_handle_if_true_10_47 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 669: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 670: tdcb0 <- 0n48/0x30u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 671: if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 672: :RpnCalc_handle_if_true_0_50 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 673: tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 674: tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 675: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 676: mem[tfdb7] <- ta11a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 677: tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 678: t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 679: tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 680: t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 681: td60 <- mem[t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 682: inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 683: inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
# 684: inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
# 685: inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) # Some('/lutcomp/programs/lib/mul.j':(49,5))
# 686: inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
# 687: inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
# 688: inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) # Some('/lutcomp/programs/lib/mul.j':(50,5))
# 689: inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
# 690: inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
# 691: inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) # Some('/lutcomp/programs/lib/mul.j':(51,5))
# 692: inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
# 693: inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
# 694: inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) # Some('/lutcomp/programs/lib/mul.j':(52,5))
# 695: tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
# 696: mem[t6e8e] <- tadd U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 697: tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 698: t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 699: tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 700: t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 701: td60 <- mem[t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 702: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 703: t9dae <- tdcd9 Subtract Number(0n48/0x30u8) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 704: tdc11 U32 <- t9dae U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 705: tbdb5 <- td60 Add Var(tdc11) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 706: mem[t6e8e] <- tbdb5 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 707: :RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 708: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
# 709: return Some(ta11a) # Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
# 710: :function_end_RpnCalc_handle # None
# 711: Unreachable # None

# IlFunctionId("RpnCalc_run")(calc,)
# 00: :RpnCalc_run_while_predicate_0 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 01: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 02: if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 03: :RpnCalc_run_while_body_1 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 04: inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(19,5))
# 05: :inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 06: inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 07: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 08: if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 09: :inline_RpnCalc_run_getchar_39_getchar_while_body_1 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 10: Some(inline_RpnCalc_run_getchar_39_t861f) <= call io_ready_to_read() # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 11: inline_RpnCalc_run_getchar_39_te3c4 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 12: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 13: if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 14: :inline_RpnCalc_run_getchar_39_getchar_if_true_0_4 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 15: inline_RpnCalc_run_getchar_39_tb816 <- ttyin # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 16: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 17: inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 18: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 19: inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 20: inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 21: inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 22: mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 23: inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 24: inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 25: mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 26: goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 27: :inline_RpnCalc_run_getchar_39_getchar_if_else_0_5 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 28: inline_RpnCalc_run_getchar_39_t0 <- 0n987144/0x000f1008u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 29: inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 30: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 31: if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 32: :inline_RpnCalc_run_getchar_39_getchar_if_true_1_6 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 33: None <= call Keyboard_poll() # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 34: :inline_RpnCalc_run_getchar_39_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 35: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 36: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 37: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 38: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 39: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 40: if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0' # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 41: :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 42: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 43: inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 44: goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 45: :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 46: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 47: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 48: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 49: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 50: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 51: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
# 52: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(19,5))
# 53: mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
# 54: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
# 55: inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
# 56: :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop # None
# 57: goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 58: :inline_RpnCalc_run_getchar_39_getchar_while_end_2 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 59: inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 # Some('/lutcomp/programs/lib/stdio.j':(31,5))
# 60: ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 # Some('/lutcomp/programs/lib/stdio.j':(31,5))
# 61: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 62: Some(result) <= call RpnCalc_handle(calc,tdcd9,) # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 63: t57fd <- result U8 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 64: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 65: if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 66: :RpnCalc_run_if_true_0_4 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 67: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 68: return Some(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f) # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 69: :RpnCalc_run_if_end_3 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 70: goto RpnCalc_run_while_predicate_0 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 71: :function_end_RpnCalc_run # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 72: Unreachable # None

# IlFunctionId("delay")(x,)
# 00: :delay_while_predicate_0 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 01: tad57 <- x U32 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 02: t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 03: if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 04: :delay_while_body_1 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 05: tad57 <- x U32 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 06: x <- tad57 Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 07: goto delay_while_predicate_0 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 08: :delay_while_end_2 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 09: return None # None
# 10: :function_end_delay # None
# 11: Unreachable # None

# IlFunctionId("div32")(a,b,)
# 00: __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) # None
# 01: t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(67,5))
# 02: tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(67,5))
# 03: if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_end_0' # Some('/lutcomp/programs/lib/div.j':(67,5))
# 04: :div32_if_true_0_1 # Some('/lutcomp/programs/lib/div.j':(67,5))
# 05: inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(67,5))
# 06: __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(67,5))
# 07: return Some(inline_div32_div16_43_t60ec) # Some('/lutcomp/programs/lib/div.j':(67,5))
# 08: :div32_if_end_0 # Some('/lutcomp/programs/lib/div.j':(67,5))
# 09: t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
# 10: t4917 <- 0n65536/0x00010000u32  # Some('/lutcomp/programs/lib/div.j':(71,5))
# 11: if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_end_3' # Some('/lutcomp/programs/lib/div.j':(71,5))
# 12: :div32_if_true_0_4 # Some('/lutcomp/programs/lib/div.j':(71,5))
# 13: t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
# 14: tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
# 15: inline_div32_div16_43_a <- t8792 U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
# 16: inline_div32_div16_43_b <- tace9 U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
# 17: inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(21,5))
# 18: inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 # Some('/lutcomp/programs/lib/div.j':(21,5))
# 19: if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_end_0' # Some('/lutcomp/programs/lib/div.j':(21,5))
# 20: :inline_div32_div16_43_div16_if_true_0_1 # Some('/lutcomp/programs/lib/div.j':(21,5))
# 21: inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(21,5))
# 22: te81f <- inline_div32_div16_43_t60ec U32 # Some('/lutcomp/programs/lib/div.j':(21,5))
# 23: goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(21,5))
# 24: :inline_div32_div16_43_div16_if_end_0 # Some('/lutcomp/programs/lib/div.j':(21,5))
# 25: inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(25,5))
# 26: inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  # Some('/lutcomp/programs/lib/div.j':(25,5))
# 27: if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_end_3' # Some('/lutcomp/programs/lib/div.j':(25,5))
# 28: :inline_div32_div16_43_div16_if_true_0_4 # Some('/lutcomp/programs/lib/div.j':(25,5))
# 29: inline_div32_div16_43_t3404 <- inline_div32_div16_43_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(25,5))
# 30: inline_div32_div16_43_t5be0 <- inline_div32_div16_43_b[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(25,5))
# 31: inline_div32_div16_43_ta670 <- inline_div32_div16_43_t3404 Divide Var(inline_div32_div16_43_t5be0) # Some('/lutcomp/programs/lib/div.j':(25,5))
# 32: inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 # Some('/lutcomp/programs/lib/div.j':(25,5))
# 33: te81f <- inline_div32_div16_43_tb0ef U32 # Some('/lutcomp/programs/lib/div.j':(25,5))
# 34: goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(25,5))
# 35: :inline_div32_div16_43_div16_if_end_3 # Some('/lutcomp/programs/lib/div.j':(25,5))
# 36: inline_div32_div16_43_lo <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(29,5))
# 37: inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  # Some('/lutcomp/programs/lib/div.j':(30,5))
# 38: :inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 39: inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 40: inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 41: if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' # Some('/lutcomp/programs/lib/div.j':(32,5))
# 42: :inline_div32_div16_43_div16_while_body_7 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 43: inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 44: inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 45: inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) # Some('/lutcomp/programs/lib/div.j':(32,5))
# 46: inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 47: inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
# 48: inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(4,5))
# 49: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf435 U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
# 50: inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
# 51: inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(5,5))
# 52: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
# 53: inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
# 54: inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(6,5))
# 55: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t878b U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
# 56: inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
# 57: inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(7,5))
# 58: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t32ea U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
# 59: inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
# 60: inline_div32_div16_43_inline_div16_shiftright1_42_tbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(9,5))
# 61: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tbe U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
# 62: inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
# 63: inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
# 64: inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(10,5))
# 65: inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t9170) # Some('/lutcomp/programs/lib/div.j':(10,5))
# 66: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
# 67: inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
# 68: inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(11,5))
# 69: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
# 70: inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
# 71: inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
# 72: inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(12,5))
# 73: inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c) # Some('/lutcomp/programs/lib/div.j':(12,5))
# 74: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
# 75: inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
# 76: inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(13,5))
# 77: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4954 U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
# 78: inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
# 79: inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
# 80: inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(14,5))
# 81: inline_div32_div16_43_inline_div16_shiftright1_42_t837a <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t17d0) # Some('/lutcomp/programs/lib/div.j':(14,5))
# 82: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t837a U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
# 83: inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
# 84: inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(15,5))
# 85: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t965c U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
# 86: inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
# 87: inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
# 88: inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 89: inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 90: inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 91: inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 92: inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 93: inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 94: inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 95: inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 96: inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 97: inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 98: inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 99: inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 100: inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 101: inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 102: inline_div32_div16_43_inline_div16_mul16_32_4_t9922 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 103: inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 104: inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 105: inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 106: inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
# 107: inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 108: inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 109: inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 110: inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 111: inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 112: inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 113: inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 114: inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 115: inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 116: inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 117: inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 118: inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 119: inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 120: inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 121: inline_div32_div16_43_inline_div16_mul16_32_4_t8575 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 122: inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 123: inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 124: inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 125: inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 126: inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 127: inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
# 128: inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 129: inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 130: inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 131: inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 132: inline_div32_div16_43_tcd34 <- inline_div32_div16_43_x[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 133: if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' # Some('/lutcomp/programs/lib/div.j':(32,5))
# 134: :inline_div32_div16_43_div16_if_true_0_10 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 135: inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 136: inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
# 137: goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 138: :inline_div32_div16_43_div16_if_end_9 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 139: inline_div32_div16_43_t4299 <- inline_div32_div16_43_x[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 140: inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/div.j':(32,5))
# 141: if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' # Some('/lutcomp/programs/lib/div.j':(32,5))
# 142: :inline_div32_div16_43_div16_if_true_0_13 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 143: inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 144: inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
# 145: goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 146: :inline_div32_div16_43_div16_if_end_12 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 147: inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 148: inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 149: if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_end_15' # Some('/lutcomp/programs/lib/div.j':(32,5))
# 150: :inline_div32_div16_43_div16_if_true_0_16 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 151: inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 152: inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
# 153: goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 154: :inline_div32_div16_43_div16_if_end_15 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 155: inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 156: inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 157: if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_end_18' # Some('/lutcomp/programs/lib/div.j':(32,5))
# 158: :inline_div32_div16_43_div16_if_true_0_19 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 159: inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 160: te81f <- inline_div32_div16_43_tfd7e U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 161: goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 162: :inline_div32_div16_43_div16_if_end_18 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 163: inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 164: inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 165: inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) # Some('/lutcomp/programs/lib/div.j':(32,5))
# 166: inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 167: inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 168: if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_end_21' # Some('/lutcomp/programs/lib/div.j':(32,5))
# 169: :inline_div32_div16_43_div16_if_true_0_22 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 170: inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 171: te81f <- inline_div32_div16_43_tfd7e U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 172: goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 173: :inline_div32_div16_43_div16_if_end_21 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 174: inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 175: inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
# 176: goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 177: :inline_div32_div16_43_div16_while_end_8 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 178: inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 # Some('/lutcomp/programs/lib/div.j':(63,5))
# 179: te81f <- inline_div32_div16_43_t1506 U32 # Some('/lutcomp/programs/lib/div.j':(63,5))
# 180: :inline_div32_div16_43_function_end_div16 # None
# 181: __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(71,5))
# 182: return Some(te81f) # Some('/lutcomp/programs/lib/div.j':(71,5))
# 183: :div32_if_end_3 # Some('/lutcomp/programs/lib/div.j':(71,5))
# 184: lo <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(75,5))
# 185: hi <- 0xffffffffu32  # Some('/lutcomp/programs/lib/div.j':(76,5))
# 186: :div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 187: t1506 <- lo U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 188: t5508 <- hi U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 189: if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' # Some('/lutcomp/programs/lib/div.j':(78,5))
# 190: :div32_while_body_7 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 191: t1506 <- lo U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 192: inline_div32_shiftright1_44_a <- t1506 U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 193: inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
# 194: inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(4,5))
# 195: inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf435 U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
# 196: inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
# 197: inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(5,5))
# 198: inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t1aa2 U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
# 199: inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
# 200: inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(6,5))
# 201: inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t878b U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
# 202: inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
# 203: inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(7,5))
# 204: inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t32ea U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
# 205: inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
# 206: inline_div32_shiftright1_44_tbe <- inline_div32_shiftright1_44_t3404 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(9,5))
# 207: inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tbe U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
# 208: inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
# 209: inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
# 210: inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(10,5))
# 211: inline_div32_shiftright1_44_tafc1 <- inline_div32_shiftright1_44_t3404 BitwiseOr Var(inline_div32_shiftright1_44_t9170) # Some('/lutcomp/programs/lib/div.j':(10,5))
# 212: inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tafc1 U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
# 213: inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
# 214: inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(11,5))
# 215: inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdc9f U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
# 216: inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
# 217: inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
# 218: inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(12,5))
# 219: inline_div32_shiftright1_44_tdbbe <- inline_div32_shiftright1_44_t3009 BitwiseOr Var(inline_div32_shiftright1_44_tdb4c) # Some('/lutcomp/programs/lib/div.j':(12,5))
# 220: inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdbbe U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
# 221: inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
# 222: inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(13,5))
# 223: inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t4954 U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
# 224: inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
# 225: inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
# 226: inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(14,5))
# 227: inline_div32_shiftright1_44_t837a <- inline_div32_shiftright1_44_t3b02 BitwiseOr Var(inline_div32_shiftright1_44_t17d0) # Some('/lutcomp/programs/lib/div.j':(14,5))
# 228: inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t837a U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
# 229: inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
# 230: inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(15,5))
# 231: inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t965c U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
# 232: inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
# 233: t9599 <- inline_div32_shiftright1_44_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
# 234: t5508 <- hi U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 235: inline_div32_shiftright1_45_a <- t5508 U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 236: inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
# 237: inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(4,5))
# 238: inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf435 U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
# 239: inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
# 240: inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(5,5))
# 241: inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t1aa2 U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
# 242: inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
# 243: inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(6,5))
# 244: inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t878b U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
# 245: inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
# 246: inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(7,5))
# 247: inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t32ea U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
# 248: inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
# 249: inline_div32_shiftright1_45_tbe <- inline_div32_shiftright1_45_t3404 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(9,5))
# 250: inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tbe U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
# 251: inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
# 252: inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
# 253: inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(10,5))
# 254: inline_div32_shiftright1_45_tafc1 <- inline_div32_shiftright1_45_t3404 BitwiseOr Var(inline_div32_shiftright1_45_t9170) # Some('/lutcomp/programs/lib/div.j':(10,5))
# 255: inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tafc1 U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
# 256: inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
# 257: inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(11,5))
# 258: inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdc9f U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
# 259: inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
# 260: inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
# 261: inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(12,5))
# 262: inline_div32_shiftright1_45_tdbbe <- inline_div32_shiftright1_45_t3009 BitwiseOr Var(inline_div32_shiftright1_45_tdb4c) # Some('/lutcomp/programs/lib/div.j':(12,5))
# 263: inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdbbe U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
# 264: inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
# 265: inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(13,5))
# 266: inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t4954 U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
# 267: inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
# 268: inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
# 269: inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(14,5))
# 270: inline_div32_shiftright1_45_t837a <- inline_div32_shiftright1_45_t3b02 BitwiseOr Var(inline_div32_shiftright1_45_t17d0) # Some('/lutcomp/programs/lib/div.j':(14,5))
# 271: inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t837a U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
# 272: inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
# 273: inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(15,5))
# 274: inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t965c U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
# 275: inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
# 276: t3803 <- inline_div32_shiftright1_45_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
# 277: mid <- t9599 Add Var(t3803) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 278: tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 279: tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 280: te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 281: tb608 <- te825 U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 282: None <= call mul32_64(tfd7e,tace9,tb608,) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 283: te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 284: t3f2a <- te825 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 285: tb973 <- mem[t3f2a] U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 286: inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(78,5))
# 287: if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' # Some('/lutcomp/programs/lib/div.j':(78,5))
# 288: :div32_if_true_0_10 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 289: tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 290: hi <- tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 291: goto div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 292: :div32_if_end_9 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 293: te546 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 294: x <- mem[te546] U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 295: tad57 <- x U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 296: t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 297: if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_end_12' # Some('/lutcomp/programs/lib/div.j':(78,5))
# 298: :div32_if_true_0_13 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 299: tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 300: hi <- tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 301: goto div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 302: :div32_if_end_12 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 303: tad57 <- x U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 304: t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 305: if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_end_15' # Some('/lutcomp/programs/lib/div.j':(78,5))
# 306: :div32_if_true_0_16 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 307: tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 308: __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 309: return Some(tfd7e) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 310: :div32_if_end_15 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 311: t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 312: tad57 <- x U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 313: r <- t8792 Subtract Var(tad57) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 314: taee0 <- r U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 315: tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 316: if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_end_18' # Some('/lutcomp/programs/lib/div.j':(78,5))
# 317: :div32_if_true_0_19 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 318: tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 319: __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 320: return Some(tfd7e) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 321: :div32_if_end_18 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 322: tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 323: lo <- tfd7e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 324: goto div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 325: :div32_while_end_8 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 326: t1506 <- lo U32 # Some('/lutcomp/programs/lib/div.j':(108,5))
# 327: __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(108,5))
# 328: return Some(t1506) # Some('/lutcomp/programs/lib/div.j':(108,5))
# 329: :function_end_div32 # None
# 330: Unreachable # None

# IlFunctionId("io_read2")()
# 00: Unreachable # None
# 01: :function_end_io_read2 # None
# 02: Unreachable # None

# IlFunctionId("io_ready_to_read")()
# 00: Unreachable # None
# 01: :function_end_io_ready_to_read # None
# 02: Unreachable # None

# IlFunctionId("io_write0")(data,)
# 00: Unreachable # None
# 01: return None # None
# 02: :function_end_io_write0 # None
# 03: Unreachable # None

# IlFunctionId("io_write1")(data,)
# 00: Unreachable # None
# 01: return None # None
# 02: :function_end_io_write1 # None
# 03: Unreachable # None

# IlFunctionId("lcd_draw_char")(i,ch,)
# 00: inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(9,5))
# 01: inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(9,5))
# 02: inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(10,5))
# 03: inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 # Some('/lutcomp/programs/lib/lcd.j':(10,5))
# 04: inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(10,5))
# 05: inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) # Some('/lutcomp/programs/lib/lcd.j':(10,5))
# 06: inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 07: inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 08: inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 09: inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 10: inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 11: inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 12: inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 13: pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 14: t136d <- pos U8 # Some('/lutcomp/programs/lib/lcd.j':(17,5))
# 15: t1730 <- t136d ShiftRight Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
# 16: t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
# 17: None <= call io_write1(t2176,) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
# 18: t136d <- pos U8 # Some('/lutcomp/programs/lib/lcd.j':(18,5))
# 19: t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) # Some('/lutcomp/programs/lib/lcd.j':(18,5))
# 20: None <= call io_write1(t791e,) # Some('/lutcomp/programs/lib/lcd.j':(18,5))
# 21: t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(19,5))
# 22: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(19,5))
# 23: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(21,5))
# 24: t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
# 25: t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
# 26: None <= call io_write1(t3e8f,) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
# 27: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(22,5))
# 28: t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
# 29: tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
# 30: None <= call io_write1(tb5dc,) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
# 31: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(23,5))
# 32: return None # None
# 33: :function_end_lcd_draw_char # None
# 34: Unreachable # None

# IlFunctionId("lcd_init")()
# 00: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(69,5))
# 01: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(69,5))
# 02: mem[t0] <- ta97f U8 # Some('/lutcomp/programs/lib/lcd.j':(69,5))
# 03: i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(72,5))
# 04: :lcd_init_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 05: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 06: td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 07: if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 08: :lcd_init_while_body_1 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 09: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 10: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 11: t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 12: tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 13: mem[t9e70] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 14: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 15: i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 16: goto lcd_init_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 17: :lcd_init_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 18: t3d69 <- 0n3/0x03u8  # Some('/lutcomp/programs/lib/lcd.j':(78,5))
# 19: None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(78,5))
# 20: t385d <- 0n1/0x00000001u32  # Some('/lutcomp/programs/lib/lcd.j':(79,5))
# 21: None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(79,5))
# 22: None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(80,5))
# 23: None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(81,5))
# 24: None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(82,5))
# 25: None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(83,5))
# 26: t9f48 <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/lcd.j':(85,5))
# 27: None <= call io_write1(t9f48,) # Some('/lutcomp/programs/lib/lcd.j':(85,5))
# 28: t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(86,5))
# 29: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(86,5))
# 30: None <= call io_write1(t9f48,) # Some('/lutcomp/programs/lib/lcd.j':(88,5))
# 31: t477 <- 0n8/0x08u8  # Some('/lutcomp/programs/lib/lcd.j':(89,5))
# 32: None <= call io_write1(t477,) # Some('/lutcomp/programs/lib/lcd.j':(89,5))
# 33: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(90,5))
# 34: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(92,5))
# 35: None <= call io_write1(ta97f,) # Some('/lutcomp/programs/lib/lcd.j':(92,5))
# 36: tec13 <- 0n12/0x0cu8  # Some('/lutcomp/programs/lib/lcd.j':(93,5))
# 37: None <= call io_write1(tec13,) # Some('/lutcomp/programs/lib/lcd.j':(93,5))
# 38: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(94,5))
# 39: None <= call io_write1(ta97f,) # Some('/lutcomp/programs/lib/lcd.j':(96,5))
# 40: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/lcd.j':(97,5))
# 41: None <= call io_write1(ta11a,) # Some('/lutcomp/programs/lib/lcd.j':(97,5))
# 42: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(98,5))
# 43: return None # None
# 44: :function_end_lcd_init # None
# 45: Unreachable # None

# IlFunctionId("lcd_putc")(ch,)
# 00: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 01: t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 02: if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 03: :lcd_putc_if_true_0_1 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 04: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 05: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 06: t78f0 <- t5dda Divide Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 07: tf5a3 <- t78f0 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 08: next <- tf5a3 Multiply Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 09: :lcd_putc_while_predicate_3 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 10: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 11: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 12: ta5ff <- next U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 13: if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 14: :lcd_putc_while_body_4 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 15: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 16: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 17: tad4e U32 <- t5dda U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 18: t164d <- tad4e Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 19: tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 20: mem[t164d] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 21: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 22: tefac <- t5dda Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 23: mem[t0] <- tefac U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 24: goto lcd_putc_while_predicate_3 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 25: :lcd_putc_while_end_5 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 26: goto lcd_putc_if_end_0 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 27: :lcd_putc_if_else_0_2 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 28: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 29: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 30: tad4e U32 <- t5dda U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 31: t164d <- tad4e Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 32: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 33: mem[t164d] <- tdcd9 U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 34: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 35: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 36: None <= call lcd_draw_char(t5dda,tdcd9,) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 37: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 38: tefac <- t5dda Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 39: mem[t0] <- tefac U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 40: :lcd_putc_if_end_0 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 41: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 42: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 43: td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 44: if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 45: :lcd_putc_if_true_0_7 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 46: None <= call lcd_scroll_up() # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 47: :lcd_putc_if_end_6 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 48: return None # None
# 49: :function_end_lcd_putc # None
# 50: Unreachable # None

# IlFunctionId("lcd_scroll_up")()
# 00: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(27,5))
# 01: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(27,5))
# 02: t81b5 <- t5dda Subtract Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(27,5))
# 03: mem[t0] <- t81b5 U8 # Some('/lutcomp/programs/lib/lcd.j':(27,5))
# 04: i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(29,5))
# 05: :lcd_scroll_up_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 06: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 07: t9586 <- 0n60/0x3cu8  # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 08: if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 09: :lcd_scroll_up_while_body_1 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 10: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 11: tfd89 <- td0f3 Add Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 12: t760c U32 <- tfd89 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 13: t54b2 <- t760c Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 14: ch <- mem[t54b2] U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 15: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 16: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 17: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 18: t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 19: ta094 <- mem[t9e70] U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 20: if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 21: :lcd_scroll_up_if_true_0_4 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 22: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 23: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 24: t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 25: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 26: mem[t9e70] <- tdcd9 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 27: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 28: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 29: None <= call lcd_draw_char(td0f3,tdcd9,) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 30: :lcd_scroll_up_if_end_3 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 31: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 32: i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 33: goto lcd_scroll_up_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 34: :lcd_scroll_up_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 35: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 36: td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 37: if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 38: :lcd_scroll_up_while_body_7 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 39: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 40: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 41: t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 42: ta094 <- mem[t9e70] U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 43: tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 44: if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 45: :lcd_scroll_up_if_true_0_10 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 46: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 47: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 48: t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 49: tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 50: mem[t9e70] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 51: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 52: None <= call lcd_draw_char(td0f3,tdf3b,) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 53: :lcd_scroll_up_if_end_9 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 54: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 55: i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 56: goto lcd_scroll_up_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 57: :lcd_scroll_up_while_end_8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 58: return None # None
# 59: :function_end_lcd_scroll_up # None
# 60: Unreachable # None

# IlFunctionId("main")()
# 00: None <= call stdio_init() # Some('programs/app/rpn.j':(4,5))
# 01: inline_main_putc_25_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 02: None <= call io_write0(inline_main_putc_25_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 03: inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 04: inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 05: inline_main_putc_25_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 06: if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 07: :inline_main_putc_25_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 08: inline_main_putc_25_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 09: None <= call lcd_putc(inline_main_putc_25_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 10: :inline_main_putc_25_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 11: inline_main_putc_26_tac13 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 12: None <= call io_write0(inline_main_putc_26_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 13: inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 14: inline_main_putc_26_t76c7 <- mem[inline_main_putc_25_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 15: inline_main_putc_25_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 16: if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 17: :inline_main_putc_26_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 18: inline_main_putc_26_tac13 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 19: None <= call lcd_putc(inline_main_putc_26_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 20: :inline_main_putc_26_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 21: tca8 <- 0n987664/0x000f1210u32  # Some('programs/app/rpn.j':(12,5))
# 22: inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32  # Some('/lutcomp/programs/lib/Stack.j':(7,5))
# 23: inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/Stack.j':(7,5))
# 24: mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/Stack.j':(7,5))
# 25: inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32  # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# 26: mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# 27: inline_main_putc_27_tac13 <- 0n78/0x4eu8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 28: None <= call io_write0(inline_main_putc_27_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 29: inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 30: inline_main_putc_27_t76c7 <- mem[inline_main_putc_25_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 31: inline_main_putc_25_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 32: if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 33: :inline_main_putc_27_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 34: inline_main_putc_27_tac13 <- 0n78/0x4eu8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 35: None <= call lcd_putc(inline_main_putc_27_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 36: :inline_main_putc_27_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 37: inline_main_putc_28_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 38: None <= call io_write0(inline_main_putc_28_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 39: inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 40: inline_main_putc_28_t76c7 <- mem[inline_main_putc_25_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 41: inline_main_putc_25_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 42: if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 43: :inline_main_putc_28_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 44: inline_main_putc_28_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 45: None <= call lcd_putc(inline_main_putc_28_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 46: :inline_main_putc_28_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 47: Some(t2a99) <= call RpnCalc_run(tca8,) # Some('programs/app/rpn.j':(17,5))
# 48: return Some(t2a99) # Some('programs/app/rpn.j':(17,5))
# 49: :function_end_main # None
# 50: Unreachable # None

# IlFunctionId("mul32_64")(a,b,c,)
# 00: __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) # None
# 01: a_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(58,5))
# 02: t94df <- a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(59,5))
# 03: a_hi[0x01..0x02] <- t94df U8 # Some('/lutcomp/programs/lib/mul.j':(59,5))
# 04: t3b02 <- a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(60,5))
# 05: a_hi[0x00..0x01] <- t3b02 U8 # Some('/lutcomp/programs/lib/mul.j':(60,5))
# 06: b_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(62,5))
# 07: ta5f7 <- b[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(63,5))
# 08: b_hi[0x01..0x02] <- ta5f7 U8 # Some('/lutcomp/programs/lib/mul.j':(63,5))
# 09: t82cc <- b[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(64,5))
# 10: b_hi[0x00..0x01] <- t82cc U8 # Some('/lutcomp/programs/lib/mul.j':(64,5))
# 11: t8792 <- a U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
# 12: tace9 <- b U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
# 13: inline_mul32_64_mul16_32_8_a <- t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
# 14: inline_mul32_64_mul16_32_8_b <- tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
# 15: inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 16: inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 17: inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 18: inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 19: inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 20: inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 21: inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 22: inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 23: inline_mul32_64_mul16_32_8_t6ec2 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 24: inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 25: inline_mul32_64_mul16_32_8_t9922 <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 26: inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 27: inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 28: inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 29: inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
# 30: inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 31: inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 32: inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 33: inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 34: inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 35: inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 36: inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 37: inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 38: inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 39: inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 40: inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 41: inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 42: inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 43: inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 44: inline_mul32_64_mul16_32_8_t8575 <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 45: inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 46: inline_mul32_64_mul16_32_8_t34f7 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 47: inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 48: inline_mul32_64_mul16_32_8_t30b9 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 49: inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 50: inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
# 51: inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 52: inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 53: inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 54: t720d <- inline_mul32_64_mul16_32_8_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 55: mem[c] <- t720d U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
# 56: t1335 <- c Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/mul.j':(67,5))
# 57: t8fbd <- a_hi U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
# 58: t5cca <- b_hi U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
# 59: inline_mul32_64_mul16_32_9_a <- t8fbd U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
# 60: inline_mul32_64_mul16_32_9_b <- t5cca U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
# 61: inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 62: inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 63: inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 64: inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 65: inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 66: inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 67: inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 68: inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 69: inline_mul32_64_mul16_32_9_t6ec2 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 70: inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 71: inline_mul32_64_mul16_32_9_t9922 <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 72: inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 73: inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 74: inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
# 75: inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 76: inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 77: inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 78: inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 79: inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 80: inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 81: inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 82: inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 83: inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 84: inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 85: inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 86: inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 87: inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 88: inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 89: inline_mul32_64_mul16_32_9_t8575 <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 90: inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 91: inline_mul32_64_mul16_32_9_t34f7 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 92: inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 93: inline_mul32_64_mul16_32_9_t30b9 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 94: inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 95: inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
# 96: inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 97: inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 98: inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 99: t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 100: mem[t1335] <- t5a04 U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
# 101: temp_lo <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(71,5))
# 102: temp_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(72,5))
# 103: t8fbd <- a_hi U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
# 104: tace9 <- b U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
# 105: inline_mul32_64_mul16_32_10_a <- t8fbd U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
# 106: inline_mul32_64_mul16_32_10_b <- tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
# 107: inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 108: inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 109: inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 110: inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 111: inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 112: inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 113: inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 114: inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 115: inline_mul32_64_mul16_32_10_t6ec2 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 116: inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 117: inline_mul32_64_mul16_32_10_t9922 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 118: inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 119: inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 120: inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
# 121: inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 122: inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 123: inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 124: inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 125: inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 126: inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 127: inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 128: inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 129: inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 130: inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 131: inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 132: inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 133: inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 134: inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 135: inline_mul32_64_mul16_32_10_t8575 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 136: inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 137: inline_mul32_64_mul16_32_10_t34f7 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 138: inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 139: inline_mul32_64_mul16_32_10_t30b9 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 140: inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 141: inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
# 142: inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 143: inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 144: inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 145: temp <- inline_mul32_64_mul16_32_10_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 146: t9186 <- temp[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(75,5))
# 147: temp_lo[0x02..0x03] <- t9186 U8 # Some('/lutcomp/programs/lib/mul.j':(75,5))
# 148: t3d83 <- temp[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(76,5))
# 149: temp_lo[0x03..0x04] <- t3d83 U8 # Some('/lutcomp/programs/lib/mul.j':(76,5))
# 150: t3970 <- temp[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(77,5))
# 151: temp_hi[0x00..0x01] <- t3970 U8 # Some('/lutcomp/programs/lib/mul.j':(77,5))
# 152: t3b80 <- temp[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(78,5))
# 153: temp_hi[0x01..0x02] <- t3b80 U8 # Some('/lutcomp/programs/lib/mul.j':(78,5))
# 154: te546 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(80,5))
# 155: t3308 <- temp_lo U32 # Some('/lutcomp/programs/lib/mul.j':(80,5))
# 156: mem[te546] <- t3308 U32 # Some('/lutcomp/programs/lib/mul.j':(80,5))
# 157: te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(81,5))
# 158: t3f2a <- te825 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/mul.j':(81,5))
# 159: t41f5 <- temp_hi U32 # Some('/lutcomp/programs/lib/mul.j':(81,5))
# 160: mem[t3f2a] <- t41f5 U32 # Some('/lutcomp/programs/lib/mul.j':(81,5))
# 161: tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
# 162: te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
# 163: t4a94 <- te825 Add Number(0n0/0x00000000u32) # Some('/lutcomp/programs/lib/mul.j':(82,5))
# 164: tf4b2 <- t4a94 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
# 165: tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
# 166: inline_mul32_64_add_U64_0_a <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
# 167: inline_mul32_64_add_U64_0_b <- tf4b2 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
# 168: inline_mul32_64_add_U64_0_c <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
# 169: inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
# 170: inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
# 171: inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 172: inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 173: inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 174: inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 175: inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 176: inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 177: inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 178: mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 179: inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 180: inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 181: inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 182: inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_b] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 183: inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 184: mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 185: inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 186: inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 187: inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 188: if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_end_0' # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 189: :inline_mul32_64_add_U64_0_add_U64_if_true_0_1 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 190: inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 191: inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 192: inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 193: inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 194: inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 195: inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 196: mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 197: :inline_mul32_64_add_U64_0_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 198: t8792 <- a U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
# 199: t5cca <- b_hi U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
# 200: inline_mul32_64_mul16_32_11_a <- t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
# 201: inline_mul32_64_mul16_32_11_b <- t5cca U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
# 202: inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 203: inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 204: inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 205: inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 206: inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 207: inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 208: inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 209: inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 210: inline_mul32_64_mul16_32_11_t6ec2 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 211: inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 212: inline_mul32_64_mul16_32_11_t9922 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 213: inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 214: inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 215: inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 216: inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
# 217: inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 218: inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 219: inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 220: inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 221: inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 222: inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 223: inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 224: inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 225: inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 226: inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 227: inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 228: inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 229: inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 230: inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 231: inline_mul32_64_mul16_32_11_t8575 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 232: inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 233: inline_mul32_64_mul16_32_11_t34f7 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 234: inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 235: inline_mul32_64_mul16_32_11_t30b9 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 236: inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 237: inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
# 238: inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 239: inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 240: inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 241: temp <- inline_mul32_64_mul16_32_11_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 242: t9186 <- temp[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(85,5))
# 243: temp_lo[0x02..0x03] <- t9186 U8 # Some('/lutcomp/programs/lib/mul.j':(85,5))
# 244: t3d83 <- temp[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(86,5))
# 245: temp_lo[0x03..0x04] <- t3d83 U8 # Some('/lutcomp/programs/lib/mul.j':(86,5))
# 246: t3970 <- temp[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(87,5))
# 247: temp_hi[0x00..0x01] <- t3970 U8 # Some('/lutcomp/programs/lib/mul.j':(87,5))
# 248: t3b80 <- temp[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(88,5))
# 249: temp_hi[0x01..0x02] <- t3b80 U8 # Some('/lutcomp/programs/lib/mul.j':(88,5))
# 250: te546 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(90,5))
# 251: t3308 <- temp_lo U32 # Some('/lutcomp/programs/lib/mul.j':(90,5))
# 252: mem[te546] <- t3308 U32 # Some('/lutcomp/programs/lib/mul.j':(90,5))
# 253: te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(91,5))
# 254: t3f2a <- te825 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/mul.j':(91,5))
# 255: t41f5 <- temp_hi U32 # Some('/lutcomp/programs/lib/mul.j':(91,5))
# 256: mem[t3f2a] <- t41f5 U32 # Some('/lutcomp/programs/lib/mul.j':(91,5))
# 257: tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
# 258: te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
# 259: t4a94 <- te825 Add Number(0n0/0x00000000u32) # Some('/lutcomp/programs/lib/mul.j':(92,5))
# 260: tf4b2 <- t4a94 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
# 261: tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
# 262: inline_mul32_64_add_U64_1_a <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
# 263: inline_mul32_64_add_U64_1_b <- tf4b2 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
# 264: inline_mul32_64_add_U64_1_c <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
# 265: inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
# 266: inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
# 267: inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 268: inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 269: inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 270: inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 271: inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 272: inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 273: inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 274: mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 275: inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 276: inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 277: inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 278: inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_b] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 279: inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 280: mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 281: inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 282: inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 283: inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 284: if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_end_0' # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 285: :inline_mul32_64_add_U64_1_add_U64_if_true_0_1 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 286: inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 287: inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 288: inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 289: inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 290: inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 291: inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 292: mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 293: :inline_mul32_64_add_U64_1_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 294: __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # None
# 295: return None # None
# 296: :function_end_mul32_64 # None
# 297: Unreachable # None

# IlFunctionId("print_dec32")(a,)
# 00: t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 01: t9c15 <- 0n256/0x00000100u32  # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 02: if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_end_0' # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 03: :print_dec32_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 04: t3404 <- a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 05: None <= call print_dec8(t3404,) # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 06: return None # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 07: :print_dec32_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 08: t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
# 09: inline_print_dec32_div32_by10_47_a <- t8792 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
# 10: inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  # Some('/lutcomp/programs/lib/div.j':(130,5))
# 11: inline_print_dec32_div32_by10_47_t1c61 <- 0n987656/0x000f1208u32  # Some('/lutcomp/programs/lib/div.j':(130,5))
# 12: None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) # Some('/lutcomp/programs/lib/div.j':(130,5))
# 13: inline_print_dec32_div32_by10_47_tb7c3 <- 0n987660/0x000f120cu32  # Some('/lutcomp/programs/lib/div.j':(131,5))
# 14: inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tb7c3] U32 # Some('/lutcomp/programs/lib/div.j':(131,5))
# 15: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 # Some('/lutcomp/programs/lib/div.j':(131,5))
# 16: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(112,5))
# 17: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(112,5))
# 18: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 U8 # Some('/lutcomp/programs/lib/div.j':(112,5))
# 19: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(113,5))
# 20: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(113,5))
# 21: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c U8 # Some('/lutcomp/programs/lib/div.j':(113,5))
# 22: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(114,5))
# 23: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(114,5))
# 24: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 U8 # Some('/lutcomp/programs/lib/div.j':(114,5))
# 25: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(115,5))
# 26: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(115,5))
# 27: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e U8 # Some('/lutcomp/programs/lib/div.j':(115,5))
# 28: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(117,5))
# 29: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(117,5))
# 30: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d U8 # Some('/lutcomp/programs/lib/div.j':(117,5))
# 31: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(118,5))
# 32: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(118,5))
# 33: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) # Some('/lutcomp/programs/lib/div.j':(118,5))
# 34: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b) # Some('/lutcomp/programs/lib/div.j':(118,5))
# 35: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 U8 # Some('/lutcomp/programs/lib/div.j':(118,5))
# 36: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(119,5))
# 37: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(119,5))
# 38: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 U8 # Some('/lutcomp/programs/lib/div.j':(119,5))
# 39: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(120,5))
# 40: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(120,5))
# 41: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) # Some('/lutcomp/programs/lib/div.j':(120,5))
# 42: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7) # Some('/lutcomp/programs/lib/div.j':(120,5))
# 43: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 U8 # Some('/lutcomp/programs/lib/div.j':(120,5))
# 44: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(121,5))
# 45: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(121,5))
# 46: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 U8 # Some('/lutcomp/programs/lib/div.j':(121,5))
# 47: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(122,5))
# 48: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(122,5))
# 49: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) # Some('/lutcomp/programs/lib/div.j':(122,5))
# 50: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d) # Some('/lutcomp/programs/lib/div.j':(122,5))
# 51: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e U8 # Some('/lutcomp/programs/lib/div.j':(122,5))
# 52: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(123,5))
# 53: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(123,5))
# 54: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 U8 # Some('/lutcomp/programs/lib/div.j':(123,5))
# 55: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 # Some('/lutcomp/programs/lib/div.j':(124,5))
# 56: inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(124,5))
# 57: b <- inline_print_dec32_div32_by10_47_t45ae U32 # Some('/lutcomp/programs/lib/div.j':(131,5))
# 58: tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
# 59: None <= call print_dec32(tace9,) # Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
# 60: t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# 61: tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# 62: inline_print_dec32_mul32_by10_14_a <- tace9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# 63: inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
# 64: inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
# 65: inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) # Some('/lutcomp/programs/lib/mul.j':(49,5))
# 66: inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
# 67: inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
# 68: inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) # Some('/lutcomp/programs/lib/mul.j':(50,5))
# 69: inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
# 70: inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
# 71: inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) # Some('/lutcomp/programs/lib/mul.j':(51,5))
# 72: inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
# 73: inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
# 74: inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) # Some('/lutcomp/programs/lib/mul.j':(52,5))
# 75: t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
# 76: a <- t8792 Subtract Var(t86e2) # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# 77: t3404 <- a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# 78: t6f38 <- t3404 Add Number(0n48/0x30u8) # Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# 79: inline_print_dec32_putc_29_c <- t6f38 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# 80: inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 81: None <= call io_write0(inline_print_dec32_putc_29_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 82: inline_print_dec32_putc_29_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 83: inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 84: inline_print_dec32_putc_29_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 85: if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 86: :inline_print_dec32_putc_29_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 87: inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 88: None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 89: :inline_print_dec32_putc_29_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 90: return None # None
# 91: :function_end_print_dec32 # None
# 92: Unreachable # None

# IlFunctionId("print_dec8")(a,)
# 00: t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 01: t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 02: if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_end_0' # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 03: :print_dec8_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 04: t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 05: b <- t8792 Divide Number(0n10/0x0au8) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 06: tace9 <- b U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 07: None <= call print_dec8(tace9,) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 08: t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 09: tace9 <- b U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 10: tf5e0 <- tace9 Multiply Number(0n10/0x0au8) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 11: a <- t8792 Subtract Var(tf5e0) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 12: :print_dec8_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 13: t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# 14: t5673 <- t8792 Add Number(0n48/0x30u8) # Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# 15: inline_print_dec8_putc_30_c <- t5673 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# 16: inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 17: None <= call io_write0(inline_print_dec8_putc_30_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 18: inline_print_dec8_putc_30_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 19: inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 20: inline_print_dec8_putc_30_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 21: if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 22: :inline_print_dec8_putc_30_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 23: inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 24: None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 25: :inline_print_dec8_putc_30_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 26: return None # None
# 27: :function_end_print_dec8 # None
# 28: Unreachable # None

# IlFunctionId("stdio_init")()
# 00: t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(11,5))
# 01: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/stdio.j':(11,5))
# 02: mem[t0] <- ta11a U8 # Some('/lutcomp/programs/lib/stdio.j':(11,5))
# 03: t1 <- 0n987144/0x000f1008u32  # Some('/lutcomp/programs/lib/stdio.j':(12,5))
# 04: mem[t1] <- ta11a U8 # Some('/lutcomp/programs/lib/stdio.j':(12,5))
# 05: inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(8,5))
# 06: inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(8,5))
# 07: mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(8,5))
# 08: inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(9,5))
# 09: mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(9,5))
# 10: None <= call lcd_init() # Some('/lutcomp/programs/lib/stdio.j':(14,5))
# 11: None <= call KeyBoard_init() # Some('/lutcomp/programs/lib/stdio.j':(15,5))
# 12: return None # None
# 13: :function_end_stdio_init # None
# 14: Unreachable # None


# ImageBaseAddress=0x00080400
# entry
# 80400 Init []
#       Initialzing flags and internal regs.
00 

# 80401 LoadImm32 [Register(0x0c), Constant32(0x000f0f00=986880)]
#       Initialzing stack register to 0x000f0f00.
20 0c 00 0f 0f 00 

# 80407 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:main))
32 0c fc ff ff ff 

# 8040d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:main))
25 0c 17 04 08 00 

# 80413 JmpImm [Label24(:main)]
#       PseudoCall(Label24(:main))
70 f4 23 08 

# 80417 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:main))
32 0c 04 00 00 00 

# 8041d Halt [Constant32(0x00000000=0)]
#       Halting after return from entry function.
7e 00 00 00 00 

# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
20 
20 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
0a 
0a 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :KeyBoard_init
# Ret None
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([16]) Number(0n0/0x00u8)
# Var td45b (td45b Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }) Reg(U32) Some([20, 21, 22, 23]) Number(0n987136/0x000f1000u32)
# Var tdaa (tdaa Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }) Reg(U32) Some([20, 21, 22, 23]) Number(0n987140/0x000f1004u32)
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 80827 LoadImm32 [Register(0x14), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 14 00 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8082d LoadImm8 [Register(0x10), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 10 00 

# mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# 80830 Store8 [Register(0x10), Register(0x14)]
#       mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
06 10 14 

# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 80833 LoadImm32 [Register(0x14), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 14 04 10 0f 00 

# mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# 80839 Store8 [Register(0x10), Register(0x14)]
#       mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
06 10 14 

# return None None
# Return { value: None }
# 8083c JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_KeyBoard_init None
# function_end_KeyBoard_init
# Unreachable None
# 8083e Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :Keyboard_poll
# Ret None
# Var c (Local c Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var index (Local index Number(U32) Reg(U32)) Reg(U32) Some([28, 29, 30, 31])
# Var inline_Keyboard_poll_queue_push_37_n (Arg1 n Number(U8)) Reg(U8) Some([24])
# Var inline_Keyboard_poll_queue_push_37_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([32, 33, 34, 35]) Number(0n987392/0x000f1100u32)
# Var inline_Keyboard_poll_queue_push_37_t2187 (t2187 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_37_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([36])
# Var inline_Keyboard_poll_queue_push_37_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_Keyboard_poll_queue_push_37_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([44, 45, 46, 47]) Number(0n987652/0x000f1204u32)
# Var inline_Keyboard_poll_queue_push_37_tf3c4 (tf3c4 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))) Reg(U8) Some([24])
# Var t23a (t23a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }) Reg(U32) Some([48, 49, 50, 51])
# Var t2ca9 (t2ca9 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))) Reg(U8) Some([24])
# Var t379c (t379c LocalFieldDeref("keyboard", "shift_held")) Reg(U8) Some([24])
# Var t4c8b (t4c8b Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([48, 49, 50, 51])
# Var t528d (t528d Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }) Reg(U32) Some([48, 49, 50, 51])
# Var t5e63 (t5e63 Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) Reg(U32) Some([28, 29, 30, 31])
# Var t5ea1 (t5ea1 Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))) Reg(U8) Some([24])
# Var t674 (t674 Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) Reg(U32) Some([32, 33, 34, 35])
# Var t6cd9 (t6cd9 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }) Reg(U32) Some([48, 49, 50, 51])
# Var t7b09 (t7b09 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))) Reg(U8) Some([24])
# Var t7ebd (t7ebd LocalFieldDeref("keyboard", "release_in_progress")) Reg(U8) Some([52])
# Var t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([24])
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([24]) Number(0n1/0x01u8)
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([36]) Number(0n0/0x00u8)
# Var tac13 (tac13 Ident("c")) Reg(U8) Some([24])
# Var tb62e (tb62e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([48, 49, 50, 51])
# Var td18e (td18e Ident("index")) Reg(U32) Some([28, 29, 30, 31])
# Var td45b (td45b Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }) Reg(U32) Some([32, 33, 34, 35]) Number(0n987136/0x000f1000u32)
# Var tdaa (tdaa Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }) Reg(U32) Some([32, 33, 34, 35]) Number(0n987140/0x000f1004u32)
# Var te5cf (te5cf Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) Reg(U32) Some([32, 33, 34, 35])
# Var ted94 (ted94 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }) Reg(U32) Some([48, 49, 50, 51])
# Var tf68c (tf68c Ident("code")) Reg(U8) Some([24])
# Some(t861f) <= call io_ready_to_read() Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 80843 IoReadyToRead [Register(0x18)]
#       ReadyToRead
79 18 

# t5ea1 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))
# 80845 AndImm8 [Register(0x18), Constant8(0x04=4)]
#       t5ea1 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
#       Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))
18 18 04 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80848 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_end_0' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# 8084b Cmp8 [Register(0x18), Register(0x24)]
#       if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_end_0' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
15 18 24 

# 8084e JzImm [Label24(Keyboard_poll_if_true_0_1)]
#       if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_end_0' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
72 56 08 08 

# 80852 JmpImm [Label24(Keyboard_poll_if_end_0)]
#       if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_end_0' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
70 58 08 08 

# :Keyboard_poll_if_true_0_1 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Keyboard_poll_if_true_0_1
# return None Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Return { value: None }
# 80856 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_end_0
# Some(code) <= call io_read2() Some('/lutcomp/programs/lib/Keyboard.j':(20,5))
# Assign { target: Ident("code"), var_type: Some(Number(U8)), value: Call(Call { function: "io_read2", parameters: [] }) }
# Call(Call { function: "io_read2", parameters: [] })
# 80858 In2 [Register(0x18)]
#       IoRead2
62 18 

# tf68c <- code U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
# Ident("code")
# optimized away noop copy Instruction { source: "tf68c <- code U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))\nAssign { target: Ident(\"index\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident(\"code\")) }\nArithmetic(Multiply, Number(0n4/0x00000004u32), Ident(\"code\"))\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"code\") }\nIdent(\"code\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
# 8085a LoadImm32 [Register(0x30), Constant32(0x00000000=0)]
#       Zero-pad for t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
20 30 00 00 00 00 

# 80860 Copy8 [Register(0x18), Register(0x30)]
#       t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
0b 18 30 

# index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# 80863 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
20 00 04 00 00 00 

# 80869 Mul8_16 [Register(0x30), Register(0x00), Register(0x1c)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
11 30 00 1c 

# 8086d LoadImm8 [Register(0x1e), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
04 1e 00 

# 80870 LoadImm8 [Register(0x1f), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
04 1f 00 

# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "shift_held")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 80873 LoadImm32 [Register(0x20), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "shift_held")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 20 00 10 0f 00 

# t379c <- mem[td45b] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "shift_held")
# 80879 Load8 [Register(0x20), Register(0x18)]
#       t379c <- mem[td45b] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "shift_held")
05 20 18 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8087c LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# 8087f Cmp8 [Register(0x18), Register(0x24)]
#       if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
15 18 24 

# 80882 JzImm [Label24(Keyboard_poll_if_else_0_5)]
#       if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
72 a2 08 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_4)], resolved: None }
# :Keyboard_poll_if_true_0_4 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Keyboard_poll_if_true_0_4
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 80886 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 04 08 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
# 8088c Copy32 [Register(0x1c), Register(0x20)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
21 1c 20 

# 8088f AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000001=1)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
32 20 01 00 00 00 

# t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# 80895 ClearCarry []
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
03 

# 80896 AddCarry32_1 [Register(0x30), Register(0x20), Register(0x30)]
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
30 30 20 30 

# 8089a AddCarry32_2 []
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
31 

# c <- mem[t23a] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# 8089b Load8 [Register(0x30), Register(0x18)]
#       c <- mem[t23a] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
05 30 18 

# goto Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 8089e JmpImm [Label24(Keyboard_poll_if_end_3)]
#       goto Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
70 b1 08 08 

# :Keyboard_poll_if_else_0_5 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_else_0_5
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 808a2 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 04 08 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# 808a8 ClearCarry []
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
03 

# 808a9 AddCarry32_1 [Register(0x30), Register(0x1c), Register(0x30)]
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
30 30 1c 30 

# 808ad AddCarry32_2 []
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
31 

# c <- mem[tb62e] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# 808ae Load8 [Register(0x30), Register(0x18)]
#       c <- mem[tb62e] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
05 30 18 

# :Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_end_3
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 808b1 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 808b7 Load8 [Register(0x20), Register(0x34)]
#       t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 20 34 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 808ba LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_end_6' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# 808bd Cmp8 [Register(0x34), Register(0x24)]
#       if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_end_6' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
15 34 24 

# 808c0 JzImm [Label24(Keyboard_poll_if_true_0_7)]
#       if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_end_6' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
72 c8 08 08 

# 808c4 JmpImm [Label24(Keyboard_poll_if_end_6)]
#       if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_end_6' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
70 f6 08 08 

# :Keyboard_poll_if_true_0_7 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Keyboard_poll_if_true_0_7
# tac13 <- c U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32 `.
# 808c8 LoadImm32 [Register(0x20), Constant32(0x000f1100=987392)]
#       inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32 `.
20 20 00 11 0f 00 

# inline_Keyboard_poll_queue_push_37_n <- tac13 U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_n <- tac13 U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# 808ce LoadImm32 [Register(0x2c), Constant32(0x000f1204=987652)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
20 2c 04 12 0f 00 

# inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 808d4 Load8 [Register(0x2c), Register(0x24)]
#       inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 2c 24 

# inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# 808d7 LoadImm32 [Register(0x28), Constant32(0x00000000=0)]
#       Zero-pad for inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
20 28 00 00 00 00 

# 808dd Copy8 [Register(0x24), Register(0x28)]
#       inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
0b 24 28 

# inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# 808e0 ClearCarry []
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
03 

# 808e1 AddCarry32_1 [Register(0x20), Register(0x28), Register(0x20)]
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
30 20 28 20 

# 808e5 AddCarry32_2 []
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
31 

# mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 808e6 Store8 [Register(0x18), Register(0x20)]
#       mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 18 20 

# inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# 808e9 Load8 [Register(0x2c), Register(0x24)]
#       inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
05 2c 24 

# inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# 808ec LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
04 00 01 

# 808ef Add8NoCarryIn [Register(0x24), Register(0x00), Register(0x18)]
#       inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
14 24 00 18 

# mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# 808f3 Store8 [Register(0x18), Register(0x2c)]
#       mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
06 18 2c 

# :Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# Keyboard_poll_if_end_6
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Number(0n0/0x00u8)
# 808f6 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Number(0n0/0x00u8)
04 24 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 808f9 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 04 08 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
# 808ff Copy32 [Register(0x1c), Register(0x20)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
21 1c 20 

# 80902 AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000002=2)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
32 20 02 00 00 00 

# ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# 80908 ClearCarry []
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
03 

# 80909 AddCarry32_1 [Register(0x30), Register(0x20), Register(0x30)]
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
30 30 20 30 

# 8090d AddCarry32_2 []
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
31 

# t2ca9 <- mem[ted94] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# 8090e Load8 [Register(0x30), Register(0x18)]
#       t2ca9 <- mem[ted94] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
05 30 18 

# if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_end_9' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# 80911 Cmp8 [Register(0x24), Register(0x18)]
#       if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_end_9' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
15 24 18 

# 80914 JzImm [Label24(Keyboard_poll_if_end_9)]
#       if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_end_9' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
72 47 09 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_end_9' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_10)], resolved: None }
# :Keyboard_poll_if_true_0_10 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Keyboard_poll_if_true_0_10
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 80918 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 8091e Load8 [Register(0x20), Register(0x34)]
#       t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 20 34 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80921 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# 80924 Cmp8 [Register(0x34), Register(0x24)]
#       if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
15 34 24 

# 80927 JzImm [Label24(Keyboard_poll_if_else_0_14)]
#       if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
72 3b 09 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_13)], resolved: None }
# :Keyboard_poll_if_true_0_13 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Keyboard_poll_if_true_0_13
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 8092b LoadImm32 [Register(0x20), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 20 00 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80931 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# 80934 Store8 [Register(0x24), Register(0x20)]
#       mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
06 24 20 

# goto Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 80937 JmpImm [Label24(Keyboard_poll_if_end_9)]
#       goto Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
70 47 09 08 

# :Keyboard_poll_if_else_0_14 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_14
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 8093b LoadImm32 [Register(0x20), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 20 00 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 80941 LoadImm8 [Register(0x18), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 18 01 

# mem[td45b] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# 80944 Store8 [Register(0x18), Register(0x20)]
#       mem[td45b] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
06 18 20 

# :Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_9
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Number(0n0/0x00u8)
# 80947 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Number(0n0/0x00u8)
04 24 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 8094a LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 04 08 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
# 80950 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x00000003=3)]
#       t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
32 1c 03 00 00 00 

# t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# 80956 ClearCarry []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
03 

# 80957 AddCarry32_1 [Register(0x30), Register(0x1c), Register(0x30)]
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
30 30 1c 30 

# 8095b AddCarry32_2 []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
31 

# t7b09 <- mem[t6cd9] U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# 8095c Load8 [Register(0x30), Register(0x18)]
#       t7b09 <- mem[t6cd9] U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
05 30 18 

# if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# 8095f Cmp8 [Register(0x24), Register(0x18)]
#       if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
15 24 18 

# 80962 JzImm [Label24(Keyboard_poll_if_else_0_17)]
#       if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
72 76 09 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_16)], resolved: None }
# :Keyboard_poll_if_true_0_16 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Keyboard_poll_if_true_0_16
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 80966 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 8096c LoadImm8 [Register(0x18), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 18 01 

# mem[tdaa] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# 8096f Store8 [Register(0x18), Register(0x20)]
#       mem[tdaa] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
06 18 20 

# goto Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 80972 JmpImm [Label24(Keyboard_poll_if_end_15)]
#       goto Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
70 82 09 08 

# :Keyboard_poll_if_else_0_17 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_else_0_17
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 80976 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8097c LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# 8097f Store8 [Register(0x24), Register(0x20)]
#       mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
06 24 20 

# :Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_end_15
# return None None
# Return { value: None }
# 80982 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_Keyboard_poll None
# function_end_Keyboard_poll
# Unreachable None
# 80984 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :RpnCalc_handle
# Ret Some(U8)
# Arg0=c
# Arg1=ch
# Var a (Local a Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var b (Local b Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([64, 65, 66, 67])
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([68])
# Var diff (Local diff Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_RpnCalc_init_50_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([72, 73, 74, 75]) Number(0n0/0x00000000u32)
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_50_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([88])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([89]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_a_hi (Local a_hi Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_b (Arg1 b Number(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_b_hi (Local b_hi Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a (Arg0 a Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b (Arg1 b Number(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 (t3585 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 (t45f5 Ident("d")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([89])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([89])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 (tac13 Ident("c")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 (tace9 Ident("b")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([88])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a (Arg0 a Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b (Arg1 b Number(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 (t3585 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 (t45f5 Ident("d")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 (tac13 Ident("c")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 (tace9 Ident("b")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([108, 109, 110, 111])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b (Arg1 b Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 (t3585 Ident("e")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 (t45f5 Ident("d")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([88])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([88])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 (tac13 Ident("c")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t45f5 (t45f5 Ident("d")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_t5cca (t5cca Ident("b_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t6afc (t6afc Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_t82cc (t82cc Index("b", Number(0n2/0x02u8))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_ta5f7 (ta5f7 Index("b", Number(0n3/0x03u8))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_tac13 (tac13 Ident("c")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_tace9 (tace9 Ident("b")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_tbe0a (tbe0a Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_b (Local b Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_putc_15_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_15_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_15_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n69/0x45u8)
# Var inline_RpnCalc_handle_putc_16_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_16_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n82/0x52u8)
# Var inline_RpnCalc_handle_putc_17_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_18_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_18_tac13 (tac13 Ident("c")) Reg(U8) Some([96]) Number(0n10/0x0au8)
# Var inline_RpnCalc_handle_putc_19_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_20_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_putc_21_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_22_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_23_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_putc_23_tac13 (tac13 Ident("c")) Reg(U8) Some([96]) Number(0n58/0x3au8)
# Var inline_RpnCalc_handle_putc_24_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_stack_get_48_n (Arg1 n Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_get_48_t2db0 (t2db0 Index("values", Ident("n"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_t5abb (t5abb Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_td38d (td38d Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_52_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_52_t1533 (t1533 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_52_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_52_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_t1533 (t1533 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_53_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_54_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_54_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_55_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_56_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_56_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_56_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_57_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_57_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_57_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_58_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_58_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_58_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_58_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_58_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_58_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_58_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_58_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_59_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_59_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_59_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_59_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var product (Local product Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var quotient (Local quotient Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var stack_count (Local stack_count Number(U8) Reg(U8)) Reg(U8) Some([112])
# Var stack_count_usize (Local stack_count_usize Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var stack_needed (Local stack_needed Number(U8) Reg(U8)) Reg(U8) Some([104])
# Var sum (Local sum Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var t13c5 (t13c5 Number(0n47/0x2fu8)) Reg(U8) Some([88]) Number(0n47/0x2fu8)
# Var t17ee (t17ee Ident("diff")) Reg(U32) Some([56, 57, 58, 59])
# Var t1ba9 (t1ba9 Ident("quotient")) Reg(U32) Some([56, 57, 58, 59])
# Var t2754 (t2754 Ident("product")) Reg(U32) Some([56, 57, 58, 59])
# Var t4376 (t4376 Cast { old_type: None, new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([60, 61, 62, 63])
# Var t4671 (t4671 Ident("stack_needed")) Reg(U8) Some([88])
# Var t47ec (t47ec Number(0n99/0x63u8)) Reg(U8) Some([69]) Number(0n99/0x63u8)
# Var t6001 (t6001 Ident("stack_count")) Reg(U8) Some([113])
# Var t622 (t622 Number(0n42/0x2au8)) Reg(U8) Some([88]) Number(0n42/0x2au8)
# Var t670d (t670d Ident("sum")) Reg(U32) Some([56, 57, 58, 59])
# Var t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var t8f63 (t8f63 Number(0n45/0x2du8)) Reg(U8) Some([88]) Number(0n45/0x2du8)
# Var t9dae (t9dae Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))) Reg(U8) Some([69])
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([113]) Number(0n1/0x01u8)
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([64, 65, 66, 67])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([92, 93, 94, 95])
# Var tadd (tadd Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })) Reg(U32) Some([56, 57, 58, 59])
# Var tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var tb336 (tb336 Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })) Reg(U32) Some([60, 61, 62, 63])
# Var tbdb5 (tbdb5 Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })) Reg(U32) Some([56, 57, 58, 59])
# Var tbf93 (tbf93 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var tc333 (tc333 Number(0n43/0x2bu8)) Reg(U8) Some([88]) Number(0n43/0x2bu8)
# Var tcc42 (tcc42 Number(0n100/0x64u8)) Reg(U8) Some([69]) Number(0n100/0x64u8)
# Var tcdcd (tcdcd Number(0n115/0x73u8)) Reg(U8) Some([88]) Number(0n115/0x73u8)
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([69])
# Var td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var tdc11 (tdc11 Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) Reg(U32) Some([56, 57, 58, 59])
# Var tdcb0 (tdcb0 Number(0n48/0x30u8)) Reg(U8) Some([69]) Number(0n48/0x30u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([68])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([69]) Number(0n32/0x20u8)
# Var tdf6e (tdf6e Number(0n113/0x71u8)) Reg(U8) Some([69]) Number(0n113/0x71u8)
# Var teed8 (teed8 Number(0n57/0x39u8)) Reg(U8) Some([69]) Number(0n57/0x39u8)
# Var tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([56, 57, 58, 59])
# Var tfe08 (tfe08 Ident("stack")) Reg(U32) Some([64, 65, 66, 67])
# 80989 Copy32 [Register(0x00), Register(0x40)]
#       Save function parameter 'c' registers [0, 1, 2, 3] to locals [64, 65, 66, 67].
21 00 40 

# 8098c Copy8 [Register(0x04), Register(0x44)]
#       Save function parameter 'ch' registers [4] to locals [68].
0b 04 44 

# a <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
# Assign { target: Ident("a"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8098f LoadImm8 [Register(0x38), Constant8(0x00=0)]
#       a <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
#       Assign { target: Ident("a"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 38 00 

# b <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80992 LoadImm8 [Register(0x3c), Constant8(0x00=0)]
#       b <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 3c 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Number(0n43/0x2bu8)
# 80995 LoadImm8 [Register(0x58), Constant8(0x2b=43)]
#       tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
#       Number(0n43/0x2bu8)
04 58 2b 

# if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# 80998 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
15 44 58 

# 8099b JzImm [Label24(RpnCalc_handle_if_true_0_1)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
72 a3 09 08 

# 8099f JmpImm [Label24(RpnCalc_handle_if_else_0_2)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
70 aa 09 08 

# :RpnCalc_handle_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# RpnCalc_handle_if_true_0_1
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 809a3 LoadImm8 [Register(0x68), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 68 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 809a6 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 01 0a 08 

# :RpnCalc_handle_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_0_2
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Number(0n45/0x2du8)
# 809aa LoadImm8 [Register(0x58), Constant8(0x2d=45)]
#       t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
#       Number(0n45/0x2du8)
04 58 2d 

# if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# 809ad Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
15 44 58 

# 809b0 JzImm [Label24(RpnCalc_handle_if_true_1_3)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
72 b8 09 08 

# 809b4 JmpImm [Label24(RpnCalc_handle_if_else_1_4)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
70 bf 09 08 

# :RpnCalc_handle_if_true_1_3 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_1_3
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 809b8 LoadImm8 [Register(0x68), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 68 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 809bb JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 01 0a 08 

# :RpnCalc_handle_if_else_1_4 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_1_4
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Number(0n42/0x2au8)
# 809bf LoadImm8 [Register(0x58), Constant8(0x2a=42)]
#       t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
#       Number(0n42/0x2au8)
04 58 2a 

# if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# 809c2 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
15 44 58 

# 809c5 JzImm [Label24(RpnCalc_handle_if_true_2_5)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
72 cd 09 08 

# 809c9 JmpImm [Label24(RpnCalc_handle_if_else_2_6)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
70 d4 09 08 

# :RpnCalc_handle_if_true_2_5 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_2_5
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 809cd LoadImm8 [Register(0x68), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 68 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 809d0 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 01 0a 08 

# :RpnCalc_handle_if_else_2_6 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_2_6
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Number(0n47/0x2fu8)
# 809d4 LoadImm8 [Register(0x58), Constant8(0x2f=47)]
#       t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
#       Number(0n47/0x2fu8)
04 58 2f 

# if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# 809d7 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
15 44 58 

# 809da JzImm [Label24(RpnCalc_handle_if_true_3_7)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
72 e2 09 08 

# 809de JmpImm [Label24(RpnCalc_handle_if_else_3_8)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
70 e9 09 08 

# :RpnCalc_handle_if_true_3_7 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_3_7
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 809e2 LoadImm8 [Register(0x68), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 68 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 809e5 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 01 0a 08 

# :RpnCalc_handle_if_else_3_8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_3_8
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Number(0n115/0x73u8)
# 809e9 LoadImm8 [Register(0x58), Constant8(0x73=115)]
#       tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
#       Number(0n115/0x73u8)
04 58 73 

# if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# 809ec Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
15 44 58 

# 809ef JzImm [Label24(RpnCalc_handle_if_true_4_9)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
72 f7 09 08 

# 809f3 JmpImm [Label24(RpnCalc_handle_if_else_4_10)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
70 fe 09 08 

# :RpnCalc_handle_if_true_4_9 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_4_9
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 809f7 LoadImm8 [Register(0x68), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 68 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 809fa JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 01 0a 08 

# :RpnCalc_handle_if_else_4_10 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_4_10
# stack_needed <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 809fe LoadImm8 [Register(0x68), Constant8(0x00=0)]
#       stack_needed <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 68 00 

# :RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_end_0
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Ident("stack_needed")
# 80a01 Copy8 [Register(0x68), Register(0x58)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Ident("stack_needed")
0b 68 58 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #40, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 80a04 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #40, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #41, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11'
# 80a07 Cmp8 [Register(0x58), Register(0x59)]
#       if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #41, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11'
15 58 59 

# 80a0a JcImm [Label24(RpnCalc_handle_if_end_11)]
#       if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #41, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11'
71 ac 0a 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #41, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11'\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_12)], resolved: None }
# :RpnCalc_handle_if_true_0_12 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_12
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 80a0e Copy32 [Register(0x40), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 4c 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 80a11 Copy32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 4c 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 80a14 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 48 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# 80a1a Load8 [Register(0x48), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
05 48 58 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80a1d LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 59 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'RpnCalc_handle_if_end_11' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# 80a20 Cmp8 [Register(0x58), Register(0x59)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'RpnCalc_handle_if_end_11' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
15 58 59 

# 80a23 JzImm [Label24(RpnCalc_handle_if_end_11)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'RpnCalc_handle_if_end_11' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
72 ac 0a 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'RpnCalc_handle_if_end_11' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 80a27 Copy32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 4c 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 80a2a Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 48 50 

# 80a2d AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 50 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 80a33 Load32 [Register(0x50), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 50 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 80a36 Copy32 [Register(0x4c), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 4c 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80a39 Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 50 54 

# 80a3c AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 54 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 80a42 Load32 [Register(0x54), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 54 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 80a45 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 80a4b Mul8_16 [Register(0x50), Register(0x00), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 50 00 50 

# 80a4f LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 52 00 

# 80a52 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 53 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 80a55 ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 80a56 AddCarry32_1 [Register(0x4c), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 4c 50 50 

# 80a5a AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 80a5b Store32_1 [Register(0x48), Register(0x50)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 48 50 

# 80a5e Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 80a5f Copy32 [Register(0x4c), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 4c 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80a62 Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 50 54 

# 80a65 AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 54 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 80a6b Copy32 [Register(0x4c), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 4c 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80a6e Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 50 54 

# 80a71 AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 54 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 80a77 Load32 [Register(0x54), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 54 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 80a7a Copy32 [Register(0x50), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 50 48 

# 80a7d AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 48 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 80a83 Store32_1 [Register(0x48), Register(0x54)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 48 54 

# 80a86 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 80a87 Copy32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 4c 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 80a8a Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 48 50 

# 80a8d AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 50 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# # In IlFunctionId("RpnCalc_handle"), at #71, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# 80a93 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
#       # In IlFunctionId("RpnCalc_handle"), at #71, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
20 48 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# # In IlFunctionId("RpnCalc_handle"), at #72, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# 80a99 Store32_1 [Register(0x48), Register(0x50)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #72, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
23 48 50 

# 80a9c Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #72, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 80a9d Copy32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 4c 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 80aa0 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 48 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80aa6 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 59 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# 80aa9 Store8 [Register(0x59), Register(0x48)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
06 59 48 

# :RpnCalc_handle_if_end_11 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# RpnCalc_handle_if_end_11
# tbf93 <- c Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32))
# 80aac Copy32 [Register(0x40), Register(0x48)]
#       tbf93 <- c Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32))
21 40 48 

# 80aaf AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000040=64)]
#       tbf93 <- c Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32))
32 48 40 00 00 00 

# stack_count_usize <- mem[tbf93] U32 Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# 80ab5 Load32 [Register(0x48), Register(0x48)]
#       stack_count_usize <- mem[tbf93] U32 Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
22 48 48 

# stack_count <- stack_count_usize[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
# Assign { target: Ident("stack_count"), var_type: Some(Number(U8)), value: Index("stack_count_usize", Number(0n0/0x00u8)) }
# Index("stack_count_usize", Number(0n0/0x00u8))
# 80ab8 Copy8 [Register(0x48), Register(0x70)]
#       stack_count <- stack_count_usize[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
#       Assign { target: Ident("stack_count"), var_type: Some(Number(U8)), value: Index("stack_count_usize", Number(0n0/0x00u8)) }
#       Index("stack_count_usize", Number(0n0/0x00u8))
0b 48 70 

# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# Ident("stack_needed")
# 80abb Copy8 [Register(0x68), Register(0x58)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
#       Ident("stack_needed")
0b 68 58 

# t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# Ident("stack_count")
# 80abe Copy8 [Register(0x70), Register(0x71)]
#       t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
#       Ident("stack_count")
0b 70 71 

# if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_end_14' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# 80ac1 Cmp8 [Register(0x58), Register(0x71)]
#       if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_end_14' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
15 58 71 

# 80ac4 JcImm [Label24(RpnCalc_handle_if_end_14)]
#       if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_end_14' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
71 a0 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_end_14' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_15)], resolved: None }
# :RpnCalc_handle_if_true_0_15 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# RpnCalc_handle_if_true_0_15
# inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# 80ac8 LoadImm8 [Register(0x45), Constant8(0x45=69)]
#       inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
04 45 45 

# None <= call io_write0(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80acb Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 80acd LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 80ad3 Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #89, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_15_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 80ad6 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #89, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_15_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #90, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' -> if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0'
# 80ad9 Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #90, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' -> if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0'
15 45 59 

# 80adc JzImm [Label24(inline_RpnCalc_handle_putc_15_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #90, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' -> if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0'
72 fc 0a 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #90, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' -> if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_15_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_15_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_15_putc_if_true_0_1
# inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# 80ae0 LoadImm8 [Register(0x45), Constant8(0x45=69)]
#       inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
04 45 45 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80ae3 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_15_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: []
# 80ae6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80aec StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c f6 0a 08 00 

# 80af2 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 13 22 08 

# 80af6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_15_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_15_putc_if_end_0
# inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# 80afc LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
04 45 52 

# None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80aff Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #97, replacing reference to inline_RpnCalc_handle_putc_16_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_16_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 80b01 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #97, replacing reference to inline_RpnCalc_handle_putc_16_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_16_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #98, replacing reference to inline_RpnCalc_handle_putc_16_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 -> inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 80b07 Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #98, replacing reference to inline_RpnCalc_handle_putc_16_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 -> inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #99, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_16_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 80b0a LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #99, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_16_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #100, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' -> if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0'
# 80b0d Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #100, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' -> if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0'
15 45 59 

# 80b10 JzImm [Label24(inline_RpnCalc_handle_putc_16_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #100, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' -> if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0'
72 30 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #100, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' -> if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_16_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_16_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_16_putc_if_true_0_1
# inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# 80b14 LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
04 45 52 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80b17 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_16_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: []
# 80b1a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80b20 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 2a 0b 08 00 

# 80b26 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 13 22 08 

# 80b2a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_16_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_16_putc_if_end_0
# inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# # In IlFunctionId("RpnCalc_handle"), at #105, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  -> inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 
# 80b30 LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #105, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  -> inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 
04 45 52 

# None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #106, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). None <= call io_write0(inline_RpnCalc_handle_putc_17_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,)
# 80b33 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #107, replacing reference to inline_RpnCalc_handle_putc_17_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_17_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 80b35 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #107, replacing reference to inline_RpnCalc_handle_putc_17_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_17_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #108, replacing reference to inline_RpnCalc_handle_putc_17_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 -> inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 80b3b Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #108, replacing reference to inline_RpnCalc_handle_putc_17_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 -> inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #109, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_17_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 80b3e LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #109, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_17_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #110, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' -> if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0'
# 80b41 Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #110, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' -> if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0'
15 45 59 

# 80b44 JzImm [Label24(inline_RpnCalc_handle_putc_17_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #110, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' -> if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0'
72 64 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #110, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' -> if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_17_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_17_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_17_putc_if_true_0_1
# inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# # In IlFunctionId("RpnCalc_handle"), at #112, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  -> inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 
# 80b48 LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #112, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  -> inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 
04 45 52 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #113, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)
# 80b4b Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_16_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       # In IlFunctionId("RpnCalc_handle"), at #113, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: []
# 80b4e AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80b54 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 5e 0b 08 00 

# 80b5a JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 13 22 08 

# 80b5e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_17_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_17_putc_if_end_0
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #115, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 80b64 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #115, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80b67 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #118, replacing reference to inline_RpnCalc_handle_putc_18_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_18_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 80b69 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #118, replacing reference to inline_RpnCalc_handle_putc_18_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_18_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #119, replacing reference to inline_RpnCalc_handle_putc_18_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 -> inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 80b6f Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #119, replacing reference to inline_RpnCalc_handle_putc_18_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 -> inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #120, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_18_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 80b72 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #120, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_18_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #121, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' -> if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0'
# 80b75 Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #121, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' -> if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0'
15 45 59 

# 80b78 JzImm [Label24(inline_RpnCalc_handle_putc_18_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #121, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' -> if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0'
72 98 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #121, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' -> if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_18_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_18_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_18_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# 80b7c LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80b7f Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: []
# 80b82 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80b88 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 92 0b 08 00 

# 80b8e JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 13 22 08 

# 80b92 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_18_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_18_putc_if_end_0
# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# Number(0n1/0x01u8)
# 80b98 LoadImm8 [Register(0x71), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
#       Number(0n1/0x01u8)
04 71 01 

# return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# 80b9b Copy8 [Register(0x71), Register(0x00)]
#       return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
0b 71 00 

# 80b9e JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :RpnCalc_handle_if_end_14 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# RpnCalc_handle_if_end_14
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Ident("stack_needed")
# 80ba0 Copy8 [Register(0x68), Register(0x58)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Ident("stack_needed")
0b 68 58 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #130, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 80ba3 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #130, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #131, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17'
# 80ba6 Cmp8 [Register(0x58), Register(0x59)]
#       if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #131, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17'
15 58 59 

# 80ba9 JcImm [Label24(RpnCalc_handle_if_end_17)]
#       if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #131, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17'
71 f4 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #131, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17'\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_18)], resolved: None }
# :RpnCalc_handle_if_true_0_18 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_18
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }\nCall(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# 80bad Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
21 40 38 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80bb0 Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 4c 

# 80bb3 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80bb9 Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 4c 

# 80bbc AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 80bc2 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_52_t1533 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 80bc5 AddImm32IgnoreCarry [Register(0x48), Constant32(0xffffffff=4294967295)]
#       inline_RpnCalc_handle_stack_pop_52_t1533 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 48 ff ff ff ff 

# mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 80bcb Store32_1 [Register(0x48), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 48 4c 

# 80bce Store32_2 []
#       mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first_free\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80bcf Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 4c 

# 80bd2 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 80bd8 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 80bdb LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 80be1 Mul8_16 [Register(0x48), Register(0x00), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 48 00 48 

# 80be5 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4a 00 

# 80be8 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4b 00 

# inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 80beb ClearCarry []
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 80bec AddCarry32_1 [Register(0x38), Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 38 48 38 

# 80bf0 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# 80bf1 Load32 [Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
22 38 38 

# a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# optimized away noop copy Instruction { source: "a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# :RpnCalc_handle_if_end_17 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# RpnCalc_handle_if_end_17
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
# Ident("stack_needed")
# 80bf4 Copy8 [Register(0x68), Register(0x58)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
#       Ident("stack_needed")
0b 68 58 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 80bf7 LoadImm8 [Register(0x71), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 71 01 

# if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_end_20' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
# 80bfa Cmp8 [Register(0x58), Register(0x71)]
#       if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_end_20' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
15 58 71 

# 80bfd JcImm [Label24(RpnCalc_handle_if_end_20)]
#       if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_end_20' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
71 48 0c 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_end_20' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n1/0x01u8) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n1/0x01u8) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_21)], resolved: None }
# :RpnCalc_handle_if_true_0_21 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_21
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }\nCall(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# 80c01 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
21 40 3c 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80c04 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 4c 

# 80c07 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80c0d Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 4c 

# 80c10 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 80c16 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_53_t1533 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 80c19 AddImm32IgnoreCarry [Register(0x48), Constant32(0xffffffff=4294967295)]
#       inline_RpnCalc_handle_stack_pop_53_t1533 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 48 ff ff ff ff 

# mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 80c1f Store32_1 [Register(0x48), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 48 4c 

# 80c22 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first_free\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80c23 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 4c 

# 80c26 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 80c2c Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 80c2f LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 80c35 Mul8_16 [Register(0x48), Register(0x00), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 48 00 48 

# 80c39 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4a 00 

# 80c3c LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4b 00 

# inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 80c3f ClearCarry []
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 80c40 AddCarry32_1 [Register(0x3c), Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 48 3c 

# 80c44 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# 80c45 Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
22 3c 3c 

# b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# optimized away noop copy Instruction { source: "b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# :RpnCalc_handle_if_end_20 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# RpnCalc_handle_if_end_20
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(U32)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n100/0x64u8) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Number(0n43/0x2bu8)
# 80c48 LoadImm8 [Register(0x58), Constant8(0x2b=43)]
#       tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
#       Number(0n43/0x2bu8)
04 58 2b 

# if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# 80c4b Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
15 44 58 

# 80c4e JzImm [Label24(RpnCalc_handle_if_true_0_24)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
72 56 0c 08 

# 80c52 JmpImm [Label24(RpnCalc_handle_if_else_0_25)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
70 b4 0d 08 

# :RpnCalc_handle_if_true_0_24 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# RpnCalc_handle_if_true_0_24
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# 80c56 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# 80c59 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
#       Ident("a")
21 38 48 

# sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 80c5c ClearCarry []
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 80c5d AddCarry32_1 [Register(0x5c), Register(0x48), Register(0x5c)]
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 5c 48 5c 

# 80c61 AddCarry32_2 []
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
# Ident("sum")
# 80c62 Copy32 [Register(0x5c), Register(0x38)]
#       t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
#       Ident("sum")
21 5c 38 

# None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
# 80c65 Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t670d None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 104, 108, 112, 113]
# 80c68 Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 71 

# 80c6a Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 70 

# 80c6c Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6c 

# 80c6e Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 68 

# 80c70 Push8 [Register(0x66)]
#       Saving reg0x66 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 66 

# 80c72 Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 65 

# 80c74 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 64 

# 80c76 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 60 

# 80c78 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5f 

# 80c7a Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5e 

# 80c7c Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5d 

# 80c7e Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5c 

# 80c80 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 59 

# 80c82 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 58 

# 80c84 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 57 

# 80c86 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 56 

# 80c88 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 55 

# 80c8a Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 54 

# 80c8c Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 53 

# 80c8e Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 52 

# 80c90 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 51 

# 80c92 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 50 

# 80c94 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4f 

# 80c96 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4e 

# 80c98 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4d 

# 80c9a Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4c 

# 80c9c Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4b 

# 80c9e Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4a 

# 80ca0 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 49 

# 80ca2 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 48 

# 80ca4 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 45 

# 80ca6 Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 44 

# 80ca8 Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 43 

# 80caa Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 42 

# 80cac Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 41 

# 80cae Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 40 

# 80cb0 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3f 

# 80cb2 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3e 

# 80cb4 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3d 

# 80cb6 Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3c 

# 80cb8 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3b 

# 80cba Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3a 

# 80cbc Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 39 

# 80cbe Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 38 

# 80cc0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 80cc6 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c d0 0c 08 00 

# 80ccc JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 a6 29 08 

# 80cd0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 80cd6 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 38 

# 80cd8 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 39 

# 80cda Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3a 

# 80cdc Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3b 

# 80cde Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3c 

# 80ce0 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3d 

# 80ce2 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3e 

# 80ce4 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3f 

# 80ce6 Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 40 

# 80ce8 Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 41 

# 80cea Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 42 

# 80cec Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 43 

# 80cee Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 44 

# 80cf0 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 45 

# 80cf2 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 48 

# 80cf4 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 49 

# 80cf6 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4a 

# 80cf8 Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4b 

# 80cfa Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4c 

# 80cfc Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4d 

# 80cfe Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4e 

# 80d00 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4f 

# 80d02 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 50 

# 80d04 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 51 

# 80d06 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 52 

# 80d08 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 53 

# 80d0a Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 54 

# 80d0c Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 55 

# 80d0e Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 56 

# 80d10 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 57 

# 80d12 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 58 

# 80d14 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 59 

# 80d16 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5c 

# 80d18 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5d 

# 80d1a Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5e 

# 80d1c Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5f 

# 80d1e Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 60 

# 80d20 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 64 

# 80d22 Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 65 

# 80d24 Pop8 [Register(0x66)]
#       Restoring reg0x66 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 66 

# 80d26 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 68 

# 80d28 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6c 

# 80d2a Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 70 

# 80d2c Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 71 

# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #180, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 80d2e LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #180, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #182, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_19_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# 80d31 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #183, replacing reference to inline_RpnCalc_handle_putc_19_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_19_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 80d33 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #183, replacing reference to inline_RpnCalc_handle_putc_19_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_19_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #184, replacing reference to inline_RpnCalc_handle_putc_19_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 -> inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 80d39 Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #184, replacing reference to inline_RpnCalc_handle_putc_19_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 -> inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #185, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_19_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 80d3c LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #185, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_19_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #186, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' -> if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0'
# 80d3f Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #186, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' -> if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0'
15 45 59 

# 80d42 JzImm [Label24(inline_RpnCalc_handle_putc_19_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #186, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' -> if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0'
72 62 0d 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #186, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' -> if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_19_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_19_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_19_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# # In IlFunctionId("RpnCalc_handle"), at #188, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 80d46 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #188, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #189, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# 80d49 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       # In IlFunctionId("RpnCalc_handle"), at #189, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: []
# 80d4c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80d52 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 5c 0d 08 00 

# 80d58 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 13 22 08 

# 80d5c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_19_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_19_putc_if_end_0
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# Ident("sum")
# 80d62 Copy32 [Register(0x5c), Register(0x38)]
#       t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
#       Ident("sum")
21 5c 38 

# inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# 80d65 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_54_n <- t670d U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_n <- t670d U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80d68 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 80d6b AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 80d71 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 80d74 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 80d7a Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 80d7e LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 80d81 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 80d84 ClearCarry []
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 80d85 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 80d89 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 80d8a Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 80d8d Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80d8e Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 80d91 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80d97 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 80d9a AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 80da0 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 80da3 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 80da6 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 80dac Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 80daf Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 80db0 JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 6f 19 08 

# :RpnCalc_handle_if_else_0_25 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_0_25
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Number(0n45/0x2du8)
# 80db4 LoadImm8 [Register(0x58), Constant8(0x2d=45)]
#       t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
#       Number(0n45/0x2du8)
04 58 2d 

# if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# 80db7 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
15 44 58 

# 80dba JzImm [Label24(RpnCalc_handle_if_true_1_26)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
72 c2 0d 08 

# 80dbe JmpImm [Label24(RpnCalc_handle_if_else_1_27)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
70 2b 0f 08 

# :RpnCalc_handle_if_true_1_26 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_1_26
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# Ident("b")
# 80dc2 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# Ident("a")
# 80dc5 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
#       Ident("a")
21 38 48 

# diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# 80dc8 Copy32 [Register(0x48), Register(0x00)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
21 48 00 

# 80dcb Invert8 [Register(0x00)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 00 

# 80dcd Invert8 [Register(0x01)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 01 

# 80dcf Invert8 [Register(0x02)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 02 

# 80dd1 Invert8 [Register(0x03)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 03 

# 80dd3 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
32 00 01 00 00 00 

# 80dd9 ClearCarry []
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
03 

# 80dda AddCarry32_1 [Register(0x5c), Register(0x00), Register(0x38)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
30 5c 00 38 

# 80dde AddCarry32_2 []
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
31 

# t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
# Ident("diff")
# optimized away noop copy Instruction { source: "t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }\nCall(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })\nIdent(\"diff\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
# 80ddf Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t17ee None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 104, 108, 112, 113]
# 80de2 Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 71 

# 80de4 Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 70 

# 80de6 Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6c 

# 80de8 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 68 

# 80dea Push8 [Register(0x66)]
#       Saving reg0x66 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 66 

# 80dec Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 65 

# 80dee Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 64 

# 80df0 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 60 

# 80df2 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5f 

# 80df4 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5e 

# 80df6 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5d 

# 80df8 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5c 

# 80dfa Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 59 

# 80dfc Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 58 

# 80dfe Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 57 

# 80e00 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 56 

# 80e02 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 55 

# 80e04 Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 54 

# 80e06 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 53 

# 80e08 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 52 

# 80e0a Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 51 

# 80e0c Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 50 

# 80e0e Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4f 

# 80e10 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4e 

# 80e12 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4d 

# 80e14 Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4c 

# 80e16 Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4b 

# 80e18 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4a 

# 80e1a Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 49 

# 80e1c Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 48 

# 80e1e Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 45 

# 80e20 Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 44 

# 80e22 Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 43 

# 80e24 Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 42 

# 80e26 Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 41 

# 80e28 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 40 

# 80e2a Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3f 

# 80e2c Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3e 

# 80e2e Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3d 

# 80e30 Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3c 

# 80e32 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3b 

# 80e34 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3a 

# 80e36 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 39 

# 80e38 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 38 

# 80e3a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 80e40 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 4a 0e 08 00 

# 80e46 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 a6 29 08 

# 80e4a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 80e50 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 38 

# 80e52 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 39 

# 80e54 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3a 

# 80e56 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3b 

# 80e58 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3c 

# 80e5a Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3d 

# 80e5c Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3e 

# 80e5e Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3f 

# 80e60 Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 40 

# 80e62 Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 41 

# 80e64 Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 42 

# 80e66 Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 43 

# 80e68 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 44 

# 80e6a Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 45 

# 80e6c Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 48 

# 80e6e Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 49 

# 80e70 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4a 

# 80e72 Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4b 

# 80e74 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4c 

# 80e76 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4d 

# 80e78 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4e 

# 80e7a Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4f 

# 80e7c Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 50 

# 80e7e Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 51 

# 80e80 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 52 

# 80e82 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 53 

# 80e84 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 54 

# 80e86 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 55 

# 80e88 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 56 

# 80e8a Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 57 

# 80e8c Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 58 

# 80e8e Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 59 

# 80e90 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5c 

# 80e92 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5d 

# 80e94 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5e 

# 80e96 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5f 

# 80e98 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 60 

# 80e9a Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 64 

# 80e9c Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 65 

# 80e9e Pop8 [Register(0x66)]
#       Restoring reg0x66 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 66 

# 80ea0 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 68 

# 80ea2 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6c 

# 80ea4 Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 70 

# 80ea6 Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 71 

# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #219, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 80ea8 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #219, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #221, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_20_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# 80eab Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #222, replacing reference to inline_RpnCalc_handle_putc_20_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_20_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 80ead LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #222, replacing reference to inline_RpnCalc_handle_putc_20_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_20_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #223, replacing reference to inline_RpnCalc_handle_putc_20_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 -> inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 80eb3 Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #223, replacing reference to inline_RpnCalc_handle_putc_20_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 -> inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #224, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_20_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 80eb6 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #224, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_20_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #225, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' -> if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0'
# 80eb9 Cmp8 [Register(0x60), Register(0x59)]
#       if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #225, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' -> if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0'
15 60 59 

# 80ebc JzImm [Label24(inline_RpnCalc_handle_putc_20_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #225, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' -> if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0'
72 dc 0e 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #225, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' -> if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_20_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_20_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_20_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# # In IlFunctionId("RpnCalc_handle"), at #227, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 80ec0 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #227, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #228, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# 80ec3 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       # In IlFunctionId("RpnCalc_handle"), at #228, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: []
# 80ec6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80ecc StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c d6 0e 08 00 

# 80ed2 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 13 22 08 

# 80ed6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_20_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_20_putc_if_end_0
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# Ident("diff")
# optimized away noop copy Instruction { source: "t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\nIdent(\"diff\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# 80edc Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80edf Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 80ee2 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 80ee8 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 80eeb LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 80ef1 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 80ef5 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 80ef8 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 80efb ClearCarry []
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 80efc AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 80f00 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 80f01 Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 80f04 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80f05 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 80f08 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80f0e Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 80f11 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 80f17 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 80f1a Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 80f1d AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 80f23 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 80f26 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 80f27 JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 6f 19 08 

# :RpnCalc_handle_if_else_1_27 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_1_27
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Number(0n42/0x2au8)
# 80f2b LoadImm8 [Register(0x58), Constant8(0x2a=42)]
#       t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
#       Number(0n42/0x2au8)
04 58 2a 

# if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# 80f2e Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
15 44 58 

# 80f31 JzImm [Label24(RpnCalc_handle_if_true_2_28)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
72 39 0f 08 

# 80f35 JmpImm [Label24(RpnCalc_handle_if_else_2_29)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
70 b3 12 08 

# :RpnCalc_handle_if_true_2_28 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_2_28
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# Ident("b")
# 80f39 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# Ident("a")
# 80f3c Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
#       Ident("a")
21 38 48 

# inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# 80f3f Copy32 [Register(0x5c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
21 5c 38 

# inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# 80f42 Copy32 [Register(0x48), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
21 48 5c 

# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(30,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(30,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 80f45 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 38 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 80f48 Copy32 [Register(0x5c), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 5c 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 80f4b Mul8_16 [Register(0x3c), Register(0x48), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 3c 48 4c 

# 80f4f LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4e 00 

# 80f52 LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 80f55 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 80f58 LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 64 00 00 00 00 

# 80f5e Copy8 [Register(0x60), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 80f61 Copy8 [Register(0x49), Register(0x58)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 49 58 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 80f64 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 80f6a Copy8 [Register(0x58), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 58 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 80f6d Mul8_16 [Register(0x64), Register(0x54), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 64 54 54 

# 80f71 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 80f74 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 80f77 Copy8 [Register(0x55), Register(0x59)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 55 59 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 80f7a Copy8 [Register(0x59), Register(0x57)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 59 57 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 80f7d Copy8 [Register(0x54), Register(0x59)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 54 59 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 80f80 Copy8 [Register(0x59), Register(0x56)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 59 56 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #273, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 80f83 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #273, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #274, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 80f86 Copy8 [Register(0x59), Register(0x55)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #274, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 55 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #275, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 80f89 Copy8 [Register(0x59), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #275, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 80f8c ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 80f8d AddCarry32_1 [Register(0x4c), Register(0x54), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 4c 54 4c 

# 80f91 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 80f92 Copy8 [Register(0x49), Register(0x58)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 49 58 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 80f95 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 80f9b Copy8 [Register(0x58), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 58 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 80f9e Mul8_16 [Register(0x3c), Register(0x54), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 3c 54 54 

# 80fa2 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 80fa5 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 80fa8 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 80fab LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 64 00 00 00 00 

# 80fb1 Copy8 [Register(0x60), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 80fb4 Mul8_16 [Register(0x64), Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 64 48 3c 

# 80fb8 LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3e 00 

# 80fbb LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 80fbe Copy32 [Register(0x54), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 54 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 80fc1 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 80fc2 AddCarry32_1 [Register(0x48), Register(0x3c), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 48 3c 54 

# 80fc6 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 80fc7 Copy8 [Register(0x56), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 56 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 80fca Copy8 [Register(0x60), Register(0x57)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 60 57 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 80fcd Copy8 [Register(0x55), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 55 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 80fd0 Copy8 [Register(0x60), Register(0x56)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 60 56 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 80fd3 Copy8 [Register(0x54), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 54 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 80fd6 Copy8 [Register(0x60), Register(0x55)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 60 55 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #296, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 80fd9 Copy8 [Register(0x59), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #296, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 80fdc Copy32 [Register(0x54), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 54 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 80fdf ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 80fe0 AddCarry32_1 [Register(0x4c), Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 4c 48 3c 

# 80fe4 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 80fe5 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 3c 4c 

# inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(32,5))
# Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 80fe8 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(32,5))
#       Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 3c 00 00 00 00 

# inline_RpnCalc_handle_mul32_32_12_t94df <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# Index("a", Number(0n3/0x03u8))
# 80fee Copy8 [Register(0x3b), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t94df <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
#       Index("a", Number(0n3/0x03u8))
0b 3b 45 

# inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t94df U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# 80ff1 Copy8 [Register(0x45), Register(0x3d)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t94df U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
0b 45 3d 

# inline_RpnCalc_handle_mul32_32_12_t3b02 <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# Index("a", Number(0n2/0x02u8))
# 80ff4 Copy8 [Register(0x3a), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t3b02 <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
#       Index("a", Number(0n2/0x02u8))
0b 3a 45 

# inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# 80ff7 Copy8 [Register(0x45), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
0b 45 3c 

# inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(36,5))
# Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 80ffa LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(36,5))
#       Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 48 00 00 00 00 

# inline_RpnCalc_handle_mul32_32_12_ta5f7 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# Index("b", Number(0n3/0x03u8))
# 81000 Copy8 [Register(0x5f), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_ta5f7 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
#       Index("b", Number(0n3/0x03u8))
0b 5f 44 

# inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# 81003 Copy8 [Register(0x44), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
0b 44 49 

# inline_RpnCalc_handle_mul32_32_12_t82cc <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# Index("b", Number(0n2/0x02u8))
# 81006 Copy8 [Register(0x5e), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_t82cc <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
#       Index("b", Number(0n2/0x02u8))
0b 5e 44 

# inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t82cc U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# 81009 Copy8 [Register(0x44), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t82cc U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
0b 44 48 

# inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 8100c Mul8_16 [Register(0x3c), Register(0x5c), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 3c 5c 54 

# 81010 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 56 00 

# 81013 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 57 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 81016 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 81019 LoadImm32 [Register(0x6c), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 6c 00 00 00 00 

# 8101f Copy8 [Register(0x60), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 6c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 81022 Copy8 [Register(0x5d), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 5d 44 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 81025 LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 64 00 00 00 00 

# 8102b Copy8 [Register(0x44), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 44 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 8102e Mul8_16 [Register(0x6c), Register(0x64), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 6c 64 64 

# 81032 LoadImm8 [Register(0x66), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 66 00 

# 81035 LoadImm8 [Register(0x67), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 67 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 81038 Copy8 [Register(0x65), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 65 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 8103b Copy8 [Register(0x68), Register(0x67)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 68 67 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 8103e Copy8 [Register(0x64), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 64 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 81041 Copy8 [Register(0x68), Register(0x66)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 68 66 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #328, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 81044 Copy8 [Register(0x59), Register(0x65)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #328, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 65 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #329, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 81047 Copy8 [Register(0x59), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #329, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 8104a ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 8104b AddCarry32_1 [Register(0x54), Register(0x64), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 54 64 54 

# 8104f AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 81050 Copy8 [Register(0x5d), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 5d 44 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 81053 LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 64 00 00 00 00 

# 81059 Copy8 [Register(0x44), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 44 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 8105c Mul8_16 [Register(0x3c), Register(0x64), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 3c 64 64 

# 81060 LoadImm8 [Register(0x66), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 66 00 

# 81063 LoadImm8 [Register(0x67), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 67 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 81066 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 81069 LoadImm32 [Register(0x6c), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 6c 00 00 00 00 

# 8106f Copy8 [Register(0x60), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 6c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 81072 Mul8_16 [Register(0x6c), Register(0x5c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 6c 5c 3c 

# 81076 LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3e 00 

# 81079 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 8107c Copy32 [Register(0x64), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 64 5c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 8107f ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 81080 AddCarry32_1 [Register(0x5c), Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 5c 3c 64 

# 81084 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 81085 Copy8 [Register(0x66), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 66 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 81088 Copy8 [Register(0x60), Register(0x67)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 60 67 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 8108b Copy8 [Register(0x65), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 65 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 8108e Copy8 [Register(0x60), Register(0x66)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 60 66 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 81091 Copy8 [Register(0x64), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 64 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 81094 Copy8 [Register(0x60), Register(0x65)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 60 65 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #350, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 81097 Copy8 [Register(0x59), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #350, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 8109a Copy32 [Register(0x64), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 64 5c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 8109d ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 8109e AddCarry32_1 [Register(0x54), Register(0x5c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 54 5c 3c 

# 810a2 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 810a3 Copy32 [Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 3c 64 

# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("b_hi")
# 810a6 Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
#       Ident("b_hi")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 810a9 Mul8_16 [Register(0x38), Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 38 3c 5c 

# 810ad LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 5e 00 

# 810b0 LoadImm8 [Register(0x5f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 5f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 810b3 Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 810b6 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 810bc Copy8 [Register(0x45), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 45 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 810bf Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 810c2 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 48 00 00 00 00 

# 810c8 Copy8 [Register(0x60), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 60 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 810cb Mul8_16 [Register(0x54), Register(0x48), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 54 48 48 

# 810cf LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4a 00 

# 810d2 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 810d5 Copy8 [Register(0x49), Register(0x58)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 49 58 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 810d8 Copy8 [Register(0x58), Register(0x4b)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 58 4b 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 810db Copy8 [Register(0x48), Register(0x58)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 48 58 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 810de Copy8 [Register(0x58), Register(0x4a)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 58 4a 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #372, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 810e1 Copy8 [Register(0x59), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #372, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 49 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #373, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 810e4 Copy8 [Register(0x59), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #373, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 810e7 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 810e8 AddCarry32_1 [Register(0x5c), Register(0x48), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 5c 48 5c 

# 810ec AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 810ed Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 810f0 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 48 00 00 00 00 

# 810f6 Copy8 [Register(0x60), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 60 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 810f9 Mul8_16 [Register(0x38), Register(0x48), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 38 48 48 

# 810fd LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4a 00 

# 81100 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 81103 Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 81106 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 8110c Copy8 [Register(0x45), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 45 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 8110f Mul8_16 [Register(0x54), Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 54 3c 38 

# 81113 LoadImm8 [Register(0x3a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3a 00 

# 81116 LoadImm8 [Register(0x3b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 81119 Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 8111c ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 8111d AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 3c 38 48 

# 81121 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 81122 Copy8 [Register(0x4a), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 4a 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 81125 Copy8 [Register(0x45), Register(0x4b)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 45 4b 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 81128 Copy8 [Register(0x49), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 49 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 8112b Copy8 [Register(0x45), Register(0x4a)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 45 4a 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 8112e Copy8 [Register(0x48), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 48 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 81131 Copy8 [Register(0x45), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 45 49 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #394, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 81134 Copy8 [Register(0x59), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #394, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 81137 Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 8113a ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 8113b AddCarry32_1 [Register(0x5c), Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 5c 3c 38 

# 8113f AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# 81140 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
03 

# 81141 AddCarry32_1 [Register(0x64), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
30 64 38 38 

# 81145 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
31 

# inline_RpnCalc_handle_mul32_32_12_t34f7 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 81146 Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t34f7 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 81149 Copy8 [Register(0x45), Register(0x3b)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 45 3b 

# inline_RpnCalc_handle_mul32_32_12_t30b9 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 8114c Copy8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t30b9 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 38 45 

# inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 8114f Copy8 [Register(0x45), Register(0x3a)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 45 3a 

# inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(43,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #405, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 81152 Copy8 [Register(0x59), Register(0x39)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(43,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #405, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 39 

# inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(44,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #406, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 81155 Copy8 [Register(0x59), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(44,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #406, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 38 

# inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# 81158 Copy32 [Register(0x4c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("c")
21 4c 3c 

# inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"d\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 8115b ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 8115c AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 3c 38 38 

# 81160 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 81161 Copy32 [Register(0x38), Register(0x5c)]
#       product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 38 5c 

# t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("product")] })
# Ident("product")
# 81164 Copy32 [Register(0x5c), Register(0x38)]
#       t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
#       Ident("product")
21 5c 38 

# None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("product")] })
# 81167 Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t2754 None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 104, 108, 112, 113]
# 8116a Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 71 

# 8116c Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 70 

# 8116e Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6c 

# 81170 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 68 

# 81172 Push8 [Register(0x66)]
#       Saving reg0x66 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 66 

# 81174 Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 65 

# 81176 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 64 

# 81178 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 60 

# 8117a Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5f 

# 8117c Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5e 

# 8117e Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5d 

# 81180 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5c 

# 81182 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 59 

# 81184 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 58 

# 81186 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 57 

# 81188 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 56 

# 8118a Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 55 

# 8118c Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 54 

# 8118e Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 53 

# 81190 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 52 

# 81192 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 51 

# 81194 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 50 

# 81196 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4f 

# 81198 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4e 

# 8119a Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4d 

# 8119c Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4c 

# 8119e Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4b 

# 811a0 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4a 

# 811a2 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 49 

# 811a4 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 48 

# 811a6 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 45 

# 811a8 Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 44 

# 811aa Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 43 

# 811ac Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 42 

# 811ae Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 41 

# 811b0 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 40 

# 811b2 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3f 

# 811b4 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3e 

# 811b6 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3d 

# 811b8 Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3c 

# 811ba Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3b 

# 811bc Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3a 

# 811be Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 39 

# 811c0 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 38 

# 811c2 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 811c8 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c d2 11 08 00 

# 811ce JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 a6 29 08 

# 811d2 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 811d8 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 38 

# 811da Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 39 

# 811dc Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3a 

# 811de Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3b 

# 811e0 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3c 

# 811e2 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3d 

# 811e4 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3e 

# 811e6 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3f 

# 811e8 Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 40 

# 811ea Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 41 

# 811ec Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 42 

# 811ee Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 43 

# 811f0 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 44 

# 811f2 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 45 

# 811f4 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 48 

# 811f6 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 49 

# 811f8 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4a 

# 811fa Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4b 

# 811fc Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4c 

# 811fe Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4d 

# 81200 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4e 

# 81202 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4f 

# 81204 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 50 

# 81206 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 51 

# 81208 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 52 

# 8120a Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 53 

# 8120c Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 54 

# 8120e Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 55 

# 81210 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 56 

# 81212 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 57 

# 81214 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 58 

# 81216 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 59 

# 81218 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5c 

# 8121a Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5d 

# 8121c Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5e 

# 8121e Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5f 

# 81220 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 60 

# 81222 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 64 

# 81224 Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 65 

# 81226 Pop8 [Register(0x66)]
#       Restoring reg0x66 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 66 

# 81228 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 68 

# 8122a Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6c 

# 8122c Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 70 

# 8122e Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 71 

# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #413, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 81230 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #413, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #415, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_21_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# 81233 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #416, replacing reference to inline_RpnCalc_handle_putc_21_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_21_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 81235 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #416, replacing reference to inline_RpnCalc_handle_putc_21_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_21_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #417, replacing reference to inline_RpnCalc_handle_putc_21_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 -> inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 8123b Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #417, replacing reference to inline_RpnCalc_handle_putc_21_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 -> inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 45 

# if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #419, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' -> if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0'
# 8123e Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #419, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' -> if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0'
15 45 59 

# 81241 JzImm [Label24(inline_RpnCalc_handle_putc_21_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #419, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' -> if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0'
72 61 12 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #419, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' -> if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_21_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_21_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_21_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# # In IlFunctionId("RpnCalc_handle"), at #421, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 81245 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #421, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #422, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# 81248 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       # In IlFunctionId("RpnCalc_handle"), at #422, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: []
# 8124b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 81251 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 5b 12 08 00 

# 81257 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 13 22 08 

# 8125b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_21_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_21_putc_if_end_0
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# Ident("product")
# 81261 Copy32 [Register(0x5c), Register(0x38)]
#       t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
#       Ident("product")
21 5c 38 

# inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# 81264 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81267 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 8126a AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 81270 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 81273 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 81279 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 8127d LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 81280 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 81283 ClearCarry []
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 81284 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 81288 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 81289 Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 8128c Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 8128d Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 81290 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81296 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 81299 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 8129f Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 812a2 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 812a5 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 812ab Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 812ae Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 812af JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 6f 19 08 

# :RpnCalc_handle_if_else_2_29 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_2_29
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Number(0n47/0x2fu8)
# 812b3 LoadImm8 [Register(0x58), Constant8(0x2f=47)]
#       t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
#       Number(0n47/0x2fu8)
04 58 2f 

# if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# 812b6 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
15 44 58 

# 812b9 JzImm [Label24(RpnCalc_handle_if_true_3_30)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
72 c1 12 08 

# 812bd JmpImm [Label24(RpnCalc_handle_if_else_3_31)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
70 e8 14 08 

# :RpnCalc_handle_if_true_3_30 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_3_30
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# Ident("b")
# 812c1 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# Ident("a")
# 812c4 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
#       Ident("a")
21 38 48 

# Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# 812c7 Copy32 [Register(0x5c), Register(0x00)]
#       Arg0[a]=tace9 Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 5c 00 

# 812ca Copy32 [Register(0x48), Register(0x04)]
#       Arg1[b]=t8792 Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 48 04 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 104, 108, 112, 113]
# 812cd Push8 [Register(0x71)]
#       Saving reg0x71 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 71 

# 812cf Push8 [Register(0x70)]
#       Saving reg0x70 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 70 

# 812d1 Push8 [Register(0x6c)]
#       Saving reg0x6c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6c 

# 812d3 Push8 [Register(0x68)]
#       Saving reg0x68 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 68 

# 812d5 Push8 [Register(0x66)]
#       Saving reg0x66 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 66 

# 812d7 Push8 [Register(0x65)]
#       Saving reg0x65 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 65 

# 812d9 Push8 [Register(0x64)]
#       Saving reg0x64 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 64 

# 812db Push8 [Register(0x60)]
#       Saving reg0x60 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 60 

# 812dd Push8 [Register(0x5f)]
#       Saving reg0x5f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5f 

# 812df Push8 [Register(0x5e)]
#       Saving reg0x5e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5e 

# 812e1 Push8 [Register(0x5d)]
#       Saving reg0x5d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5d 

# 812e3 Push8 [Register(0x5c)]
#       Saving reg0x5c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5c 

# 812e5 Push8 [Register(0x59)]
#       Saving reg0x59 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 59 

# 812e7 Push8 [Register(0x58)]
#       Saving reg0x58 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 58 

# 812e9 Push8 [Register(0x57)]
#       Saving reg0x57 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 57 

# 812eb Push8 [Register(0x56)]
#       Saving reg0x56 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 56 

# 812ed Push8 [Register(0x55)]
#       Saving reg0x55 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 55 

# 812ef Push8 [Register(0x54)]
#       Saving reg0x54 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 54 

# 812f1 Push8 [Register(0x53)]
#       Saving reg0x53 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 53 

# 812f3 Push8 [Register(0x52)]
#       Saving reg0x52 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 52 

# 812f5 Push8 [Register(0x51)]
#       Saving reg0x51 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 51 

# 812f7 Push8 [Register(0x50)]
#       Saving reg0x50 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 50 

# 812f9 Push8 [Register(0x4f)]
#       Saving reg0x4f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4f 

# 812fb Push8 [Register(0x4e)]
#       Saving reg0x4e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4e 

# 812fd Push8 [Register(0x4d)]
#       Saving reg0x4d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4d 

# 812ff Push8 [Register(0x4c)]
#       Saving reg0x4c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4c 

# 81301 Push8 [Register(0x4b)]
#       Saving reg0x4b before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4b 

# 81303 Push8 [Register(0x4a)]
#       Saving reg0x4a before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4a 

# 81305 Push8 [Register(0x49)]
#       Saving reg0x49 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 49 

# 81307 Push8 [Register(0x48)]
#       Saving reg0x48 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 48 

# 81309 Push8 [Register(0x45)]
#       Saving reg0x45 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 45 

# 8130b Push8 [Register(0x44)]
#       Saving reg0x44 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 44 

# 8130d Push8 [Register(0x43)]
#       Saving reg0x43 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 43 

# 8130f Push8 [Register(0x42)]
#       Saving reg0x42 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 42 

# 81311 Push8 [Register(0x41)]
#       Saving reg0x41 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 41 

# 81313 Push8 [Register(0x40)]
#       Saving reg0x40 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 40 

# 81315 Push8 [Register(0x3f)]
#       Saving reg0x3f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3f 

# 81317 Push8 [Register(0x3e)]
#       Saving reg0x3e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3e 

# 81319 Push8 [Register(0x3d)]
#       Saving reg0x3d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3d 

# 8131b Push8 [Register(0x3c)]
#       Saving reg0x3c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3c 

# 8131d Push8 [Register(0x3b)]
#       Saving reg0x3b before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3b 

# 8131f Push8 [Register(0x3a)]
#       Saving reg0x3a before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3a 

# 81321 Push8 [Register(0x39)]
#       Saving reg0x39 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 39 

# 81323 Push8 [Register(0x38)]
#       Saving reg0x38 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 38 

# 81325 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:div32))
32 0c fc ff ff ff 

# 8132b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:div32))
25 0c 35 13 08 00 

# 81331 JmpImm [Label24(:div32)]
#       PseudoCall(Label24(:div32))
70 1d 1b 08 

# 81335 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:div32))
32 0c 04 00 00 00 

# 8133b Pop8 [Register(0x38)]
#       Restoring reg0x38 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 38 

# 8133d Pop8 [Register(0x39)]
#       Restoring reg0x39 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 39 

# 8133f Pop8 [Register(0x3a)]
#       Restoring reg0x3a after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3a 

# 81341 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3b 

# 81343 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3c 

# 81345 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3d 

# 81347 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3e 

# 81349 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3f 

# 8134b Pop8 [Register(0x40)]
#       Restoring reg0x40 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 40 

# 8134d Pop8 [Register(0x41)]
#       Restoring reg0x41 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 41 

# 8134f Pop8 [Register(0x42)]
#       Restoring reg0x42 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 42 

# 81351 Pop8 [Register(0x43)]
#       Restoring reg0x43 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 43 

# 81353 Pop8 [Register(0x44)]
#       Restoring reg0x44 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 44 

# 81355 Pop8 [Register(0x45)]
#       Restoring reg0x45 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 45 

# 81357 Pop8 [Register(0x48)]
#       Restoring reg0x48 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 48 

# 81359 Pop8 [Register(0x49)]
#       Restoring reg0x49 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 49 

# 8135b Pop8 [Register(0x4a)]
#       Restoring reg0x4a after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4a 

# 8135d Pop8 [Register(0x4b)]
#       Restoring reg0x4b after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4b 

# 8135f Pop8 [Register(0x4c)]
#       Restoring reg0x4c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4c 

# 81361 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4d 

# 81363 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4e 

# 81365 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4f 

# 81367 Pop8 [Register(0x50)]
#       Restoring reg0x50 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 50 

# 81369 Pop8 [Register(0x51)]
#       Restoring reg0x51 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 51 

# 8136b Pop8 [Register(0x52)]
#       Restoring reg0x52 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 52 

# 8136d Pop8 [Register(0x53)]
#       Restoring reg0x53 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 53 

# 8136f Pop8 [Register(0x54)]
#       Restoring reg0x54 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 54 

# 81371 Pop8 [Register(0x55)]
#       Restoring reg0x55 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 55 

# 81373 Pop8 [Register(0x56)]
#       Restoring reg0x56 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 56 

# 81375 Pop8 [Register(0x57)]
#       Restoring reg0x57 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 57 

# 81377 Pop8 [Register(0x58)]
#       Restoring reg0x58 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 58 

# 81379 Pop8 [Register(0x59)]
#       Restoring reg0x59 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 59 

# 8137b Pop8 [Register(0x5c)]
#       Restoring reg0x5c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5c 

# 8137d Pop8 [Register(0x5d)]
#       Restoring reg0x5d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5d 

# 8137f Pop8 [Register(0x5e)]
#       Restoring reg0x5e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5e 

# 81381 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5f 

# 81383 Pop8 [Register(0x60)]
#       Restoring reg0x60 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 60 

# 81385 Pop8 [Register(0x64)]
#       Restoring reg0x64 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 64 

# 81387 Pop8 [Register(0x65)]
#       Restoring reg0x65 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 65 

# 81389 Pop8 [Register(0x66)]
#       Restoring reg0x66 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 66 

# 8138b Pop8 [Register(0x68)]
#       Restoring reg0x68 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 68 

# 8138d Pop8 [Register(0x6c)]
#       Restoring reg0x6c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6c 

# 8138f Pop8 [Register(0x70)]
#       Restoring reg0x70 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 70 

# 81391 Pop8 [Register(0x71)]
#       Restoring reg0x71 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 71 

# 81393 Copy32 [Register(0x00), Register(0x5c)]
#       Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 00 5c 

# t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
# Ident("quotient")
# 81396 Copy32 [Register(0x5c), Register(0x38)]
#       t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
#       Ident("quotient")
21 5c 38 

# None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
# 81399 Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t1ba9 None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 104, 108, 112, 113]
# 8139c Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 71 

# 8139e Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 70 

# 813a0 Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6c 

# 813a2 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 68 

# 813a4 Push8 [Register(0x66)]
#       Saving reg0x66 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 66 

# 813a6 Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 65 

# 813a8 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 64 

# 813aa Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 60 

# 813ac Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5f 

# 813ae Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5e 

# 813b0 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5d 

# 813b2 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5c 

# 813b4 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 59 

# 813b6 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 58 

# 813b8 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 57 

# 813ba Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 56 

# 813bc Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 55 

# 813be Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 54 

# 813c0 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 53 

# 813c2 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 52 

# 813c4 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 51 

# 813c6 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 50 

# 813c8 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4f 

# 813ca Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4e 

# 813cc Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4d 

# 813ce Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4c 

# 813d0 Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4b 

# 813d2 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4a 

# 813d4 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 49 

# 813d6 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 48 

# 813d8 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 45 

# 813da Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 44 

# 813dc Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 43 

# 813de Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 42 

# 813e0 Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 41 

# 813e2 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 40 

# 813e4 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3f 

# 813e6 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3e 

# 813e8 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3d 

# 813ea Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3c 

# 813ec Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3b 

# 813ee Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3a 

# 813f0 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 39 

# 813f2 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 38 

# 813f4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 813fa StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 04 14 08 00 

# 81400 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 a6 29 08 

# 81404 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 8140a Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 38 

# 8140c Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 39 

# 8140e Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3a 

# 81410 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3b 

# 81412 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3c 

# 81414 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3d 

# 81416 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3e 

# 81418 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3f 

# 8141a Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 40 

# 8141c Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 41 

# 8141e Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 42 

# 81420 Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 43 

# 81422 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 44 

# 81424 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 45 

# 81426 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 48 

# 81428 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 49 

# 8142a Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4a 

# 8142c Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4b 

# 8142e Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4c 

# 81430 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4d 

# 81432 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4e 

# 81434 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4f 

# 81436 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 50 

# 81438 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 51 

# 8143a Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 52 

# 8143c Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 53 

# 8143e Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 54 

# 81440 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 55 

# 81442 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 56 

# 81444 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 57 

# 81446 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 58 

# 81448 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 59 

# 8144a Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5c 

# 8144c Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5d 

# 8144e Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5e 

# 81450 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5f 

# 81452 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 60 

# 81454 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 64 

# 81456 Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 65 

# 81458 Pop8 [Register(0x66)]
#       Restoring reg0x66 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 66 

# 8145a Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 68 

# 8145c Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6c 

# 8145e Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 70 

# 81460 Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 71 

# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #452, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 81462 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #452, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #454, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_22_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# 81465 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #455, replacing reference to inline_RpnCalc_handle_putc_22_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_22_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 81467 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #455, replacing reference to inline_RpnCalc_handle_putc_22_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_22_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #456, replacing reference to inline_RpnCalc_handle_putc_22_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 -> inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 8146d Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #456, replacing reference to inline_RpnCalc_handle_putc_22_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 -> inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #457, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_22_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 81470 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #457, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_22_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #458, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' -> if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0'
# 81473 Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #458, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' -> if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0'
15 45 59 

# 81476 JzImm [Label24(inline_RpnCalc_handle_putc_22_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #458, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' -> if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0'
72 96 14 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #458, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' -> if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_22_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_22_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_22_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# # In IlFunctionId("RpnCalc_handle"), at #460, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 8147a LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #460, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #461, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# 8147d Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       # In IlFunctionId("RpnCalc_handle"), at #461, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: []
# 81480 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 81486 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 90 14 08 00 

# 8148c JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 13 22 08 

# 81490 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_22_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_22_putc_if_end_0
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# Ident("quotient")
# 81496 Copy32 [Register(0x5c), Register(0x38)]
#       t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
#       Ident("quotient")
21 5c 38 

# inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# 81499 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 8149c Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 8149f AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 814a5 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 814a8 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 814ae Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 814b2 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 814b5 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 814b8 ClearCarry []
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 814b9 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 814bd AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 814be Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 814c1 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 814c2 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 814c5 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 814cb Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 814ce AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 814d4 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 814d7 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 814da AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 814e0 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 814e3 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 814e4 JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 6f 19 08 

# :RpnCalc_handle_if_else_3_31 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_3_31
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Number(0n115/0x73u8)
# 814e8 LoadImm8 [Register(0x58), Constant8(0x73=115)]
#       tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
#       Number(0n115/0x73u8)
04 58 73 

# if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# 814eb Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
15 44 58 

# 814ee JzImm [Label24(RpnCalc_handle_if_true_4_32)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
72 f6 14 08 

# 814f2 JmpImm [Label24(RpnCalc_handle_if_else_4_33)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
70 9c 15 08 

# :RpnCalc_handle_if_true_4_32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_4_32
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# Ident("a")
# 814f6 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
#       Ident("a")
21 38 48 

# inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# 814f9 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
21 40 5c 

# inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# 814fc Copy32 [Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
21 48 38 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 814ff Copy32 [Register(0x5c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 5c 4c 

# 81502 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 81508 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 8150b LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 81511 Mul8_16 [Register(0x48), Register(0x00), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 48 00 48 

# 81515 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4a 00 

# 81518 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4b 00 

# inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 8151b ClearCarry []
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 8151c AddCarry32_1 [Register(0x5c), Register(0x48), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 5c 48 48 

# 81520 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 81521 Store32_1 [Register(0x38), Register(0x48)]
#       mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 48 

# 81524 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81525 Copy32 [Register(0x5c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 5c 4c 

# 81528 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 8152e Copy32 [Register(0x5c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 5c 4c 

# 81531 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 81537 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 8153a Copy32 [Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 48 38 

# 8153d AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 81543 Store32_1 [Register(0x38), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 4c 

# 81546 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# Ident("b")
# 81547 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
#       Ident("b")
21 3c 5c 

# inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# 8154a Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# 8154d Copy32 [Register(0x5c), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
21 5c 38 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81550 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 81553 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 81559 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 8155c LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 81562 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 81566 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 81569 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 8156c ClearCarry []
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 8156d AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 81571 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 81572 Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 81575 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81576 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 81579 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 8157f Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 81582 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 81588 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 8158b Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 8158e AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 81594 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 81597 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81598 JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 6f 19 08 

# :RpnCalc_handle_if_else_4_33 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_4_33
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n113/0x71u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tdf6e <- 0n113/0x71u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# Number(0n113/0x71u8)
# 8159c LoadImm8 [Register(0x45), Constant8(0x71=113)]
#       tdf6e <- 0n113/0x71u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
#       Number(0n113/0x71u8)
04 45 71 

# if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# 8159f Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
15 44 45 

# 815a2 JzImm [Label24(RpnCalc_handle_if_true_5_34)]
#       if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
72 aa 15 08 

# 815a6 JmpImm [Label24(RpnCalc_handle_if_else_5_35)]
#       if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
70 b6 15 08 

# :RpnCalc_handle_if_true_5_34 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_5_34
# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #526, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 815aa LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #526, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# return Some(inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# # In IlFunctionId("RpnCalc_handle"), at #527, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f)
# 815ad Copy8 [Register(0x59), Register(0x00)]
#       return Some(inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       # In IlFunctionId("RpnCalc_handle"), at #527, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f)
0b 59 00 

# 815b0 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 815b2 JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 6f 19 08 

# :RpnCalc_handle_if_else_5_35 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_5_35
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #531, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 815b6 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #531, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# # In IlFunctionId("RpnCalc_handle"), at #532, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' -> if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
# 815b9 Cmp8 [Register(0x44), Register(0x60)]
#       if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       # In IlFunctionId("RpnCalc_handle"), at #532, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' -> if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
15 44 60 

# 815bc JzImm [Label24(RpnCalc_handle_if_true_6_36)]
#       if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       # In IlFunctionId("RpnCalc_handle"), at #532, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' -> if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
72 c4 15 08 

# 815c0 JmpImm [Label24(RpnCalc_handle_if_else_6_37)]
#       if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       # In IlFunctionId("RpnCalc_handle"), at #532, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' -> if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
70 60 16 08 

# :RpnCalc_handle_if_true_6_36 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_6_36
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 815c4 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 815c7 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 815ca AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# 815d0 Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #539, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 815d3 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #539, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #540, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0'
# 815d6 Cmp8 [Register(0x60), Register(0x59)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #540, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0'
15 60 59 

# 815d9 JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #540, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0'
72 5c 16 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #540, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 815dd Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 3c 

# 815e0 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 3c 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 815e6 Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 3c 3c 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 815e9 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 815ec Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 815ef AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 815f5 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 815f8 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 815fe Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 81602 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 81605 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 81608 ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 81609 AddCarry32_1 [Register(0x38), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 38 40 40 

# 8160d AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 8160e Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 40 

# 81611 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 81612 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81615 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 81618 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 8161e Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81621 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 81624 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 8162a Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 8162d Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 3c 

# 81630 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 81636 Store32_1 [Register(0x3c), Register(0x5c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 3c 5c 

# 81639 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 8163a Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 3c 

# 8163d AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 3c 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# # In IlFunctionId("RpnCalc_handle"), at #562, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# 81643 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
#       # In IlFunctionId("RpnCalc_handle"), at #562, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
20 48 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# # In IlFunctionId("RpnCalc_handle"), at #563, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# 81649 Store32_1 [Register(0x48), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #563, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
23 48 3c 

# 8164c Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #563, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 8164d Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 81650 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #566, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 81656 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #566, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #567, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f U8 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 81659 Store8 [Register(0x59), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #567, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f U8 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
06 59 3c 

# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0
# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 8165c JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 6f 19 08 

# :RpnCalc_handle_if_else_6_37 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_6_37
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n32/0x20u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 81660 LoadImm8 [Register(0x45), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 45 20 

# if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
# 81663 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
15 44 45 

# 81666 JzImm [Label24(RpnCalc_handle_if_true_7_38)]
#       if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
72 6e 16 08 

# 8166a JmpImm [Label24(RpnCalc_handle_if_else_7_39)]
#       if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
70 0a 17 08 

# :RpnCalc_handle_if_true_7_38 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_7_38
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 8166e Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 81671 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 81674 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# 8167a Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #580, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 8167d LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #580, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #581, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0'
# 81680 Cmp8 [Register(0x60), Register(0x59)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #581, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0'
15 60 59 

# 81683 JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #581, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0'
72 06 17 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #581, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 81687 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 3c 

# 8168a AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 3c 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 81690 Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 3c 3c 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 81693 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81696 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 81699 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 8169f Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 816a2 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 816a8 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 816ac LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 816af LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 816b2 ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 816b3 AddCarry32_1 [Register(0x38), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 38 40 40 

# 816b7 AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 816b8 Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 40 

# 816bb Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 816bc Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 816bf Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 816c2 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 816c8 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 816cb Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 816ce AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 816d4 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 816d7 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 3c 

# 816da AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 816e0 Store32_1 [Register(0x3c), Register(0x5c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 3c 5c 

# 816e3 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 816e4 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 3c 

# 816e7 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 3c 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# # In IlFunctionId("RpnCalc_handle"), at #603, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# 816ed LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
#       # In IlFunctionId("RpnCalc_handle"), at #603, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
20 48 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# # In IlFunctionId("RpnCalc_handle"), at #604, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# 816f3 Store32_1 [Register(0x48), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #604, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
23 48 3c 

# 816f6 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #604, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 816f7 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 816fa AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #607, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 81700 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #607, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #608, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f U8 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 81703 Store8 [Register(0x59), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #608, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f U8 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
06 59 3c 

# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0
# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81706 JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 6f 19 08 

# :RpnCalc_handle_if_else_7_39 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_7_39
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n99/0x63u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t47ec <- 0n99/0x63u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
# Number(0n99/0x63u8)
# 8170a LoadImm8 [Register(0x45), Constant8(0x63=99)]
#       t47ec <- 0n99/0x63u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
#       Number(0n99/0x63u8)
04 45 63 

# if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
# 8170d Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
15 44 45 

# 81710 JzImm [Label24(RpnCalc_handle_if_true_8_40)]
#       if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
72 18 17 08 

# 81714 JmpImm [Label24(RpnCalc_handle_if_else_8_41)]
#       if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
70 3c 17 08 

# :RpnCalc_handle_if_true_8_40 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_8_40
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
# 81718 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))
# VoidExpression { expression: Call(Call { function: "stack_init", parameters: [Ident("s")] }) }
# Call(Call { function: "stack_init", parameters: [Ident("s")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }\nCall(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 8171b Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 3c 

# 8171e AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 3c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 81724 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 48 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# 8172a Store32_1 [Register(0x48), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
23 48 3c 

# 8172d Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 8172e AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 38 44 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# # In IlFunctionId("RpnCalc_handle"), at #624, replacing reference to inline_RpnCalc_handle_RpnCalc_init_50_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# 81734 Store32_1 [Register(0x48), Register(0x38)]
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #624, replacing reference to inline_RpnCalc_handle_RpnCalc_init_50_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
23 48 38 

# 81737 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #624, replacing reference to inline_RpnCalc_handle_RpnCalc_init_50_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
24 

# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81738 JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 6f 19 08 

# :RpnCalc_handle_if_else_8_41 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_8_41
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n100/0x64u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tcc42 <- 0n100/0x64u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
# Number(0n100/0x64u8)
# 8173c LoadImm8 [Register(0x45), Constant8(0x64=100)]
#       tcc42 <- 0n100/0x64u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
#       Number(0n100/0x64u8)
04 45 64 

# if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
# 8173f Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
15 44 45 

# 81742 JzImm [Label24(RpnCalc_handle_if_true_9_42)]
#       if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
72 4a 17 08 

# 81746 JmpImm [Label24(RpnCalc_handle_if_else_9_43)]
#       if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
70 d5 18 08 

# :RpnCalc_handle_if_true_9_42 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_9_42
# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8174a LoadImm8 [Register(0x45), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 45 00 

# :RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# RpnCalc_handle_while_predicate_44
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# Ident("stack_count")
# 8174d Copy8 [Register(0x70), Register(0x71)]
#       t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
#       Ident("stack_count")
0b 70 71 

# if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# 81750 Cmp8 [Register(0x71), Register(0x45)]
#       if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
15 71 45 

# 81753 JcImm [Label24(RpnCalc_handle_while_end_46)]
#       if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
71 d1 18 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_while_body_45)], resolved: None }
# :RpnCalc_handle_while_body_45 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# RpnCalc_handle_while_body_45
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("i")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }\nCall(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("i")] })
# 81757 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[a]=td0f3 None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("i")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: []
# 8175a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 81760 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 6a 17 08 00 

# 81766 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 95 2b 08 

# 8176a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# 81770 LoadImm8 [Register(0x60), Constant8(0x3a=58)]
#       inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
04 60 3a 

# None <= call io_write0(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 81773 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #641, replacing reference to inline_RpnCalc_handle_putc_23_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_23_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 81775 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #641, replacing reference to inline_RpnCalc_handle_putc_23_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_23_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #642, replacing reference to inline_RpnCalc_handle_putc_23_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 -> inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 8177b Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #642, replacing reference to inline_RpnCalc_handle_putc_23_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 -> inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #643, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_23_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 8177e LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #643, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_23_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #644, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' -> if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0'
# 81781 Cmp8 [Register(0x60), Register(0x59)]
#       if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #644, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' -> if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0'
15 60 59 

# 81784 JzImm [Label24(inline_RpnCalc_handle_putc_23_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #644, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' -> if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0'
72 a4 17 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #644, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' -> if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_23_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_23_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_23_putc_if_true_0_1
# inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# 81788 LoadImm8 [Register(0x60), Constant8(0x3a=58)]
#       inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
04 60 3a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 8178b Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_23_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: []
# 8178e AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 81794 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 9e 17 08 00 

# 8179a JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 13 22 08 

# 8179e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_23_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_23_putc_if_end_0
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })\nCast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
# 817a4 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       Zero-pad for t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
#       Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
20 3c 00 00 00 00 

# 817aa Copy8 [Register(0x45), Register(0x3c)]
#       t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
#       Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
0b 45 3c 

# inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# 817ad Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
21 40 5c 

# inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
# 817b0 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 817b6 Mul8_16 [Register(0x3c), Register(0x00), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
11 3c 00 3c 

# 817ba LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
04 3e 00 

# 817bd LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
04 3f 00 

# inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
# 817c0 ClearCarry []
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
03 

# 817c1 AddCarry32_1 [Register(0x5c), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
30 5c 3c 3c 

# 817c5 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
31 

# inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# 817c6 Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
22 3c 3c 

# tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# optimized away noop copy Instruction { source: "tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# 817c9 Copy32 [Register(0x3c), Register(0x00)]
#       Arg0[a]=tb336 None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
21 3c 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 104, 108, 112, 113]
# 817cc Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 71 

# 817ce Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 70 

# 817d0 Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 6c 

# 817d2 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 68 

# 817d4 Push8 [Register(0x66)]
#       Saving reg0x66 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 66 

# 817d6 Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 65 

# 817d8 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 64 

# 817da Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 60 

# 817dc Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5f 

# 817de Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5e 

# 817e0 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5d 

# 817e2 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5c 

# 817e4 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 59 

# 817e6 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 58 

# 817e8 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 57 

# 817ea Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 56 

# 817ec Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 55 

# 817ee Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 54 

# 817f0 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 53 

# 817f2 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 52 

# 817f4 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 51 

# 817f6 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 50 

# 817f8 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4f 

# 817fa Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4e 

# 817fc Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4d 

# 817fe Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4c 

# 81800 Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4b 

# 81802 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4a 

# 81804 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 49 

# 81806 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 48 

# 81808 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 45 

# 8180a Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 44 

# 8180c Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 43 

# 8180e Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 42 

# 81810 Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 41 

# 81812 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 40 

# 81814 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3f 

# 81816 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3e 

# 81818 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3d 

# 8181a Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3c 

# 8181c Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3b 

# 8181e Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3a 

# 81820 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 39 

# 81822 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 38 

# 81824 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 8182a StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 34 18 08 00 

# 81830 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 a6 29 08 

# 81834 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 8183a Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 38 

# 8183c Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 39 

# 8183e Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3a 

# 81840 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3b 

# 81842 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3c 

# 81844 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3d 

# 81846 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3e 

# 81848 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3f 

# 8184a Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 40 

# 8184c Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 41 

# 8184e Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 42 

# 81850 Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 43 

# 81852 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 44 

# 81854 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 45 

# 81856 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 48 

# 81858 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 49 

# 8185a Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4a 

# 8185c Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4b 

# 8185e Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4c 

# 81860 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4d 

# 81862 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4e 

# 81864 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4f 

# 81866 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 50 

# 81868 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 51 

# 8186a Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 52 

# 8186c Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 53 

# 8186e Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 54 

# 81870 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 55 

# 81872 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 56 

# 81874 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 57 

# 81876 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 58 

# 81878 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 59 

# 8187a Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5c 

# 8187c Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5d 

# 8187e Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5e 

# 81880 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5f 

# 81882 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 60 

# 81884 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 64 

# 81886 Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 65 

# 81888 Pop8 [Register(0x66)]
#       Restoring reg0x66 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 66 

# 8188a Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 68 

# 8188c Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 6c 

# 8188e Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 70 

# 81890 Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 71 

# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #659, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 81892 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #659, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #661, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_24_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# 81895 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #662, replacing reference to inline_RpnCalc_handle_putc_24_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_24_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 81897 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #662, replacing reference to inline_RpnCalc_handle_putc_24_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_24_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #663, replacing reference to inline_RpnCalc_handle_putc_24_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 -> inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 8189d Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #663, replacing reference to inline_RpnCalc_handle_putc_24_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 -> inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #664, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_24_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 818a0 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #664, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_24_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #665, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' -> if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0'
# 818a3 Cmp8 [Register(0x60), Register(0x59)]
#       if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #665, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' -> if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0'
15 60 59 

# 818a6 JzImm [Label24(inline_RpnCalc_handle_putc_24_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #665, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' -> if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0'
72 c6 18 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #665, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' -> if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_24_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_24_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_24_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# # In IlFunctionId("RpnCalc_handle"), at #667, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 818aa LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #667, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #668, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# 818ad Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       # In IlFunctionId("RpnCalc_handle"), at #668, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: []
# 818b0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 818b6 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c c0 18 08 00 

# 818bc JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 13 22 08 

# 818c0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_24_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_24_putc_if_end_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 818c6 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 818c9 Add8NoCarryIn [Register(0x45), Register(0x00), Register(0x45)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 45 00 45 

# goto RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 818cd JmpImm [Label24(RpnCalc_handle_while_predicate_44)]
#       goto RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 4d 17 08 

# :RpnCalc_handle_while_end_46 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_while_end_46
# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 818d1 JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 6f 19 08 

# :RpnCalc_handle_if_else_9_43 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_9_43
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(0n57/0x39u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# teed8 <- 0n57/0x39u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
# Number(0n57/0x39u8)
# 818d5 LoadImm8 [Register(0x45), Constant8(0x39=57)]
#       teed8 <- 0n57/0x39u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
#       Number(0n57/0x39u8)
04 45 39 

# if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
# 818d8 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
15 44 45 

# 818db JcImm [Label24(RpnCalc_handle_if_true_10_47)]
#       if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
71 e3 18 08 

# 818df JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
70 6f 19 08 

# :RpnCalc_handle_if_true_10_47 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_10_47
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }) }])], else_block: [] }\nComparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(0n48/0x30u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tdcb0 <- 0n48/0x30u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
# Number(0n48/0x30u8)
# 818e3 LoadImm8 [Register(0x45), Constant8(0x30=48)]
#       tdcb0 <- 0n48/0x30u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
#       Number(0n48/0x30u8)
04 45 30 

# if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
# 818e6 Cmp8 [Register(0x45), Register(0x44)]
#       if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
15 45 44 

# 818e9 JcImm [Label24(RpnCalc_handle_if_true_0_50)]
#       if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
71 f1 18 08 

# 818ed JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
70 6f 19 08 

# :RpnCalc_handle_if_true_0_50 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_50
# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 818f1 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 818f4 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000048=72)]
#       tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 38 48 00 00 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 818fa LoadImm8 [Register(0x71), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 71 01 

# mem[tfdb7] <- ta11a U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# 818fd Store8 [Register(0x71), Register(0x38)]
#       mem[tfdb7] <- ta11a U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
06 71 38 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 81900 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 81903 Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 81906 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 8190c Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 8190f Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 81912 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 81918 Load32 [Register(0x48), Register(0x3c)]
#       td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 48 3c 

# inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# 8191b Copy32 [Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
21 3c 38 

# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 8191e ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 8191f AddCarry32_1 [Register(0x38), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 38 38 38 

# 81923 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 81924 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 81925 AddCarry32_1 [Register(0x38), Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 38 38 3c 

# 81929 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# 8192a ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
03 

# 8192b AddCarry32_1 [Register(0x3c), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
30 3c 3c 3c 

# 8192f AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
31 

# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 81930 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 81931 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 3c 38 38 

# 81935 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# optimized away noop copy Instruction { source: "tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# 81936 Store32_1 [Register(0x38), Register(0x48)]
#       mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
23 38 48 

# 81939 Store32_2 []
#       mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
24 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 8193a Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 8193d Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 81940 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 81946 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 81949 Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 8194c AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# PtrFieldDeref("c", "num")
# 81952 Load32 [Register(0x48), Register(0x3c)]
#       td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
22 48 3c 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
# Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) })\nCast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }\nArithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t9dae <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
# Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
# 81955 LoadImm8 [Register(0x00), Constant8(0xd0=208)]
#       t9dae <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
#       Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
04 00 d0 

# 81958 Add8NoCarryIn [Register(0x44), Register(0x00), Register(0x45)]
#       t9dae <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
#       Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
14 44 00 45 

# tdc11 U32 <- t9dae U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
# 8195c LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       Zero-pad for tdc11 U32 <- t9dae U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
20 38 00 00 00 00 

# 81962 Copy8 [Register(0x45), Register(0x38)]
#       tdc11 U32 <- t9dae U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
0b 45 38 

# tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# 81965 ClearCarry []
#       tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
03 

# 81966 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
30 3c 38 38 

# 8196a AddCarry32_2 []
#       tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
31 

# mem[t6e8e] <- tbdb5 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# 8196b Store32_1 [Register(0x38), Register(0x48)]
#       mem[t6e8e] <- tbdb5 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
23 38 48 

# 8196e Store32_2 []
#       mem[t6e8e] <- tbdb5 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
24 

# :RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23
# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# Number(0n1/0x01u8)
# 8196f LoadImm8 [Register(0x71), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
#       Number(0n1/0x01u8)
04 71 01 

# return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# 81972 Copy8 [Register(0x71), Register(0x00)]
#       return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
0b 71 00 

# 81975 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_RpnCalc_handle None
# function_end_RpnCalc_handle
# Unreachable None
# 81977 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :RpnCalc_run
# Ret Some(U8)
# Arg0=calc
# Var calc (Arg0 calc Ptr(Struct("RpnCalc"))) Reg(U32) Some([116, 117, 118, 119])
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([124, 125, 126, 127]) Number(0n987392/0x000f1100u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([128])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed (t44ed Ident("value")) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([128]) Number(0n0/0x00u8)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 (tae11 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([136])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 (tb702 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }) Reg(U32) Some([140, 141, 142, 143]) Number(0n987648/0x000f1200u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([132, 133, 134, 135]) Number(0n987652/0x000f1204u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 (te468 Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([128])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n (Arg1 n Number(U8)) Reg(U8) Some([136])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 (t2187 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([144])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([140, 141, 142, 143])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 (tf3c4 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_t0 (static "keyboard_enable" addr) Reg(U32) Some([124, 125, 126, 127]) Number(0n987144/0x000f1008u32)
# Var inline_RpnCalc_run_getchar_39_t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_tb816 (tb816 TtyIn) Reg(U8) Some([128])
# Var inline_RpnCalc_run_getchar_39_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_te3c4 (te3c4 Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_teb6e (teb6e Ident("keyboard_enable")) Reg(U8) Some([120])
# Var result (Local result Number(U8) Reg(U8)) Reg(U8) Some([120])
# Var t57fd (t57fd Ident("result")) Reg(U8) Some([120])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([120])
# 8197c Copy32 [Register(0x00), Register(0x74)]
#       Save function parameter 'calc' registers [0, 1, 2, 3] to locals [116, 117, 118, 119].
21 00 74 

# :RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# RpnCalc_run_while_predicate_0
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_run"), at #1, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# 8197f LoadImm8 [Register(0x80), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_run"), at #1, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
04 80 00 

# if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_run"), at #2, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' -> if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run'
# 81982 Cmp8 [Register(0x80), Register(0x80)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #2, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' -> if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run'
15 80 80 

# 81985 JzImm [Label24(RpnCalc_run_while_body_1)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #2, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' -> if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run'
72 8d 19 08 

# 81989 JmpImm [Label24(function_end_RpnCalc_run)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #2, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' -> if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run'
70 ee 1a 08 

# :RpnCalc_run_while_body_1 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# RpnCalc_run_while_body_1
# inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(19,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8198d LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(19,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 78 00 

# :inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_RpnCalc_run_getchar_39_getchar_while_predicate_0
# inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))\nWhile { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }])], else_block: [] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_run"), at #7, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# 81990 LoadImm8 [Register(0x80), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_run"), at #7, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
04 80 00 

# if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_run"), at #8, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' -> if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'
# 81993 Cmp8 [Register(0x78), Register(0x80)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #8, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' -> if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'
15 78 80 

# 81996 JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_body_1)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #8, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' -> if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'
72 9e 19 08 

# 8199a JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_end_2)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #8, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' -> if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'
70 69 1a 08 

# :inline_RpnCalc_run_getchar_39_getchar_while_body_1 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_RpnCalc_run_getchar_39_getchar_while_body_1
# Some(inline_RpnCalc_run_getchar_39_t861f) <= call io_ready_to_read() Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 8199e IoReadyToRead [Register(0x78)]
#       ReadyToRead
79 78 

# inline_RpnCalc_run_getchar_39_te3c4 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))
# 819a0 AndImm8 [Register(0x78), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_te3c4 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))
18 78 01 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_run"), at #12, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# 819a3 LoadImm8 [Register(0x80), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_run"), at #12, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
04 80 00 

# if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_run"), at #13, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' -> if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'
# 819a6 Cmp8 [Register(0x78), Register(0x80)]
#       if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #13, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' -> if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'
15 78 80 

# 819a9 JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_else_0_5)]
#       if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #13, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' -> if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'
72 e4 19 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_run\"), at #13, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' -> if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_if_true_0_4)], resolved: None }
# :inline_RpnCalc_run_getchar_39_getchar_if_true_0_4 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# inline_RpnCalc_run_getchar_39_getchar_if_true_0_4
# inline_RpnCalc_run_getchar_39_tb816 <- ttyin Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# TtyIn
# 819ad In0 [Register(0x80)]
#       inline_RpnCalc_run_getchar_39_tb816 <- ttyin Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       TtyIn
60 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32 `.
# # In IlFunctionId("RpnCalc_run"), at #16, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 
# 819af LoadImm32 [Register(0x7c), Constant32(0x000f1100=987392)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32 `.
#       # In IlFunctionId("RpnCalc_run"), at #16, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 
20 7c 00 11 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# 819b5 Copy8 [Register(0x80), Register(0x88)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
0b 80 88 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# # In IlFunctionId("RpnCalc_run"), at #18, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 
# 819b8 LoadImm32 [Register(0x84), Constant32(0x000f1204=987652)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
#       # In IlFunctionId("RpnCalc_run"), at #18, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 
20 84 04 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# # In IlFunctionId("RpnCalc_run"), at #19, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
# 819be Load8 [Register(0x84), Register(0x90)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       # In IlFunctionId("RpnCalc_run"), at #19, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
05 84 90 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# 819c1 LoadImm32 [Register(0x8c), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
20 8c 00 00 00 00 

# 819c7 Copy8 [Register(0x90), Register(0x8c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
0b 90 8c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# # In IlFunctionId("RpnCalc_run"), at #21, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)
# 819ca ClearCarry []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       # In IlFunctionId("RpnCalc_run"), at #21, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)
03 

# 819cb AddCarry32_1 [Register(0x7c), Register(0x8c), Register(0x7c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       # In IlFunctionId("RpnCalc_run"), at #21, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)
30 7c 8c 7c 

# 819cf AddCarry32_2 []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       # In IlFunctionId("RpnCalc_run"), at #21, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)
31 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 819d0 Store8 [Register(0x88), Register(0x7c)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 88 7c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# # In IlFunctionId("RpnCalc_run"), at #23, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
# 819d3 Load8 [Register(0x84), Register(0x90)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
#       # In IlFunctionId("RpnCalc_run"), at #23, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
05 84 90 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# 819d6 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
04 00 01 

# 819d9 Add8NoCarryIn [Register(0x90), Register(0x00), Register(0x78)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
14 90 00 78 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# # In IlFunctionId("RpnCalc_run"), at #25, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 -> mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8
# 819dd Store8 [Register(0x78), Register(0x84)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       # In IlFunctionId("RpnCalc_run"), at #25, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 -> mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8
06 78 84 

# goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 819e0 JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_end_3)]
#       goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 0d 1a 08 

# :inline_RpnCalc_run_getchar_39_getchar_if_else_0_5 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_else_0_5
# inline_RpnCalc_run_getchar_39_t0 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# Ident("keyboard_enable")
# 819e4 LoadImm32 [Register(0x7c), Constant32(0x000f1008=987144)]
#       inline_RpnCalc_run_getchar_39_t0 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       Ident("keyboard_enable")
20 7c 08 10 0f 00 

# inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# Ident("keyboard_enable")
# 819ea Load8 [Register(0x7c), Register(0x78)]
#       inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       Ident("keyboard_enable")
05 7c 78 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_run"), at #30, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# 819ed LoadImm8 [Register(0x80), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_run"), at #30, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
04 80 00 

# if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_run"), at #31, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' -> if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3'
# 819f0 Cmp8 [Register(0x78), Register(0x80)]
#       if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #31, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' -> if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3'
15 78 80 

# 819f3 JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_end_3)]
#       if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #31, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' -> if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3'
72 0d 1a 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' Some('/lutcomp/programs/lib/stdio.j':(21,5))\nComparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_run\"), at #31, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' -> if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_if_true_1_6)], resolved: None }
# :inline_RpnCalc_run_getchar_39_getchar_if_true_1_6 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_true_1_6
# None <= call Keyboard_poll() Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }
# Call(Call { function: "Keyboard_poll", parameters: [] })
# Registers used by this function: {116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144}
# Registers used by callee tree: {24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52}
# Registers to save: []
# 819f7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c fc ff ff ff 

# 819fd StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:Keyboard_poll))
25 0c 07 1a 08 00 

# 81a03 JmpImm [Label24(:Keyboard_poll)]
#       PseudoCall(Label24(:Keyboard_poll))
70 43 08 08 

# 81a07 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c 04 00 00 00 

# :inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_end_3
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 `.
# 81a0d LoadImm32 [Register(0x7c), Constant32(0x000f1100=987392)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 `.
20 7c 00 11 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# 81a13 LoadImm32 [Register(0x8c), Constant32(0x000f1200=987648)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
20 8c 00 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# 81a19 Load8 [Register(0x8c), Register(0x88)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
05 8c 88 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 `.
# 81a1c LoadImm32 [Register(0x84), Constant32(0x000f1204=987652)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 `.
20 84 04 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 81a22 Load8 [Register(0x84), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 84 80 

# if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 81a25 Cmp8 [Register(0x88), Register(0x80)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 88 80 

# 81a28 JzImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 30 1a 08 

# 81a2c JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 3a 1a 08 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# 81a30 LoadImm8 [Register(0x80), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
04 80 00 

# inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 81a33 Copy8 [Register(0x80), Register(0x78)]
#       inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
0b 80 78 

# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 81a36 JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop)]
#       goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
70 65 1a 08 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# 81a3a LoadImm32 [Register(0x8c), Constant32(0x000f1200=987648)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
20 8c 00 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# 81a40 Load8 [Register(0x8c), Register(0x88)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
05 8c 88 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# 81a43 LoadImm32 [Register(0x84), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
20 84 00 00 00 00 

# 81a49 Copy8 [Register(0x88), Register(0x84)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
0b 88 84 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# 81a4c ClearCarry []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
03 

# 81a4d AddCarry32_1 [Register(0x7c), Register(0x84), Register(0x7c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
30 7c 84 7c 

# 81a51 AddCarry32_2 []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
31 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 81a52 Load8 [Register(0x7c), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 7c 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first")
# 81a55 Load8 [Register(0x8c), Register(0x88)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first")
05 8c 88 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# 81a58 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
04 00 01 

# 81a5b Add8NoCarryIn [Register(0x88), Register(0x00), Register(0x78)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
14 88 00 78 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# 81a5f Store8 [Register(0x78), Register(0x8c)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
06 78 8c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 81a62 Copy8 [Register(0x80), Register(0x78)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 80 78 

# inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop None
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop
# goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 81a65 JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_predicate_0)]
#       goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 90 19 08 

# :inline_RpnCalc_run_getchar_39_getchar_while_end_2 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_while_end_2
# inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# optimized away noop copy Instruction { source: "ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))\nAssign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }\nCall(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# 81a69 Copy32 [Register(0x74), Register(0x00)]
#       Arg0[c]=calc Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
21 74 00 

# 81a6c Copy8 [Register(0x78), Register(0x04)]
#       Arg1[ch]=tdcd9 Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0b 78 04 

# Registers used by this function: {116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: [116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 140, 141, 142, 144]
# 81a6f Push8 [Register(0x90)]
#       Saving reg0x90 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 90 

# 81a71 Push8 [Register(0x8e)]
#       Saving reg0x8e before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8e 

# 81a73 Push8 [Register(0x8d)]
#       Saving reg0x8d before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8d 

# 81a75 Push8 [Register(0x8c)]
#       Saving reg0x8c before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8c 

# 81a77 Push8 [Register(0x88)]
#       Saving reg0x88 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 88 

# 81a79 Push8 [Register(0x87)]
#       Saving reg0x87 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 87 

# 81a7b Push8 [Register(0x86)]
#       Saving reg0x86 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 86 

# 81a7d Push8 [Register(0x85)]
#       Saving reg0x85 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 85 

# 81a7f Push8 [Register(0x84)]
#       Saving reg0x84 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 84 

# 81a81 Push8 [Register(0x80)]
#       Saving reg0x80 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 80 

# 81a83 Push8 [Register(0x7f)]
#       Saving reg0x7f before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7f 

# 81a85 Push8 [Register(0x7e)]
#       Saving reg0x7e before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7e 

# 81a87 Push8 [Register(0x7d)]
#       Saving reg0x7d before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7d 

# 81a89 Push8 [Register(0x7c)]
#       Saving reg0x7c before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7c 

# 81a8b Push8 [Register(0x78)]
#       Saving reg0x78 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 78 

# 81a8d Push8 [Register(0x77)]
#       Saving reg0x77 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 77 

# 81a8f Push8 [Register(0x76)]
#       Saving reg0x76 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 76 

# 81a91 Push8 [Register(0x75)]
#       Saving reg0x75 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 75 

# 81a93 Push8 [Register(0x74)]
#       Saving reg0x74 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 74 

# 81a95 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:RpnCalc_handle))
32 0c fc ff ff ff 

# 81a9b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:RpnCalc_handle))
25 0c a5 1a 08 00 

# 81aa1 JmpImm [Label24(:RpnCalc_handle)]
#       PseudoCall(Label24(:RpnCalc_handle))
70 89 09 08 

# 81aa5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:RpnCalc_handle))
32 0c 04 00 00 00 

# 81aab Pop8 [Register(0x74)]
#       Restoring reg0x74 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 74 

# 81aad Pop8 [Register(0x75)]
#       Restoring reg0x75 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 75 

# 81aaf Pop8 [Register(0x76)]
#       Restoring reg0x76 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 76 

# 81ab1 Pop8 [Register(0x77)]
#       Restoring reg0x77 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 77 

# 81ab3 Pop8 [Register(0x78)]
#       Restoring reg0x78 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 78 

# 81ab5 Pop8 [Register(0x7c)]
#       Restoring reg0x7c after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7c 

# 81ab7 Pop8 [Register(0x7d)]
#       Restoring reg0x7d after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7d 

# 81ab9 Pop8 [Register(0x7e)]
#       Restoring reg0x7e after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7e 

# 81abb Pop8 [Register(0x7f)]
#       Restoring reg0x7f after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7f 

# 81abd Pop8 [Register(0x80)]
#       Restoring reg0x80 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 80 

# 81abf Pop8 [Register(0x84)]
#       Restoring reg0x84 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 84 

# 81ac1 Pop8 [Register(0x85)]
#       Restoring reg0x85 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 85 

# 81ac3 Pop8 [Register(0x86)]
#       Restoring reg0x86 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 86 

# 81ac5 Pop8 [Register(0x87)]
#       Restoring reg0x87 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 87 

# 81ac7 Pop8 [Register(0x88)]
#       Restoring reg0x88 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 88 

# 81ac9 Pop8 [Register(0x8c)]
#       Restoring reg0x8c after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8c 

# 81acb Pop8 [Register(0x8d)]
#       Restoring reg0x8d after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8d 

# 81acd Pop8 [Register(0x8e)]
#       Restoring reg0x8e after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8e 

# 81acf Pop8 [Register(0x90)]
#       Restoring reg0x90 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 90 

# 81ad1 Copy8 [Register(0x00), Register(0x78)]
#       Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0b 00 78 

# t57fd <- result U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
# Ident("result")
# optimized away noop copy Instruction { source: "t57fd <- result U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"result\"), right: Number(0n0/0x00u8) }\nIdent(\"result\")\n", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_run"), at #64, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# 81ad4 LoadImm8 [Register(0x80), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_run"), at #64, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
04 80 00 

# if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_run"), at #65, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' -> if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3'
# 81ad7 Cmp8 [Register(0x78), Register(0x80)]
#       if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #65, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' -> if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3'
15 78 80 

# 81ada JzImm [Label24(RpnCalc_run_if_true_0_4)]
#       if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #65, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' -> if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3'
72 e2 1a 08 

# 81ade JmpImm [Label24(RpnCalc_run_if_end_3)]
#       if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #65, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' -> if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3'
70 ea 1a 08 

# :RpnCalc_run_if_true_0_4 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# RpnCalc_run_if_true_0_4
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_run"), at #67, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# 81ae2 LoadImm8 [Register(0x80), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_run"), at #67, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
04 80 00 

# return Some(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# # In IlFunctionId("RpnCalc_run"), at #68, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f)
# 81ae5 Copy8 [Register(0x80), Register(0x00)]
#       return Some(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       # In IlFunctionId("RpnCalc_run"), at #68, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f)
0b 80 00 

# 81ae8 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :RpnCalc_run_if_end_3 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_if_end_3
# goto RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 81aea JmpImm [Label24(RpnCalc_run_while_predicate_0)]
#       goto RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
70 7f 19 08 

# :function_end_RpnCalc_run Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# function_end_RpnCalc_run
# Unreachable None
# 81aee Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :delay
# Ret None
# Arg0=x
# Var t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([148, 149, 150, 151]) Number(0n0/0x00000000u32)
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([152, 153, 154, 155])
# Var x (Arg0 x Number(U32)) Reg(U32) Some([152, 153, 154, 155])
# 81af3 Copy32 [Register(0x00), Register(0x98)]
#       Save function parameter 'x' registers [0, 1, 2, 3] to locals [152, 153, 154, 155].
21 00 98 

# :delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# delay_while_predicate_0
# tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 81af6 LoadImm32 [Register(0x94), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 94 00 00 00 00 

# if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# 81afc Cmp8 [Register(0x9b), Register(0x97)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
15 9b 97 

# 81aff Cmp8IfZero [Register(0x9a), Register(0x96)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 9a 96 

# 81b02 Cmp8IfZero [Register(0x99), Register(0x95)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 99 95 

# 81b05 Cmp8IfZero [Register(0x98), Register(0x94)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 98 94 

# 81b08 JzImm [Label24(delay_while_end_2)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
72 16 1b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }\n", opcode: JmpImm, args: [Label24(delay_while_body_1)], resolved: None }
# :delay_while_body_1 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# delay_while_body_1
# tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
# Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))\nAssign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }\nArithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
# Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
# 81b0c AddImm32IgnoreCarry [Register(0x98), Constant32(0xffffffff=4294967295)]
#       x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/delay.j':(2,5))
#       Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
32 98 ff ff ff ff 

# goto delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
# 81b12 JmpImm [Label24(delay_while_predicate_0)]
#       goto delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
70 f6 1a 08 

# :delay_while_end_2 Some('/lutcomp/programs/lib/delay.j':(2,5))
# delay_while_end_2
# return None None
# Return { value: None }
# 81b16 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_delay None
# function_end_delay
# Unreachable None
# 81b18 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :div32
# Ret Some(U32)
# Arg0=a
# Arg1=b
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(U32)) Reg(U32) Some([156, 157, 158, 159])
# Var b (Arg1 b Number(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var hi (Local hi Number(U32) Reg(U32)) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_a (Arg0 a Number(U32)) Reg(U32) Some([156, 157, 158, 159])
# Var inline_div32_div16_43_b (Arg1 b Number(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_hi (Local hi Number(U32) Reg(U32)) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_a (Arg0 a Number(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_b (Arg1 b Number(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t3585 (t3585 Ident("e")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 (t45f5 Ident("d")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([185])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t8792 (t8792 Ident("a")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([185])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([186]) Number(0n0/0x00u8)
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tac13 (tac13 Ident("c")) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tace9 (tace9 Ident("b")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([188, 189, 190, 191])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([192])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_a (Arg0 a Number(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 (t17d0 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) Reg(U8) Some([192])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 (t1aa2 Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))) Reg(U8) Some([192])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t32ea (t32ea Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))) Reg(U8) Some([192])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([192])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([193])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t4954 (t4954 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))) Reg(U8) Some([192])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t837a (t837a Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))) Reg(U8) Some([192])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t878b (t878b Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))) Reg(U8) Some([192])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t8792 (t8792 Ident("a")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t9170 (t9170 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) Reg(U8) Some([193])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t965c (t965c Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))) Reg(U8) Some([192])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 (tafc1 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))) Reg(U8) Some([192])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tbe (tbe Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))) Reg(U8) Some([192])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c (tdb4c Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) Reg(U8) Some([192])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe (tdbbe Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))) Reg(U8) Some([192])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f (tdc9f Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))) Reg(U8) Some([192])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tf435 (tf435 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))) Reg(U8) Some([192])
# Var inline_div32_div16_43_lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([196, 197, 198, 199])
# Var inline_div32_div16_43_mid (Local mid Number(U32) Reg(U32)) Reg(U32) Some([200, 201, 202, 203])
# Var inline_div32_div16_43_r (Local r Number(U32) Reg(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_t1506 (t1506 Ident("lo")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([204])
# Var inline_div32_div16_43_t4299 (t4299 Index("x", Number(0n3/0x03u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_t5508 (t5508 Ident("hi")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_t5be0 (t5be0 Index("b", Number(0n0/0x00u8))) Reg(U8) Some([205])
# Var inline_div32_div16_43_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([168, 169, 170, 171]) Number(0n0/0x00000000u32)
# Var inline_div32_div16_43_t8792 (t8792 Ident("a")) Reg(U32) Some([156, 157, 158, 159])
# Var inline_div32_div16_43_t9c15 (t9c15 Number(0n256/0x00000100u32)) Reg(U32) Some([164, 165, 166, 167]) Number(0n256/0x00000100u32)
# Var inline_div32_div16_43_ta670 (ta670 Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))) Reg(U8) Some([204])
# Var inline_div32_div16_43_tace9 (tace9 Ident("b")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_tad57 (tad57 Ident("x")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_taee0 (taee0 Ident("r")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_tb0ef (tb0ef Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) Reg(U32) Some([156, 157, 158, 159])
# Var inline_div32_div16_43_tcd34 (tcd34 Index("x", Number(0n2/0x02u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_tf1d1 (tf1d1 Arithmetic(Add, Ident("lo"), Ident("hi"))) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_tfd7e (tfd7e Ident("mid")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_x (Local x Number(U32) Reg(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_shiftright1_44_a (Arg0 a Number(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_shiftright1_44_t17d0 (t17d0 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_44_t1aa2 (t1aa2 Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_44_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t32ea (t32ea Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_44_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_44_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([193])
# Var inline_div32_shiftright1_44_t4954 (t4954 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_44_t837a (t837a Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_44_t878b (t878b Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_44_t8792 (t8792 Ident("a")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_shiftright1_44_t9170 (t9170 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) Reg(U8) Some([193])
# Var inline_div32_shiftright1_44_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t965c (t965c Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_44_tafc1 (tafc1 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_44_tbe (tbe Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_44_tdb4c (tdb4c Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_44_tdbbe (tdbbe Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_44_tdc9f (tdc9f Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_44_tf435 (tf435 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_45_a (Arg0 a Number(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_shiftright1_45_t17d0 (t17d0 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_45_t1aa2 (t1aa2 Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_45_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t32ea (t32ea Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_45_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_45_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([193])
# Var inline_div32_shiftright1_45_t4954 (t4954 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_45_t837a (t837a Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_45_t878b (t878b Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_45_t8792 (t8792 Ident("a")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_shiftright1_45_t9170 (t9170 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) Reg(U8) Some([193])
# Var inline_div32_shiftright1_45_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t965c (t965c Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_45_tafc1 (tafc1 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_45_tbe (tbe Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_45_tdb4c (tdb4c Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_45_tdbbe (tdbbe Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_45_tdc9f (tdc9f Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))) Reg(U8) Some([192])
# Var inline_div32_shiftright1_45_tf435 (tf435 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))) Reg(U8) Some([192])
# Var lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var mid (Local mid Number(U32) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var r (Local r Number(U32) Reg(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var t1506 (t1506 Ident("lo")) Reg(U32) Some([168, 169, 170, 171])
# Var t3803 (t3803 Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) Reg(U32) Some([168, 169, 170, 171])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }) Reg(U32) Some([168, 169, 170, 171])
# Var t4917 (t4917 Number(0n65536/0x00010000u32)) Reg(U32) Some([164, 165, 166, 167]) Number(0n65536/0x00010000u32)
# Var t5508 (t5508 Ident("hi")) Reg(U32) Some([164, 165, 166, 167])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([156, 157, 158, 159])
# Var t9599 (t9599 Call(Call { function: "shiftright1", parameters: [Ident("lo")] })) Reg(U32) Some([208, 209, 210, 211])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([160, 161, 162, 163])
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([168, 169, 170, 171])
# Var taee0 (taee0 Ident("r")) Reg(U32) Some([168, 169, 170, 171])
# Var tb608 (tb608 AddressOf(Ident("x64"))) Reg(U32) Some([168, 169, 170, 171])
# Var tb973 (tb973 LocalFieldDeref("x64", "hi")) Reg(U32) Some([176, 177, 178, 179])
# Var te546 (te546 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }) Reg(U32) Some([212, 213, 214, 215])
# Var te81f (te81f Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([156, 157, 158, 159])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([212, 213, 214, 215])
# Var tfd7e (tfd7e Ident("mid")) Reg(U32) Some([172, 173, 174, 175])
# Var x (Local x Number(U32) Reg(U32)) Reg(U32) Some([168, 169, 170, 171])
# 81b1d AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       reserve 8 bytes of stack space for locals
32 0c f8 ff ff ff 

# 81b23 Copy32 [Register(0x00), Register(0x9c)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [156, 157, 158, 159].
21 00 9c 

# 81b26 Copy32 [Register(0x04), Register(0xa0)]
#       Save function parameter 'b' registers [4, 5, 6, 7] to locals [160, 161, 162, 163].
21 04 a0 

# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
# 81b29 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
32 0c f8 ff ff ff 

# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_end_0' Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# 81b2f Cmp8 [Register(0xa3), Register(0x9f)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_end_0' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
15 a3 9f 

# 81b32 Cmp8IfZero [Register(0xa2), Register(0x9e)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_end_0' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 a2 9e 

# 81b35 Cmp8IfZero [Register(0xa1), Register(0x9d)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_end_0' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 a1 9d 

# 81b38 Cmp8IfZero [Register(0xa0), Register(0x9c)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_end_0' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 a0 9c 

# 81b3b JcImm [Label24(div32_if_end_0)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_end_0' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
71 56 1b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_end_0' Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_1)], resolved: None }
# :div32_if_true_0_1 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# div32_if_true_0_1
# inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# Number(0n0/0x00000000u32)
# # In IlFunctionId("div32"), at #5, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). t60ec <- 0n0/0x00000000u32  -> inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
# 81b3f LoadImm32 [Register(0xa8), Constant32(0x00000000=0)]
#       inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
#       Number(0n0/0x00000000u32)
#       # In IlFunctionId("div32"), at #5, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). t60ec <- 0n0/0x00000000u32  -> inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
20 a8 00 00 00 00 

# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# 81b45 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
32 0c 08 00 00 00 

# return Some(inline_div32_div16_43_t60ec) Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# # In IlFunctionId("div32"), at #7, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). return Some(t60ec) -> return Some(inline_div32_div16_43_t60ec)
# 81b4b Copy32 [Register(0xa8), Register(0x00)]
#       return Some(inline_div32_div16_43_t60ec) Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
#       # In IlFunctionId("div32"), at #7, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). return Some(t60ec) -> return Some(inline_div32_div16_43_t60ec)
21 a8 00 

# 81b4e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 81b54 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :div32_if_end_0 Some('/lutcomp/programs/lib/div.j':(67,5))
# div32_if_end_0
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# t4917 <- 0n65536/0x00010000u32  Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
# Number(0n65536/0x00010000u32)
# 81b56 LoadImm32 [Register(0xa4), Constant32(0x00010000=65536)]
#       t4917 <- 0n65536/0x00010000u32  Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
#       Number(0n65536/0x00010000u32)
20 a4 00 00 01 00 

# if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_end_3' Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
# 81b5c Cmp8 [Register(0xa7), Register(0x9f)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_end_3' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
15 a7 9f 

# 81b5f Cmp8IfZero [Register(0xa6), Register(0x9e)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_end_3' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
16 a6 9e 

# 81b62 Cmp8IfZero [Register(0xa5), Register(0x9d)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_end_3' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
16 a5 9d 

# 81b65 Cmp8IfZero [Register(0xa4), Register(0x9c)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_end_3' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
16 a4 9c 

# 81b68 JcImm [Label24(div32_if_end_3)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_end_3' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
71 ec 1d 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_end_3' Some('/lutcomp/programs/lib/div.j':(71,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_4)], resolved: None }
# :div32_if_true_0_4 Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# div32_if_true_0_4
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_a <- t8792 U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_a <- t8792 U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_div32_div16_43_b <- tace9 U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_b <- tace9 U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_end_0' Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# 81b6c Cmp8 [Register(0xa3), Register(0x9f)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_end_0' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
15 a3 9f 

# 81b6f Cmp8IfZero [Register(0xa2), Register(0x9e)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_end_0' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 a2 9e 

# 81b72 Cmp8IfZero [Register(0xa1), Register(0x9d)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_end_0' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 a1 9d 

# 81b75 Cmp8IfZero [Register(0xa0), Register(0x9c)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_end_0' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 a0 9c 

# 81b78 JcImm [Label24(inline_div32_div16_43_div16_if_end_0)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_end_0' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
71 89 1b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_end_0' Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_1)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_1 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_1
# inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# Number(0n0/0x00000000u32)
# 81b7c LoadImm32 [Register(0xa8), Constant32(0x00000000=0)]
#       inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
#       Number(0n0/0x00000000u32)
20 a8 00 00 00 00 

# te81f <- inline_div32_div16_43_t60ec U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# 81b82 Copy32 [Register(0xa8), Register(0x9c)]
#       te81f <- inline_div32_div16_43_t60ec U32 Some('/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
21 a8 9c 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# 81b85 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
70 db 1d 08 

# :inline_div32_div16_43_div16_if_end_0 Some('/lutcomp/programs/lib/div.j':(21,5))
# inline_div32_div16_43_div16_if_end_0
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index(\"a\", Number(0n0/0x00u8)), Index(\"b\", Number(0n0/0x00u8))) }) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Number(0n256/0x00000100u32)
# 81b89 LoadImm32 [Register(0xa4), Constant32(0x00000100=256)]
#       inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
#       Number(0n256/0x00000100u32)
20 a4 00 01 00 00 

# if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_end_3' Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# 81b8f Cmp8 [Register(0xa7), Register(0x9f)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_end_3' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
15 a7 9f 

# 81b92 Cmp8IfZero [Register(0xa6), Register(0x9e)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_end_3' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 a6 9e 

# 81b95 Cmp8IfZero [Register(0xa5), Register(0x9d)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_end_3' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 a5 9d 

# 81b98 Cmp8IfZero [Register(0xa4), Register(0x9c)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_end_3' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 a4 9c 

# 81b9b JcImm [Label24(inline_div32_div16_43_div16_if_end_3)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_end_3' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
71 b6 1b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_end_3' Some('/lutcomp/programs/lib/div.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index(\"a\", Number(0n0/0x00u8)), Index(\"b\", Number(0n0/0x00u8))) }) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_4)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_4 Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_4
# inline_div32_div16_43_t3404 <- inline_div32_div16_43_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
# Index("a", Number(0n0/0x00u8))
# 81b9f Copy8 [Register(0x9c), Register(0xcc)]
#       inline_div32_div16_43_t3404 <- inline_div32_div16_43_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
#       Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
#       Index("a", Number(0n0/0x00u8))
0b 9c cc 

# inline_div32_div16_43_t5be0 <- inline_div32_div16_43_b[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
# Index("b", Number(0n0/0x00u8))
# 81ba2 Copy8 [Register(0xa0), Register(0xcd)]
#       inline_div32_div16_43_t5be0 <- inline_div32_div16_43_b[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
#       Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
#       Index("b", Number(0n0/0x00u8))
0b a0 cd 

# inline_div32_div16_43_ta670 <- inline_div32_div16_43_t3404 Divide Var(inline_div32_div16_43_t5be0) Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
# 81ba5 Divide8 [Register(0xcc), Register(0xcd), Register(0xcc)]
#       inline_div32_div16_43_ta670 <- inline_div32_div16_43_t3404 Divide Var(inline_div32_div16_43_t5be0) Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
#       Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
17 cc cd cc 

# inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# 81ba9 LoadImm32 [Register(0x9c), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
20 9c 00 00 00 00 

# 81baf Copy8 [Register(0xcc), Register(0x9c)]
#       inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
0b cc 9c 

# te81f <- inline_div32_div16_43_tb0ef U32 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# optimized away noop copy Instruction { source: "te81f <- inline_div32_div16_43_tb0ef U32 Some('/lutcomp/programs/lib/div.j':(25,5))\nReturn { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index(\"a\", Number(0n0/0x00u8)), Index(\"b\", Number(0n0/0x00u8))) }) }\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# 81bb2 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
70 db 1d 08 

# :inline_div32_div16_43_div16_if_end_3 Some('/lutcomp/programs/lib/div.j':(25,5))
# inline_div32_div16_43_div16_if_end_3
# inline_div32_div16_43_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(29,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 81bb6 LoadImm32 [Register(0xc4), Constant32(0x00000000=0)]
#       inline_div32_div16_43_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(29,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 c4 00 00 00 00 

# inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  Some('/lutcomp/programs/lib/div.j':(30,5))
# Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0n65535/0x0000ffffu32) }
# Number(0n65535/0x0000ffffu32)
# 81bbc LoadImm32 [Register(0xa4), Constant32(0x0000ffff=65535)]
#       inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  Some('/lutcomp/programs/lib/div.j':(30,5))
#       Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0n65535/0x0000ffffu32) }
#       Number(0n65535/0x0000ffffu32)
20 a4 ff ff 00 00 

# :inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# inline_div32_div16_43_div16_while_predicate_6
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("lo")
# 81bc2 Copy32 [Register(0xc4), Register(0xa8)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
#       Ident("lo")
21 c4 a8 

# inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("hi")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# 81bc5 Cmp8 [Register(0xa7), Register(0xab)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
15 a7 ab 

# 81bc8 Cmp8IfZero [Register(0xa6), Register(0xaa)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 a6 aa 

# 81bcb Cmp8IfZero [Register(0xa5), Register(0xa9)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 a5 a9 

# 81bce Cmp8IfZero [Register(0xa4), Register(0xa8)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 a4 a8 

# 81bd1 JcImm [Label24(inline_div32_div16_43_div16_while_end_8)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
71 d5 1d 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_while_body_7)], resolved: None }
# :inline_div32_div16_43_div16_while_body_7 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# inline_div32_div16_43_div16_while_body_7
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# Ident("lo")
# 81bd5 Copy32 [Register(0xc4), Register(0xa8)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
#       Ident("lo")
21 c4 a8 

# inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# Ident("hi")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }\nCall(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })\nArithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# 81bd8 ClearCarry []
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
03 

# 81bd9 AddCarry32_1 [Register(0xa8), Register(0xa4), Register(0xa8)]
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
30 a8 a4 a8 

# 81bdd AddCarry32_2 []
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
31 

# inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }\nCall(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# Index("a", Number(0n0/0x00u8))
# 81bde Copy8 [Register(0xa8), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n0/0x00u8))
0b a8 c0 

# inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# 81be1 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
04 00 01 

# 81be4 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc0), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
1e 04 00 c0 c0 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# 81be9 Copy8 [Register(0xc0), Register(0xa8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
0b c0 a8 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# Index("a", Number(0n1/0x01u8))
# 81bec Copy8 [Register(0xa9), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n1/0x01u8))
0b a9 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# 81bef LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
04 00 01 

# 81bf2 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
1e 04 00 b8 c0 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# 81bf7 Copy8 [Register(0xc0), Register(0xa9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
0b c0 a9 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# Index("a", Number(0n2/0x02u8))
# 81bfa Copy8 [Register(0xaa), Register(0xc1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n2/0x02u8))
0b aa c1 

# inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# 81bfd LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
04 00 01 

# 81c00 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc1), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
1e 04 00 c1 c0 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# 81c05 Copy8 [Register(0xc0), Register(0xaa)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
0b c0 aa 

# inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# Index("a", Number(0n3/0x03u8))
# 81c08 Copy8 [Register(0xab), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n3/0x03u8))
0b ab b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# 81c0b LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
04 00 01 

# 81c0e Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
1e 04 00 b8 c0 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# 81c13 Copy8 [Register(0xc0), Register(0xab)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
0b c0 ab 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n0/0x00u8))
# 81c16 Copy8 [Register(0xa8), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n0/0x00u8))
0b a8 c0 

# inline_div32_div16_43_inline_div16_shiftright1_42_tbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# 81c19 AndImm8 [Register(0xc0), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
18 c0 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# 81c1c Copy8 [Register(0xc0), Register(0xa8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
0b c0 a8 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n0/0x00u8))
# 81c1f Copy8 [Register(0xa8), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n0/0x00u8))
0b a8 c0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# Index("a", Number(0n1/0x01u8))
# 81c22 Copy8 [Register(0xa9), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n1/0x01u8))
0b a9 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# 81c25 Copy8 [Register(0xb8), Register(0xc1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
0b b8 c1 

# 81c28 AndImm8 [Register(0xc1), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
18 c1 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# 81c2b Or8 [Register(0xc0), Register(0xc1), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
1c c0 c1 c0 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# 81c2f Copy8 [Register(0xc0), Register(0xa8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
0b c0 a8 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n1/0x01u8))
# 81c32 Copy8 [Register(0xa9), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n1/0x01u8))
0b a9 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# 81c35 Copy8 [Register(0xb8), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
0b b8 c0 

# 81c38 AndImm8 [Register(0xc0), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
18 c0 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# 81c3b Copy8 [Register(0xc0), Register(0xa9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
0b c0 a9 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n1/0x01u8))
# 81c3e Copy8 [Register(0xa9), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n1/0x01u8))
0b a9 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# Index("a", Number(0n2/0x02u8))
# 81c41 Copy8 [Register(0xaa), Register(0xc1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n2/0x02u8))
0b aa c1 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# 81c44 Copy8 [Register(0xc1), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
0b c1 c0 

# 81c47 AndImm8 [Register(0xc0), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
18 c0 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# 81c4a Or8 [Register(0xb8), Register(0xc0), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
1c b8 c0 c0 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# 81c4e Copy8 [Register(0xc0), Register(0xa9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
0b c0 a9 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n2/0x02u8))
# 81c51 Copy8 [Register(0xaa), Register(0xc1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n2/0x02u8))
0b aa c1 

# inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# 81c54 Copy8 [Register(0xc1), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
0b c1 c0 

# 81c57 AndImm8 [Register(0xc0), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
18 c0 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# 81c5a Copy8 [Register(0xc0), Register(0xaa)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
0b c0 aa 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n2/0x02u8))
# 81c5d Copy8 [Register(0xaa), Register(0xc1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n2/0x02u8))
0b aa c1 

# inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# Index("a", Number(0n3/0x03u8))
# 81c60 Copy8 [Register(0xab), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n3/0x03u8))
0b ab b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# 81c63 Copy8 [Register(0xb8), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
0b b8 c0 

# 81c66 AndImm8 [Register(0xc0), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
18 c0 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_t837a <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# 81c69 Or8 [Register(0xc1), Register(0xc0), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t837a <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
1c c1 c0 c0 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# 81c6d Copy8 [Register(0xc0), Register(0xaa)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
0b c0 aa 

# inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n3/0x03u8))
# 81c70 Copy8 [Register(0xab), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n3/0x03u8))
0b ab b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# 81c73 Copy8 [Register(0xb8), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
0b b8 c0 

# 81c76 AndImm8 [Register(0xc0), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
18 c0 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# 81c79 Copy8 [Register(0xc0), Register(0xab)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
0b c0 ab 

# inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# 81c7c Copy32 [Register(0xa8), Register(0xc8)]
#       inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
#       Return { value: Some(Ident("a")) }
21 a8 c8 

# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# Ident("mid")
# 81c7f Copy32 [Register(0xc8), Register(0xa8)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
#       Ident("mid")
21 c8 a8 

# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# 81c82 Copy32 [Register(0xa0), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
21 a0 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 81c85 Mul8_16 [Register(0xa8), Register(0xac), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 a8 ac b0 

# 81c89 LoadImm8 [Register(0xb2), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 b2 00 

# 81c8c LoadImm8 [Register(0xb3), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 b3 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 81c8f Copy8 [Register(0xa9), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b a9 b8 

# inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 81c92 LoadImm32 [Register(0xbc), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 bc 00 00 00 00 

# 81c98 Copy8 [Register(0xb8), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b b8 bc 

# inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 81c9b Copy8 [Register(0xad), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b ad c0 

# inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 81c9e LoadImm32 [Register(0xb4), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 b4 00 00 00 00 

# 81ca4 Copy8 [Register(0xc0), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b c0 b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 81ca7 Mul8_16 [Register(0xbc), Register(0xb4), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 bc b4 b4 

# 81cab LoadImm8 [Register(0xb6), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 b6 00 

# 81cae LoadImm8 [Register(0xb7), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 b7 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 81cb1 Copy8 [Register(0xb5), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b b5 b9 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 81cb4 Copy8 [Register(0xb9), Register(0xb7)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b b9 b7 

# inline_div32_div16_43_inline_div16_mul16_32_4_t9922 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 81cb7 Copy8 [Register(0xb4), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t9922 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b b4 b9 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 81cba Copy8 [Register(0xb9), Register(0xb6)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b b9 b6 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81cbd LoadImm8 [Register(0xba), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 ba 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 81cc0 Copy8 [Register(0xba), Register(0xb5)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b ba b5 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 81cc3 Copy8 [Register(0xba), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b ba b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 81cc6 ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 81cc7 AddCarry32_1 [Register(0xb0), Register(0xb4), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 b0 b4 b0 

# 81ccb AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 81ccc Copy8 [Register(0xad), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b ad c0 

# inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 81ccf LoadImm32 [Register(0xb4), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 b4 00 00 00 00 

# 81cd5 Copy8 [Register(0xc0), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b c0 b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 81cd8 Mul8_16 [Register(0xa8), Register(0xb4), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 a8 b4 b4 

# 81cdc LoadImm8 [Register(0xb6), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 b6 00 

# 81cdf LoadImm8 [Register(0xb7), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 b7 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 81ce2 Copy8 [Register(0xa9), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b a9 b8 

# inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 81ce5 LoadImm32 [Register(0xbc), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 bc 00 00 00 00 

# 81ceb Copy8 [Register(0xb8), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b b8 bc 

# inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 81cee Mul8_16 [Register(0xbc), Register(0xac), Register(0xa8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 bc ac a8 

# 81cf2 LoadImm8 [Register(0xaa), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 aa 00 

# 81cf5 LoadImm8 [Register(0xab), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 ab 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 81cf8 Copy32 [Register(0xb4), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 b4 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 81cfb ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 81cfc AddCarry32_1 [Register(0xac), Register(0xa8), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 ac a8 b4 

# 81d00 AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8575 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 81d01 Copy8 [Register(0xb6), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t8575 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b b6 b8 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 81d04 Copy8 [Register(0xb8), Register(0xb7)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b b8 b7 

# inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 81d07 Copy8 [Register(0xb5), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b b5 b8 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 81d0a Copy8 [Register(0xb8), Register(0xb6)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b b8 b6 

# inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 81d0d Copy8 [Register(0xb4), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b b4 b8 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 81d10 Copy8 [Register(0xb8), Register(0xb5)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b b8 b5 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 81d13 Copy8 [Register(0xba), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b ba b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 81d16 Copy32 [Register(0xb4), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 b4 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 81d19 ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 81d1a AddCarry32_1 [Register(0xb0), Register(0xac), Register(0xa8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 b0 ac a8 

# 81d1e AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_tcd34 <- inline_div32_div16_43_x[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
# Index("x", Number(0n2/0x02u8))
# 81d1f Copy8 [Register(0xaa), Register(0xb8)]
#       inline_div32_div16_43_tcd34 <- inline_div32_div16_43_x[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
#       Index("x", Number(0n2/0x02u8))
0b aa b8 

# if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
# # In IlFunctionId("div32"), at #134, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' -> if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9'
# 81d22 Cmp8 [Register(0xb8), Register(0xba)]
#       if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("div32"), at #134, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' -> if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9'
15 b8 ba 

# 81d25 JcImm [Label24(inline_div32_div16_43_div16_if_end_9)]
#       if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("div32"), at #134, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' -> if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9'
71 39 1d 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"div32\"), at #134, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' -> if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9'\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_10)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_10 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_10
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 81d29 Copy32 [Register(0xc8), Register(0xa8)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c8 a8 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 81d2c Copy32 [Register(0xa8), Register(0xa4)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a8 a4 

# 81d2f AddImm32IgnoreCarry [Register(0xa4), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 a4 ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 81d35 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 c2 1b 08 

# :inline_div32_div16_43_div16_if_end_9 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_9
# inline_div32_div16_43_t4299 <- inline_div32_div16_43_x[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
# Index("x", Number(0n3/0x03u8))
# 81d39 Copy8 [Register(0xab), Register(0xb8)]
#       inline_div32_div16_43_t4299 <- inline_div32_div16_43_x[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
#       Index("x", Number(0n3/0x03u8))
0b ab b8 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("div32"), at #141, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). inline_div32_div16_43_ta97f <- 0n0/0x00u8  -> inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8 
# 81d3c LoadImm8 [Register(0xba), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("div32"), at #141, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). inline_div32_div16_43_ta97f <- 0n0/0x00u8  -> inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8 
04 ba 00 

# if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
# # In IlFunctionId("div32"), at #142, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' -> if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12'
# 81d3f Cmp8 [Register(0xb8), Register(0xba)]
#       if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("div32"), at #142, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' -> if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12'
15 b8 ba 

# 81d42 JcImm [Label24(inline_div32_div16_43_div16_if_end_12)]
#       if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("div32"), at #142, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' -> if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12'
71 56 1d 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"div32\"), at #142, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' -> if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12'\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_13)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_13 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_13
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 81d46 Copy32 [Register(0xc8), Register(0xa8)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c8 a8 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 81d49 Copy32 [Register(0xa8), Register(0xa4)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a8 a4 

# 81d4c AddImm32IgnoreCarry [Register(0xa4), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 a4 ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 81d52 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 c2 1b 08 

# :inline_div32_div16_43_div16_if_end_12 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_12
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_end_15' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# 81d56 Cmp8 [Register(0xab), Register(0x9f)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_end_15' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
15 ab 9f 

# 81d59 Cmp8IfZero [Register(0xaa), Register(0x9e)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_end_15' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 aa 9e 

# 81d5c Cmp8IfZero [Register(0xa9), Register(0x9d)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_end_15' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a9 9d 

# 81d5f Cmp8IfZero [Register(0xa8), Register(0x9c)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_end_15' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a8 9c 

# 81d62 JcImm [Label24(inline_div32_div16_43_div16_if_end_15)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_end_15' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
71 76 1d 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_end_15' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_16)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_16 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_16
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 81d66 Copy32 [Register(0xc8), Register(0xa8)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c8 a8 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 81d69 Copy32 [Register(0xa8), Register(0xa4)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a8 a4 

# 81d6c AddImm32IgnoreCarry [Register(0xa4), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 a4 ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 81d72 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 c2 1b 08 

# :inline_div32_div16_43_div16_if_end_15 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_15
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_end_18' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# 81d76 Cmp8 [Register(0xab), Register(0x9f)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_end_18' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
15 ab 9f 

# 81d79 Cmp8IfZero [Register(0xaa), Register(0x9e)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_end_18' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 aa 9e 

# 81d7c Cmp8IfZero [Register(0xa9), Register(0x9d)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_end_18' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a9 9d 

# 81d7f Cmp8IfZero [Register(0xa8), Register(0x9c)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_end_18' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a8 9c 

# 81d82 JzImm [Label24(inline_div32_div16_43_div16_if_true_0_19)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_end_18' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
72 8a 1d 08 

# 81d86 JmpImm [Label24(inline_div32_div16_43_div16_if_end_18)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_end_18' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
70 94 1d 08 

# :inline_div32_div16_43_div16_if_true_0_19 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_19
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# 81d8a Copy32 [Register(0xc8), Register(0xa8)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
#       Ident("mid")
21 c8 a8 

# te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81d8d Copy32 [Register(0xa8), Register(0x9c)]
#       te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
21 a8 9c 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81d90 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
70 db 1d 08 

# :inline_div32_div16_43_div16_if_end_18 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_18
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# 81d94 Copy32 [Register(0xa8), Register(0x00)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
21 a8 00 

# 81d97 Invert8 [Register(0x00)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 00 

# 81d99 Invert8 [Register(0x01)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 01 

# 81d9b Invert8 [Register(0x02)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 02 

# 81d9d Invert8 [Register(0x03)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 03 

# 81d9f AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
32 00 01 00 00 00 

# 81da5 ClearCarry []
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
03 

# 81da6 AddCarry32_1 [Register(0x9c), Register(0x00), Register(0xa8)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
30 9c 00 a8 

# 81daa AddCarry32_2 []
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
31 

# inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("r")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"r\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_end_21' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# 81dab Cmp8 [Register(0xa3), Register(0xab)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_end_21' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
15 a3 ab 

# 81dae Cmp8IfZero [Register(0xa2), Register(0xaa)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_end_21' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 a2 aa 

# 81db1 Cmp8IfZero [Register(0xa1), Register(0xa9)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_end_21' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 a1 a9 

# 81db4 Cmp8IfZero [Register(0xa0), Register(0xa8)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_end_21' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 a0 a8 

# 81db7 JcImm [Label24(inline_div32_div16_43_div16_if_end_21)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_end_21' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
71 c5 1d 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_end_21' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_22)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_22 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_22
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# 81dbb Copy32 [Register(0xc8), Register(0xa8)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
#       Ident("mid")
21 c8 a8 

# te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81dbe Copy32 [Register(0xa8), Register(0x9c)]
#       te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
21 a8 9c 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81dc1 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
70 db 1d 08 

# :inline_div32_div16_43_div16_if_end_21 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_21
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 81dc5 Copy32 [Register(0xc8), Register(0xa8)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c8 a8 

# inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# 81dc8 Copy32 [Register(0xa8), Register(0xc4)]
#       inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
21 a8 c4 

# 81dcb AddImm32IgnoreCarry [Register(0xc4), Constant32(0x00000001=1)]
#       inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
32 c4 01 00 00 00 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81dd1 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
70 c2 1b 08 

# :inline_div32_div16_43_div16_while_end_8 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_while_end_8
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# Ident("lo")
# 81dd5 Copy32 [Register(0xc4), Register(0xa8)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
#       Ident("lo")
21 c4 a8 

# te81f <- inline_div32_div16_43_t1506 U32 Some('/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# 81dd8 Copy32 [Register(0xa8), Register(0x9c)]
#       te81f <- inline_div32_div16_43_t1506 U32 Some('/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
21 a8 9c 

# :inline_div32_div16_43_function_end_div16 None
# inline_div32_div16_43_function_end_div16
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# 81ddb AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(71,5))
#       Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
32 0c 08 00 00 00 

# return Some(te81f) Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# 81de1 Copy32 [Register(0x9c), Register(0x00)]
#       return Some(te81f) Some('/lutcomp/programs/lib/div.j':(71,5))
#       Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
21 9c 00 

# 81de4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 81dea JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :div32_if_end_3 Some('/lutcomp/programs/lib/div.j':(71,5))
# div32_if_end_3
# lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(75,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 81dec LoadImm32 [Register(0xb4), Constant32(0x00000000=0)]
#       lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(75,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 b4 00 00 00 00 

# hi <- 0xffffffffu32  Some('/lutcomp/programs/lib/div.j':(76,5))
# Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0xffffffffu32) }
# Number(0xffffffffu32)
# 81df2 LoadImm32 [Register(0xa4), Constant32(0xffffffff=4294967295)]
#       hi <- 0xffffffffu32  Some('/lutcomp/programs/lib/div.j':(76,5))
#       Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0xffffffffu32) }
#       Number(0xffffffffu32)
20 a4 ff ff ff ff 

# :div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# div32_while_predicate_6
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("lo")
# 81df8 Copy32 [Register(0xb4), Register(0xa8)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
#       Ident("lo")
21 b4 a8 

# t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("hi")
# optimized away noop copy Instruction { source: "t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# 81dfb Cmp8 [Register(0xa7), Register(0xab)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
15 a7 ab 

# 81dfe Cmp8IfZero [Register(0xa6), Register(0xaa)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 a6 aa 

# 81e01 Cmp8IfZero [Register(0xa5), Register(0xa9)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 a5 a9 

# 81e04 Cmp8IfZero [Register(0xa4), Register(0xa8)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 a4 a8 

# 81e07 JcImm [Label24(div32_while_end_8)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
71 3a 20 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\n", opcode: JmpImm, args: [Label24(div32_while_body_7)], resolved: None }
# :div32_while_body_7 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# div32_while_body_7
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
# Ident("lo")
# 81e0b Copy32 [Register(0xb4), Register(0xa8)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
#       Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
#       Ident("lo")
21 b4 a8 

# inline_div32_shiftright1_44_a <- t1506 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_44_a <- t1506 U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }\nArithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))\nCall(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# Index("a", Number(0n0/0x00u8))
# 81e0e Copy8 [Register(0xa8), Register(0xc0)]
#       inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n0/0x00u8))
0b a8 c0 

# inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# 81e11 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
04 00 01 

# 81e14 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc0), Register(0xc0)]
#       inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
1e 04 00 c0 c0 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# 81e19 Copy8 [Register(0xc0), Register(0xa8)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
0b c0 a8 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# Index("a", Number(0n1/0x01u8))
# 81e1c Copy8 [Register(0xa9), Register(0xb8)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n1/0x01u8))
0b a9 b8 

# inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# 81e1f LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
04 00 01 

# 81e22 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xc0)]
#       inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
1e 04 00 b8 c0 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# 81e27 Copy8 [Register(0xc0), Register(0xa9)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
0b c0 a9 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# Index("a", Number(0n2/0x02u8))
# 81e2a Copy8 [Register(0xaa), Register(0xc1)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n2/0x02u8))
0b aa c1 

# inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# 81e2d LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
04 00 01 

# 81e30 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc1), Register(0xc0)]
#       inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
1e 04 00 c1 c0 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# 81e35 Copy8 [Register(0xc0), Register(0xaa)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
0b c0 aa 

# inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# Index("a", Number(0n3/0x03u8))
# 81e38 Copy8 [Register(0xab), Register(0xb8)]
#       inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n3/0x03u8))
0b ab b8 

# inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# 81e3b LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
04 00 01 

# 81e3e Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xc0)]
#       inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
1e 04 00 b8 c0 

# inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# 81e43 Copy8 [Register(0xc0), Register(0xab)]
#       inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
0b c0 ab 

# inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n0/0x00u8))
# 81e46 Copy8 [Register(0xa8), Register(0xc0)]
#       inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n0/0x00u8))
0b a8 c0 

# inline_div32_shiftright1_44_tbe <- inline_div32_shiftright1_44_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# 81e49 AndImm8 [Register(0xc0), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_tbe <- inline_div32_shiftright1_44_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
18 c0 7f 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# 81e4c Copy8 [Register(0xc0), Register(0xa8)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
0b c0 a8 

# inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n0/0x00u8))
# 81e4f Copy8 [Register(0xa8), Register(0xc0)]
#       inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n0/0x00u8))
0b a8 c0 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# Index("a", Number(0n1/0x01u8))
# 81e52 Copy8 [Register(0xa9), Register(0xb8)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n1/0x01u8))
0b a9 b8 

# inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# 81e55 Copy8 [Register(0xb8), Register(0xc1)]
#       inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
0b b8 c1 

# 81e58 AndImm8 [Register(0xc1), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
18 c1 80 

# inline_div32_shiftright1_44_tafc1 <- inline_div32_shiftright1_44_t3404 BitwiseOr Var(inline_div32_shiftright1_44_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# 81e5b Or8 [Register(0xc0), Register(0xc1), Register(0xc0)]
#       inline_div32_shiftright1_44_tafc1 <- inline_div32_shiftright1_44_t3404 BitwiseOr Var(inline_div32_shiftright1_44_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
1c c0 c1 c0 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# 81e5f Copy8 [Register(0xc0), Register(0xa8)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
0b c0 a8 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n1/0x01u8))
# 81e62 Copy8 [Register(0xa9), Register(0xb8)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n1/0x01u8))
0b a9 b8 

# inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# 81e65 Copy8 [Register(0xb8), Register(0xc0)]
#       inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
0b b8 c0 

# 81e68 AndImm8 [Register(0xc0), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
18 c0 7f 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# 81e6b Copy8 [Register(0xc0), Register(0xa9)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
0b c0 a9 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n1/0x01u8))
# 81e6e Copy8 [Register(0xa9), Register(0xb8)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n1/0x01u8))
0b a9 b8 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# Index("a", Number(0n2/0x02u8))
# 81e71 Copy8 [Register(0xaa), Register(0xc1)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n2/0x02u8))
0b aa c1 

# inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# 81e74 Copy8 [Register(0xc1), Register(0xc0)]
#       inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
0b c1 c0 

# 81e77 AndImm8 [Register(0xc0), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
18 c0 80 

# inline_div32_shiftright1_44_tdbbe <- inline_div32_shiftright1_44_t3009 BitwiseOr Var(inline_div32_shiftright1_44_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# 81e7a Or8 [Register(0xb8), Register(0xc0), Register(0xc0)]
#       inline_div32_shiftright1_44_tdbbe <- inline_div32_shiftright1_44_t3009 BitwiseOr Var(inline_div32_shiftright1_44_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
1c b8 c0 c0 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# 81e7e Copy8 [Register(0xc0), Register(0xa9)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
0b c0 a9 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n2/0x02u8))
# 81e81 Copy8 [Register(0xaa), Register(0xc1)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n2/0x02u8))
0b aa c1 

# inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# 81e84 Copy8 [Register(0xc1), Register(0xc0)]
#       inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
0b c1 c0 

# 81e87 AndImm8 [Register(0xc0), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
18 c0 7f 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# 81e8a Copy8 [Register(0xc0), Register(0xaa)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
0b c0 aa 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n2/0x02u8))
# 81e8d Copy8 [Register(0xaa), Register(0xc1)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n2/0x02u8))
0b aa c1 

# inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# Index("a", Number(0n3/0x03u8))
# 81e90 Copy8 [Register(0xab), Register(0xb8)]
#       inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n3/0x03u8))
0b ab b8 

# inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# 81e93 Copy8 [Register(0xb8), Register(0xc0)]
#       inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
0b b8 c0 

# 81e96 AndImm8 [Register(0xc0), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
18 c0 80 

# inline_div32_shiftright1_44_t837a <- inline_div32_shiftright1_44_t3b02 BitwiseOr Var(inline_div32_shiftright1_44_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# 81e99 Or8 [Register(0xc1), Register(0xc0), Register(0xc0)]
#       inline_div32_shiftright1_44_t837a <- inline_div32_shiftright1_44_t3b02 BitwiseOr Var(inline_div32_shiftright1_44_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
1c c1 c0 c0 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# 81e9d Copy8 [Register(0xc0), Register(0xaa)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
0b c0 aa 

# inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n3/0x03u8))
# 81ea0 Copy8 [Register(0xab), Register(0xb8)]
#       inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n3/0x03u8))
0b ab b8 

# inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# 81ea3 Copy8 [Register(0xb8), Register(0xc0)]
#       inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
0b b8 c0 

# 81ea6 AndImm8 [Register(0xc0), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
18 c0 7f 

# inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# 81ea9 Copy8 [Register(0xc0), Register(0xab)]
#       inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
0b c0 ab 

# inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# t9599 <- inline_div32_shiftright1_44_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# 81eac Copy32 [Register(0xa8), Register(0xd0)]
#       t9599 <- inline_div32_shiftright1_44_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
#       Return { value: Some(Ident("a")) }
21 a8 d0 

# t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
# Ident("hi")
# optimized away noop copy Instruction { source: "t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }\nArithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))\nCall(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_shiftright1_45_a <- t5508 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
# 81eaf Copy32 [Register(0xa4), Register(0xa8)]
#       inline_div32_shiftright1_45_a <- t5508 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
#       Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
21 a4 a8 

# inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# Index("a", Number(0n0/0x00u8))
# 81eb2 Copy8 [Register(0xa8), Register(0xc0)]
#       inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n0/0x00u8))
0b a8 c0 

# inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# 81eb5 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
04 00 01 

# 81eb8 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc0), Register(0xc0)]
#       inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
1e 04 00 c0 c0 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# 81ebd Copy8 [Register(0xc0), Register(0xa8)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
0b c0 a8 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# Index("a", Number(0n1/0x01u8))
# 81ec0 Copy8 [Register(0xa9), Register(0xb8)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n1/0x01u8))
0b a9 b8 

# inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# 81ec3 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
04 00 01 

# 81ec6 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xc0)]
#       inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
1e 04 00 b8 c0 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# 81ecb Copy8 [Register(0xc0), Register(0xa9)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
0b c0 a9 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# Index("a", Number(0n2/0x02u8))
# 81ece Copy8 [Register(0xaa), Register(0xc1)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n2/0x02u8))
0b aa c1 

# inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# 81ed1 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
04 00 01 

# 81ed4 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc1), Register(0xc0)]
#       inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
1e 04 00 c1 c0 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# 81ed9 Copy8 [Register(0xc0), Register(0xaa)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
0b c0 aa 

# inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# Index("a", Number(0n3/0x03u8))
# 81edc Copy8 [Register(0xab), Register(0xb8)]
#       inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n3/0x03u8))
0b ab b8 

# inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# 81edf LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
04 00 01 

# 81ee2 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xc0)]
#       inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
1e 04 00 b8 c0 

# inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# 81ee7 Copy8 [Register(0xc0), Register(0xab)]
#       inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
0b c0 ab 

# inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n0/0x00u8))
# 81eea Copy8 [Register(0xa8), Register(0xc0)]
#       inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n0/0x00u8))
0b a8 c0 

# inline_div32_shiftright1_45_tbe <- inline_div32_shiftright1_45_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# 81eed AndImm8 [Register(0xc0), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_tbe <- inline_div32_shiftright1_45_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
18 c0 7f 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# 81ef0 Copy8 [Register(0xc0), Register(0xa8)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
0b c0 a8 

# inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n0/0x00u8))
# 81ef3 Copy8 [Register(0xa8), Register(0xc0)]
#       inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n0/0x00u8))
0b a8 c0 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# Index("a", Number(0n1/0x01u8))
# 81ef6 Copy8 [Register(0xa9), Register(0xb8)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n1/0x01u8))
0b a9 b8 

# inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# 81ef9 Copy8 [Register(0xb8), Register(0xc1)]
#       inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
0b b8 c1 

# 81efc AndImm8 [Register(0xc1), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
18 c1 80 

# inline_div32_shiftright1_45_tafc1 <- inline_div32_shiftright1_45_t3404 BitwiseOr Var(inline_div32_shiftright1_45_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# 81eff Or8 [Register(0xc0), Register(0xc1), Register(0xc0)]
#       inline_div32_shiftright1_45_tafc1 <- inline_div32_shiftright1_45_t3404 BitwiseOr Var(inline_div32_shiftright1_45_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
1c c0 c1 c0 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# 81f03 Copy8 [Register(0xc0), Register(0xa8)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
0b c0 a8 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n1/0x01u8))
# 81f06 Copy8 [Register(0xa9), Register(0xb8)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n1/0x01u8))
0b a9 b8 

# inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# 81f09 Copy8 [Register(0xb8), Register(0xc0)]
#       inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
0b b8 c0 

# 81f0c AndImm8 [Register(0xc0), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
18 c0 7f 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# 81f0f Copy8 [Register(0xc0), Register(0xa9)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
0b c0 a9 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n1/0x01u8))
# 81f12 Copy8 [Register(0xa9), Register(0xb8)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n1/0x01u8))
0b a9 b8 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# Index("a", Number(0n2/0x02u8))
# 81f15 Copy8 [Register(0xaa), Register(0xc1)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n2/0x02u8))
0b aa c1 

# inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# 81f18 Copy8 [Register(0xc1), Register(0xc0)]
#       inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
0b c1 c0 

# 81f1b AndImm8 [Register(0xc0), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
18 c0 80 

# inline_div32_shiftright1_45_tdbbe <- inline_div32_shiftright1_45_t3009 BitwiseOr Var(inline_div32_shiftright1_45_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# 81f1e Or8 [Register(0xb8), Register(0xc0), Register(0xc0)]
#       inline_div32_shiftright1_45_tdbbe <- inline_div32_shiftright1_45_t3009 BitwiseOr Var(inline_div32_shiftright1_45_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
1c b8 c0 c0 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# 81f22 Copy8 [Register(0xc0), Register(0xa9)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
0b c0 a9 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n2/0x02u8))
# 81f25 Copy8 [Register(0xaa), Register(0xc1)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n2/0x02u8))
0b aa c1 

# inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# 81f28 Copy8 [Register(0xc1), Register(0xc0)]
#       inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
0b c1 c0 

# 81f2b AndImm8 [Register(0xc0), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
18 c0 7f 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# 81f2e Copy8 [Register(0xc0), Register(0xaa)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
0b c0 aa 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n2/0x02u8))
# 81f31 Copy8 [Register(0xaa), Register(0xc1)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n2/0x02u8))
0b aa c1 

# inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# Index("a", Number(0n3/0x03u8))
# 81f34 Copy8 [Register(0xab), Register(0xb8)]
#       inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n3/0x03u8))
0b ab b8 

# inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# 81f37 Copy8 [Register(0xb8), Register(0xc0)]
#       inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
0b b8 c0 

# 81f3a AndImm8 [Register(0xc0), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
18 c0 80 

# inline_div32_shiftright1_45_t837a <- inline_div32_shiftright1_45_t3b02 BitwiseOr Var(inline_div32_shiftright1_45_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# 81f3d Or8 [Register(0xc1), Register(0xc0), Register(0xc0)]
#       inline_div32_shiftright1_45_t837a <- inline_div32_shiftright1_45_t3b02 BitwiseOr Var(inline_div32_shiftright1_45_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
1c c1 c0 c0 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# 81f41 Copy8 [Register(0xc0), Register(0xaa)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
0b c0 aa 

# inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n3/0x03u8))
# 81f44 Copy8 [Register(0xab), Register(0xb8)]
#       inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n3/0x03u8))
0b ab b8 

# inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# 81f47 Copy8 [Register(0xb8), Register(0xc0)]
#       inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
0b b8 c0 

# 81f4a AndImm8 [Register(0xc0), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
18 c0 7f 

# inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# 81f4d Copy8 [Register(0xc0), Register(0xab)]
#       inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
0b c0 ab 

# inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# t3803 <- inline_div32_shiftright1_45_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# optimized away noop copy Instruction { source: "t3803 <- inline_div32_shiftright1_45_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# 81f50 ClearCarry []
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
03 

# 81f51 AddCarry32_1 [Register(0xd0), Register(0xa8), Register(0xac)]
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
30 d0 a8 ac 

# 81f55 AddCarry32_2 []
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
31 

# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# Ident("__frame_pointer")
# 81f56 Copy32 [Register(0x0c), Register(0xd4)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
#       Ident("__frame_pointer")
21 0c d4 

# tb608 <- te825 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# 81f59 Copy32 [Register(0xd4), Register(0xa8)]
#       tb608 <- te825 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
21 d4 a8 

# None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# 81f5c Copy32 [Register(0xac), Register(0x00)]
#       Arg0[a]=tfd7e None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 ac 00 

# 81f5f Copy32 [Register(0xa0), Register(0x04)]
#       Arg1[b]=tace9 None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 a0 04 

# 81f62 Copy32 [Register(0xa8), Register(0x08)]
#       Arg2[c]=tb608 None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 a8 08 

# Registers used by this function: {156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215}
# Registers used by callee tree: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119}
# Registers to save: []
# 81f65 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:mul32_64))
32 0c fc ff ff ff 

# 81f6b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:mul32_64))
25 0c 75 1f 08 00 

# 81f71 JmpImm [Label24(:mul32_64)]
#       PseudoCall(Label24(:mul32_64))
70 4c 25 08 

# 81f75 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:mul32_64))
32 0c 04 00 00 00 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# LocalFieldDeref("x64", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# Ident("__frame_pointer")
# 81f7b Copy32 [Register(0x0c), Register(0xd4)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
#       Ident("__frame_pointer")
21 0c d4 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# LocalFieldDeref("x64", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# 81f7e Copy32 [Register(0xd4), Register(0xa8)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
21 d4 a8 

# 81f81 AddImm32IgnoreCarry [Register(0xa8), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
32 a8 04 00 00 00 

# tb973 <- mem[t3f2a] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# LocalFieldDeref("x64", "hi")
# 81f87 Load32 [Register(0xa8), Register(0xb0)]
#       tb973 <- mem[t3f2a] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
22 a8 b0 

# inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# # In IlFunctionId("div32"), at #287, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). t60ec <- 0n0/0x00000000u32  -> inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
# 81f8a LoadImm32 [Register(0xa8), Constant32(0x00000000=0)]
#       inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
#       # In IlFunctionId("div32"), at #287, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). t60ec <- 0n0/0x00000000u32  -> inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
20 a8 00 00 00 00 

# if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# # In IlFunctionId("div32"), at #288, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9'
# 81f90 Cmp8 [Register(0xb3), Register(0xab)]
#       if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("div32"), at #288, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9'
15 b3 ab 

# 81f93 Cmp8IfZero [Register(0xb2), Register(0xaa)]
#       if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("div32"), at #288, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9'
16 b2 aa 

# 81f96 Cmp8IfZero [Register(0xb1), Register(0xa9)]
#       if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("div32"), at #288, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9'
16 b1 a9 

# 81f99 Cmp8IfZero [Register(0xb0), Register(0xa8)]
#       if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("div32"), at #288, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9'
16 b0 a8 

# 81f9c JcImm [Label24(div32_if_end_9)]
#       if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("div32"), at #288, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9'
71 ad 1f 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }\n# In IlFunctionId(\"div32\"), at #288, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9'\n", opcode: JmpImm, args: [Label24(div32_if_true_0_10)], resolved: None }
# :div32_if_true_0_10 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# div32_if_true_0_10
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 81fa0 Copy32 [Register(0xac), Register(0xa4)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 ac a4 

# 81fa3 AddImm32IgnoreCarry [Register(0xa4), Constant32(0xffffffff=4294967295)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 a4 ff ff ff ff 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# Continue
# 81fa9 JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Continue
70 f8 1d 08 

# :div32_if_end_9 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_9
# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
# LocalFieldDeref("x64", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 81fad Copy32 [Register(0x0c), Register(0xd4)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
#       LocalFieldDeref("x64", "lo")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c d4 

# x <- mem[te546] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
# LocalFieldDeref("x64", "lo")
# 81fb0 Load32 [Register(0xd4), Register(0xa8)]
#       x <- mem[te546] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
#       LocalFieldDeref("x64", "lo")
22 d4 a8 

# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_end_12' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# 81fb3 Cmp8 [Register(0xab), Register(0x9f)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_end_12' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
15 ab 9f 

# 81fb6 Cmp8IfZero [Register(0xaa), Register(0x9e)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_end_12' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 aa 9e 

# 81fb9 Cmp8IfZero [Register(0xa9), Register(0x9d)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_end_12' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a9 9d 

# 81fbc Cmp8IfZero [Register(0xa8), Register(0x9c)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_end_12' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a8 9c 

# 81fbf JcImm [Label24(div32_if_end_12)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_end_12' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
71 d0 1f 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_end_12' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_13)], resolved: None }
# :div32_if_true_0_13 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# div32_if_true_0_13
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 81fc3 Copy32 [Register(0xac), Register(0xa4)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 ac a4 

# 81fc6 AddImm32IgnoreCarry [Register(0xa4), Constant32(0xffffffff=4294967295)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 a4 ff ff ff ff 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# Continue
# 81fcc JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Continue
70 f8 1d 08 

# :div32_if_end_12 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_12
# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_end_15' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# 81fd0 Cmp8 [Register(0xab), Register(0x9f)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_end_15' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
15 ab 9f 

# 81fd3 Cmp8IfZero [Register(0xaa), Register(0x9e)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_end_15' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 aa 9e 

# 81fd6 Cmp8IfZero [Register(0xa9), Register(0x9d)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_end_15' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a9 9d 

# 81fd9 Cmp8IfZero [Register(0xa8), Register(0x9c)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_end_15' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a8 9c 

# 81fdc JzImm [Label24(div32_if_true_0_16)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_end_15' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
72 e4 1f 08 

# 81fe0 JmpImm [Label24(div32_if_end_15)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_end_15' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
70 f5 1f 08 

# :div32_if_true_0_16 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# div32_if_true_0_16
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nReturn { value: Some(Ident(\"mid\")) }\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 81fe4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
32 0c 08 00 00 00 

# return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 81fea Copy32 [Register(0xac), Register(0x00)]
#       return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
21 ac 00 

# 81fed AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 81ff3 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :div32_if_end_15 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_15
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# 81ff5 Copy32 [Register(0xa8), Register(0x00)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
21 a8 00 

# 81ff8 Invert8 [Register(0x00)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 00 

# 81ffa Invert8 [Register(0x01)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 01 

# 81ffc Invert8 [Register(0x02)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 02 

# 81ffe Invert8 [Register(0x03)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 03 

# 82000 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
32 00 01 00 00 00 

# 82006 ClearCarry []
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
03 

# 82007 AddCarry32_1 [Register(0x9c), Register(0x00), Register(0xa8)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
30 9c 00 a8 

# 8200b AddCarry32_2 []
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
31 

# taee0 <- r U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("r")
# optimized away noop copy Instruction { source: "taee0 <- r U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"r\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_end_18' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# 8200c Cmp8 [Register(0xa3), Register(0xab)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_end_18' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
15 a3 ab 

# 8200f Cmp8IfZero [Register(0xa2), Register(0xaa)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_end_18' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 a2 aa 

# 82012 Cmp8IfZero [Register(0xa1), Register(0xa9)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_end_18' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 a1 a9 

# 82015 Cmp8IfZero [Register(0xa0), Register(0xa8)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_end_18' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 a0 a8 

# 82018 JcImm [Label24(div32_if_end_18)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_end_18' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
71 2d 20 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_end_18' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_19)], resolved: None }
# :div32_if_true_0_19 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# div32_if_true_0_19
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nReturn { value: Some(Ident(\"mid\")) }\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 8201c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
32 0c 08 00 00 00 

# return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 82022 Copy32 [Register(0xac), Register(0x00)]
#       return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
21 ac 00 

# 82025 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 8202b JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :div32_if_end_18 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_18
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# 8202d Copy32 [Register(0xac), Register(0xb4)]
#       lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
21 ac b4 

# 82030 AddImm32IgnoreCarry [Register(0xb4), Constant32(0x00000001=1)]
#       lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
32 b4 01 00 00 00 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# 82036 JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
70 f8 1d 08 

# :div32_while_end_8 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_while_end_8
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# Ident("lo")
# 8203a Copy32 [Register(0xb4), Register(0xa8)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
#       Ident("lo")
21 b4 a8 

# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# 8203d AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
32 0c 08 00 00 00 

# return Some(t1506) Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# 82043 Copy32 [Register(0xa8), Register(0x00)]
#       return Some(t1506) Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
21 a8 00 

# 82046 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 8204c JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_div32 None
# function_end_div32
# Unreachable None
# 8204e Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_draw_char
# Ret None
# Arg0=i
# Arg1=ch
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([218])
# Var i (Arg0 i Number(U8)) Reg(U8) Some([219])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_col (Local col Number(U8) Reg(U8)) Reg(U8) Some([219])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_row (Local row Number(U8) Reg(U8)) Reg(U8) Some([220])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd (t1acd Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) Reg(U8) Some([219])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 (t2f80 Index("lcd_row_start", Ident("row"))) Reg(U8) Some([220])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd (t50bd Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) Reg(U32) Some([224, 225, 226, 227])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf (t9eaf Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }) Reg(U32) Some([224, 225, 226, 227])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 (tb1b6 Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }) Reg(U32) Some([228, 229, 230, 231])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td007 (td007 Ident("row")) Reg(U8) Some([220])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 (td0f3 Ident("i")) Reg(U8) Some([219])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 (tf14 Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) Reg(U8) Some([232])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 (tfee9 Ident("col")) Reg(U8) Some([219])
# Var pos (Local pos Number(U8) Reg(U8)) Reg(U8) Some([219])
# Var t136d (t136d Ident("pos")) Reg(U8) Some([219])
# Var t1730 (t1730 Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))) Reg(U8) Some([220])
# Var t2176 (t2176 Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))) Reg(U8) Some([220])
# Var t3e8f (t3e8f Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))) Reg(U8) Some([219])
# Var t4028 (t4028 Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))) Reg(U8) Some([219])
# Var t6611 (t6611 Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))) Reg(U8) Some([218])
# Var t791e (t791e Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))) Reg(U8) Some([219])
# Var t9498 (t9498 Number(0n2/0x00000002u32)) Reg(U32) Some([224, 225, 226, 227]) Number(0n2/0x00000002u32)
# Var tb5dc (tb5dc Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))) Reg(U8) Some([218])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([218])
# 82053 Copy8 [Register(0x00), Register(0xdb)]
#       Save function parameter 'i' registers [0] to locals [219].
0b 00 db 

# 82056 Copy8 [Register(0x04), Register(0xda)]
#       Save function parameter 'ch' registers [4] to locals [218].
0b 04 da 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
# Ident("i")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(9,5))\nAssign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(0n20/0x14u8)) }\nArithmetic(Divide, Ident(\"i\"), Number(0n20/0x14u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xdb), Register(0xdb)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
# 82059 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
04 00 14 

# 8205c Divide8 [Register(0xdb), Register(0x00), Register(0xdc)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
17 db 00 dc 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Ident("i")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))\nAssign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))) }\nArithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8)))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xdb), Register(0xdb)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))\nAssign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))) }\nArithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8)))\nArithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0xdc), Register(0xdc)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
# 82060 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
#       Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
04 00 14 

# 82063 Mul8_8 [Register(0xdc), Register(0x00), Register(0xe8)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
#       Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
10 dc 00 e8 

# inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# 82067 Copy8 [Register(0xe8), Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
0b e8 00 

# 8206a Negate8 [Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
02 00 

# 8206c Add8NoCarryIn [Register(0xdb), Register(0x00), Register(0xdb)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
14 db 00 db 

# inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }
# Ident("lcd_row_start")
# 82070 LoadImm32 [Register(0xe4), Label32(:lcd_row_start)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }
#       Ident("lcd_row_start")
20 e4 23 08 08 00 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIndex(\"lcd_row_start\", Ident(\"row\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") }\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0xdc), Register(0xdc)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
# 82076 LoadImm32 [Register(0xe0), Constant32(0x00000000=0)]
#       Zero-pad for inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
20 e0 00 00 00 00 

# 8207c Copy8 [Register(0xdc), Register(0xe0)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
0b dc e0 

# inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# 8207f ClearCarry []
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
03 

# 82080 AddCarry32_1 [Register(0xe4), Register(0xe0), Register(0xe0)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
30 e4 e0 e0 

# 82084 AddCarry32_2 []
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
31 

# inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# 82085 Load8 [Register(0xe0), Register(0xdc)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
05 e0 dc 

# inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Ident("col")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIdent(\"col\")\n", opcode: Copy8, args: [Register(0xdb), Register(0xdb)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# 82088 Add8NoCarryIn [Register(0xdc), Register(0xdb), Register(0xdb)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
14 dc db db 

# pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# optimized away noop copy Instruction { source: "pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\n", opcode: Copy8, args: [Register(0xdb), Register(0xdb)], resolved: None }
# t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(17,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))] })\nArithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))\nArithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0xdb), Register(0xdb)], resolved: None }
# t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
# 8208c LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
04 00 04 

# 8208f Shift8 [Constant8(0x05=5), Register(0x00), Register(0xdb), Register(0xdc)]
#       t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
1e 05 00 db dc 

# t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# 82094 OrImm8 [Register(0xdc), Constant8(0x08=8)]
#       t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
19 dc 08 

# None <= call io_write1(t2176,) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# 82097 Out1 [Register(0xdc)]
#       IoWrite1
69 dc 

# t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(18,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))] })\nArithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0xdb), Register(0xdb)], resolved: None }
# t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
# 82099 AndImm8 [Register(0xdb), Constant8(0x0f=15)]
#       t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(18,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
#       Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
18 db 0f 

# None <= call io_write1(t791e,) Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# 8209c Out1 [Register(0xdb)]
#       IoWrite1
69 db 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 8209e LoadImm32 [Register(0xe0), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 e0 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 820a4 Copy32 [Register(0xe0), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 e0 00 

# Registers used by this function: {218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232}
# Registers used by callee tree: {148, 149, 150, 151, 152, 153, 154, 155}
# Registers to save: []
# 820a7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 820ad StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c b7 20 08 00 

# 820b3 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 f3 1a 08 

# 820b7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(21,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))] })\nArithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))\nArithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xda), Register(0xda)], resolved: None }
# t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
# 820bd LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
04 00 04 

# 820c0 Shift8 [Constant8(0x05=5), Register(0x00), Register(0xda), Register(0xdb)]
#       t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
1e 05 00 da db 

# t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# 820c5 OrImm8 [Register(0xdb), Constant8(0x80=128)]
#       t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
19 db 80 

# None <= call io_write1(t3e8f,) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# 820c8 Out1 [Register(0xdb)]
#       IoWrite1
69 db 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))] })\nArithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))\nArithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xda), Register(0xda)], resolved: None }
# t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
# 820ca AndImm8 [Register(0xda), Constant8(0x0f=15)]
#       t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
#       Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
18 da 0f 

# tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# 820cd OrImm8 [Register(0xda), Constant8(0x80=128)]
#       tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
19 da 80 

# None <= call io_write1(tb5dc,) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# 820d0 Out1 [Register(0xda)]
#       IoWrite1
69 da 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(23,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 820d2 Copy32 [Register(0xe0), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(23,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 e0 00 

# Registers used by this function: {218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232}
# Registers used by callee tree: {148, 149, 150, 151, 152, 153, 154, 155}
# Registers to save: []
# 820d5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 820db StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c e5 20 08 00 

# 820e1 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 f3 1a 08 

# 820e5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 820eb JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_draw_char None
# function_end_lcd_draw_char
# Unreachable None
# 820ed Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_init
# Ret None
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([233])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([236, 237, 238, 239]) Number(0n987145/0x000f1009u32)
# Var t385d (t385d Number(0n1/0x00000001u32)) Reg(U32) Some([236, 237, 238, 239]) Number(0n1/0x00000001u32)
# Var t3d69 (t3d69 Number(0n3/0x03u8)) Reg(U8) Some([240]) Number(0n3/0x03u8)
# Var t477 (t477 Number(0n8/0x08u8)) Reg(U8) Some([233]) Number(0n8/0x08u8)
# Var t9498 (t9498 Number(0n2/0x00000002u32)) Reg(U32) Some([244, 245, 246, 247]) Number(0n2/0x00000002u32)
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([244, 245, 246, 247])
# Var t9e70 (t9e70 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }) Reg(U32) Some([244, 245, 246, 247])
# Var t9f48 (t9f48 Number(0n2/0x02u8)) Reg(U8) Some([233]) Number(0n2/0x02u8)
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([233]) Number(0n1/0x01u8)
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([248]) Number(0n0/0x00u8)
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([233])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([240]) Number(0n80/0x50u8)
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([248]) Number(0n32/0x20u8)
# Var tec13 (tec13 Number(0n12/0x0cu8)) Reg(U8) Some([233]) Number(0n12/0x0cu8)
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# 820f2 LoadImm32 [Register(0xec), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
20 ec 09 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 820f8 LoadImm8 [Register(0xf8), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 f8 00 

# mem[t0] <- ta97f U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# 820fb Store8 [Register(0xf8), Register(0xec)]
#       mem[t0] <- ta97f U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
06 f8 ec 

# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(72,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 820fe LoadImm8 [Register(0xe9), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(72,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 e9 00 

# :lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_init_while_predicate_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe9), Register(0xe9)], resolved: None }
# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 82101 LoadImm8 [Register(0xf0), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 f0 50 

# if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# 82104 Cmp8 [Register(0xf0), Register(0xe9)]
#       if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
15 f0 e9 

# 82107 JcImm [Label24(lcd_init_while_end_2)]
#       if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
71 2b 21 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\n", opcode: JmpImm, args: [Label24(lcd_init_while_body_1)], resolved: None }
# :lcd_init_while_body_1 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_init_while_body_1
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe9), Register(0xe9)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 8210b LoadImm32 [Register(0xf4), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 f4 00 00 00 00 

# 82111 Copy8 [Register(0xe9), Register(0xf4)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b e9 f4 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 82114 AddImm32IgnoreCarry [Register(0xf4), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 f4 0c 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 8211a LoadImm8 [Register(0xf8), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 f8 20 

# mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# 8211d Store8 [Register(0xf8), Register(0xf4)]
#       mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
06 f8 f4 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe9), Register(0xe9)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 82120 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 82123 Add8NoCarryIn [Register(0xe9), Register(0x00), Register(0xe9)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 e9 00 e9 

# goto lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 82127 JmpImm [Label24(lcd_init_while_predicate_0)]
#       goto lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
70 01 21 08 

# :lcd_init_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# lcd_init_while_end_2
# t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# Number(0n3/0x03u8)
# 8212b LoadImm8 [Register(0xf0), Constant8(0x03=3)]
#       t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
#       Number(0n3/0x03u8)
04 f0 03 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 8212e Out1 [Register(0xf0)]
#       IoWrite1
69 f0 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# Number(0n1/0x00000001u32)
# 82130 LoadImm32 [Register(0xec), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
#       Number(0n1/0x00000001u32)
20 ec 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 82136 Copy32 [Register(0xec), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 ec 00 

# Registers used by this function: {233, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248}
# Registers used by callee tree: {148, 149, 150, 151, 152, 153, 154, 155}
# Registers to save: []
# 82139 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 8213f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 49 21 08 00 

# 82145 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 f3 1a 08 

# 82149 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(80,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 8214f Out1 [Register(0xf0)]
#       IoWrite1
69 f0 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(81,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 82151 Copy32 [Register(0xec), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(81,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 ec 00 

# Registers used by this function: {233, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248}
# Registers used by callee tree: {148, 149, 150, 151, 152, 153, 154, 155}
# Registers to save: []
# 82154 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 8215a StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 64 21 08 00 

# 82160 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 f3 1a 08 

# 82164 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(82,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 8216a Out1 [Register(0xf0)]
#       IoWrite1
69 f0 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(83,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 8216c Copy32 [Register(0xec), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(83,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 ec 00 

# Registers used by this function: {233, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248}
# Registers used by callee tree: {148, 149, 150, 151, 152, 153, 154, 155}
# Registers to save: []
# 8216f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 82175 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 7f 21 08 00 

# 8217b JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 f3 1a 08 

# 8217f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# Number(0n2/0x02u8)
# 82185 LoadImm8 [Register(0xe9), Constant8(0x02=2)]
#       t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(85,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
#       Number(0n2/0x02u8)
04 e9 02 

# None <= call io_write1(t9f48,) Some('/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# 82188 Out1 [Register(0xe9)]
#       IoWrite1
69 e9 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 8218a LoadImm32 [Register(0xf4), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 f4 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 82190 Copy32 [Register(0xf4), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 f4 00 

# Registers used by this function: {233, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248}
# Registers used by callee tree: {148, 149, 150, 151, 152, 153, 154, 155}
# Registers to save: []
# 82193 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 82199 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c a3 21 08 00 

# 8219f JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 f3 1a 08 

# 821a3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# None <= call io_write1(t9f48,) Some('/lutcomp/programs/lib/lcd.j':(88,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# 821a9 Out1 [Register(0xe9)]
#       IoWrite1
69 e9 

# t477 <- 0n8/0x08u8  Some('/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
# Number(0n8/0x08u8)
# 821ab LoadImm8 [Register(0xe9), Constant8(0x08=8)]
#       t477 <- 0n8/0x08u8  Some('/lutcomp/programs/lib/lcd.j':(89,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
#       Number(0n8/0x08u8)
04 e9 08 

# None <= call io_write1(t477,) Some('/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
# 821ae Out1 [Register(0xe9)]
#       IoWrite1
69 e9 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(90,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 821b0 Copy32 [Register(0xf4), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(90,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 f4 00 

# Registers used by this function: {233, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248}
# Registers used by callee tree: {148, 149, 150, 151, 152, 153, 154, 155}
# Registers to save: []
# 821b3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 821b9 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c c3 21 08 00 

# 821bf JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 f3 1a 08 

# 821c3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# Number(0n0/0x00u8)
# 821c9 LoadImm8 [Register(0xf8), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
#       Number(0n0/0x00u8)
04 f8 00 

# None <= call io_write1(ta97f,) Some('/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# 821cc Out1 [Register(0xf8)]
#       IoWrite1
69 f8 

# tec13 <- 0n12/0x0cu8  Some('/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
# Number(0n12/0x0cu8)
# 821ce LoadImm8 [Register(0xe9), Constant8(0x0c=12)]
#       tec13 <- 0n12/0x0cu8  Some('/lutcomp/programs/lib/lcd.j':(93,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
#       Number(0n12/0x0cu8)
04 e9 0c 

# None <= call io_write1(tec13,) Some('/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
# 821d1 Out1 [Register(0xe9)]
#       IoWrite1
69 e9 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(94,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 821d3 Copy32 [Register(0xf4), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(94,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 f4 00 

# Registers used by this function: {233, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248}
# Registers used by callee tree: {148, 149, 150, 151, 152, 153, 154, 155}
# Registers to save: []
# 821d6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 821dc StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c e6 21 08 00 

# 821e2 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 f3 1a 08 

# 821e6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# None <= call io_write1(ta97f,) Some('/lutcomp/programs/lib/lcd.j':(96,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# 821ec Out1 [Register(0xf8)]
#       IoWrite1
69 f8 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/lcd.j':(97,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
# Number(0n1/0x01u8)
# 821ee LoadImm8 [Register(0xe9), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/lcd.j':(97,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
#       Number(0n1/0x01u8)
04 e9 01 

# None <= call io_write1(ta11a,) Some('/lutcomp/programs/lib/lcd.j':(97,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
# 821f1 Out1 [Register(0xe9)]
#       IoWrite1
69 e9 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(98,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 821f3 Copy32 [Register(0xf4), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(98,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 f4 00 

# Registers used by this function: {233, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248}
# Registers used by callee tree: {148, 149, 150, 151, 152, 153, 154, 155}
# Registers to save: []
# 821f6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 821fc StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 06 22 08 00 

# 82202 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 f3 1a 08 

# 82206 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 8220c JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_init None
# function_end_lcd_init
# Unreachable None
# 8220e Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_putc
# Ret None
# Arg0=ch
# Var ch (Arg0 ch Number(U8)) Reg(U8) Some([249])
# Var next (Local next Number(U8) Reg(U8)) Reg(U8) Some([249])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([252, 253, 254, 255]) Number(0n987145/0x000f1009u32)
# Var t164d (t164d Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }) Reg(U32) Some([16, 17, 18, 19])
# Var t25ee (t25ee Number(0n10/0x0au8)) Reg(U8) Some([20]) Number(0n10/0x0au8)
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([21])
# Var t78f0 (t78f0 Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))) Reg(U8) Some([249])
# Var ta5ff (ta5ff Ident("next")) Reg(U8) Some([249])
# Var tad4e (tad4e Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) Reg(U32) Some([16, 17, 18, 19])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([249]) Number(0n80/0x50u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([249])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([22]) Number(0n32/0x20u8)
# Var tefac (tefac Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))) Reg(U8) Some([21])
# Var tf5a3 (tf5a3 Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))) Reg(U8) Some([249])
# 82213 Copy8 [Register(0x00), Register(0xf9)]
#       Save function parameter 'ch' registers [0] to locals [249].
0b 00 f9 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xf9), Register(0xf9)], resolved: None }
# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Number(0n10/0x0au8)
# 82216 LoadImm8 [Register(0x14), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       Number(0n10/0x0au8)
04 14 0a 

# if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# 82219 Cmp8 [Register(0xf9), Register(0x14)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
15 f9 14 

# 8221c JzImm [Label24(lcd_putc_if_true_0_1)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
72 24 22 08 

# 82220 JmpImm [Label24(lcd_putc_if_else_0_2)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
70 85 22 08 

# :lcd_putc_if_true_0_1 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_if_true_0_1
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# 82224 LoadImm32 [Register(0xfc), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
20 fc 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# 8222a Load8 [Register(0xfc), Register(0x15)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
05 fc 15 

# t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# 8222d LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
04 00 14 

# 82230 Divide8 [Register(0x15), Register(0x00), Register(0xf9)]
#       t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
17 15 00 f9 

# tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# 82234 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
04 00 01 

# 82237 Add8NoCarryIn [Register(0xf9), Register(0x00), Register(0xf9)]
#       tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
14 f9 00 f9 

# next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# 8223b LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
04 00 14 

# 8223e Mul8_8 [Register(0xf9), Register(0x00), Register(0xf9)]
#       next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
10 f9 00 f9 

# :lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_while_predicate_3
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #10, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t1 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# 82242 LoadImm32 [Register(0xfc), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #10, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t1 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
20 fc 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #11, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# 82248 Load8 [Register(0xfc), Register(0x15)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #11, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
05 fc 15 

# ta5ff <- next U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("next")
# optimized away noop copy Instruction { source: "ta5ff <- next U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\nIdent(\"next\")\n", opcode: Copy8, args: [Register(0xf9), Register(0xf9)], resolved: None }
# if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# 8224b Cmp8 [Register(0xf9), Register(0x15)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
15 f9 15 

# 8224e JcImm [Label24(lcd_putc_while_end_5)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
71 81 22 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\n", opcode: JmpImm, args: [Label24(lcd_putc_while_body_4)], resolved: None }
# :lcd_putc_while_body_4 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_while_body_4
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #15, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t2 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# 82252 LoadImm32 [Register(0xfc), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #15, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t2 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
20 fc 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #16, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t2] U8 -> t5dda <- mem[t0] U8
# 82258 Load8 [Register(0xfc), Register(0x15)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #16, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t2] U8 -> t5dda <- mem[t0] U8
05 fc 15 

# tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# 8225b LoadImm32 [Register(0x10), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
20 10 00 00 00 00 

# 82261 Copy8 [Register(0x15), Register(0x10)]
#       tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
0b 15 10 

# t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# 82264 AddImm32IgnoreCarry [Register(0x10), Constant32(0x000f100c=987148)]
#       t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
32 10 0c 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 8226a LoadImm8 [Register(0x16), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 16 20 

# mem[t164d] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# 8226d Store8 [Register(0x16), Register(0x10)]
#       mem[t164d] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
06 16 10 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #23, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t4] U8 -> t5dda <- mem[t0] U8
# 82270 Load8 [Register(0xfc), Register(0x15)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #23, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t4] U8 -> t5dda <- mem[t0] U8
05 fc 15 

# tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# 82273 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
04 00 01 

# 82276 Add8NoCarryIn [Register(0x15), Register(0x00), Register(0x15)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
14 15 00 15 

# mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# # In IlFunctionId("lcd_putc"), at #25, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t3] <- tefac U8 -> mem[t0] <- tefac U8
# 8227a Store8 [Register(0x15), Register(0xfc)]
#       mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       # In IlFunctionId("lcd_putc"), at #25, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t3] <- tefac U8 -> mem[t0] <- tefac U8
06 15 fc 

# goto lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 8227d JmpImm [Label24(lcd_putc_while_predicate_3)]
#       goto lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
70 42 22 08 

# :lcd_putc_while_end_5 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_while_end_5
# goto lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 82281 JmpImm [Label24(lcd_putc_if_end_0)]
#       goto lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
70 cc 22 08 

# :lcd_putc_if_else_0_2 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_if_else_0_2
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #30, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# 82285 LoadImm32 [Register(0xfc), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #30, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
20 fc 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #31, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t5] U8 -> t5dda <- mem[t0] U8
# 8228b Load8 [Register(0xfc), Register(0x15)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #31, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t5] U8 -> t5dda <- mem[t0] U8
05 fc 15 

# tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# 8228e LoadImm32 [Register(0x10), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
20 10 00 00 00 00 

# 82294 Copy8 [Register(0x15), Register(0x10)]
#       tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
0b 15 10 

# t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# 82297 AddImm32IgnoreCarry [Register(0x10), Constant32(0x000f100c=987148)]
#       t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
32 10 0c 10 0f 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nAssign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xf9), Register(0xf9)], resolved: None }
# mem[t164d] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# 8229d Store8 [Register(0xf9), Register(0x10)]
#       mem[t164d] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
06 f9 10 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #37, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t6] U8 -> t5dda <- mem[t0] U8
# 822a0 Load8 [Register(0xfc), Register(0x15)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #37, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t6] U8 -> t5dda <- mem[t0] U8
05 fc 15 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xf9), Register(0xf9)], resolved: None }
# None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# 822a3 Copy8 [Register(0x15), Register(0x00)]
#       Arg0[i]=t5dda None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b 15 00 

# 822a6 Copy8 [Register(0xf9), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b f9 04 

# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 249, 252, 253, 254, 255}
# Registers used by callee tree: {148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232}
# Registers to save: []
# 822a9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 822af StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c b9 22 08 00 

# 822b5 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 53 20 08 

# 822b9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #42, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t8] U8 -> t5dda <- mem[t0] U8
# 822bf Load8 [Register(0xfc), Register(0x15)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #42, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t8] U8 -> t5dda <- mem[t0] U8
05 fc 15 

# tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# 822c2 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
04 00 01 

# 822c5 Add8NoCarryIn [Register(0x15), Register(0x00), Register(0x15)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
14 15 00 15 

# mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# # In IlFunctionId("lcd_putc"), at #44, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t7] <- tefac U8 -> mem[t0] <- tefac U8
# 822c9 Store8 [Register(0x15), Register(0xfc)]
#       mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       # In IlFunctionId("lcd_putc"), at #44, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t7] <- tefac U8 -> mem[t0] <- tefac U8
06 15 fc 

# :lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_if_end_0
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #46, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t9 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# 822cc LoadImm32 [Register(0xfc), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #46, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t9 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
20 fc 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #47, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t9] U8 -> t5dda <- mem[t0] U8
# 822d2 Load8 [Register(0xfc), Register(0x15)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #47, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t9] U8 -> t5dda <- mem[t0] U8
05 fc 15 

# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 822d5 LoadImm8 [Register(0xf9), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 f9 50 

# if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# 822d8 Cmp8 [Register(0xf9), Register(0x15)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
15 f9 15 

# 822db JcImm [Label24(lcd_putc_if_true_0_7)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
71 e3 22 08 

# 822df JmpImm [Label24(lcd_putc_if_end_6)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
70 f9 22 08 

# :lcd_putc_if_true_0_7 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# lcd_putc_if_true_0_7
# None <= call lcd_scroll_up() Some('/lutcomp/programs/lib/lcd.j':(63,5))
# VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }
# Call(Call { function: "lcd_scroll_up", parameters: [] })
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 249, 252, 253, 254, 255}
# Registers used by callee tree: {23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232}
# Registers to save: []
# 822e3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c fc ff ff ff 

# 822e9 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_scroll_up))
25 0c f3 22 08 00 

# 822ef JmpImm [Label24(:lcd_scroll_up)]
#       PseudoCall(Label24(:lcd_scroll_up))
70 00 23 08 

# 822f3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c 04 00 00 00 

# :lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# lcd_putc_if_end_6
# return None None
# Return { value: None }
# 822f9 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_putc None
# function_end_lcd_putc
# Unreachable None
# 822fb Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_scroll_up
# Ret None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([23])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([28, 29, 30, 31]) Number(0n987145/0x000f1009u32)
# Var t54b2 (t54b2 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }) Reg(U32) Some([28, 29, 30, 31])
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([24])
# Var t760c (t760c Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) Reg(U32) Some([28, 29, 30, 31])
# Var t81b5 (t81b5 Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))) Reg(U8) Some([24])
# Var t9586 (t9586 Number(0n60/0x3cu8)) Reg(U8) Some([23]) Number(0n60/0x3cu8)
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([32, 33, 34, 35])
# Var t9e70 (t9e70 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }) Reg(U32) Some([32, 33, 34, 35])
# Var ta094 (ta094 Index("lcd_display", Ident("i"))) Reg(U8) Some([36])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([24])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([23]) Number(0n80/0x50u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([23])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([23]) Number(0n32/0x20u8)
# Var tfd89 (tfd89 Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) Reg(U8) Some([23])
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# 82300 LoadImm32 [Register(0x1c), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
20 1c 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# # In IlFunctionId("lcd_scroll_up"), at #2, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# 82306 Load8 [Register(0x1c), Register(0x18)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_scroll_up"), at #2, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
05 1c 18 

# t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
# 82309 LoadImm8 [Register(0x00), Constant8(0xec=236)]
#       t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
04 00 ec 

# 8230c Add8NoCarryIn [Register(0x18), Register(0x00), Register(0x18)]
#       t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
14 18 00 18 

# mem[t0] <- t81b5 U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# 82310 Store8 [Register(0x18), Register(0x1c)]
#       mem[t0] <- t81b5 U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
06 18 1c 

# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(29,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82313 LoadImm8 [Register(0x18), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(29,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 18 00 

# :lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_predicate_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t9586 <- 0n60/0x3cu8  Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# Number(0n60/0x3cu8)
# 82316 LoadImm8 [Register(0x17), Constant8(0x3c=60)]
#       t9586 <- 0n60/0x3cu8  Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
#       Number(0n60/0x3cu8)
04 17 3c 

# if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# 82319 Cmp8 [Register(0x17), Register(0x18)]
#       if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
15 17 18 

# 8231c JcImm [Label24(lcd_scroll_up_while_end_2)]
#       if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
71 8b 23 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_1)], resolved: None }
# :lcd_scroll_up_while_body_1 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_body_1
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }\nIndex(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
# 82320 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
04 00 14 

# 82323 Add8NoCarryIn [Register(0x18), Register(0x00), Register(0x17)]
#       tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
14 18 00 17 

# t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# 82327 LoadImm32 [Register(0x1c), Constant32(0x00000000=0)]
#       Zero-pad for t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
20 1c 00 00 00 00 

# 8232d Copy8 [Register(0x17), Register(0x1c)]
#       t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
0b 17 1c 

# t54b2 <- t760c Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# 82330 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x000f100c=987148)]
#       t54b2 <- t760c Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
32 1c 0c 10 0f 00 

# ch <- mem[t54b2] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# 82336 Load8 [Register(0x1c), Register(0x17)]
#       ch <- mem[t54b2] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
05 1c 17 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x17), Register(0x17)], resolved: None }
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\nIndex(\"lcd_display\", Ident(\"i\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 82339 LoadImm32 [Register(0x20), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 20 00 00 00 00 

# 8233f Copy8 [Register(0x18), Register(0x20)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 18 20 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 82342 AddImm32IgnoreCarry [Register(0x20), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 20 0c 10 0f 00 

# ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# 82348 Load8 [Register(0x20), Register(0x24)]
#       ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
05 20 24 

# if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# 8234b Cmp8 [Register(0x17), Register(0x24)]
#       if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
15 17 24 

# 8234e JzImm [Label24(lcd_scroll_up_if_end_3)]
#       if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
72 80 23 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_if_true_0_4)], resolved: None }
# :lcd_scroll_up_if_true_0_4 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# lcd_scroll_up_if_true_0_4
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 82352 LoadImm32 [Register(0x20), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 20 00 00 00 00 

# 82358 Copy8 [Register(0x18), Register(0x20)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 18 20 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 8235b AddImm32IgnoreCarry [Register(0x20), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 20 0c 10 0f 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x17), Register(0x17)], resolved: None }
# mem[t9e70] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# 82361 Store8 [Register(0x17), Register(0x20)]
#       mem[t9e70] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
06 17 20 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x17), Register(0x17)], resolved: None }
# None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# 82364 Copy8 [Register(0x18), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 18 00 

# 82367 Copy8 [Register(0x17), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 17 04 

# Registers used by this function: {23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36}
# Registers used by callee tree: {148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232}
# Registers to save: []
# 8236a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 82370 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 7a 23 08 00 

# 82376 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 53 20 08 

# 8237a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# :lcd_scroll_up_if_end_3 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_if_end_3
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 82380 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 82383 Add8NoCarryIn [Register(0x18), Register(0x00), Register(0x18)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 18 00 18 

# goto lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 82387 JmpImm [Label24(lcd_scroll_up_while_predicate_0)]
#       goto lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
70 16 23 08 

# :lcd_scroll_up_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_while_end_2
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 8238b LoadImm8 [Register(0x17), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 17 50 

# if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# 8238e Cmp8 [Register(0x17), Register(0x18)]
#       if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
15 17 18 

# 82391 JcImm [Label24(lcd_scroll_up_while_end_8)]
#       if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
71 ed 23 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_7)], resolved: None }
# :lcd_scroll_up_while_body_7 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_body_7
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }\nIndex(\"lcd_display\", Ident(\"i\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 82395 LoadImm32 [Register(0x20), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 20 00 00 00 00 

# 8239b Copy8 [Register(0x18), Register(0x20)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 18 20 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 8239e AddImm32IgnoreCarry [Register(0x20), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 20 0c 10 0f 00 

# ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# 823a4 Load8 [Register(0x20), Register(0x24)]
#       ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
05 20 24 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 823a7 LoadImm8 [Register(0x17), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 17 20 

# if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# 823aa Cmp8 [Register(0x24), Register(0x17)]
#       if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
15 24 17 

# 823ad JzImm [Label24(lcd_scroll_up_if_end_9)]
#       if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
72 e2 23 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' Some('/lutcomp/programs/lib/lcd.j':(41,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_if_true_0_10)], resolved: None }
# :lcd_scroll_up_if_true_0_10 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# lcd_scroll_up_if_true_0_10
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 823b1 LoadImm32 [Register(0x20), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 20 00 00 00 00 

# 823b7 Copy8 [Register(0x18), Register(0x20)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 18 20 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 823ba AddImm32IgnoreCarry [Register(0x20), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 20 0c 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 823c0 LoadImm8 [Register(0x17), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 17 20 

# mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# 823c3 Store8 [Register(0x17), Register(0x20)]
#       mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
06 17 20 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
# 823c6 Copy8 [Register(0x18), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
0b 18 00 

# 823c9 Copy8 [Register(0x17), Register(0x04)]
#       Arg1[ch]=tdf3b None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
0b 17 04 

# Registers used by this function: {23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36}
# Registers used by callee tree: {148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232}
# Registers to save: []
# 823cc AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 823d2 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c dc 23 08 00 

# 823d8 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 53 20 08 

# 823dc AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# :lcd_scroll_up_if_end_9 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_if_end_9
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 823e2 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 823e5 Add8NoCarryIn [Register(0x18), Register(0x00), Register(0x18)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 18 00 18 

# goto lcd_scroll_up_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 823e9 JmpImm [Label24(lcd_scroll_up_while_end_2)]
#       goto lcd_scroll_up_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(41,5))
70 8b 23 08 

# :lcd_scroll_up_while_end_8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_while_end_8
# return None None
# Return { value: None }
# 823ed JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_scroll_up None
# function_end_lcd_scroll_up
# Unreachable None
# 823ef Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :main
# Ret Some(U8)
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([40, 41, 42, 43]) Number(0n0/0x00000000u32)
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([44, 45, 46, 47]) Number(0n987728/0x000f1250u32)
# Var inline_main_RpnCalc_init_51_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([44, 45, 46, 47]) Number(0n987732/0x000f1254u32)
# Var inline_main_putc_25_t0 (static "lcd_enable" addr) Reg(U32) Some([40, 41, 42, 43]) Number(0n987228/0x000f105cu32)
# Var inline_main_putc_25_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([48])
# Var inline_main_putc_25_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([49]) Number(0n0/0x00u8)
# Var inline_main_putc_25_tac13 (tac13 Ident("c")) Reg(U8) Some([48]) Number(0n82/0x52u8)
# Var inline_main_putc_26_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([48])
# Var inline_main_putc_26_tac13 (tac13 Ident("c")) Reg(U8) Some([48]) Number(0n80/0x50u8)
# Var inline_main_putc_27_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([48])
# Var inline_main_putc_27_tac13 (tac13 Ident("c")) Reg(U8) Some([48]) Number(0n78/0x4eu8)
# Var inline_main_putc_28_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([48])
# Var inline_main_putc_28_tac13 (tac13 Ident("c")) Reg(U8) Some([48]) Number(0n10/0x0au8)
# Var t2a99 (t2a99 Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([48])
# Var tca8 (tca8 AddressOf(Ident("calc"))) Reg(U32) Some([52, 53, 54, 55]) Number(0n987664/0x000f1210u32)
# None <= call stdio_init() Some('programs/app/rpn.j':(4,5))
# VoidExpression { expression: Call(Call { function: "stdio_init", parameters: [] }) }
# Call(Call { function: "stdio_init", parameters: [] })
# Registers used by this function: {40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55}
# Registers used by callee tree: {16, 20, 21, 22, 23, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 217, 233, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248}
# Registers to save: []
# 823f4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:stdio_init))
32 0c fc ff ff ff 

# 823fa StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:stdio_init))
25 0c 04 24 08 00 

# 82400 JmpImm [Label24(:stdio_init)]
#       PseudoCall(Label24(:stdio_init))
70 32 2c 08 

# 82404 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:stdio_init))
32 0c 04 00 00 00 

# inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# 8240a LoadImm8 [Register(0x30), Constant8(0x52=82)]
#       inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
04 30 52 

# None <= call io_write0(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 8240d Out0 [Register(0x30)]
#       IoWrite0
68 30 

# inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 8240f LoadImm32 [Register(0x28), Constant32(0x000f105c=987228)]
#       inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 28 5c 10 0f 00 

# inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 82415 Load8 [Register(0x28), Register(0x30)]
#       inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 28 30 

# inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82418 LoadImm8 [Register(0x31), Constant8(0x00=0)]
#       inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 31 00 

# if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 8241b Cmp8 [Register(0x30), Register(0x31)]
#       if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 30 31 

# 8241e JzImm [Label24(inline_main_putc_25_putc_if_end_0)]
#       if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 3e 24 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_25_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_25_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_25_putc_if_true_0_1
# inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# 82422 LoadImm8 [Register(0x30), Constant8(0x52=82)]
#       inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
04 30 52 

# None <= call lcd_putc(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 82425 Copy8 [Register(0x30), Register(0x00)]
#       Arg0[ch]=inline_main_putc_25_tac13 None <= call lcd_putc(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 30 00 

# Registers used by this function: {40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: []
# 82428 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 8242e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 38 24 08 00 

# 82434 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 13 22 08 

# 82438 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_main_putc_25_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_25_putc_if_end_0
# inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# 8243e LoadImm8 [Register(0x30), Constant8(0x50=80)]
#       inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
04 30 50 

# None <= call io_write0(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 82441 Out0 [Register(0x30)]
#       IoWrite0
68 30 

# inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("main"), at #13, replacing reference to inline_main_putc_26_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_26_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
# 82443 LoadImm32 [Register(0x28), Constant32(0x000f105c=987228)]
#       inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("main"), at #13, replacing reference to inline_main_putc_26_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_26_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
20 28 5c 10 0f 00 

# inline_main_putc_26_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("main"), at #14, replacing reference to inline_main_putc_26_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 -> inline_main_putc_26_t76c7 <- mem[inline_main_putc_25_t0] U8
# 82449 Load8 [Register(0x28), Register(0x30)]
#       inline_main_putc_26_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("main"), at #14, replacing reference to inline_main_putc_26_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 -> inline_main_putc_26_t76c7 <- mem[inline_main_putc_25_t0] U8
05 28 30 

# inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #15, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_26_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
# 8244c LoadImm8 [Register(0x31), Constant8(0x00=0)]
#       inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #15, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_26_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
04 31 00 

# if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #16, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' -> if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0'
# 8244f Cmp8 [Register(0x30), Register(0x31)]
#       if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #16, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' -> if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0'
15 30 31 

# 82452 JzImm [Label24(inline_main_putc_26_putc_if_end_0)]
#       if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #16, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' -> if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0'
72 72 24 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"main\"), at #16, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' -> if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_main_putc_26_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_26_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_26_putc_if_true_0_1
# inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# 82456 LoadImm8 [Register(0x30), Constant8(0x50=80)]
#       inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
04 30 50 

# None <= call lcd_putc(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 82459 Copy8 [Register(0x30), Register(0x00)]
#       Arg0[ch]=inline_main_putc_26_tac13 None <= call lcd_putc(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 30 00 

# Registers used by this function: {40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: []
# 8245c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 82462 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 6c 24 08 00 

# 82468 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 13 22 08 

# 8246c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_main_putc_26_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_26_putc_if_end_0
# tca8 <- 0n987664/0x000f1210u32  Some('programs/app/rpn.j':(12,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
# Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# Number(0n987664/0x000f1210u32)
# 82472 LoadImm32 [Register(0x34), Constant32(0x000f1210=987664)]
#       tca8 <- 0n987664/0x000f1210u32  Some('programs/app/rpn.j':(12,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
#       AddressOf(Ident("calc"))
#       Number(0n987664/0x000f1210u32)
20 34 10 12 0f 00 

# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32)` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32 `.
# 82478 LoadImm32 [Register(0x2c), Constant32(0x000f1250=987728)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32)` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32 `.
20 2c 50 12 0f 00 

# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 8247e LoadImm32 [Register(0x28), Constant32(0x00000000=0)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 28 00 00 00 00 

# mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# 82484 Store32_1 [Register(0x28), Register(0x2c)]
#       mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
23 28 2c 

# 82487 Store32_2 []
#       mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_c Add Number(0n68/0x00000044u32)` with constant `inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32 `.
# 82488 LoadImm32 [Register(0x2c), Constant32(0x000f1254=987732)]
#       inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_c Add Number(0n68/0x00000044u32)` with constant `inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32 `.
20 2c 54 12 0f 00 

# mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# # In IlFunctionId("main"), at #27, replacing reference to inline_main_RpnCalc_init_51_t60ec with inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 -> mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32
# 8248e Store32_1 [Register(0x28), Register(0x2c)]
#       mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("main"), at #27, replacing reference to inline_main_RpnCalc_init_51_t60ec with inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 -> mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32
23 28 2c 

# 82491 Store32_2 []
#       mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("main"), at #27, replacing reference to inline_main_RpnCalc_init_51_t60ec with inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 -> mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32
24 

# inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# 82492 LoadImm8 [Register(0x30), Constant8(0x4e=78)]
#       inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
04 30 4e 

# None <= call io_write0(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 82495 Out0 [Register(0x30)]
#       IoWrite0
68 30 

# inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("main"), at #30, replacing reference to inline_main_putc_27_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_27_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
# 82497 LoadImm32 [Register(0x28), Constant32(0x000f105c=987228)]
#       inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("main"), at #30, replacing reference to inline_main_putc_27_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_27_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
20 28 5c 10 0f 00 

# inline_main_putc_27_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("main"), at #31, replacing reference to inline_main_putc_27_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 -> inline_main_putc_27_t76c7 <- mem[inline_main_putc_25_t0] U8
# 8249d Load8 [Register(0x28), Register(0x30)]
#       inline_main_putc_27_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("main"), at #31, replacing reference to inline_main_putc_27_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 -> inline_main_putc_27_t76c7 <- mem[inline_main_putc_25_t0] U8
05 28 30 

# inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #32, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_27_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
# 824a0 LoadImm8 [Register(0x31), Constant8(0x00=0)]
#       inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #32, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_27_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
04 31 00 

# if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #33, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' -> if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0'
# 824a3 Cmp8 [Register(0x30), Register(0x31)]
#       if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #33, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' -> if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0'
15 30 31 

# 824a6 JzImm [Label24(inline_main_putc_27_putc_if_end_0)]
#       if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #33, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' -> if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0'
72 c6 24 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"main\"), at #33, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' -> if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_main_putc_27_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_27_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_27_putc_if_true_0_1
# inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# 824aa LoadImm8 [Register(0x30), Constant8(0x4e=78)]
#       inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
04 30 4e 

# None <= call lcd_putc(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 824ad Copy8 [Register(0x30), Register(0x00)]
#       Arg0[ch]=inline_main_putc_27_tac13 None <= call lcd_putc(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 30 00 

# Registers used by this function: {40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: []
# 824b0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 824b6 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c c0 24 08 00 

# 824bc JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 13 22 08 

# 824c0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_main_putc_27_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_27_putc_if_end_0
# inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# 824c6 LoadImm8 [Register(0x30), Constant8(0x0a=10)]
#       inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
04 30 0a 

# None <= call io_write0(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 824c9 Out0 [Register(0x30)]
#       IoWrite0
68 30 

# inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("main"), at #40, replacing reference to inline_main_putc_28_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_28_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
# 824cb LoadImm32 [Register(0x28), Constant32(0x000f105c=987228)]
#       inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("main"), at #40, replacing reference to inline_main_putc_28_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_28_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
20 28 5c 10 0f 00 

# inline_main_putc_28_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("main"), at #41, replacing reference to inline_main_putc_28_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 -> inline_main_putc_28_t76c7 <- mem[inline_main_putc_25_t0] U8
# 824d1 Load8 [Register(0x28), Register(0x30)]
#       inline_main_putc_28_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("main"), at #41, replacing reference to inline_main_putc_28_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 -> inline_main_putc_28_t76c7 <- mem[inline_main_putc_25_t0] U8
05 28 30 

# inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #42, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_28_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
# 824d4 LoadImm8 [Register(0x31), Constant8(0x00=0)]
#       inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #42, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_28_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
04 31 00 

# if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #43, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' -> if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0'
# 824d7 Cmp8 [Register(0x30), Register(0x31)]
#       if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #43, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' -> if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0'
15 30 31 

# 824da JzImm [Label24(inline_main_putc_28_putc_if_end_0)]
#       if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #43, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' -> if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0'
72 fa 24 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"main\"), at #43, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' -> if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_main_putc_28_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_28_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_28_putc_if_true_0_1
# inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# 824de LoadImm8 [Register(0x30), Constant8(0x0a=10)]
#       inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
04 30 0a 

# None <= call lcd_putc(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 824e1 Copy8 [Register(0x30), Register(0x00)]
#       Arg0[ch]=inline_main_putc_28_tac13 None <= call lcd_putc(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 30 00 

# Registers used by this function: {40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: []
# 824e4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 824ea StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c f4 24 08 00 

# 824f0 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 13 22 08 

# 824f4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_main_putc_28_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_28_putc_if_end_0
# Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# 824fa Copy32 [Register(0x34), Register(0x00)]
#       Arg0[calc]=tca8 Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
21 34 00 

# Registers used by this function: {40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52]
# 824fd Push8 [Register(0x34)]
#       Saving reg0x34 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 34 

# 824ff Push8 [Register(0x31)]
#       Saving reg0x31 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 31 

# 82501 Push8 [Register(0x30)]
#       Saving reg0x30 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 30 

# 82503 Push8 [Register(0x2f)]
#       Saving reg0x2f before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2f 

# 82505 Push8 [Register(0x2e)]
#       Saving reg0x2e before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2e 

# 82507 Push8 [Register(0x2d)]
#       Saving reg0x2d before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2d 

# 82509 Push8 [Register(0x2c)]
#       Saving reg0x2c before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2c 

# 8250b Push8 [Register(0x2b)]
#       Saving reg0x2b before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2b 

# 8250d Push8 [Register(0x2a)]
#       Saving reg0x2a before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2a 

# 8250f Push8 [Register(0x29)]
#       Saving reg0x29 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 29 

# 82511 Push8 [Register(0x28)]
#       Saving reg0x28 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 28 

# 82513 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:RpnCalc_run))
32 0c fc ff ff ff 

# 82519 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:RpnCalc_run))
25 0c 23 25 08 00 

# 8251f JmpImm [Label24(:RpnCalc_run)]
#       PseudoCall(Label24(:RpnCalc_run))
70 7c 19 08 

# 82523 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:RpnCalc_run))
32 0c 04 00 00 00 

# 82529 Pop8 [Register(0x28)]
#       Restoring reg0x28 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 28 

# 8252b Pop8 [Register(0x29)]
#       Restoring reg0x29 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 29 

# 8252d Pop8 [Register(0x2a)]
#       Restoring reg0x2a after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2a 

# 8252f Pop8 [Register(0x2b)]
#       Restoring reg0x2b after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2b 

# 82531 Pop8 [Register(0x2c)]
#       Restoring reg0x2c after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2c 

# 82533 Pop8 [Register(0x2d)]
#       Restoring reg0x2d after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2d 

# 82535 Pop8 [Register(0x2e)]
#       Restoring reg0x2e after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2e 

# 82537 Pop8 [Register(0x2f)]
#       Restoring reg0x2f after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2f 

# 82539 Pop8 [Register(0x30)]
#       Restoring reg0x30 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 30 

# 8253b Pop8 [Register(0x31)]
#       Restoring reg0x31 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 31 

# 8253d Pop8 [Register(0x34)]
#       Restoring reg0x34 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 34 

# 8253f Copy8 [Register(0x00), Register(0x30)]
#       Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0b 00 30 

# return Some(t2a99) Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# 82542 Copy8 [Register(0x30), Register(0x00)]
#       return Some(t2a99) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
0b 30 00 

# 82545 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_main None
# function_end_main
# Unreachable None
# 82547 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :mul32_64
# Ret None
# Arg0=a
# Arg1=b
# Arg2=c
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var a_hi (Local a_hi Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var b (Arg1 b Number(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var b_hi (Local b_hi Number(U32) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_0_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_0_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_add_U64_0_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t1335 (t1335 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_t144a (t144a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_add_U64_0_t1506 (t1506 Ident("lo")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_0_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_add_U64_0_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_add_U64_0_t809 (t809 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_add_U64_0_t8956 (t8956 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_add_U64_0_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_0_tbeec (tbeec Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_0_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_0_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_0_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_add_U64_0_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_1_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_1_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_add_U64_1_lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_1_t1335 (t1335 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t144a (t144a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t1506 (t1506 Ident("lo")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_add_U64_1_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t809 (t809 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t8956 (t8956 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_add_U64_1_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_1_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_tbeec (tbeec Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_1_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_a (Arg0 a Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_10_b (Arg1 b Number(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_mul16_32_10_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_10_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_10_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_10_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_10_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_mul32_64_mul16_32_10_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([96])
# Var inline_mul32_64_mul16_32_10_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_mul32_64_mul16_32_10_t3585 (t3585 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_10_t45f5 (t45f5 Ident("d")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_mul16_32_10_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_10_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([97])
# Var inline_mul32_64_mul16_32_10_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([96])
# Var inline_mul32_64_mul16_32_10_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_10_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([97])
# Var inline_mul32_64_mul16_32_10_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_10_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([98]) Number(0n0/0x00u8)
# Var inline_mul32_64_mul16_32_10_tac13 (tac13 Ident("c")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_10_tace9 (tace9 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_mul16_32_10_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_10_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_10_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([99])
# Var inline_mul32_64_mul16_32_11_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_11_b (Arg1 b Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_11_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_mul16_32_11_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_11_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_11_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_11_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([100])
# Var inline_mul32_64_mul16_32_11_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([100])
# Var inline_mul32_64_mul16_32_11_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([100])
# Var inline_mul32_64_mul16_32_11_t3585 (t3585 Ident("e")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_11_t45f5 (t45f5 Ident("d")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_11_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_11_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([101])
# Var inline_mul32_64_mul16_32_11_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([100])
# Var inline_mul32_64_mul16_32_11_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_11_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([101])
# Var inline_mul32_64_mul16_32_11_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_11_tac13 (tac13 Ident("c")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_mul16_32_11_tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_11_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_11_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_11_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_mul32_64_mul16_32_8_a (Arg0 a Number(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_8_b (Arg1 b Number(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_8_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_8_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_8_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_8_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_8_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([102])
# Var inline_mul32_64_mul16_32_8_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([102])
# Var inline_mul32_64_mul16_32_8_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([102])
# Var inline_mul32_64_mul16_32_8_t3585 (t3585 Ident("e")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_8_t45f5 (t45f5 Ident("d")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_8_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_8_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_8_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([102])
# Var inline_mul32_64_mul16_32_8_t8792 (t8792 Ident("a")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_8_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_8_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_8_tac13 (tac13 Ident("c")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_8_tace9 (tace9 Ident("b")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_8_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_8_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_8_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([97])
# Var inline_mul32_64_mul16_32_9_a (Arg0 a Number(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_9_b (Arg1 b Number(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_9_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_9_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_9_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_9_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_9_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([102])
# Var inline_mul32_64_mul16_32_9_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([102])
# Var inline_mul32_64_mul16_32_9_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([102])
# Var inline_mul32_64_mul16_32_9_t3585 (t3585 Ident("e")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_9_t45f5 (t45f5 Ident("d")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_9_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_9_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([108])
# Var inline_mul32_64_mul16_32_9_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([102])
# Var inline_mul32_64_mul16_32_9_t8792 (t8792 Ident("a")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_9_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([108])
# Var inline_mul32_64_mul16_32_9_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_9_tac13 (tac13 Ident("c")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_9_tace9 (tace9 Ident("b")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_9_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_9_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_9_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([97])
# Var t1335 (t1335 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([112, 113, 114, 115])
# Var t3308 (t3308 Ident("temp_lo")) Reg(U32) Some([60, 61, 62, 63])
# Var t3970 (t3970 Index("temp", Number(0n2/0x02u8))) Reg(U8) Some([96])
# Var t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([100])
# Var t3b80 (t3b80 Index("temp", Number(0n3/0x03u8))) Reg(U8) Some([96])
# Var t3d83 (t3d83 Index("temp", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var t41f5 (t41f5 Ident("temp_hi")) Reg(U32) Some([64, 65, 66, 67])
# Var t4a94 (t4a94 Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))) Reg(U32) Some([60, 61, 62, 63])
# Var t5a04 (t5a04 Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })) Reg(U32) Some([76, 77, 78, 79])
# Var t5cca (t5cca Ident("b_hi")) Reg(U32) Some([68, 69, 70, 71])
# Var t720d (t720d Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([76, 77, 78, 79])
# Var t82cc (t82cc Index("b", Number(0n2/0x02u8))) Reg(U8) Some([99])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var t9186 (t9186 Index("temp", Number(0n0/0x00u8))) Reg(U8) Some([96])
# Var t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([100])
# Var ta5f7 (ta5f7 Index("b", Number(0n3/0x03u8))) Reg(U8) Some([99])
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([72, 73, 74, 75])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var te546 (te546 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }) Reg(U32) Some([116, 117, 118, 119])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([116, 117, 118, 119])
# Var temp (Local temp Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var temp_hi (Local temp_hi Number(U32) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var temp_lo (Local temp_lo Number(U32) Reg(U32)) Reg(U32) Some([112, 113, 114, 115])
# Var tf4b2 (tf4b2 AddressOf(Ident("temp64"))) Reg(U32) Some([64, 65, 66, 67])
# 8254c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       reserve 8 bytes of stack space for locals
32 0c f8 ff ff ff 

# 82552 Copy32 [Register(0x00), Register(0x38)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [56, 57, 58, 59].
21 00 38 

# 82555 Copy32 [Register(0x04), Register(0x40)]
#       Save function parameter 'b' registers [4, 5, 6, 7] to locals [64, 65, 66, 67].
21 04 40 

# 82558 Copy32 [Register(0x08), Register(0x48)]
#       Save function parameter 'c' registers [8, 9, 10, 11] to locals [72, 73, 74, 75].
21 08 48 

# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
# 8255b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
32 0c f8 ff ff ff 

# a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(58,5))
# Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 82561 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(58,5))
#       Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 3c 00 00 00 00 

# t94df <- a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# Index("a", Number(0n3/0x03u8))
# 82567 Copy8 [Register(0x3b), Register(0x64)]
#       t94df <- a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
#       Index("a", Number(0n3/0x03u8))
0b 3b 64 

# a_hi[0x01..0x02] <- t94df U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# 8256a Copy8 [Register(0x64), Register(0x3d)]
#       a_hi[0x01..0x02] <- t94df U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
0b 64 3d 

# t3b02 <- a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# Index("a", Number(0n2/0x02u8))
# 8256d Copy8 [Register(0x3a), Register(0x64)]
#       t3b02 <- a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
#       Index("a", Number(0n2/0x02u8))
0b 3a 64 

# a_hi[0x00..0x01] <- t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# 82570 Copy8 [Register(0x64), Register(0x3c)]
#       a_hi[0x00..0x01] <- t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
0b 64 3c 

# b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(62,5))
# Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 82573 LoadImm32 [Register(0x44), Constant32(0x00000000=0)]
#       b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(62,5))
#       Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 44 00 00 00 00 

# ta5f7 <- b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# Index("b", Number(0n3/0x03u8))
# 82579 Copy8 [Register(0x43), Register(0x63)]
#       ta5f7 <- b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
#       Index("b", Number(0n3/0x03u8))
0b 43 63 

# b_hi[0x01..0x02] <- ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# 8257c Copy8 [Register(0x63), Register(0x45)]
#       b_hi[0x01..0x02] <- ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
0b 63 45 

# t82cc <- b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# Index("b", Number(0n2/0x02u8))
# 8257f Copy8 [Register(0x42), Register(0x63)]
#       t82cc <- b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
#       Index("b", Number(0n2/0x02u8))
0b 42 63 

# b_hi[0x00..0x01] <- t82cc U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# 82582 Copy8 [Register(0x63), Register(0x44)]
#       b_hi[0x00..0x01] <- t82cc U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
0b 63 44 

# t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_mul16_32_8_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 82585 Copy32 [Register(0x38), Register(0x4c)]
#       inline_mul32_64_mul16_32_8_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 38 4c 

# inline_mul32_64_mul16_32_8_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 82588 Copy32 [Register(0x40), Register(0x50)]
#       inline_mul32_64_mul16_32_8_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 40 50 

# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 8258b Mul8_16 [Register(0x4c), Register(0x50), Register(0x58)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 4c 50 58 

# 8258f LoadImm8 [Register(0x5a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 5a 00 

# 82592 LoadImm8 [Register(0x5b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 5b 00 

# inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 82595 Copy8 [Register(0x4d), Register(0x66)]
#       inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 4d 66 

# inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 82598 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 68 00 00 00 00 

# 8259e Copy8 [Register(0x66), Register(0x68)]
#       inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 66 68 

# inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 825a1 Copy8 [Register(0x51), Register(0x61)]
#       inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 51 61 

# inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 825a4 LoadImm32 [Register(0x5c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 5c 00 00 00 00 

# 825aa Copy8 [Register(0x61), Register(0x5c)]
#       inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 61 5c 

# inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 825ad Mul8_16 [Register(0x68), Register(0x5c), Register(0x5c)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 68 5c 5c 

# 825b1 LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 5e 00 

# 825b4 LoadImm8 [Register(0x5f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 5f 00 

# inline_mul32_64_mul16_32_8_t6ec2 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 825b7 Copy8 [Register(0x5d), Register(0x62)]
#       inline_mul32_64_mul16_32_8_t6ec2 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 5d 62 

# inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 825ba Copy8 [Register(0x62), Register(0x5f)]
#       inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 62 5f 

# inline_mul32_64_mul16_32_8_t9922 <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 825bd Copy8 [Register(0x5c), Register(0x62)]
#       inline_mul32_64_mul16_32_8_t9922 <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 5c 62 

# inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 825c0 Copy8 [Register(0x62), Register(0x5e)]
#       inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 62 5e 

# inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("mul32_64"), at #27, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# 825c3 LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("mul32_64"), at #27, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
04 62 00 

# inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #28, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
# 825c6 Copy8 [Register(0x62), Register(0x5d)]
#       inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #28, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 62 5d 

# inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #29, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# 825c9 Copy8 [Register(0x62), Register(0x5c)]
#       inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #29, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 62 5c 

# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 825cc ClearCarry []
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 825cd AddCarry32_1 [Register(0x58), Register(0x5c), Register(0x58)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 58 5c 58 

# 825d1 AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 825d2 Copy8 [Register(0x51), Register(0x61)]
#       inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 51 61 

# inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 825d5 LoadImm32 [Register(0x5c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 5c 00 00 00 00 

# 825db Copy8 [Register(0x61), Register(0x5c)]
#       inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 61 5c 

# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 825de Mul8_16 [Register(0x4c), Register(0x5c), Register(0x5c)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 4c 5c 5c 

# 825e2 LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 5e 00 

# 825e5 LoadImm8 [Register(0x5f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 5f 00 

# inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 825e8 Copy8 [Register(0x4d), Register(0x66)]
#       inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 4d 66 

# inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 825eb LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 68 00 00 00 00 

# 825f1 Copy8 [Register(0x66), Register(0x68)]
#       inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 66 68 

# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 825f4 Mul8_16 [Register(0x68), Register(0x50), Register(0x4c)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 68 50 4c 

# 825f8 LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 4e 00 

# 825fb LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 4f 00 

# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 825fe Copy32 [Register(0x5c), Register(0x50)]
#       inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 5c 50 

# inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 82601 ClearCarry []
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 82602 AddCarry32_1 [Register(0x50), Register(0x4c), Register(0x5c)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 50 4c 5c 

# 82606 AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_8_t8575 <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 82607 Copy8 [Register(0x5e), Register(0x66)]
#       inline_mul32_64_mul16_32_8_t8575 <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 5e 66 

# inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 8260a Copy8 [Register(0x66), Register(0x5f)]
#       inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 66 5f 

# inline_mul32_64_mul16_32_8_t34f7 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 8260d Copy8 [Register(0x5d), Register(0x66)]
#       inline_mul32_64_mul16_32_8_t34f7 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 5d 66 

# inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 82610 Copy8 [Register(0x66), Register(0x5e)]
#       inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 66 5e 

# inline_mul32_64_mul16_32_8_t30b9 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 82613 Copy8 [Register(0x5c), Register(0x66)]
#       inline_mul32_64_mul16_32_8_t30b9 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 5c 66 

# inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 82616 Copy8 [Register(0x66), Register(0x5d)]
#       inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 66 5d 

# inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #50, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# 82619 Copy8 [Register(0x62), Register(0x5c)]
#       inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #50, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 62 5c 

# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 8261c Copy32 [Register(0x5c), Register(0x50)]
#       inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 5c 50 

# inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 8261f ClearCarry []
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 82620 AddCarry32_1 [Register(0x58), Register(0x50), Register(0x4c)]
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 58 50 4c 

# 82624 AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# t720d <- inline_mul32_64_mul16_32_8_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "t720d <- inline_mul32_64_mul16_32_8_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# mem[c] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# 82625 Store32_1 [Register(0x4c), Register(0x48)]
#       mem[c] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
23 4c 48 

# 82628 Store32_2 []
#       mem[c] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
24 

# t1335 <- c Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 82629 Copy32 [Register(0x48), Register(0x70)]
#       t1335 <- c Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 48 70 

# 8262c AddImm32IgnoreCarry [Register(0x70), Constant32(0x00000004=4)]
#       t1335 <- c Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 70 04 00 00 00 

# t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# Ident("b_hi")
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })\nIdent(\"b_hi\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_9_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# 82632 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_mul32_64_mul16_32_9_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
21 3c 4c 

# inline_mul32_64_mul16_32_9_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# 82635 Copy32 [Register(0x44), Register(0x50)]
#       inline_mul32_64_mul16_32_9_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
21 44 50 

# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 82638 Mul8_16 [Register(0x4c), Register(0x50), Register(0x58)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 4c 50 58 

# 8263c LoadImm8 [Register(0x5a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 5a 00 

# 8263f LoadImm8 [Register(0x5b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 5b 00 

# inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 82642 Copy8 [Register(0x4d), Register(0x66)]
#       inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 4d 66 

# inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 82645 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 68 00 00 00 00 

# 8264b Copy8 [Register(0x66), Register(0x68)]
#       inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 66 68 

# inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 8264e Copy8 [Register(0x51), Register(0x61)]
#       inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 51 61 

# inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 82651 LoadImm32 [Register(0x5c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 5c 00 00 00 00 

# 82657 Copy8 [Register(0x61), Register(0x5c)]
#       inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 61 5c 

# inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 8265a Mul8_16 [Register(0x68), Register(0x5c), Register(0x5c)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 68 5c 5c 

# 8265e LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 5e 00 

# 82661 LoadImm8 [Register(0x5f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 5f 00 

# inline_mul32_64_mul16_32_9_t6ec2 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 82664 Copy8 [Register(0x5d), Register(0x6c)]
#       inline_mul32_64_mul16_32_9_t6ec2 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 5d 6c 

# inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 82667 Copy8 [Register(0x6c), Register(0x5f)]
#       inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 6c 5f 

# inline_mul32_64_mul16_32_9_t9922 <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 8266a Copy8 [Register(0x5c), Register(0x6c)]
#       inline_mul32_64_mul16_32_9_t9922 <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 5c 6c 

# inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 8266d Copy8 [Register(0x6c), Register(0x5e)]
#       inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 6c 5e 

# inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #74, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
# 82670 Copy8 [Register(0x62), Register(0x5d)]
#       inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #74, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 62 5d 

# inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #75, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# 82673 Copy8 [Register(0x62), Register(0x5c)]
#       inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #75, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 62 5c 

# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 82676 ClearCarry []
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 82677 AddCarry32_1 [Register(0x58), Register(0x5c), Register(0x58)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 58 5c 58 

# 8267b AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 8267c Copy8 [Register(0x51), Register(0x61)]
#       inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 51 61 

# inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 8267f LoadImm32 [Register(0x5c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 5c 00 00 00 00 

# 82685 Copy8 [Register(0x61), Register(0x5c)]
#       inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 61 5c 

# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 82688 Mul8_16 [Register(0x4c), Register(0x5c), Register(0x5c)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 4c 5c 5c 

# 8268c LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 5e 00 

# 8268f LoadImm8 [Register(0x5f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 5f 00 

# inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 82692 Copy8 [Register(0x4d), Register(0x66)]
#       inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 4d 66 

# inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 82695 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 68 00 00 00 00 

# 8269b Copy8 [Register(0x66), Register(0x68)]
#       inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 66 68 

# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 8269e Mul8_16 [Register(0x68), Register(0x50), Register(0x4c)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 68 50 4c 

# 826a2 LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 4e 00 

# 826a5 LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 4f 00 

# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 826a8 Copy32 [Register(0x5c), Register(0x50)]
#       inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 5c 50 

# inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 826ab ClearCarry []
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 826ac AddCarry32_1 [Register(0x50), Register(0x4c), Register(0x5c)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 50 4c 5c 

# 826b0 AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_9_t8575 <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 826b1 Copy8 [Register(0x5e), Register(0x66)]
#       inline_mul32_64_mul16_32_9_t8575 <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 5e 66 

# inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 826b4 Copy8 [Register(0x66), Register(0x5f)]
#       inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 66 5f 

# inline_mul32_64_mul16_32_9_t34f7 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 826b7 Copy8 [Register(0x5d), Register(0x66)]
#       inline_mul32_64_mul16_32_9_t34f7 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 5d 66 

# inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 826ba Copy8 [Register(0x66), Register(0x5e)]
#       inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 66 5e 

# inline_mul32_64_mul16_32_9_t30b9 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 826bd Copy8 [Register(0x5c), Register(0x66)]
#       inline_mul32_64_mul16_32_9_t30b9 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 5c 66 

# inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 826c0 Copy8 [Register(0x66), Register(0x5d)]
#       inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 66 5d 

# inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #96, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# 826c3 Copy8 [Register(0x62), Register(0x5c)]
#       inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #96, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 62 5c 

# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 826c6 Copy32 [Register(0x5c), Register(0x50)]
#       inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 5c 50 

# inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 826c9 ClearCarry []
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 826ca AddCarry32_1 [Register(0x58), Register(0x50), Register(0x4c)]
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 58 50 4c 

# 826ce AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# 826cf Store32_1 [Register(0x4c), Register(0x70)]
#       mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
23 4c 70 

# 826d2 Store32_2 []
#       mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
24 

# temp_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(71,5))
# Assign { target: Ident("temp_lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 826d3 LoadImm32 [Register(0x70), Constant32(0x00000000=0)]
#       temp_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(71,5))
#       Assign { target: Ident("temp_lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 70 00 00 00 00 

# temp_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(72,5))
# Assign { target: Ident("temp_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 826d9 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       temp_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(72,5))
#       Assign { target: Ident("temp_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 68 00 00 00 00 

# t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_mul16_32_10_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_10_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 826df Mul8_16 [Register(0x3c), Register(0x40), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 3c 40 4c 

# 826e3 LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4e 00 

# 826e6 LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4f 00 

# inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 826e9 Copy8 [Register(0x3d), Register(0x60)]
#       inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 826ec LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 58 00 00 00 00 

# 826f2 Copy8 [Register(0x60), Register(0x58)]
#       inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 58 

# inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 826f5 Copy8 [Register(0x41), Register(0x63)]
#       inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 41 63 

# inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 826f8 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 826fe Copy8 [Register(0x63), Register(0x50)]
#       inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 63 50 

# inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 82701 Mul8_16 [Register(0x58), Register(0x50), Register(0x50)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 58 50 50 

# 82705 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 52 00 

# 82708 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 53 00 

# inline_mul32_64_mul16_32_10_t6ec2 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 8270b Copy8 [Register(0x51), Register(0x61)]
#       inline_mul32_64_mul16_32_10_t6ec2 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 51 61 

# inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 8270e Copy8 [Register(0x61), Register(0x53)]
#       inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 61 53 

# inline_mul32_64_mul16_32_10_t9922 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 82711 Copy8 [Register(0x50), Register(0x61)]
#       inline_mul32_64_mul16_32_10_t9922 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 50 61 

# inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 82714 Copy8 [Register(0x61), Register(0x52)]
#       inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 61 52 

# inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 82717 Copy8 [Register(0x62), Register(0x51)]
#       inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 62 51 

# inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 8271a Copy8 [Register(0x62), Register(0x50)]
#       inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 62 50 

# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 8271d ClearCarry []
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 8271e AddCarry32_1 [Register(0x4c), Register(0x50), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 4c 50 4c 

# 82722 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 82723 Copy8 [Register(0x41), Register(0x63)]
#       inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 41 63 

# inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 82726 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 8272c Copy8 [Register(0x63), Register(0x50)]
#       inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 63 50 

# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 8272f Mul8_16 [Register(0x3c), Register(0x50), Register(0x50)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 3c 50 50 

# 82733 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 52 00 

# 82736 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 53 00 

# inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 82739 Copy8 [Register(0x3d), Register(0x60)]
#       inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 8273c LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 58 00 00 00 00 

# 82742 Copy8 [Register(0x60), Register(0x58)]
#       inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 58 

# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 82745 Mul8_16 [Register(0x58), Register(0x40), Register(0x3c)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 58 40 3c 

# 82749 LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3e 00 

# 8274c LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3f 00 

# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 8274f Copy32 [Register(0x50), Register(0x40)]
#       inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 50 40 

# inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 82752 ClearCarry []
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 82753 AddCarry32_1 [Register(0x40), Register(0x3c), Register(0x50)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 40 3c 50 

# 82757 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_10_t8575 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 82758 Copy8 [Register(0x52), Register(0x60)]
#       inline_mul32_64_mul16_32_10_t8575 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 52 60 

# inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 8275b Copy8 [Register(0x60), Register(0x53)]
#       inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 60 53 

# inline_mul32_64_mul16_32_10_t34f7 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 8275e Copy8 [Register(0x51), Register(0x60)]
#       inline_mul32_64_mul16_32_10_t34f7 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 51 60 

# inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 82761 Copy8 [Register(0x60), Register(0x52)]
#       inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 60 52 

# inline_mul32_64_mul16_32_10_t30b9 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 82764 Copy8 [Register(0x50), Register(0x60)]
#       inline_mul32_64_mul16_32_10_t30b9 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 50 60 

# inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 82767 Copy8 [Register(0x60), Register(0x51)]
#       inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 60 51 

# inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 8276a Copy8 [Register(0x62), Register(0x50)]
#       inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 62 50 

# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 8276d Copy32 [Register(0x50), Register(0x40)]
#       inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 50 40 

# inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 82770 ClearCarry []
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 82771 AddCarry32_1 [Register(0x4c), Register(0x40), Register(0x3c)]
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 4c 40 3c 

# 82775 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# temp <- inline_mul32_64_mul16_32_10_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "temp <- inline_mul32_64_mul16_32_10_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# Index("temp", Number(0n0/0x00u8))
# 82776 Copy8 [Register(0x3c), Register(0x60)]
#       t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
#       Index("temp", Number(0n0/0x00u8))
0b 3c 60 

# temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# 82779 Copy8 [Register(0x60), Register(0x72)]
#       temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
0b 60 72 

# t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# Index("temp", Number(0n1/0x01u8))
# 8277c Copy8 [Register(0x3d), Register(0x60)]
#       t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
#       Index("temp", Number(0n1/0x01u8))
0b 3d 60 

# temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# 8277f Copy8 [Register(0x60), Register(0x73)]
#       temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
0b 60 73 

# t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# Index("temp", Number(0n2/0x02u8))
# 82782 Copy8 [Register(0x3e), Register(0x60)]
#       t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
#       Index("temp", Number(0n2/0x02u8))
0b 3e 60 

# temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# 82785 Copy8 [Register(0x60), Register(0x68)]
#       temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
0b 60 68 

# t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# Index("temp", Number(0n3/0x03u8))
# 82788 Copy8 [Register(0x3f), Register(0x60)]
#       t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
#       Index("temp", Number(0n3/0x03u8))
0b 3f 60 

# temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# 8278b Copy8 [Register(0x60), Register(0x69)]
#       temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
0b 60 69 

# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 8278e Copy32 [Register(0x0c), Register(0x74)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c 74 

# t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Ident("temp_lo")
# 82791 Copy32 [Register(0x70), Register(0x3c)]
#       t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Ident("temp_lo")
21 70 3c 

# mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# 82794 Store32_1 [Register(0x3c), Register(0x74)]
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
23 3c 74 

# 82797 Store32_2 []
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
24 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# Ident("__frame_pointer")
# 82798 Copy32 [Register(0x0c), Register(0x74)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
#       Ident("__frame_pointer")
21 0c 74 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# 8279b Copy32 [Register(0x74), Register(0x3c)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
21 74 3c 

# 8279e AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
32 3c 04 00 00 00 

# t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Ident("temp_hi")
# 827a4 Copy32 [Register(0x68), Register(0x40)]
#       t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Ident("temp_hi")
21 68 40 

# mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# 827a7 Store32_1 [Register(0x40), Register(0x3c)]
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
23 40 3c 

# 827aa Store32_2 []
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
24 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# Ident("__frame_pointer")
# 827ab Copy32 [Register(0x0c), Register(0x74)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
#       Ident("__frame_pointer")
21 0c 74 

# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# 827ae Copy32 [Register(0x74), Register(0x3c)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
21 74 3c 

# 827b1 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
32 3c 00 00 00 00 

# tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# 827b7 Copy32 [Register(0x3c), Register(0x40)]
#       tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
21 3c 40 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_0_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 827ba Copy32 [Register(0x48), Register(0x3c)]
#       inline_mul32_64_add_U64_0_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 48 3c 

# inline_mul32_64_add_U64_0_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_add_U64_0_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 827bd Copy32 [Register(0x48), Register(0x4c)]
#       inline_mul32_64_add_U64_0_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 48 4c 

# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))\nAssign { target: Ident(\"lo\"), var_type: Some(Number(U32)), value: PtrFieldDeref(\"a\", \"lo\") }\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# 827c0 Load32 [Register(0x3c), Register(0x50)]
#       inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
#       PtrFieldDeref("a", "lo")
22 3c 50 

# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 827c3 Copy32 [Register(0x4c), Register(0x54)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 4c 54 

# 827c6 AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 54 04 00 00 00 

# inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
# 827cc Copy32 [Register(0x3c), Register(0x58)]
#       inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
21 3c 58 

# 827cf AddImm32IgnoreCarry [Register(0x58), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
32 58 04 00 00 00 

# inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# 827d5 Load32 [Register(0x58), Register(0x5c)]
#       inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
22 58 5c 

# inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
# 827d8 Copy32 [Register(0x40), Register(0x58)]
#       inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
21 40 58 

# 827db AddImm32IgnoreCarry [Register(0x58), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
32 58 04 00 00 00 

# inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# 827e1 Load32 [Register(0x58), Register(0x58)]
#       inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
22 58 58 

# inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# 827e4 ClearCarry []
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
03 

# 827e5 AddCarry32_1 [Register(0x5c), Register(0x58), Register(0x58)]
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
30 5c 58 58 

# 827e9 AddCarry32_2 []
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
31 

# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# 827ea Store32_1 [Register(0x58), Register(0x54)]
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
23 58 54 

# 827ed Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
24 

# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# 827ee Load32 [Register(0x3c), Register(0x54)]
#       inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("a", "lo")
22 3c 54 

# inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# 827f1 Load32 [Register(0x40), Register(0x3c)]
#       inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
22 40 3c 

# inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# 827f4 ClearCarry []
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
03 

# 827f5 AddCarry32_1 [Register(0x54), Register(0x3c), Register(0x3c)]
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
30 54 3c 3c 

# 827f9 AddCarry32_2 []
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
31 

# mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# 827fa Store32_1 [Register(0x3c), Register(0x4c)]
#       mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
23 3c 4c 

# 827fd Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
24 

# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\nPtrFieldDeref(\"c\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# 827fe Load32 [Register(0x4c), Register(0x40)]
#       inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       PtrFieldDeref("c", "lo")
22 4c 40 

# inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# Ident("lo")
# 82801 Copy32 [Register(0x50), Register(0x3c)]
#       inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       Ident("lo")
21 50 3c 

# if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# 82804 Cmp8 [Register(0x3f), Register(0x43)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
15 3f 43 

# 82807 Cmp8IfZero [Register(0x3e), Register(0x42)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 3e 42 

# 8280a Cmp8IfZero [Register(0x3d), Register(0x41)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 3d 41 

# 8280d Cmp8IfZero [Register(0x3c), Register(0x40)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 3c 40 

# 82810 JcImm [Label24(inline_mul32_64_add_U64_0_add_U64_if_end_0)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
71 33 28 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_0_add_U64_if_true_0_1 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# inline_mul32_64_add_U64_0_add_U64_if_true_0_1
# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 82814 Copy32 [Register(0x4c), Register(0x54)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 4c 54 

# 82817 AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 54 04 00 00 00 

# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32))\nPtrFieldDeref(\"c\", \"hi\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 8281d Copy32 [Register(0x4c), Register(0x54)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 4c 54 

# 82820 AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 54 04 00 00 00 

# inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# 82826 Load32 [Register(0x54), Register(0x3c)]
#       inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
22 54 3c 

# inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# 82829 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
32 3c 01 00 00 00 

# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# 8282f Store32_1 [Register(0x3c), Register(0x54)]
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
23 3c 54 

# 82832 Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
24 

# :inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_0_add_U64_if_end_0
# t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("b_hi")
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"b_hi\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_11_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_11_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# 82833 Copy32 [Register(0x44), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
#       Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
21 44 3c 

# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 82836 Mul8_16 [Register(0x38), Register(0x3c), Register(0x40)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 38 3c 40 

# 8283a LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 42 00 

# 8283d LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 43 00 

# inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 82840 Copy8 [Register(0x39), Register(0x64)]
#       inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 39 64 

# inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 82843 LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 4c 00 00 00 00 

# 82849 Copy8 [Register(0x64), Register(0x4c)]
#       inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 64 4c 

# inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 8284c Copy8 [Register(0x3d), Register(0x60)]
#       inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 3d 60 

# inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 8284f LoadImm32 [Register(0x44), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 44 00 00 00 00 

# 82855 Copy8 [Register(0x60), Register(0x44)]
#       inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 60 44 

# inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 82858 Mul8_16 [Register(0x4c), Register(0x44), Register(0x44)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 4c 44 44 

# 8285c LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 46 00 

# 8285f LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 47 00 

# inline_mul32_64_mul16_32_11_t6ec2 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 82862 Copy8 [Register(0x45), Register(0x65)]
#       inline_mul32_64_mul16_32_11_t6ec2 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 45 65 

# inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 82865 Copy8 [Register(0x65), Register(0x47)]
#       inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 65 47 

# inline_mul32_64_mul16_32_11_t9922 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 82868 Copy8 [Register(0x44), Register(0x65)]
#       inline_mul32_64_mul16_32_11_t9922 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 44 65 

# inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 8286b Copy8 [Register(0x65), Register(0x46)]
#       inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 65 46 

# inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("mul32_64"), at #216, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# 8286e LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("mul32_64"), at #216, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
04 62 00 

# inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #217, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
# 82871 Copy8 [Register(0x62), Register(0x45)]
#       inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #217, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 62 45 

# inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #218, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# 82874 Copy8 [Register(0x62), Register(0x44)]
#       inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #218, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 62 44 

# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 82877 ClearCarry []
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 82878 AddCarry32_1 [Register(0x40), Register(0x44), Register(0x40)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 40 44 40 

# 8287c AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 8287d Copy8 [Register(0x3d), Register(0x60)]
#       inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 3d 60 

# inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 82880 LoadImm32 [Register(0x44), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 44 00 00 00 00 

# 82886 Copy8 [Register(0x60), Register(0x44)]
#       inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 60 44 

# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 82889 Mul8_16 [Register(0x38), Register(0x44), Register(0x44)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 38 44 44 

# 8288d LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 46 00 

# 82890 LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 47 00 

# inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 82893 Copy8 [Register(0x39), Register(0x64)]
#       inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 39 64 

# inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 82896 LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 4c 00 00 00 00 

# 8289c Copy8 [Register(0x64), Register(0x4c)]
#       inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 64 4c 

# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 8289f Mul8_16 [Register(0x4c), Register(0x3c), Register(0x38)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 4c 3c 38 

# 828a3 LoadImm8 [Register(0x3a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3a 00 

# 828a6 LoadImm8 [Register(0x3b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3b 00 

# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 828a9 Copy32 [Register(0x44), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 44 3c 

# inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 828ac ClearCarry []
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 828ad AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x44)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 3c 38 44 

# 828b1 AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_11_t8575 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 828b2 Copy8 [Register(0x46), Register(0x64)]
#       inline_mul32_64_mul16_32_11_t8575 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 46 64 

# inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 828b5 Copy8 [Register(0x64), Register(0x47)]
#       inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 64 47 

# inline_mul32_64_mul16_32_11_t34f7 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 828b8 Copy8 [Register(0x45), Register(0x64)]
#       inline_mul32_64_mul16_32_11_t34f7 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 45 64 

# inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 828bb Copy8 [Register(0x64), Register(0x46)]
#       inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 64 46 

# inline_mul32_64_mul16_32_11_t30b9 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 828be Copy8 [Register(0x44), Register(0x64)]
#       inline_mul32_64_mul16_32_11_t30b9 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 44 64 

# inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 828c1 Copy8 [Register(0x64), Register(0x45)]
#       inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 64 45 

# inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #239, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# 828c4 Copy8 [Register(0x62), Register(0x44)]
#       inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #239, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 62 44 

# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 828c7 Copy32 [Register(0x44), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 44 3c 

# inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 828ca ClearCarry []
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 828cb AddCarry32_1 [Register(0x40), Register(0x3c), Register(0x38)]
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 40 3c 38 

# 828cf AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# temp <- inline_mul32_64_mul16_32_11_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 828d0 Copy32 [Register(0x38), Register(0x3c)]
#       temp <- inline_mul32_64_mul16_32_11_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 38 3c 

# t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# Index("temp", Number(0n0/0x00u8))
# 828d3 Copy8 [Register(0x3c), Register(0x60)]
#       t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
#       Index("temp", Number(0n0/0x00u8))
0b 3c 60 

# temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# 828d6 Copy8 [Register(0x60), Register(0x72)]
#       temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
0b 60 72 

# t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# Index("temp", Number(0n1/0x01u8))
# 828d9 Copy8 [Register(0x3d), Register(0x60)]
#       t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
#       Index("temp", Number(0n1/0x01u8))
0b 3d 60 

# temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# 828dc Copy8 [Register(0x60), Register(0x73)]
#       temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
0b 60 73 

# t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# Index("temp", Number(0n2/0x02u8))
# 828df Copy8 [Register(0x3e), Register(0x60)]
#       t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
#       Index("temp", Number(0n2/0x02u8))
0b 3e 60 

# temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# 828e2 Copy8 [Register(0x60), Register(0x68)]
#       temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
0b 60 68 

# t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# Index("temp", Number(0n3/0x03u8))
# 828e5 Copy8 [Register(0x3f), Register(0x60)]
#       t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
#       Index("temp", Number(0n3/0x03u8))
0b 3f 60 

# temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# 828e8 Copy8 [Register(0x60), Register(0x69)]
#       temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
0b 60 69 

# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 828eb Copy32 [Register(0x0c), Register(0x74)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c 74 

# t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Ident("temp_lo")
# 828ee Copy32 [Register(0x70), Register(0x3c)]
#       t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Ident("temp_lo")
21 70 3c 

# mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# 828f1 Store32_1 [Register(0x3c), Register(0x74)]
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
23 3c 74 

# 828f4 Store32_2 []
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
24 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# Ident("__frame_pointer")
# 828f5 Copy32 [Register(0x0c), Register(0x74)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
#       Ident("__frame_pointer")
21 0c 74 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# 828f8 Copy32 [Register(0x74), Register(0x3c)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
21 74 3c 

# 828fb AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
32 3c 04 00 00 00 

# t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Ident("temp_hi")
# 82901 Copy32 [Register(0x68), Register(0x40)]
#       t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Ident("temp_hi")
21 68 40 

# mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# 82904 Store32_1 [Register(0x40), Register(0x3c)]
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
23 40 3c 

# 82907 Store32_2 []
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
24 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# Ident("__frame_pointer")
# 82908 Copy32 [Register(0x0c), Register(0x74)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
#       Ident("__frame_pointer")
21 0c 74 

# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# 8290b Copy32 [Register(0x74), Register(0x3c)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
21 74 3c 

# 8290e AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
32 3c 00 00 00 00 

# tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# 82914 Copy32 [Register(0x3c), Register(0x40)]
#       tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
21 3c 40 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_1_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 82917 Copy32 [Register(0x48), Register(0x38)]
#       inline_mul32_64_add_U64_1_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 48 38 

# inline_mul32_64_add_U64_1_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 8291a Copy32 [Register(0x40), Register(0x3c)]
#       inline_mul32_64_add_U64_1_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 40 3c 

# inline_mul32_64_add_U64_1_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 8291d Copy32 [Register(0x48), Register(0x40)]
#       inline_mul32_64_add_U64_1_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 48 40 

# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))\nAssign { target: Ident(\"lo\"), var_type: Some(Number(U32)), value: PtrFieldDeref(\"a\", \"lo\") }\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# 82920 Load32 [Register(0x38), Register(0x44)]
#       inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
#       PtrFieldDeref("a", "lo")
22 38 44 

# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 82923 Copy32 [Register(0x40), Register(0x48)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 40 48 

# 82926 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 48 04 00 00 00 

# inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
# 8292c Copy32 [Register(0x38), Register(0x4c)]
#       inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
21 38 4c 

# 8292f AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
32 4c 04 00 00 00 

# inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# 82935 Load32 [Register(0x4c), Register(0x50)]
#       inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
22 4c 50 

# inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
# 82938 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
21 3c 4c 

# 8293b AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
32 4c 04 00 00 00 

# inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# 82941 Load32 [Register(0x4c), Register(0x4c)]
#       inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
22 4c 4c 

# inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# 82944 ClearCarry []
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
03 

# 82945 AddCarry32_1 [Register(0x50), Register(0x4c), Register(0x4c)]
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
30 50 4c 4c 

# 82949 AddCarry32_2 []
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
31 

# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# 8294a Store32_1 [Register(0x4c), Register(0x48)]
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
23 4c 48 

# 8294d Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
24 

# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# 8294e Load32 [Register(0x38), Register(0x48)]
#       inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("a", "lo")
22 38 48 

# inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# 82951 Load32 [Register(0x3c), Register(0x38)]
#       inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
22 3c 38 

# inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# 82954 ClearCarry []
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
03 

# 82955 AddCarry32_1 [Register(0x48), Register(0x38), Register(0x38)]
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
30 48 38 38 

# 82959 AddCarry32_2 []
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
31 

# mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# 8295a Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
23 38 40 

# 8295d Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
24 

# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\nPtrFieldDeref(\"c\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# 8295e Load32 [Register(0x40), Register(0x3c)]
#       inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       PtrFieldDeref("c", "lo")
22 40 3c 

# inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# Ident("lo")
# 82961 Copy32 [Register(0x44), Register(0x38)]
#       inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       Ident("lo")
21 44 38 

# if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# 82964 Cmp8 [Register(0x3b), Register(0x3f)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
15 3b 3f 

# 82967 Cmp8IfZero [Register(0x3a), Register(0x3e)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 3a 3e 

# 8296a Cmp8IfZero [Register(0x39), Register(0x3d)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 39 3d 

# 8296d Cmp8IfZero [Register(0x38), Register(0x3c)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 38 3c 

# 82970 JcImm [Label24(inline_mul32_64_add_U64_1_add_U64_if_end_0)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
71 93 29 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_1_add_U64_if_true_0_1 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# inline_mul32_64_add_U64_1_add_U64_if_true_0_1
# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 82974 Copy32 [Register(0x40), Register(0x48)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 40 48 

# 82977 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 48 04 00 00 00 

# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32))\nPtrFieldDeref(\"c\", \"hi\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 8297d Copy32 [Register(0x40), Register(0x48)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 40 48 

# 82980 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 48 04 00 00 00 

# inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# 82986 Load32 [Register(0x48), Register(0x38)]
#       inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
22 48 38 

# inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# 82989 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
32 38 01 00 00 00 

# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# 8298f Store32_1 [Register(0x38), Register(0x48)]
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
23 38 48 

# 82992 Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
24 

# :inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_1_add_U64_if_end_0
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) None
# Return { value: None }
# 82993 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) None
#       Return { value: None }
32 0c 08 00 00 00 

# return None None
# Return { value: None }
# 82999 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 8299f JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_mul32_64 None
# function_end_mul32_64
# Unreachable None
# 829a1 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :print_dec32
# Ret None
# Arg0=a
# Var a (Arg0 a Number(U32)) Reg(U32) Some([120, 121, 122, 123])
# Var b (Local b Number(U32) Reg(U32)) Reg(U32) Some([124, 125, 126, 127])
# Var inline_print_dec32_div32_by10_47_a (Arg0 a Number(U32)) Reg(U32) Some([124, 125, 126, 127])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a (Arg0 a Number(U32)) Reg(U32) Some([124, 125, 126, 127])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d (t1a5d Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))) Reg(U8) Some([128])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d (t286d Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) Reg(U8) Some([128])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([129])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([128])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([130])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e (t4b1e Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))) Reg(U8) Some([128])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b (t4e2b Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) Reg(U8) Some([130])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 (t7123 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))) Reg(U8) Some([128])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 (t7d53 Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))) Reg(U8) Some([128])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c (t858c Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))) Reg(U8) Some([128])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 (t8792 Ident("a")) Reg(U32) Some([124, 125, 126, 127])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e (t8c2e Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))) Reg(U8) Some([128])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([129])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 (ta4e7 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) Reg(U8) Some([128])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 (tb4e5 Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))) Reg(U8) Some([128])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 (td726 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))) Reg(U8) Some([128])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 (te6a8 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))) Reg(U8) Some([128])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 (tf695 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))) Reg(U8) Some([128])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 (tfbb9 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))) Reg(U8) Some([128])
# Var inline_print_dec32_div32_by10_47_t1c61 (t1c61 AddressOf(Ident("prod"))) Reg(U32) Some([132, 133, 134, 135]) Number(0n987656/0x000f1208u32)
# Var inline_print_dec32_div32_by10_47_t45ae (t45ae Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) Reg(U32) Some([124, 125, 126, 127])
# Var inline_print_dec32_div32_by10_47_tb354 (tb354 LocalFieldDeref("prod", "hi")) Reg(U32) Some([124, 125, 126, 127])
# Var inline_print_dec32_div32_by10_47_tb7c3 (tb7c3 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Number(0n987656/0x000f1208u32), Number(0n4/0x00000004u32)) }) Reg(U32) Some([124, 125, 126, 127]) Number(0n987660/0x000f120cu32)
# Var inline_print_dec32_div32_by10_47_tef1a (tef1a Number(0xcccccccdu32)) Reg(U32) Some([136, 137, 138, 139]) Number(0xcccccccdu32)
# Var inline_print_dec32_mul32_by10_14_a (Arg0 a Number(U32)) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_mul32_by10_14_b (Local b Number(U32) Reg(U32)) Reg(U32) Some([124, 125, 126, 127])
# Var inline_print_dec32_mul32_by10_14_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_mul32_by10_14_t8792 (t8792 Ident("a")) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_mul32_by10_14_tace9 (tace9 Ident("b")) Reg(U32) Some([124, 125, 126, 127])
# Var inline_print_dec32_putc_29_c (Arg0 c Number(U8)) Reg(U8) Some([140])
# Var inline_print_dec32_putc_29_t0 (static "lcd_enable" addr) Reg(U32) Some([124, 125, 126, 127]) Number(0n987228/0x000f105cu32)
# Var inline_print_dec32_putc_29_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([129])
# Var inline_print_dec32_putc_29_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([128]) Number(0n0/0x00u8)
# Var inline_print_dec32_putc_29_tac13 (tac13 Ident("c")) Reg(U8) Some([140])
# Var t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([140])
# Var t6f38 (t6f38 Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))) Reg(U8) Some([140])
# Var t86e2 (t86e2 Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) Reg(U32) Some([120, 121, 122, 123])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([132, 133, 134, 135])
# Var t9c15 (t9c15 Number(0n256/0x00000100u32)) Reg(U32) Some([124, 125, 126, 127]) Number(0n256/0x00000100u32)
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([124, 125, 126, 127])
# 829a6 Copy32 [Register(0x00), Register(0x78)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [120, 121, 122, 123].
21 00 78 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Ident("a")
# 829a9 Copy32 [Register(0x78), Register(0x84)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
#       Ident("a")
21 78 84 

# t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Number(0n256/0x00000100u32)
# 829ac LoadImm32 [Register(0x7c), Constant32(0x00000100=256)]
#       t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
#       Number(0n256/0x00000100u32)
20 7c 00 01 00 00 

# if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# 829b2 Cmp8 [Register(0x7f), Register(0x87)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
15 7f 87 

# 829b5 Cmp8IfZero [Register(0x7e), Register(0x86)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 7e 86 

# 829b8 Cmp8IfZero [Register(0x7d), Register(0x85)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 7d 85 

# 829bb Cmp8IfZero [Register(0x7c), Register(0x84)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 7c 84 

# 829be JcImm [Label24(print_dec32_if_end_0)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
71 e0 29 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }\n", opcode: JmpImm, args: [Label24(print_dec32_if_true_0_1)], resolved: None }
# :print_dec32_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# print_dec32_if_true_0_1
# t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
# Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
# Index("a", Number(0n0/0x00u8))
# 829c2 Copy8 [Register(0x78), Register(0x8c)]
#       t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
#       Index("a", Number(0n0/0x00u8))
0b 78 8c 

# None <= call print_dec8(t3404,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
# Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
# 829c5 Copy8 [Register(0x8c), Register(0x00)]
#       Arg0[a]=t3404 None <= call print_dec8(t3404,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
0b 8c 00 

# Registers used by this function: {120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: []
# 829c8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 829ce StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c d8 29 08 00 

# 829d4 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 95 2b 08 

# 829d8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# return None Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# Return { value: None }
# 829de JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :print_dec32_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# print_dec32_if_end_0
# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
# Call(Call { function: "div32_by10", parameters: [Ident("a")] })
# Ident("a")
# 829e0 Copy32 [Register(0x78), Register(0x84)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
#       Call(Call { function: "div32_by10", parameters: [Ident("a")] })
#       Ident("a")
21 78 84 

# inline_print_dec32_div32_by10_47_a <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
# Call(Call { function: "div32_by10", parameters: [Ident("a")] })
# 829e3 Copy32 [Register(0x84), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_a <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
#       Call(Call { function: "div32_by10", parameters: [Ident("a")] })
21 84 7c 

# inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
# Number(0xcccccccdu32)
# 829e6 LoadImm32 [Register(0x88), Constant32(0xcccccccd=3435973837)]
#       inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
#       Number(0xcccccccdu32)
20 88 cd cc cc cc 

# inline_print_dec32_div32_by10_47_t1c61 <- 0n987656/0x000f1208u32  Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
# AddressOf(Ident("prod"))
# Number(0n987656/0x000f1208u32)
# 829ec LoadImm32 [Register(0x84), Constant32(0x000f1208=987656)]
#       inline_print_dec32_div32_by10_47_t1c61 <- 0n987656/0x000f1208u32  Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
#       AddressOf(Ident("prod"))
#       Number(0n987656/0x000f1208u32)
20 84 08 12 0f 00 

# None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
# 829f2 Copy32 [Register(0x7c), Register(0x00)]
#       Arg0[a]=inline_print_dec32_div32_by10_47_a None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
21 7c 00 

# 829f5 Copy32 [Register(0x88), Register(0x04)]
#       Arg1[b]=inline_print_dec32_div32_by10_47_tef1a None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
21 88 04 

# 829f8 Copy32 [Register(0x84), Register(0x08)]
#       Arg2[c]=inline_print_dec32_div32_by10_47_t1c61 None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
21 84 08 

# Registers used by this function: {120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140}
# Registers used by callee tree: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119}
# Registers to save: []
# 829fb AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:mul32_64))
32 0c fc ff ff ff 

# 82a01 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:mul32_64))
25 0c 0b 2a 08 00 

# 82a07 JmpImm [Label24(:mul32_64)]
#       PseudoCall(Label24(:mul32_64))
70 4c 25 08 

# 82a0b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:mul32_64))
32 0c 04 00 00 00 

# inline_print_dec32_div32_by10_47_tb7c3 <- 0n987660/0x000f120cu32  Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# LocalFieldDeref("prod", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Number(0n987656/0x000f1208u32), Number(0n4/0x00000004u32)) }
# Number(0n987660/0x000f120cu32)
# 82a11 LoadImm32 [Register(0x7c), Constant32(0x000f120c=987660)]
#       inline_print_dec32_div32_by10_47_tb7c3 <- 0n987660/0x000f120cu32  Some('/lutcomp/programs/lib/div.j':(131,5))
#       Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
#       Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
#       LocalFieldDeref("prod", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Number(0n987656/0x000f1208u32), Number(0n4/0x00000004u32)) }
#       Number(0n987660/0x000f120cu32)
20 7c 0c 12 0f 00 

# inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tb7c3] U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# LocalFieldDeref("prod", "hi")
# 82a17 Load32 [Register(0x7c), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tb7c3] U32 Some('/lutcomp/programs/lib/div.j':(131,5))
#       Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
#       Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
#       LocalFieldDeref("prod", "hi")
22 7c 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 Some('/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\nCall(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
# Index("a", Number(0n0/0x00u8))
# 82a1a Copy8 [Register(0x7c), Register(0x80)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n0/0x00u8))
0b 7c 80 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
# 82a1d LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
04 00 03 

# 82a20 Shift8 [Constant8(0x04=4), Register(0x00), Register(0x80), Register(0x80)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
1e 04 00 80 80 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 U8 Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
# 82a25 Copy8 [Register(0x80), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 U8 Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
0b 80 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
# Index("a", Number(0n1/0x01u8))
# 82a28 Copy8 [Register(0x7d), Register(0x81)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n1/0x01u8))
0b 7d 81 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
# 82a2b LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
04 00 03 

# 82a2e Shift8 [Constant8(0x04=4), Register(0x00), Register(0x81), Register(0x80)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
1e 04 00 81 80 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c U8 Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
# 82a33 Copy8 [Register(0x80), Register(0x7d)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c U8 Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
0b 80 7d 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
# Index("a", Number(0n2/0x02u8))
# 82a36 Copy8 [Register(0x7e), Register(0x82)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n2/0x02u8))
0b 7e 82 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
# 82a39 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
04 00 03 

# 82a3c Shift8 [Constant8(0x04=4), Register(0x00), Register(0x82), Register(0x80)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
1e 04 00 82 80 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 U8 Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
# 82a41 Copy8 [Register(0x80), Register(0x7e)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 U8 Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
0b 80 7e 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
# Index("a", Number(0n3/0x03u8))
# 82a44 Copy8 [Register(0x7f), Register(0x81)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n3/0x03u8))
0b 7f 81 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
# 82a47 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
04 00 03 

# 82a4a Shift8 [Constant8(0x04=4), Register(0x00), Register(0x81), Register(0x80)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
1e 04 00 81 80 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e U8 Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
# 82a4f Copy8 [Register(0x80), Register(0x7f)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e U8 Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
0b 80 7f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n0/0x00u8))
# 82a52 Copy8 [Register(0x7c), Register(0x80)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n0/0x00u8))
0b 7c 80 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
# 82a55 AndImm8 [Register(0x80), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
18 80 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d U8 Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
# 82a58 Copy8 [Register(0x80), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d U8 Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
0b 80 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# Index("a", Number(0n0/0x00u8))
# 82a5b Copy8 [Register(0x7c), Register(0x80)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Index("a", Number(0n0/0x00u8))
0b 7c 80 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
# Index("a", Number(0n1/0x01u8))
# 82a5e Copy8 [Register(0x7d), Register(0x81)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
#       Index("a", Number(0n1/0x01u8))
0b 7d 81 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
# 82a61 Copy8 [Register(0x81), Register(0x82)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
0b 81 82 

# 82a64 AndImm8 [Register(0x82), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
18 82 e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b) Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# 82a67 Or8 [Register(0x80), Register(0x82), Register(0x80)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
1c 80 82 80 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# 82a6b Copy8 [Register(0x80), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
0b 80 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n1/0x01u8))
# 82a6e Copy8 [Register(0x7d), Register(0x81)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n1/0x01u8))
0b 7d 81 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
# 82a71 Copy8 [Register(0x81), Register(0x80)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
0b 81 80 

# 82a74 AndImm8 [Register(0x80), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
18 80 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 U8 Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
# 82a77 Copy8 [Register(0x80), Register(0x7d)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 U8 Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
0b 80 7d 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# Index("a", Number(0n1/0x01u8))
# 82a7a Copy8 [Register(0x7d), Register(0x81)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Index("a", Number(0n1/0x01u8))
0b 7d 81 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
# Index("a", Number(0n2/0x02u8))
# 82a7d Copy8 [Register(0x7e), Register(0x82)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
#       Index("a", Number(0n2/0x02u8))
0b 7e 82 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
# 82a80 Copy8 [Register(0x82), Register(0x80)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
0b 82 80 

# 82a83 AndImm8 [Register(0x80), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
18 80 e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7) Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# 82a86 Or8 [Register(0x81), Register(0x80), Register(0x80)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
1c 81 80 80 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# 82a8a Copy8 [Register(0x80), Register(0x7d)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
0b 80 7d 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n2/0x02u8))
# 82a8d Copy8 [Register(0x7e), Register(0x82)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n2/0x02u8))
0b 7e 82 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
# 82a90 Copy8 [Register(0x82), Register(0x80)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
0b 82 80 

# 82a93 AndImm8 [Register(0x80), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
18 80 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 U8 Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
# 82a96 Copy8 [Register(0x80), Register(0x7e)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 U8 Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
0b 80 7e 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# Index("a", Number(0n2/0x02u8))
# 82a99 Copy8 [Register(0x7e), Register(0x82)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Index("a", Number(0n2/0x02u8))
0b 7e 82 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
# Index("a", Number(0n3/0x03u8))
# 82a9c Copy8 [Register(0x7f), Register(0x81)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
#       Index("a", Number(0n3/0x03u8))
0b 7f 81 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
# 82a9f Copy8 [Register(0x81), Register(0x80)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
0b 81 80 

# 82aa2 AndImm8 [Register(0x80), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
18 80 e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d) Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# 82aa5 Or8 [Register(0x82), Register(0x80), Register(0x80)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
1c 82 80 80 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# 82aa9 Copy8 [Register(0x80), Register(0x7e)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
0b 80 7e 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n3/0x03u8))
# 82aac Copy8 [Register(0x7f), Register(0x81)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n3/0x03u8))
0b 7f 81 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
# 82aaf Copy8 [Register(0x81), Register(0x80)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
0b 81 80 

# 82ab2 AndImm8 [Register(0x80), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
18 80 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 U8 Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
# 82ab5 Copy8 [Register(0x80), Register(0x7f)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 U8 Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
0b 80 7f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 Some('/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 Some('/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 Some('/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 Some('/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# b <- inline_print_dec32_div32_by10_47_t45ae U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# optimized away noop copy Instruction { source: "b <- inline_print_dec32_div32_by10_47_t45ae U32 Some('/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(148,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("b")] })
# 82ab8 Copy32 [Register(0x7c), Register(0x00)]
#       Arg0[a]=tace9 None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
21 7c 00 

# Registers used by this function: {120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: [120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140]
# 82abb Push8 [Register(0x8c)]
#       Saving reg0x8c before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 8c 

# 82abd Push8 [Register(0x8b)]
#       Saving reg0x8b before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 8b 

# 82abf Push8 [Register(0x8a)]
#       Saving reg0x8a before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 8a 

# 82ac1 Push8 [Register(0x89)]
#       Saving reg0x89 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 89 

# 82ac3 Push8 [Register(0x88)]
#       Saving reg0x88 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 88 

# 82ac5 Push8 [Register(0x87)]
#       Saving reg0x87 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 87 

# 82ac7 Push8 [Register(0x86)]
#       Saving reg0x86 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 86 

# 82ac9 Push8 [Register(0x85)]
#       Saving reg0x85 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 85 

# 82acb Push8 [Register(0x84)]
#       Saving reg0x84 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 84 

# 82acd Push8 [Register(0x82)]
#       Saving reg0x82 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 82 

# 82acf Push8 [Register(0x81)]
#       Saving reg0x81 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 81 

# 82ad1 Push8 [Register(0x80)]
#       Saving reg0x80 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 80 

# 82ad3 Push8 [Register(0x7f)]
#       Saving reg0x7f before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7f 

# 82ad5 Push8 [Register(0x7e)]
#       Saving reg0x7e before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7e 

# 82ad7 Push8 [Register(0x7d)]
#       Saving reg0x7d before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7d 

# 82ad9 Push8 [Register(0x7c)]
#       Saving reg0x7c before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7c 

# 82adb Push8 [Register(0x7b)]
#       Saving reg0x7b before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7b 

# 82add Push8 [Register(0x7a)]
#       Saving reg0x7a before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7a 

# 82adf Push8 [Register(0x79)]
#       Saving reg0x79 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 79 

# 82ae1 Push8 [Register(0x78)]
#       Saving reg0x78 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 78 

# 82ae3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 82ae9 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c f3 2a 08 00 

# 82aef JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 a6 29 08 

# 82af3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 82af9 Pop8 [Register(0x78)]
#       Restoring reg0x78 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 78 

# 82afb Pop8 [Register(0x79)]
#       Restoring reg0x79 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 79 

# 82afd Pop8 [Register(0x7a)]
#       Restoring reg0x7a after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7a 

# 82aff Pop8 [Register(0x7b)]
#       Restoring reg0x7b after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7b 

# 82b01 Pop8 [Register(0x7c)]
#       Restoring reg0x7c after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7c 

# 82b03 Pop8 [Register(0x7d)]
#       Restoring reg0x7d after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7d 

# 82b05 Pop8 [Register(0x7e)]
#       Restoring reg0x7e after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7e 

# 82b07 Pop8 [Register(0x7f)]
#       Restoring reg0x7f after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7f 

# 82b09 Pop8 [Register(0x80)]
#       Restoring reg0x80 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 80 

# 82b0b Pop8 [Register(0x81)]
#       Restoring reg0x81 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 81 

# 82b0d Pop8 [Register(0x82)]
#       Restoring reg0x82 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 82 

# 82b0f Pop8 [Register(0x84)]
#       Restoring reg0x84 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 84 

# 82b11 Pop8 [Register(0x85)]
#       Restoring reg0x85 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 85 

# 82b13 Pop8 [Register(0x86)]
#       Restoring reg0x86 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 86 

# 82b15 Pop8 [Register(0x87)]
#       Restoring reg0x87 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 87 

# 82b17 Pop8 [Register(0x88)]
#       Restoring reg0x88 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 88 

# 82b19 Pop8 [Register(0x89)]
#       Restoring reg0x89 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 89 

# 82b1b Pop8 [Register(0x8a)]
#       Restoring reg0x8a after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 8a 

# 82b1d Pop8 [Register(0x8b)]
#       Restoring reg0x8b after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 8b 

# 82b1f Pop8 [Register(0x8c)]
#       Restoring reg0x8c after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 8c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Ident("a")
# 82b21 Copy32 [Register(0x78), Register(0x84)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
#       Ident("a")
21 78 84 

# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }\nArithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))\nCall(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
# 82b24 Copy32 [Register(0x7c), Register(0x78)]
#       inline_print_dec32_mul32_by10_14_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
#       Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
21 7c 78 

# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 82b27 ClearCarry []
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 82b28 AddCarry32_1 [Register(0x78), Register(0x78), Register(0x78)]
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 78 78 78 

# 82b2c AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 82b2d ClearCarry []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 82b2e AddCarry32_1 [Register(0x78), Register(0x78), Register(0x7c)]
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 78 78 7c 

# 82b32 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# 82b33 ClearCarry []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
03 

# 82b34 AddCarry32_1 [Register(0x7c), Register(0x7c), Register(0x7c)]
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
30 7c 7c 7c 

# 82b38 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
31 

# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 82b39 ClearCarry []
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 82b3a AddCarry32_1 [Register(0x7c), Register(0x78), Register(0x78)]
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 7c 78 78 

# 82b3e AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# optimized away noop copy Instruction { source: "t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# 82b3f Copy32 [Register(0x78), Register(0x00)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
21 78 00 

# 82b42 Invert8 [Register(0x00)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 00 

# 82b44 Invert8 [Register(0x01)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 01 

# 82b46 Invert8 [Register(0x02)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 02 

# 82b48 Invert8 [Register(0x03)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 03 

# 82b4a AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
32 00 01 00 00 00 

# 82b50 ClearCarry []
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
03 

# 82b51 AddCarry32_1 [Register(0x84), Register(0x00), Register(0x78)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
30 84 00 78 

# 82b55 AddCarry32_2 []
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
31 

# t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
# Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
# Index("a", Number(0n0/0x00u8))
# 82b56 Copy8 [Register(0x78), Register(0x8c)]
#       t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
#       Index("a", Number(0n0/0x00u8))
0b 78 8c 

# t6f38 <- t3404 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
# Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
# 82b59 LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       t6f38 <- t3404 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
04 00 30 

# 82b5c Add8NoCarryIn [Register(0x8c), Register(0x00), Register(0x8c)]
#       t6f38 <- t3404 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
14 8c 00 8c 

# inline_print_dec32_putc_29_c <- t6f38 U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_c <- t6f38 U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })\n", opcode: Copy8, args: [Register(0x8c), Register(0x8c)], resolved: None }
# inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x8c), Register(0x8c)], resolved: None }
# None <= call io_write0(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 82b60 Out0 [Register(0x8c)]
#       IoWrite0
68 8c 

# inline_print_dec32_putc_29_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 82b62 LoadImm32 [Register(0x7c), Constant32(0x000f105c=987228)]
#       inline_print_dec32_putc_29_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 7c 5c 10 0f 00 

# inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 82b68 Load8 [Register(0x7c), Register(0x81)]
#       inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 7c 81 

# inline_print_dec32_putc_29_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82b6b LoadImm8 [Register(0x80), Constant8(0x00=0)]
#       inline_print_dec32_putc_29_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 80 00 

# if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 82b6e Cmp8 [Register(0x81), Register(0x80)]
#       if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 81 80 

# 82b71 JzImm [Label24(inline_print_dec32_putc_29_putc_if_end_0)]
#       if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 8e 2b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_putc_29_putc_if_true_0_1)], resolved: None }
# :inline_print_dec32_putc_29_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_print_dec32_putc_29_putc_if_true_0_1
# inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x8c), Register(0x8c)], resolved: None }
# None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 82b75 Copy8 [Register(0x8c), Register(0x00)]
#       Arg0[ch]=inline_print_dec32_putc_29_tac13 None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 8c 00 

# Registers used by this function: {120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: []
# 82b78 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 82b7e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 88 2b 08 00 

# 82b84 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 13 22 08 

# 82b88 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_print_dec32_putc_29_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec32_putc_29_putc_if_end_0
# return None None
# Return { value: None }
# 82b8e JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_print_dec32 None
# function_end_print_dec32
# Unreachable None
# 82b90 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :print_dec8
# Ret None
# Arg0=a
# Var a (Arg0 a Number(U8)) Reg(U8) Some([141])
# Var b (Local b Number(U8) Reg(U8)) Reg(U8) Some([142])
# Var inline_print_dec8_putc_30_c (Arg0 c Number(U8)) Reg(U8) Some([141])
# Var inline_print_dec8_putc_30_t0 (static "lcd_enable" addr) Reg(U32) Some([144, 145, 146, 147]) Number(0n987228/0x000f105cu32)
# Var inline_print_dec8_putc_30_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([142])
# Var inline_print_dec8_putc_30_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([148]) Number(0n0/0x00u8)
# Var inline_print_dec8_putc_30_tac13 (tac13 Ident("c")) Reg(U8) Some([141])
# Var t25ee (t25ee Number(0n10/0x0au8)) Reg(U8) Some([142]) Number(0n10/0x0au8)
# Var t5673 (t5673 Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))) Reg(U8) Some([141])
# Var t8792 (t8792 Ident("a")) Reg(U8) Some([141])
# Var tace9 (tace9 Ident("b")) Reg(U8) Some([142])
# Var tf5e0 (tf5e0 Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) Reg(U8) Some([142])
# 82b95 Copy8 [Register(0x00), Register(0x8d)]
#       Save function parameter 'a' registers [0] to locals [141].
0b 00 8d 

# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(0n10/0x0au8) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))) }])], else_block: [] }\nComparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(0n10/0x0au8) }\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x8d), Register(0x8d)], resolved: None }
# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
# Number(0n10/0x0au8)
# 82b98 LoadImm8 [Register(0x8e), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
#       Number(0n10/0x0au8)
04 8e 0a 

# if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
# 82b9b Cmp8 [Register(0x8e), Register(0x8d)]
#       if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
15 8e 8d 

# 82b9e JcImm [Label24(print_dec8_if_true_0_1)]
#       if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
71 a6 2b 08 

# 82ba2 JmpImm [Label24(print_dec8_if_end_0)]
#       if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
70 f2 2b 08 

# :print_dec8_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# print_dec8_if_true_0_1
# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
# Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(0n10/0x0au8)) }\nArithmetic(Divide, Ident(\"a\"), Number(0n10/0x0au8))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x8d), Register(0x8d)], resolved: None }
# b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
# Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
# 82ba6 LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
#       Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
04 00 0a 

# 82ba9 Divide8 [Register(0x8d), Register(0x00), Register(0x8e)]
#       b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
#       Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
17 8d 00 8e 

# tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nVoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x8e), Register(0x8e)], resolved: None }
# None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("b")] })
# 82bad Copy8 [Register(0x8e), Register(0x00)]
#       Arg0[a]=tace9 None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0b 8e 00 

# Registers used by this function: {141, 142, 144, 145, 146, 147, 148}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: [141, 142, 144, 145, 146, 147, 148]
# 82bb0 Push8 [Register(0x94)]
#       Saving reg0x94 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 94 

# 82bb2 Push8 [Register(0x93)]
#       Saving reg0x93 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 93 

# 82bb4 Push8 [Register(0x92)]
#       Saving reg0x92 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 92 

# 82bb6 Push8 [Register(0x91)]
#       Saving reg0x91 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 91 

# 82bb8 Push8 [Register(0x90)]
#       Saving reg0x90 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 90 

# 82bba Push8 [Register(0x8e)]
#       Saving reg0x8e before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8e 

# 82bbc Push8 [Register(0x8d)]
#       Saving reg0x8d before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8d 

# 82bbe AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 82bc4 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c ce 2b 08 00 

# 82bca JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 95 2b 08 

# 82bce AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# 82bd4 Pop8 [Register(0x8d)]
#       Restoring reg0x8d after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8d 

# 82bd6 Pop8 [Register(0x8e)]
#       Restoring reg0x8e after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8e 

# 82bd8 Pop8 [Register(0x90)]
#       Restoring reg0x90 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 90 

# 82bda Pop8 [Register(0x91)]
#       Restoring reg0x91 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 91 

# 82bdc Pop8 [Register(0x92)]
#       Restoring reg0x92 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 92 

# 82bde Pop8 [Register(0x93)]
#       Restoring reg0x93 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 93 

# 82be0 Pop8 [Register(0x94)]
#       Restoring reg0x94 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 94 

# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8)))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x8d), Register(0x8d)], resolved: None }
# tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8)))\nArithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x8e), Register(0x8e)], resolved: None }
# tf5e0 <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
# 82be2 LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       tf5e0 <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
#       Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
04 00 0a 

# 82be5 Mul8_8 [Register(0x8e), Register(0x00), Register(0x8e)]
#       tf5e0 <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
#       Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
10 8e 00 8e 

# a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# 82be9 Copy8 [Register(0x8e), Register(0x00)]
#       a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
0b 8e 00 

# 82bec Negate8 [Register(0x00)]
#       a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
02 00 

# 82bee Add8NoCarryIn [Register(0x8d), Register(0x00), Register(0x8d)]
#       a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
14 8d 00 8d 

# :print_dec8_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# print_dec8_if_end_0
# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
# Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] })\nArithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x8d), Register(0x8d)], resolved: None }
# t5673 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
# Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
# 82bf2 LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       t5673 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
04 00 30 

# 82bf5 Add8NoCarryIn [Register(0x8d), Register(0x00), Register(0x8d)]
#       t5673 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
14 8d 00 8d 

# inline_print_dec8_putc_30_c <- t5673 U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_c <- t5673 U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] })\n", opcode: Copy8, args: [Register(0x8d), Register(0x8d)], resolved: None }
# inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x8d), Register(0x8d)], resolved: None }
# None <= call io_write0(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 82bf9 Out0 [Register(0x8d)]
#       IoWrite0
68 8d 

# inline_print_dec8_putc_30_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 82bfb LoadImm32 [Register(0x90), Constant32(0x000f105c=987228)]
#       inline_print_dec8_putc_30_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 90 5c 10 0f 00 

# inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 82c01 Load8 [Register(0x90), Register(0x8e)]
#       inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 90 8e 

# inline_print_dec8_putc_30_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82c04 LoadImm8 [Register(0x94), Constant8(0x00=0)]
#       inline_print_dec8_putc_30_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 94 00 

# if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 82c07 Cmp8 [Register(0x8e), Register(0x94)]
#       if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 8e 94 

# 82c0a JzImm [Label24(inline_print_dec8_putc_30_putc_if_end_0)]
#       if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 2b 2c 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_print_dec8_putc_30_putc_if_true_0_1)], resolved: None }
# :inline_print_dec8_putc_30_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_print_dec8_putc_30_putc_if_true_0_1
# inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x8d), Register(0x8d)], resolved: None }
# None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 82c0e Copy8 [Register(0x8d), Register(0x00)]
#       Arg0[ch]=inline_print_dec8_putc_30_tac13 None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 8d 00 

# Registers used by this function: {141, 142, 144, 145, 146, 147, 148}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 148, 149, 150, 151, 152, 153, 154, 155, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 249, 252, 253, 254, 255}
# Registers to save: [148]
# 82c11 Push8 [Register(0x94)]
#       Saving reg0x94 before None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 94 

# 82c13 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 82c19 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 23 2c 08 00 

# 82c1f JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 13 22 08 

# 82c23 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# 82c29 Pop8 [Register(0x94)]
#       Restoring reg0x94 after None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 94 

# :inline_print_dec8_putc_30_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec8_putc_30_putc_if_end_0
# return None None
# Return { value: None }
# 82c2b JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_print_dec8 None
# function_end_print_dec8
# Unreachable None
# 82c2d Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :stdio_init
# Ret None
# Var inline_stdio_init_queue_init_35_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([149]) Number(0n0/0x00u8)
# Var inline_stdio_init_queue_init_35_tb702 (tb702 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }) Reg(U32) Some([152, 153, 154, 155]) Number(0n987648/0x000f1200u32)
# Var inline_stdio_init_queue_init_35_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([152, 153, 154, 155]) Number(0n987652/0x000f1204u32)
# Var t0 (static "lcd_enable" addr) Reg(U32) Some([156, 157, 158, 159]) Number(0n987228/0x000f105cu32)
# Var t1 (static "keyboard_enable" addr) Reg(U32) Some([156, 157, 158, 159]) Number(0n987144/0x000f1008u32)
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([160]) Number(0n1/0x01u8)
# t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 82c32 LoadImm32 [Register(0x9c), Constant32(0x000f105c=987228)]
#       t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
20 9c 5c 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 82c38 LoadImm8 [Register(0xa0), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 a0 01 

# mem[t0] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 82c3b Store8 [Register(0xa0), Register(0x9c)]
#       mem[t0] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
06 a0 9c 

# t1 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 82c3e LoadImm32 [Register(0x9c), Constant32(0x000f1008=987144)]
#       t1 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
20 9c 08 10 0f 00 

# mem[t1] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 82c44 Store8 [Register(0xa0), Register(0x9c)]
#       mem[t1] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
06 a0 9c 

# inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32 `.
# 82c47 LoadImm32 [Register(0x98), Constant32(0x000f1200=987648)]
#       inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32 `.
20 98 00 12 0f 00 

# inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82c4d LoadImm8 [Register(0x95), Constant8(0x00=0)]
#       inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 95 00 

# mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# 82c50 Store8 [Register(0x95), Register(0x98)]
#       mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
06 95 98 

# inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32 `.
# 82c53 LoadImm32 [Register(0x98), Constant32(0x000f1204=987652)]
#       inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32 `.
20 98 04 12 0f 00 

# mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
# 82c59 Store8 [Register(0x95), Register(0x98)]
#       mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
06 95 98 

# None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
# VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
# Call(Call { function: "lcd_init", parameters: [] })
# Registers used by this function: {149, 152, 153, 154, 155, 156, 157, 158, 159, 160}
# Registers used by callee tree: {148, 149, 150, 151, 152, 153, 154, 155, 217, 233, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248}
# Registers to save: [149, 152, 153, 154, 155]
# 82c5c Push8 [Register(0x9b)]
#       Saving reg0x9b before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 9b 

# 82c5e Push8 [Register(0x9a)]
#       Saving reg0x9a before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 9a 

# 82c60 Push8 [Register(0x99)]
#       Saving reg0x99 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 99 

# 82c62 Push8 [Register(0x98)]
#       Saving reg0x98 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 98 

# 82c64 Push8 [Register(0x95)]
#       Saving reg0x95 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 95 

# 82c66 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_init))
32 0c fc ff ff ff 

# 82c6c StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_init))
25 0c 76 2c 08 00 

# 82c72 JmpImm [Label24(:lcd_init)]
#       PseudoCall(Label24(:lcd_init))
70 f2 20 08 

# 82c76 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_init))
32 0c 04 00 00 00 

# 82c7c Pop8 [Register(0x95)]
#       Restoring reg0x95 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 95 

# 82c7e Pop8 [Register(0x98)]
#       Restoring reg0x98 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 98 

# 82c80 Pop8 [Register(0x99)]
#       Restoring reg0x99 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 99 

# 82c82 Pop8 [Register(0x9a)]
#       Restoring reg0x9a after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 9a 

# 82c84 Pop8 [Register(0x9b)]
#       Restoring reg0x9b after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 9b 

# None <= call KeyBoard_init() Some('/lutcomp/programs/lib/stdio.j':(15,5))
# VoidExpression { expression: Call(Call { function: "KeyBoard_init", parameters: [] }) }
# Call(Call { function: "KeyBoard_init", parameters: [] })
# Registers used by this function: {149, 152, 153, 154, 155, 156, 157, 158, 159, 160}
# Registers used by callee tree: {16, 20, 21, 22, 23}
# Registers to save: []
# 82c86 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c fc ff ff ff 

# 82c8c StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:KeyBoard_init))
25 0c 96 2c 08 00 

# 82c92 JmpImm [Label24(:KeyBoard_init)]
#       PseudoCall(Label24(:KeyBoard_init))
70 27 08 08 

# 82c96 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 82c9c JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_stdio_init None
# function_end_stdio_init
# Unreachable None
# 82c9e Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

